
stm_nrf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d930  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000331c  0800da40  0800da40  0001da40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010d5c  08010d5c  00030440  2**0
                  CONTENTS
  4 .ARM          00000000  08010d5c  08010d5c  00030440  2**0
                  CONTENTS
  5 .preinit_array 00000000  08010d5c  08010d5c  00030440  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010d5c  08010d5c  00020d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010d60  08010d60  00020d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000440  20000000  08010d64  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000018dc  20000440  080111a4  00030440  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001d1c  080111a4  00031d1c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030440  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023b38  00000000  00000000  00030469  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004940  00000000  00000000  00053fa1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ba8  00000000  00000000  000588e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000019b0  00000000  00000000  0005a490  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ac6b  00000000  00000000  0005be40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017f23  00000000  00000000  00076aab  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008313d  00000000  00000000  0008e9ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00111b0b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000078d8  00000000  00000000  00111b88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000440 	.word	0x20000440
 800012c:	00000000 	.word	0x00000000
 8000130:	0800da28 	.word	0x0800da28

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000444 	.word	0x20000444
 800014c:	0800da28 	.word	0x0800da28

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8000a68:	4b0a      	ldr	r3, [pc, #40]	; (8000a94 <NRF24_DelayMicroSeconds+0x38>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a0a      	ldr	r2, [pc, #40]	; (8000a98 <NRF24_DelayMicroSeconds+0x3c>)
 8000a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a72:	0c9a      	lsrs	r2, r3, #18
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	fb02 f303 	mul.w	r3, r2, r3
 8000a7a:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 8000a7c:	bf00      	nop
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	1e5a      	subs	r2, r3, #1
 8000a82:	60fa      	str	r2, [r7, #12]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d1fa      	bne.n	8000a7e <NRF24_DelayMicroSeconds+0x22>
}
 8000a88:	bf00      	nop
 8000a8a:	3714      	adds	r7, #20
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bc80      	pop	{r7}
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	2000024c 	.word	0x2000024c
 8000a98:	165e9f81 	.word	0x165e9f81

08000a9c <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d008      	beq.n	8000abc <NRF24_csn+0x20>
 8000aaa:	4b0a      	ldr	r3, [pc, #40]	; (8000ad4 <NRF24_csn+0x38>)
 8000aac:	6818      	ldr	r0, [r3, #0]
 8000aae:	4b0a      	ldr	r3, [pc, #40]	; (8000ad8 <NRF24_csn+0x3c>)
 8000ab0:	881b      	ldrh	r3, [r3, #0]
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	f005 fa30 	bl	8005f1a <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8000aba:	e007      	b.n	8000acc <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8000abc:	4b05      	ldr	r3, [pc, #20]	; (8000ad4 <NRF24_csn+0x38>)
 8000abe:	6818      	ldr	r0, [r3, #0]
 8000ac0:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <NRF24_csn+0x3c>)
 8000ac2:	881b      	ldrh	r3, [r3, #0]
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	f005 fa27 	bl	8005f1a <HAL_GPIO_WritePin>
}
 8000acc:	bf00      	nop
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	2000046c 	.word	0x2000046c
 8000ad8:	20000470 	.word	0x20000470

08000adc <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d008      	beq.n	8000afc <NRF24_ce+0x20>
 8000aea:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <NRF24_ce+0x38>)
 8000aec:	6818      	ldr	r0, [r3, #0]
 8000aee:	4b0a      	ldr	r3, [pc, #40]	; (8000b18 <NRF24_ce+0x3c>)
 8000af0:	881b      	ldrh	r3, [r3, #0]
 8000af2:	2201      	movs	r2, #1
 8000af4:	4619      	mov	r1, r3
 8000af6:	f005 fa10 	bl	8005f1a <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8000afa:	e007      	b.n	8000b0c <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000afc:	4b05      	ldr	r3, [pc, #20]	; (8000b14 <NRF24_ce+0x38>)
 8000afe:	6818      	ldr	r0, [r3, #0]
 8000b00:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <NRF24_ce+0x3c>)
 8000b02:	881b      	ldrh	r3, [r3, #0]
 8000b04:	2200      	movs	r2, #0
 8000b06:	4619      	mov	r1, r3
 8000b08:	f005 fa07 	bl	8005f1a <HAL_GPIO_WritePin>
}
 8000b0c:	bf00      	nop
 8000b0e:	3708      	adds	r7, #8
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	2000046c 	.word	0x2000046c
 8000b18:	20000472 	.word	0x20000472

08000b1c <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8000b26:	2000      	movs	r0, #0
 8000b28:	f7ff ffb8 	bl	8000a9c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
 8000b2e:	f003 031f 	and.w	r3, r3, #31
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000b36:	f107 010c 	add.w	r1, r7, #12
 8000b3a:	2364      	movs	r3, #100	; 0x64
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	480a      	ldr	r0, [pc, #40]	; (8000b68 <NRF24_read_register+0x4c>)
 8000b40:	f007 ff9b 	bl	8008a7a <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8000b44:	f107 030c 	add.w	r3, r7, #12
 8000b48:	1c59      	adds	r1, r3, #1
 8000b4a:	2364      	movs	r3, #100	; 0x64
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	4806      	ldr	r0, [pc, #24]	; (8000b68 <NRF24_read_register+0x4c>)
 8000b50:	f008 f8c7 	bl	8008ce2 <HAL_SPI_Receive>
	retData = spiBuf[1];
 8000b54:	7b7b      	ldrb	r3, [r7, #13]
 8000b56:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8000b58:	2001      	movs	r0, #1
 8000b5a:	f7ff ff9f 	bl	8000a9c <NRF24_csn>
	return retData;
 8000b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3710      	adds	r7, #16
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20000474 	.word	0x20000474

08000b6c <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	6039      	str	r1, [r7, #0]
 8000b76:	71fb      	strb	r3, [r7, #7]
 8000b78:	4613      	mov	r3, r2
 8000b7a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	f7ff ff8d 	bl	8000a9c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	f003 031f 	and.w	r3, r3, #31
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000b8c:	f107 010c 	add.w	r1, r7, #12
 8000b90:	2364      	movs	r3, #100	; 0x64
 8000b92:	2201      	movs	r2, #1
 8000b94:	4808      	ldr	r0, [pc, #32]	; (8000bb8 <NRF24_read_registerN+0x4c>)
 8000b96:	f007 ff70 	bl	8008a7a <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8000b9a:	79bb      	ldrb	r3, [r7, #6]
 8000b9c:	b29a      	uxth	r2, r3
 8000b9e:	2364      	movs	r3, #100	; 0x64
 8000ba0:	6839      	ldr	r1, [r7, #0]
 8000ba2:	4805      	ldr	r0, [pc, #20]	; (8000bb8 <NRF24_read_registerN+0x4c>)
 8000ba4:	f008 f89d 	bl	8008ce2 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8000ba8:	2001      	movs	r0, #1
 8000baa:	f7ff ff77 	bl	8000a9c <NRF24_csn>
}
 8000bae:	bf00      	nop
 8000bb0:	3710      	adds	r7, #16
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000474 	.word	0x20000474

08000bbc <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	460a      	mov	r2, r1
 8000bc6:	71fb      	strb	r3, [r7, #7]
 8000bc8:	4613      	mov	r3, r2
 8000bca:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000bcc:	2000      	movs	r0, #0
 8000bce:	f7ff ff65 	bl	8000a9c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	f043 0320 	orr.w	r3, r3, #32
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8000bdc:	79bb      	ldrb	r3, [r7, #6]
 8000bde:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8000be0:	f107 010c 	add.w	r1, r7, #12
 8000be4:	2364      	movs	r3, #100	; 0x64
 8000be6:	2202      	movs	r2, #2
 8000be8:	4804      	ldr	r0, [pc, #16]	; (8000bfc <NRF24_write_register+0x40>)
 8000bea:	f007 ff46 	bl	8008a7a <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000bee:	2001      	movs	r0, #1
 8000bf0:	f7ff ff54 	bl	8000a9c <NRF24_csn>
}
 8000bf4:	bf00      	nop
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20000474 	.word	0x20000474

08000c00 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	6039      	str	r1, [r7, #0]
 8000c0a:	71fb      	strb	r3, [r7, #7]
 8000c0c:	4613      	mov	r3, r2
 8000c0e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000c10:	2000      	movs	r0, #0
 8000c12:	f7ff ff43 	bl	8000a9c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	f043 0320 	orr.w	r3, r3, #32
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000c20:	f107 010c 	add.w	r1, r7, #12
 8000c24:	2364      	movs	r3, #100	; 0x64
 8000c26:	2201      	movs	r2, #1
 8000c28:	4808      	ldr	r0, [pc, #32]	; (8000c4c <NRF24_write_registerN+0x4c>)
 8000c2a:	f007 ff26 	bl	8008a7a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8000c2e:	79bb      	ldrb	r3, [r7, #6]
 8000c30:	b29a      	uxth	r2, r3
 8000c32:	2364      	movs	r3, #100	; 0x64
 8000c34:	6839      	ldr	r1, [r7, #0]
 8000c36:	4805      	ldr	r0, [pc, #20]	; (8000c4c <NRF24_write_registerN+0x4c>)
 8000c38:	f007 ff1f 	bl	8008a7a <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	f7ff ff2d 	bl	8000a9c <NRF24_csn>
}
 8000c42:	bf00      	nop
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000474 	.word	0x20000474

08000c50 <NRF24_read_payload>:
	//Bring CSN high
	NRF24_csn(1);
}
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	460b      	mov	r3, r1
 8000c5a:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 8000c5c:	f000 fa06 	bl	800106c <NRF24_getPayloadSize>
 8000c60:	4603      	mov	r3, r0
 8000c62:	461a      	mov	r2, r3
 8000c64:	78fb      	ldrb	r3, [r7, #3]
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d303      	bcc.n	8000c72 <NRF24_read_payload+0x22>
 8000c6a:	f000 f9ff 	bl	800106c <NRF24_getPayloadSize>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	e000      	b.n	8000c74 <NRF24_read_payload+0x24>
 8000c72:	78fb      	ldrb	r3, [r7, #3]
 8000c74:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8000c76:	2000      	movs	r0, #0
 8000c78:	f7ff ff10 	bl	8000a9c <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 8000c7c:	2361      	movs	r3, #97	; 0x61
 8000c7e:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 8000c80:	f107 010e 	add.w	r1, r7, #14
 8000c84:	2364      	movs	r3, #100	; 0x64
 8000c86:	2201      	movs	r2, #1
 8000c88:	4808      	ldr	r0, [pc, #32]	; (8000cac <NRF24_read_payload+0x5c>)
 8000c8a:	f007 fef6 	bl	8008a7a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 8000c8e:	7bfb      	ldrb	r3, [r7, #15]
 8000c90:	b29a      	uxth	r2, r3
 8000c92:	2364      	movs	r3, #100	; 0x64
 8000c94:	6879      	ldr	r1, [r7, #4]
 8000c96:	4805      	ldr	r0, [pc, #20]	; (8000cac <NRF24_read_payload+0x5c>)
 8000c98:	f008 f823 	bl	8008ce2 <HAL_SPI_Receive>
	NRF24_csn(1);
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	f7ff fefd 	bl	8000a9c <NRF24_csn>
}
 8000ca2:	bf00      	nop
 8000ca4:	3710      	adds	r7, #16
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000474 	.word	0x20000474

08000cb0 <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000cb4:	21ff      	movs	r1, #255	; 0xff
 8000cb6:	20e1      	movs	r0, #225	; 0xe1
 8000cb8:	f7ff ff80 	bl	8000bbc <NRF24_write_register>
}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000cc4:	21ff      	movs	r1, #255	; 0xff
 8000cc6:	20e2      	movs	r0, #226	; 0xe2
 8000cc8:	f7ff ff78 	bl	8000bbc <NRF24_write_register>
}
 8000ccc:	bf00      	nop
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8000cd6:	2007      	movs	r0, #7
 8000cd8:	f7ff ff20 	bl	8000b1c <NRF24_read_register>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
	...

08000cec <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8000cec:	b082      	sub	sp, #8
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b084      	sub	sp, #16
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
 8000cf6:	61fb      	str	r3, [r7, #28]
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	807b      	strh	r3, [r7, #2]
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000d00:	4b66      	ldr	r3, [pc, #408]	; (8000e9c <NRF24_begin+0x1b0>)
 8000d02:	4618      	mov	r0, r3
 8000d04:	f107 031c 	add.w	r3, r7, #28
 8000d08:	2258      	movs	r2, #88	; 0x58
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	f00c fa70 	bl	800d1f0 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000d10:	4a63      	ldr	r2, [pc, #396]	; (8000ea0 <NRF24_begin+0x1b4>)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8000d16:	4a63      	ldr	r2, [pc, #396]	; (8000ea4 <NRF24_begin+0x1b8>)
 8000d18:	887b      	ldrh	r3, [r7, #2]
 8000d1a:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000d1c:	4a62      	ldr	r2, [pc, #392]	; (8000ea8 <NRF24_begin+0x1bc>)
 8000d1e:	883b      	ldrh	r3, [r7, #0]
 8000d20:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 8000d22:	2001      	movs	r0, #1
 8000d24:	f7ff feba 	bl	8000a9c <NRF24_csn>
	NRF24_ce(0);
 8000d28:	2000      	movs	r0, #0
 8000d2a:	f7ff fed7 	bl	8000adc <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000d2e:	2005      	movs	r0, #5
 8000d30:	f004 f95a 	bl	8004fe8 <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000d34:	2108      	movs	r1, #8
 8000d36:	2000      	movs	r0, #0
 8000d38:	f7ff ff40 	bl	8000bbc <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000d3c:	213f      	movs	r1, #63	; 0x3f
 8000d3e:	2001      	movs	r0, #1
 8000d40:	f7ff ff3c 	bl	8000bbc <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000d44:	2103      	movs	r1, #3
 8000d46:	2002      	movs	r0, #2
 8000d48:	f7ff ff38 	bl	8000bbc <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000d4c:	2103      	movs	r1, #3
 8000d4e:	2003      	movs	r0, #3
 8000d50:	f7ff ff34 	bl	8000bbc <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000d54:	2103      	movs	r1, #3
 8000d56:	2004      	movs	r0, #4
 8000d58:	f7ff ff30 	bl	8000bbc <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000d5c:	2102      	movs	r1, #2
 8000d5e:	2005      	movs	r0, #5
 8000d60:	f7ff ff2c 	bl	8000bbc <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8000d64:	210f      	movs	r1, #15
 8000d66:	2006      	movs	r0, #6
 8000d68:	f7ff ff28 	bl	8000bbc <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000d6c:	210e      	movs	r1, #14
 8000d6e:	2007      	movs	r0, #7
 8000d70:	f7ff ff24 	bl	8000bbc <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8000d74:	2100      	movs	r1, #0
 8000d76:	2008      	movs	r0, #8
 8000d78:	f7ff ff20 	bl	8000bbc <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	2009      	movs	r0, #9
 8000d80:	f7ff ff1c 	bl	8000bbc <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000d84:	23e7      	movs	r3, #231	; 0xe7
 8000d86:	733b      	strb	r3, [r7, #12]
 8000d88:	23e7      	movs	r3, #231	; 0xe7
 8000d8a:	72fb      	strb	r3, [r7, #11]
 8000d8c:	23e7      	movs	r3, #231	; 0xe7
 8000d8e:	72bb      	strb	r3, [r7, #10]
 8000d90:	23e7      	movs	r3, #231	; 0xe7
 8000d92:	727b      	strb	r3, [r7, #9]
 8000d94:	23e7      	movs	r3, #231	; 0xe7
 8000d96:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8000d98:	f107 0308 	add.w	r3, r7, #8
 8000d9c:	2205      	movs	r2, #5
 8000d9e:	4619      	mov	r1, r3
 8000da0:	200a      	movs	r0, #10
 8000da2:	f7ff ff2d 	bl	8000c00 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 8000da6:	23c2      	movs	r3, #194	; 0xc2
 8000da8:	733b      	strb	r3, [r7, #12]
 8000daa:	23c2      	movs	r3, #194	; 0xc2
 8000dac:	72fb      	strb	r3, [r7, #11]
 8000dae:	23c2      	movs	r3, #194	; 0xc2
 8000db0:	72bb      	strb	r3, [r7, #10]
 8000db2:	23c2      	movs	r3, #194	; 0xc2
 8000db4:	727b      	strb	r3, [r7, #9]
 8000db6:	23c2      	movs	r3, #194	; 0xc2
 8000db8:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8000dba:	f107 0308 	add.w	r3, r7, #8
 8000dbe:	2205      	movs	r2, #5
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	200b      	movs	r0, #11
 8000dc4:	f7ff ff1c 	bl	8000c00 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8000dc8:	21c3      	movs	r1, #195	; 0xc3
 8000dca:	200c      	movs	r0, #12
 8000dcc:	f7ff fef6 	bl	8000bbc <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000dd0:	21c4      	movs	r1, #196	; 0xc4
 8000dd2:	200d      	movs	r0, #13
 8000dd4:	f7ff fef2 	bl	8000bbc <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8000dd8:	21c5      	movs	r1, #197	; 0xc5
 8000dda:	200e      	movs	r0, #14
 8000ddc:	f7ff feee 	bl	8000bbc <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000de0:	21c6      	movs	r1, #198	; 0xc6
 8000de2:	200f      	movs	r0, #15
 8000de4:	f7ff feea 	bl	8000bbc <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000de8:	23e7      	movs	r3, #231	; 0xe7
 8000dea:	733b      	strb	r3, [r7, #12]
 8000dec:	23e7      	movs	r3, #231	; 0xe7
 8000dee:	72fb      	strb	r3, [r7, #11]
 8000df0:	23e7      	movs	r3, #231	; 0xe7
 8000df2:	72bb      	strb	r3, [r7, #10]
 8000df4:	23e7      	movs	r3, #231	; 0xe7
 8000df6:	727b      	strb	r3, [r7, #9]
 8000df8:	23e7      	movs	r3, #231	; 0xe7
 8000dfa:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000dfc:	f107 0308 	add.w	r3, r7, #8
 8000e00:	2205      	movs	r2, #5
 8000e02:	4619      	mov	r1, r3
 8000e04:	2010      	movs	r0, #16
 8000e06:	f7ff fefb 	bl	8000c00 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	2011      	movs	r0, #17
 8000e0e:	f7ff fed5 	bl	8000bbc <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000e12:	2100      	movs	r1, #0
 8000e14:	2012      	movs	r0, #18
 8000e16:	f7ff fed1 	bl	8000bbc <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	2013      	movs	r0, #19
 8000e1e:	f7ff fecd 	bl	8000bbc <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000e22:	2100      	movs	r1, #0
 8000e24:	2014      	movs	r0, #20
 8000e26:	f7ff fec9 	bl	8000bbc <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	2015      	movs	r0, #21
 8000e2e:	f7ff fec5 	bl	8000bbc <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000e32:	2100      	movs	r1, #0
 8000e34:	2016      	movs	r0, #22
 8000e36:	f7ff fec1 	bl	8000bbc <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 8000e3a:	f000 facf 	bl	80013dc <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000e3e:	2100      	movs	r1, #0
 8000e40:	201c      	movs	r0, #28
 8000e42:	f7ff febb 	bl	8000bbc <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8000e46:	2100      	movs	r1, #0
 8000e48:	201d      	movs	r0, #29
 8000e4a:	f7ff feb7 	bl	8000bbc <NRF24_write_register>
	printRadioSettings();
 8000e4e:	f000 fadf 	bl	8001410 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000e52:	210f      	movs	r1, #15
 8000e54:	200f      	movs	r0, #15
 8000e56:	f000 f8c3 	bl	8000fe0 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8000e5a:	2003      	movs	r0, #3
 8000e5c:	f000 f9a5 	bl	80011aa <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000e60:	2001      	movs	r0, #1
 8000e62:	f000 f9db 	bl	800121c <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8000e66:	2002      	movs	r0, #2
 8000e68:	f000 fa1e 	bl	80012a8 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000e6c:	f000 f970 	bl	8001150 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000e70:	2020      	movs	r0, #32
 8000e72:	f000 f8e5 	bl	8001040 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 8000e76:	f000 faa8 	bl	80013ca <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8000e7a:	204c      	movs	r0, #76	; 0x4c
 8000e7c:	f000 f8cb 	bl	8001016 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000e80:	f7ff ff16 	bl	8000cb0 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000e84:	f7ff ff1c 	bl	8000cc0 <NRF24_flush_rx>
	
	NRF24_powerDown();
 8000e88:	f000 fa36 	bl	80012f8 <NRF24_powerDown>
	
}
 8000e8c:	bf00      	nop
 8000e8e:	3710      	adds	r7, #16
 8000e90:	46bd      	mov	sp, r7
 8000e92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e96:	b002      	add	sp, #8
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	20000474 	.word	0x20000474
 8000ea0:	2000046c 	.word	0x2000046c
 8000ea4:	20000470 	.word	0x20000470
 8000ea8:	20000472 	.word	0x20000472

08000eac <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8000eac:	b598      	push	{r3, r4, r7, lr}
 8000eae:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 8000eb0:	2000      	movs	r0, #0
 8000eb2:	f7ff fe33 	bl	8000b1c <NRF24_read_register>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	f043 0303 	orr.w	r3, r3, #3
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	2000      	movs	r0, #0
 8000ec2:	f7ff fe7b 	bl	8000bbc <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 8000ec6:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <NRF24_startListening+0x44>)
 8000ec8:	cb18      	ldmia	r3, {r3, r4}
 8000eca:	4323      	orrs	r3, r4
 8000ecc:	d004      	beq.n	8000ed8 <NRF24_startListening+0x2c>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 8000ece:	2205      	movs	r2, #5
 8000ed0:	4907      	ldr	r1, [pc, #28]	; (8000ef0 <NRF24_startListening+0x44>)
 8000ed2:	200a      	movs	r0, #10
 8000ed4:	f7ff fe94 	bl	8000c00 <NRF24_write_registerN>
	
	//Flush buffers
	NRF24_flush_tx();
 8000ed8:	f7ff feea 	bl	8000cb0 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000edc:	f7ff fef0 	bl	8000cc0 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	f7ff fdfb 	bl	8000adc <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8000ee6:	2096      	movs	r0, #150	; 0x96
 8000ee8:	f7ff fdb8 	bl	8000a5c <NRF24_DelayMicroSeconds>
}
 8000eec:	bf00      	nop
 8000eee:	bd98      	pop	{r3, r4, r7, pc}
 8000ef0:	20000460 	.word	0x20000460

08000ef4 <NRF24_available>:
	NRF24_flush_tx();
	return retStatus;
}
//16. Check for available data to read
bool NRF24_available(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8000ef8:	2000      	movs	r0, #0
 8000efa:	f000 fa0c 	bl	8001316 <NRF24_availablePipe>
 8000efe:	4603      	mov	r3, r0
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 8000f10:	78fb      	ldrb	r3, [r7, #3]
 8000f12:	4619      	mov	r1, r3
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f7ff fe9b 	bl	8000c50 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 8000f1a:	2017      	movs	r0, #23
 8000f1c:	f7ff fdfe 	bl	8000b1c <NRF24_read_register>
 8000f20:	4603      	mov	r3, r0
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 8000f28:	f7ff feca 	bl	8000cc0 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 8000f2c:	f000 f8a8 	bl	8001080 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 8000f30:	7bfb      	ldrb	r3, [r7, #15]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	bf14      	ite	ne
 8000f36:	2301      	movne	r3, #1
 8000f38:	2300      	moveq	r3, #0
 8000f3a:	b2db      	uxtb	r3, r3
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <NRF24_openReadingPipe>:
	const uint8_t max_payload_size = 32;
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
}
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 8000f44:	b590      	push	{r4, r7, lr}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4601      	mov	r1, r0
 8000f4c:	e9c7 2300 	strd	r2, r3, [r7]
 8000f50:	460b      	mov	r3, r1
 8000f52:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d104      	bne.n	8000f64 <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 8000f5a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000f5e:	4a1c      	ldr	r2, [pc, #112]	; (8000fd0 <NRF24_openReadingPipe+0x8c>)
 8000f60:	e9c2 3400 	strd	r3, r4, [r2]
	
	if(number <= 6)
 8000f64:	7bfb      	ldrb	r3, [r7, #15]
 8000f66:	2b06      	cmp	r3, #6
 8000f68:	d82d      	bhi.n	8000fc6 <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 8000f6a:	7bfb      	ldrb	r3, [r7, #15]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d808      	bhi.n	8000f82 <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 8000f70:	7bfb      	ldrb	r3, [r7, #15]
 8000f72:	4a18      	ldr	r2, [pc, #96]	; (8000fd4 <NRF24_openReadingPipe+0x90>)
 8000f74:	5cd3      	ldrb	r3, [r2, r3]
 8000f76:	4639      	mov	r1, r7
 8000f78:	2205      	movs	r2, #5
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff fe40 	bl	8000c00 <NRF24_write_registerN>
 8000f80:	e007      	b.n	8000f92 <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 8000f82:	7bfb      	ldrb	r3, [r7, #15]
 8000f84:	4a13      	ldr	r2, [pc, #76]	; (8000fd4 <NRF24_openReadingPipe+0x90>)
 8000f86:	5cd3      	ldrb	r3, [r2, r3]
 8000f88:	4639      	mov	r1, r7
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff fe37 	bl	8000c00 <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 8000f92:	7bfb      	ldrb	r3, [r7, #15]
 8000f94:	4a10      	ldr	r2, [pc, #64]	; (8000fd8 <NRF24_openReadingPipe+0x94>)
 8000f96:	5cd2      	ldrb	r2, [r2, r3]
 8000f98:	4b10      	ldr	r3, [pc, #64]	; (8000fdc <NRF24_openReadingPipe+0x98>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4610      	mov	r0, r2
 8000fa0:	f7ff fe0c 	bl	8000bbc <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 8000fa4:	2002      	movs	r0, #2
 8000fa6:	f7ff fdb9 	bl	8000b1c <NRF24_read_register>
 8000faa:	4603      	mov	r3, r0
 8000fac:	b25a      	sxtb	r2, r3
 8000fae:	7bfb      	ldrb	r3, [r7, #15]
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb6:	b25b      	sxtb	r3, r3
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	b25b      	sxtb	r3, r3
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	2002      	movs	r0, #2
 8000fc2:	f7ff fdfb 	bl	8000bbc <NRF24_write_register>
	}
	
}
 8000fc6:	bf00      	nop
 8000fc8:	3714      	adds	r7, #20
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd90      	pop	{r4, r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000460 	.word	0x20000460
 8000fd4:	0800e0ec 	.word	0x0800e0ec
 8000fd8:	0800e0f4 	.word	0x0800e0f4
 8000fdc:	20000468 	.word	0x20000468

08000fe0 <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	460a      	mov	r2, r1
 8000fea:	71fb      	strb	r3, [r7, #7]
 8000fec:	4613      	mov	r3, r2
 8000fee:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	011b      	lsls	r3, r3, #4
 8000ff4:	b25a      	sxtb	r2, r3
 8000ff6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000ffa:	f003 030f 	and.w	r3, r3, #15
 8000ffe:	b25b      	sxtb	r3, r3
 8001000:	4313      	orrs	r3, r2
 8001002:	b25b      	sxtb	r3, r3
 8001004:	b2db      	uxtb	r3, r3
 8001006:	4619      	mov	r1, r3
 8001008:	2004      	movs	r0, #4
 800100a:	f7ff fdd7 	bl	8000bbc <NRF24_write_register>
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b084      	sub	sp, #16
 800101a:	af00      	add	r7, sp, #0
 800101c:	4603      	mov	r3, r0
 800101e:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8001020:	237f      	movs	r3, #127	; 0x7f
 8001022:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8001024:	7bfa      	ldrb	r2, [r7, #15]
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	4293      	cmp	r3, r2
 800102a:	bf28      	it	cs
 800102c:	4613      	movcs	r3, r2
 800102e:	b2db      	uxtb	r3, r3
 8001030:	4619      	mov	r1, r3
 8001032:	2005      	movs	r0, #5
 8001034:	f7ff fdc2 	bl	8000bbc <NRF24_write_register>
}
 8001038:	bf00      	nop
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 800104a:	2320      	movs	r3, #32
 800104c:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 800104e:	7bfa      	ldrb	r2, [r7, #15]
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	4293      	cmp	r3, r2
 8001054:	bf28      	it	cs
 8001056:	4613      	movcs	r3, r2
 8001058:	b2da      	uxtb	r2, r3
 800105a:	4b03      	ldr	r3, [pc, #12]	; (8001068 <NRF24_setPayloadSize+0x28>)
 800105c:	701a      	strb	r2, [r3, #0]
}
 800105e:	bf00      	nop
 8001060:	3714      	adds	r7, #20
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr
 8001068:	20000468 	.word	0x20000468

0800106c <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
	return payload_size;
 8001070:	4b02      	ldr	r3, [pc, #8]	; (800107c <NRF24_getPayloadSize+0x10>)
 8001072:	781b      	ldrb	r3, [r3, #0]
}
 8001074:	4618      	mov	r0, r3
 8001076:	46bd      	mov	sp, r7
 8001078:	bc80      	pop	{r7}
 800107a:	4770      	bx	lr
 800107c:	20000468 	.word	0x20000468

08001080 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8001084:	2060      	movs	r0, #96	; 0x60
 8001086:	f7ff fd49 	bl	8000b1c <NRF24_read_register>
 800108a:	4603      	mov	r3, r0
}
 800108c:	4618      	mov	r0, r3
 800108e:	bd80      	pop	{r7, pc}

08001090 <NRF24_enableAckPayload>:
//25. Enable payload on Ackknowledge packet
void NRF24_enableAckPayload(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
	//Need to enable dynamic payload and Ack payload together
	 NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8001094:	201d      	movs	r0, #29
 8001096:	f7ff fd41 	bl	8000b1c <NRF24_read_register>
 800109a:	4603      	mov	r3, r0
 800109c:	f043 0306 	orr.w	r3, r3, #6
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	4619      	mov	r1, r3
 80010a4:	201d      	movs	r0, #29
 80010a6:	f7ff fd89 	bl	8000bbc <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 80010aa:	201d      	movs	r0, #29
 80010ac:	f7ff fd36 	bl	8000b1c <NRF24_read_register>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d10c      	bne.n	80010d0 <NRF24_enableAckPayload+0x40>
	{
		NRF24_ACTIVATE_cmd();
 80010b6:	f000 f991 	bl	80013dc <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 80010ba:	201d      	movs	r0, #29
 80010bc:	f7ff fd2e 	bl	8000b1c <NRF24_read_register>
 80010c0:	4603      	mov	r3, r0
 80010c2:	f043 0306 	orr.w	r3, r3, #6
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	4619      	mov	r1, r3
 80010ca:	201d      	movs	r0, #29
 80010cc:	f7ff fd76 	bl	8000bbc <NRF24_write_register>
	}
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 80010d0:	201c      	movs	r0, #28
 80010d2:	f7ff fd23 	bl	8000b1c <NRF24_read_register>
 80010d6:	4603      	mov	r3, r0
 80010d8:	f043 0303 	orr.w	r3, r3, #3
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	4619      	mov	r1, r3
 80010e0:	201c      	movs	r0, #28
 80010e2:	f7ff fd6b 	bl	8000bbc <NRF24_write_register>
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
	...

080010ec <NRF24_enableDynamicPayloads>:
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 80010f0:	201d      	movs	r0, #29
 80010f2:	f7ff fd13 	bl	8000b1c <NRF24_read_register>
 80010f6:	4603      	mov	r3, r0
 80010f8:	f043 0304 	orr.w	r3, r3, #4
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	4619      	mov	r1, r3
 8001100:	201d      	movs	r0, #29
 8001102:	f7ff fd5b 	bl	8000bbc <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8001106:	201d      	movs	r0, #29
 8001108:	f7ff fd08 	bl	8000b1c <NRF24_read_register>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d10c      	bne.n	800112c <NRF24_enableDynamicPayloads+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8001112:	f000 f963 	bl	80013dc <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8001116:	201d      	movs	r0, #29
 8001118:	f7ff fd00 	bl	8000b1c <NRF24_read_register>
 800111c:	4603      	mov	r3, r0
 800111e:	f043 0304 	orr.w	r3, r3, #4
 8001122:	b2db      	uxtb	r3, r3
 8001124:	4619      	mov	r1, r3
 8001126:	201d      	movs	r0, #29
 8001128:	f7ff fd48 	bl	8000bbc <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 800112c:	201c      	movs	r0, #28
 800112e:	f7ff fcf5 	bl	8000b1c <NRF24_read_register>
 8001132:	4603      	mov	r3, r0
 8001134:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8001138:	b2db      	uxtb	r3, r3
 800113a:	4619      	mov	r1, r3
 800113c:	201c      	movs	r0, #28
 800113e:	f7ff fd3d 	bl	8000bbc <NRF24_write_register>
  dynamic_payloads_enabled = true;
 8001142:	4b02      	ldr	r3, [pc, #8]	; (800114c <NRF24_enableDynamicPayloads+0x60>)
 8001144:	2201      	movs	r2, #1
 8001146:	701a      	strb	r2, [r3, #0]
	
}
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20000469 	.word	0x20000469

08001150 <NRF24_disableDynamicPayloads>:
void NRF24_disableDynamicPayloads(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8001154:	201d      	movs	r0, #29
 8001156:	f7ff fce1 	bl	8000b1c <NRF24_read_register>
 800115a:	4603      	mov	r3, r0
 800115c:	f023 0304 	bic.w	r3, r3, #4
 8001160:	b2db      	uxtb	r3, r3
 8001162:	4619      	mov	r1, r3
 8001164:	201d      	movs	r0, #29
 8001166:	f7ff fd29 	bl	8000bbc <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 800116a:	2100      	movs	r1, #0
 800116c:	201c      	movs	r0, #28
 800116e:	f7ff fd25 	bl	8000bbc <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8001172:	4b02      	ldr	r3, [pc, #8]	; (800117c <NRF24_disableDynamicPayloads+0x2c>)
 8001174:	2200      	movs	r2, #0
 8001176:	701a      	strb	r2, [r3, #0]
}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20000469 	.word	0x20000469

08001180 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d004      	beq.n	800119a <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8001190:	213f      	movs	r1, #63	; 0x3f
 8001192:	2001      	movs	r0, #1
 8001194:	f7ff fd12 	bl	8000bbc <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8001198:	e003      	b.n	80011a2 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 800119a:	2100      	movs	r1, #0
 800119c:	2001      	movs	r0, #1
 800119e:	f7ff fd0d 	bl	8000bbc <NRF24_write_register>
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b084      	sub	sp, #16
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	4603      	mov	r3, r0
 80011b2:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80011b4:	2006      	movs	r0, #6
 80011b6:	f7ff fcb1 	bl	8000b1c <NRF24_read_register>
 80011ba:	4603      	mov	r3, r0
 80011bc:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80011be:	7bfb      	ldrb	r3, [r7, #15]
 80011c0:	f023 0306 	bic.w	r3, r3, #6
 80011c4:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	2b03      	cmp	r3, #3
 80011ca:	d104      	bne.n	80011d6 <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80011cc:	7bfb      	ldrb	r3, [r7, #15]
 80011ce:	f043 0306 	orr.w	r3, r3, #6
 80011d2:	73fb      	strb	r3, [r7, #15]
 80011d4:	e019      	b.n	800120a <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d104      	bne.n	80011e6 <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 80011dc:	7bfb      	ldrb	r3, [r7, #15]
 80011de:	f043 0304 	orr.w	r3, r3, #4
 80011e2:	73fb      	strb	r3, [r7, #15]
 80011e4:	e011      	b.n	800120a <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d104      	bne.n	80011f6 <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 80011ec:	7bfb      	ldrb	r3, [r7, #15]
 80011ee:	f043 0302 	orr.w	r3, r3, #2
 80011f2:	73fb      	strb	r3, [r7, #15]
 80011f4:	e009      	b.n	800120a <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d006      	beq.n	800120a <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	2b04      	cmp	r3, #4
 8001200:	d103      	bne.n	800120a <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001202:	7bfb      	ldrb	r3, [r7, #15]
 8001204:	f043 0306 	orr.w	r3, r3, #6
 8001208:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 800120a:	7bfb      	ldrb	r3, [r7, #15]
 800120c:	4619      	mov	r1, r3
 800120e:	2006      	movs	r0, #6
 8001210:	f7ff fcd4 	bl	8000bbc <NRF24_write_register>
}
 8001214:	bf00      	nop
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8001226:	2300      	movs	r3, #0
 8001228:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 800122a:	2006      	movs	r0, #6
 800122c:	f7ff fc76 	bl	8000b1c <NRF24_read_register>
 8001230:	4603      	mov	r3, r0
 8001232:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8001234:	4b1b      	ldr	r3, [pc, #108]	; (80012a4 <NRF24_setDataRate+0x88>)
 8001236:	2200      	movs	r2, #0
 8001238:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 800123a:	7bbb      	ldrb	r3, [r7, #14]
 800123c:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8001240:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	2b02      	cmp	r3, #2
 8001246:	d107      	bne.n	8001258 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8001248:	4b16      	ldr	r3, [pc, #88]	; (80012a4 <NRF24_setDataRate+0x88>)
 800124a:	2200      	movs	r2, #0
 800124c:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 800124e:	7bbb      	ldrb	r3, [r7, #14]
 8001250:	f043 0320 	orr.w	r3, r3, #32
 8001254:	73bb      	strb	r3, [r7, #14]
 8001256:	e00d      	b.n	8001274 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d107      	bne.n	800126e <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 800125e:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <NRF24_setDataRate+0x88>)
 8001260:	2201      	movs	r2, #1
 8001262:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8001264:	7bbb      	ldrb	r3, [r7, #14]
 8001266:	f043 0308 	orr.w	r3, r3, #8
 800126a:	73bb      	strb	r3, [r7, #14]
 800126c:	e002      	b.n	8001274 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 800126e:	4b0d      	ldr	r3, [pc, #52]	; (80012a4 <NRF24_setDataRate+0x88>)
 8001270:	2200      	movs	r2, #0
 8001272:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8001274:	7bbb      	ldrb	r3, [r7, #14]
 8001276:	4619      	mov	r1, r3
 8001278:	2006      	movs	r0, #6
 800127a:	f7ff fc9f 	bl	8000bbc <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 800127e:	2006      	movs	r0, #6
 8001280:	f7ff fc4c 	bl	8000b1c <NRF24_read_register>
 8001284:	4603      	mov	r3, r0
 8001286:	461a      	mov	r2, r3
 8001288:	7bbb      	ldrb	r3, [r7, #14]
 800128a:	4293      	cmp	r3, r2
 800128c:	d102      	bne.n	8001294 <NRF24_setDataRate+0x78>
  {
    result = true;
 800128e:	2301      	movs	r3, #1
 8001290:	73fb      	strb	r3, [r7, #15]
 8001292:	e002      	b.n	800129a <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8001294:	4b03      	ldr	r3, [pc, #12]	; (80012a4 <NRF24_setDataRate+0x88>)
 8001296:	2200      	movs	r2, #0
 8001298:	701a      	strb	r2, [r3, #0]
  }

  return result;
 800129a:	7bfb      	ldrb	r3, [r7, #15]
}
 800129c:	4618      	mov	r0, r3
 800129e:	3710      	adds	r7, #16
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	2000046a 	.word	0x2000046a

080012a8 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 80012b2:	2000      	movs	r0, #0
 80012b4:	f7ff fc32 	bl	8000b1c <NRF24_read_register>
 80012b8:	4603      	mov	r3, r0
 80012ba:	f023 030c 	bic.w	r3, r3, #12
 80012be:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d00f      	beq.n	80012e6 <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d104      	bne.n	80012d6 <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 80012cc:	7bfb      	ldrb	r3, [r7, #15]
 80012ce:	f043 0308 	orr.w	r3, r3, #8
 80012d2:	73fb      	strb	r3, [r7, #15]
 80012d4:	e007      	b.n	80012e6 <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 80012d6:	7bfb      	ldrb	r3, [r7, #15]
 80012d8:	f043 0308 	orr.w	r3, r3, #8
 80012dc:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 80012de:	7bfb      	ldrb	r3, [r7, #15]
 80012e0:	f043 0304 	orr.w	r3, r3, #4
 80012e4:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 80012e6:	7bfb      	ldrb	r3, [r7, #15]
 80012e8:	4619      	mov	r1, r3
 80012ea:	2000      	movs	r0, #0
 80012ec:	f7ff fc66 	bl	8000bbc <NRF24_write_register>
}
 80012f0:	bf00      	nop
 80012f2:	3710      	adds	r7, #16
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 80012fc:	2000      	movs	r0, #0
 80012fe:	f7ff fc0d 	bl	8000b1c <NRF24_read_register>
 8001302:	4603      	mov	r3, r0
 8001304:	f023 0302 	bic.w	r3, r3, #2
 8001308:	b2db      	uxtb	r3, r3
 800130a:	4619      	mov	r1, r3
 800130c:	2000      	movs	r0, #0
 800130e:	f7ff fc55 	bl	8000bbc <NRF24_write_register>
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}

08001316 <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b084      	sub	sp, #16
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 800131e:	f7ff fcd7 	bl	8000cd0 <NRF24_get_status>
 8001322:	4603      	mov	r3, r0
 8001324:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8001326:	7bfb      	ldrb	r3, [r7, #15]
 8001328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800132c:	2b00      	cmp	r3, #0
 800132e:	bf14      	ite	ne
 8001330:	2301      	movne	r3, #1
 8001332:	2300      	moveq	r3, #0
 8001334:	73bb      	strb	r3, [r7, #14]

  if (result)
 8001336:	7bbb      	ldrb	r3, [r7, #14]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d017      	beq.n	800136c <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d007      	beq.n	8001352 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8001342:	7bfb      	ldrb	r3, [r7, #15]
 8001344:	085b      	lsrs	r3, r3, #1
 8001346:	b2db      	uxtb	r3, r3
 8001348:	f003 0307 	and.w	r3, r3, #7
 800134c:	b2da      	uxtb	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8001352:	2140      	movs	r1, #64	; 0x40
 8001354:	2007      	movs	r0, #7
 8001356:	f7ff fc31 	bl	8000bbc <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 800135a:	7bfb      	ldrb	r3, [r7, #15]
 800135c:	f003 0320 	and.w	r3, r3, #32
 8001360:	2b00      	cmp	r3, #0
 8001362:	d003      	beq.n	800136c <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8001364:	2120      	movs	r1, #32
 8001366:	2007      	movs	r0, #7
 8001368:	f7ff fc28 	bl	8000bbc <NRF24_write_register>
    }
  }
  return result;
 800136c:	7bbb      	ldrb	r3, [r7, #14]
}
 800136e:	4618      	mov	r0, r3
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <NRF24_writeAckPayload>:
  NRF24_DelayMicroSeconds(15);
  NRF24_ce(0);
}
//41. Write acknowledge payload
void NRF24_writeAckPayload(uint8_t pipe, const void* buf, uint8_t len)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b084      	sub	sp, #16
 800137a:	af00      	add	r7, sp, #0
 800137c:	4603      	mov	r3, r0
 800137e:	6039      	str	r1, [r7, #0]
 8001380:	71fb      	strb	r3, [r7, #7]
 8001382:	4613      	mov	r3, r2
 8001384:	71bb      	strb	r3, [r7, #6]
	const uint8_t* current = (uint8_t *)buf;
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	60fb      	str	r3, [r7, #12]
	const uint8_t max_payload_size = 32;
 800138a:	2320      	movs	r3, #32
 800138c:	72fb      	strb	r3, [r7, #11]
  uint8_t data_len = MIN(len,max_payload_size);
 800138e:	7afa      	ldrb	r2, [r7, #11]
 8001390:	79bb      	ldrb	r3, [r7, #6]
 8001392:	4293      	cmp	r3, r2
 8001394:	bf28      	it	cs
 8001396:	4613      	movcs	r3, r2
 8001398:	72bb      	strb	r3, [r7, #10]
	
  NRF24_csn(0);
 800139a:	2000      	movs	r0, #0
 800139c:	f7ff fb7e 	bl	8000a9c <NRF24_csn>
	NRF24_write_registerN(CMD_W_ACK_PAYLOAD | ( pipe & 0x7 ) , current, data_len);
 80013a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a4:	f003 0307 	and.w	r3, r3, #7
 80013a8:	b25b      	sxtb	r3, r3
 80013aa:	f063 0357 	orn	r3, r3, #87	; 0x57
 80013ae:	b25b      	sxtb	r3, r3
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	7aba      	ldrb	r2, [r7, #10]
 80013b4:	68f9      	ldr	r1, [r7, #12]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff fc22 	bl	8000c00 <NRF24_write_registerN>
  NRF24_csn(1);
 80013bc:	2001      	movs	r0, #1
 80013be:	f7ff fb6d 	bl	8000a9c <NRF24_csn>
}
 80013c2:	bf00      	nop
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 80013ce:	2170      	movs	r1, #112	; 0x70
 80013d0:	2007      	movs	r0, #7
 80013d2:	f7ff fbf3 	bl	8000bbc <NRF24_write_register>
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
	...

080013dc <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80013e2:	2000      	movs	r0, #0
 80013e4:	f7ff fb5a 	bl	8000a9c <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 80013e8:	2350      	movs	r3, #80	; 0x50
 80013ea:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 80013ec:	2373      	movs	r3, #115	; 0x73
 80013ee:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 80013f0:	1d39      	adds	r1, r7, #4
 80013f2:	2364      	movs	r3, #100	; 0x64
 80013f4:	2202      	movs	r2, #2
 80013f6:	4805      	ldr	r0, [pc, #20]	; (800140c <NRF24_ACTIVATE_cmd+0x30>)
 80013f8:	f007 fb3f 	bl	8008a7a <HAL_SPI_Transmit>
	NRF24_csn(1);
 80013fc:	2001      	movs	r0, #1
 80013fe:	f7ff fb4d 	bl	8000a9c <NRF24_csn>
}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20000474 	.word	0x20000474

08001410 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8001410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001412:	b0a1      	sub	sp, #132	; 0x84
 8001414:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001416:	f107 0308 	add.w	r3, r7, #8
 800141a:	4ab6      	ldr	r2, [pc, #728]	; (80016f4 <printRadioSettings+0x2e4>)
 800141c:	461c      	mov	r4, r3
 800141e:	4615      	mov	r5, r2
 8001420:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001422:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001424:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001426:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001428:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800142a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800142c:	682b      	ldr	r3, [r5, #0]
 800142e:	461a      	mov	r2, r3
 8001430:	8022      	strh	r2, [r4, #0]
 8001432:	3402      	adds	r4, #2
 8001434:	0c1b      	lsrs	r3, r3, #16
 8001436:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001438:	f107 0308 	add.w	r3, r7, #8
 800143c:	4618      	mov	r0, r3
 800143e:	f7fe fe87 	bl	8000150 <strlen>
 8001442:	4603      	mov	r3, r0
 8001444:	b29a      	uxth	r2, r3
 8001446:	f107 0108 	add.w	r1, r7, #8
 800144a:	230a      	movs	r3, #10
 800144c:	48aa      	ldr	r0, [pc, #680]	; (80016f8 <printRadioSettings+0x2e8>)
 800144e:	f008 fb3a 	bl	8009ac6 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8001452:	2000      	movs	r0, #0
 8001454:	f7ff fb62 	bl	8000b1c <NRF24_read_register>
 8001458:	4603      	mov	r3, r0
 800145a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 800145e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001462:	f003 0308 	and.w	r3, r3, #8
 8001466:	2b00      	cmp	r3, #0
 8001468:	d020      	beq.n	80014ac <printRadioSettings+0x9c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 800146a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800146e:	f003 0304 	and.w	r3, r3, #4
 8001472:	2b00      	cmp	r3, #0
 8001474:	d00b      	beq.n	800148e <printRadioSettings+0x7e>
 8001476:	f107 0308 	add.w	r3, r7, #8
 800147a:	4aa0      	ldr	r2, [pc, #640]	; (80016fc <printRadioSettings+0x2ec>)
 800147c:	461c      	mov	r4, r3
 800147e:	4615      	mov	r5, r2
 8001480:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001482:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001484:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001488:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800148c:	e017      	b.n	80014be <printRadioSettings+0xae>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 800148e:	f107 0308 	add.w	r3, r7, #8
 8001492:	4a9b      	ldr	r2, [pc, #620]	; (8001700 <printRadioSettings+0x2f0>)
 8001494:	461c      	mov	r4, r3
 8001496:	4615      	mov	r5, r2
 8001498:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800149a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800149c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014a0:	c403      	stmia	r4!, {r0, r1}
 80014a2:	8022      	strh	r2, [r4, #0]
 80014a4:	3402      	adds	r4, #2
 80014a6:	0c13      	lsrs	r3, r2, #16
 80014a8:	7023      	strb	r3, [r4, #0]
 80014aa:	e008      	b.n	80014be <printRadioSettings+0xae>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 80014ac:	f107 0308 	add.w	r3, r7, #8
 80014b0:	4a94      	ldr	r2, [pc, #592]	; (8001704 <printRadioSettings+0x2f4>)
 80014b2:	461c      	mov	r4, r3
 80014b4:	4615      	mov	r5, r2
 80014b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014ba:	682b      	ldr	r3, [r5, #0]
 80014bc:	6023      	str	r3, [r4, #0]
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014be:	f107 0308 	add.w	r3, r7, #8
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7fe fe44 	bl	8000150 <strlen>
 80014c8:	4603      	mov	r3, r0
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	f107 0108 	add.w	r1, r7, #8
 80014d0:	230a      	movs	r3, #10
 80014d2:	4889      	ldr	r0, [pc, #548]	; (80016f8 <printRadioSettings+0x2e8>)
 80014d4:	f008 faf7 	bl	8009ac6 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 80014d8:	2001      	movs	r0, #1
 80014da:	f7ff fb1f 	bl	8000b1c <NRF24_read_register>
 80014de:	4603      	mov	r3, r0
 80014e0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80014e4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80014e8:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	bfcc      	ite	gt
 80014f0:	2301      	movgt	r3, #1
 80014f2:	2300      	movle	r3, #0
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80014f8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80014fc:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001500:	2b00      	cmp	r3, #0
 8001502:	bfcc      	ite	gt
 8001504:	2301      	movgt	r3, #1
 8001506:	2300      	movle	r3, #0
 8001508:	b2db      	uxtb	r3, r3
 800150a:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800150c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001510:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001514:	2b00      	cmp	r3, #0
 8001516:	bfcc      	ite	gt
 8001518:	2301      	movgt	r3, #1
 800151a:	2300      	movle	r3, #0
 800151c:	b2db      	uxtb	r3, r3
 800151e:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001520:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001524:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001528:	2b00      	cmp	r3, #0
 800152a:	bfcc      	ite	gt
 800152c:	2301      	movgt	r3, #1
 800152e:	2300      	movle	r3, #0
 8001530:	b2db      	uxtb	r3, r3
 8001532:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001534:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001538:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800153c:	2b00      	cmp	r3, #0
 800153e:	bfcc      	ite	gt
 8001540:	2301      	movgt	r3, #1
 8001542:	2300      	movle	r3, #0
 8001544:	b2db      	uxtb	r3, r3
 8001546:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001548:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800154c:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001550:	2b00      	cmp	r3, #0
 8001552:	bfcc      	ite	gt
 8001554:	2301      	movgt	r3, #1
 8001556:	2300      	movle	r3, #0
 8001558:	b2db      	uxtb	r3, r3
 800155a:	f107 0008 	add.w	r0, r7, #8
 800155e:	9303      	str	r3, [sp, #12]
 8001560:	9402      	str	r4, [sp, #8]
 8001562:	9101      	str	r1, [sp, #4]
 8001564:	9200      	str	r2, [sp, #0]
 8001566:	4633      	mov	r3, r6
 8001568:	462a      	mov	r2, r5
 800156a:	4967      	ldr	r1, [pc, #412]	; (8001708 <printRadioSettings+0x2f8>)
 800156c:	f00b fe54 	bl	800d218 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001570:	f107 0308 	add.w	r3, r7, #8
 8001574:	4618      	mov	r0, r3
 8001576:	f7fe fdeb 	bl	8000150 <strlen>
 800157a:	4603      	mov	r3, r0
 800157c:	b29a      	uxth	r2, r3
 800157e:	f107 0108 	add.w	r1, r7, #8
 8001582:	230a      	movs	r3, #10
 8001584:	485c      	ldr	r0, [pc, #368]	; (80016f8 <printRadioSettings+0x2e8>)
 8001586:	f008 fa9e 	bl	8009ac6 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 800158a:	2002      	movs	r0, #2
 800158c:	f7ff fac6 	bl	8000b1c <NRF24_read_register>
 8001590:	4603      	mov	r3, r0
 8001592:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001596:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800159a:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800159e:	2b00      	cmp	r3, #0
 80015a0:	bfcc      	ite	gt
 80015a2:	2301      	movgt	r3, #1
 80015a4:	2300      	movle	r3, #0
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80015aa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015ae:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	bfcc      	ite	gt
 80015b6:	2301      	movgt	r3, #1
 80015b8:	2300      	movle	r3, #0
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80015be:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015c2:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	bfcc      	ite	gt
 80015ca:	2301      	movgt	r3, #1
 80015cc:	2300      	movle	r3, #0
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80015d2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015d6:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80015da:	2b00      	cmp	r3, #0
 80015dc:	bfcc      	ite	gt
 80015de:	2301      	movgt	r3, #1
 80015e0:	2300      	movle	r3, #0
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80015e6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015ea:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	bfcc      	ite	gt
 80015f2:	2301      	movgt	r3, #1
 80015f4:	2300      	movle	r3, #0
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80015fa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015fe:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001602:	2b00      	cmp	r3, #0
 8001604:	bfcc      	ite	gt
 8001606:	2301      	movgt	r3, #1
 8001608:	2300      	movle	r3, #0
 800160a:	b2db      	uxtb	r3, r3
 800160c:	f107 0008 	add.w	r0, r7, #8
 8001610:	9303      	str	r3, [sp, #12]
 8001612:	9402      	str	r4, [sp, #8]
 8001614:	9101      	str	r1, [sp, #4]
 8001616:	9200      	str	r2, [sp, #0]
 8001618:	4633      	mov	r3, r6
 800161a:	462a      	mov	r2, r5
 800161c:	493b      	ldr	r1, [pc, #236]	; (800170c <printRadioSettings+0x2fc>)
 800161e:	f00b fdfb 	bl	800d218 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001622:	f107 0308 	add.w	r3, r7, #8
 8001626:	4618      	mov	r0, r3
 8001628:	f7fe fd92 	bl	8000150 <strlen>
 800162c:	4603      	mov	r3, r0
 800162e:	b29a      	uxth	r2, r3
 8001630:	f107 0108 	add.w	r1, r7, #8
 8001634:	230a      	movs	r3, #10
 8001636:	4830      	ldr	r0, [pc, #192]	; (80016f8 <printRadioSettings+0x2e8>)
 8001638:	f008 fa45 	bl	8009ac6 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 800163c:	2003      	movs	r0, #3
 800163e:	f7ff fa6d 	bl	8000b1c <NRF24_read_register>
 8001642:	4603      	mov	r3, r0
 8001644:	f003 0303 	and.w	r3, r3, #3
 8001648:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 800164c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001650:	3302      	adds	r3, #2
 8001652:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8001656:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800165a:	f107 0308 	add.w	r3, r7, #8
 800165e:	492c      	ldr	r1, [pc, #176]	; (8001710 <printRadioSettings+0x300>)
 8001660:	4618      	mov	r0, r3
 8001662:	f00b fdd9 	bl	800d218 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001666:	f107 0308 	add.w	r3, r7, #8
 800166a:	4618      	mov	r0, r3
 800166c:	f7fe fd70 	bl	8000150 <strlen>
 8001670:	4603      	mov	r3, r0
 8001672:	b29a      	uxth	r2, r3
 8001674:	f107 0108 	add.w	r1, r7, #8
 8001678:	230a      	movs	r3, #10
 800167a:	481f      	ldr	r0, [pc, #124]	; (80016f8 <printRadioSettings+0x2e8>)
 800167c:	f008 fa23 	bl	8009ac6 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8001680:	2005      	movs	r0, #5
 8001682:	f7ff fa4b 	bl	8000b1c <NRF24_read_register>
 8001686:	4603      	mov	r3, r0
 8001688:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 800168c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001690:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001694:	f107 0308 	add.w	r3, r7, #8
 8001698:	491e      	ldr	r1, [pc, #120]	; (8001714 <printRadioSettings+0x304>)
 800169a:	4618      	mov	r0, r3
 800169c:	f00b fdbc 	bl	800d218 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016a0:	f107 0308 	add.w	r3, r7, #8
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7fe fd53 	bl	8000150 <strlen>
 80016aa:	4603      	mov	r3, r0
 80016ac:	b29a      	uxth	r2, r3
 80016ae:	f107 0108 	add.w	r1, r7, #8
 80016b2:	230a      	movs	r3, #10
 80016b4:	4810      	ldr	r0, [pc, #64]	; (80016f8 <printRadioSettings+0x2e8>)
 80016b6:	f008 fa06 	bl	8009ac6 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 80016ba:	2006      	movs	r0, #6
 80016bc:	f7ff fa2e 	bl	8000b1c <NRF24_read_register>
 80016c0:	4603      	mov	r3, r0
 80016c2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 80016c6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016ca:	f003 0308 	and.w	r3, r3, #8
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d024      	beq.n	800171c <printRadioSettings+0x30c>
 80016d2:	f107 0308 	add.w	r3, r7, #8
 80016d6:	4a10      	ldr	r2, [pc, #64]	; (8001718 <printRadioSettings+0x308>)
 80016d8:	461c      	mov	r4, r3
 80016da:	4615      	mov	r5, r2
 80016dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016e0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80016e4:	6020      	str	r0, [r4, #0]
 80016e6:	3404      	adds	r4, #4
 80016e8:	8021      	strh	r1, [r4, #0]
 80016ea:	3402      	adds	r4, #2
 80016ec:	0c0b      	lsrs	r3, r1, #16
 80016ee:	7023      	strb	r3, [r4, #0]
 80016f0:	e023      	b.n	800173a <printRadioSettings+0x32a>
 80016f2:	bf00      	nop
 80016f4:	0800da40 	.word	0x0800da40
 80016f8:	200004cc 	.word	0x200004cc
 80016fc:	0800da74 	.word	0x0800da74
 8001700:	0800da90 	.word	0x0800da90
 8001704:	0800daac 	.word	0x0800daac
 8001708:	0800dac0 	.word	0x0800dac0
 800170c:	0800db04 	.word	0x0800db04
 8001710:	0800db50 	.word	0x0800db50
 8001714:	0800db6c 	.word	0x0800db6c
 8001718:	0800db80 	.word	0x0800db80
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 800171c:	f107 0308 	add.w	r3, r7, #8
 8001720:	4a29      	ldr	r2, [pc, #164]	; (80017c8 <printRadioSettings+0x3b8>)
 8001722:	461c      	mov	r4, r3
 8001724:	4615      	mov	r5, r2
 8001726:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001728:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800172a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800172e:	6020      	str	r0, [r4, #0]
 8001730:	3404      	adds	r4, #4
 8001732:	8021      	strh	r1, [r4, #0]
 8001734:	3402      	adds	r4, #2
 8001736:	0c0b      	lsrs	r3, r1, #16
 8001738:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800173a:	f107 0308 	add.w	r3, r7, #8
 800173e:	4618      	mov	r0, r3
 8001740:	f7fe fd06 	bl	8000150 <strlen>
 8001744:	4603      	mov	r3, r0
 8001746:	b29a      	uxth	r2, r3
 8001748:	f107 0108 	add.w	r1, r7, #8
 800174c:	230a      	movs	r3, #10
 800174e:	481f      	ldr	r0, [pc, #124]	; (80017cc <printRadioSettings+0x3bc>)
 8001750:	f008 f9b9 	bl	8009ac6 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8001754:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001758:	f003 0306 	and.w	r3, r3, #6
 800175c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8001760:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001764:	085b      	lsrs	r3, r3, #1
 8001766:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 800176a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800176e:	2b00      	cmp	r3, #0
 8001770:	d109      	bne.n	8001786 <printRadioSettings+0x376>
 8001772:	f107 0308 	add.w	r3, r7, #8
 8001776:	4a16      	ldr	r2, [pc, #88]	; (80017d0 <printRadioSettings+0x3c0>)
 8001778:	461c      	mov	r4, r3
 800177a:	4615      	mov	r5, r2
 800177c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800177e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001780:	682b      	ldr	r3, [r5, #0]
 8001782:	6023      	str	r3, [r4, #0]
 8001784:	e037      	b.n	80017f6 <printRadioSettings+0x3e6>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8001786:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800178a:	2b01      	cmp	r3, #1
 800178c:	d109      	bne.n	80017a2 <printRadioSettings+0x392>
 800178e:	f107 0308 	add.w	r3, r7, #8
 8001792:	4a10      	ldr	r2, [pc, #64]	; (80017d4 <printRadioSettings+0x3c4>)
 8001794:	461c      	mov	r4, r3
 8001796:	4615      	mov	r5, r2
 8001798:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800179a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800179c:	682b      	ldr	r3, [r5, #0]
 800179e:	6023      	str	r3, [r4, #0]
 80017a0:	e029      	b.n	80017f6 <printRadioSettings+0x3e6>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 80017a2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d118      	bne.n	80017dc <printRadioSettings+0x3cc>
 80017aa:	f107 0308 	add.w	r3, r7, #8
 80017ae:	4a0a      	ldr	r2, [pc, #40]	; (80017d8 <printRadioSettings+0x3c8>)
 80017b0:	461c      	mov	r4, r3
 80017b2:	4615      	mov	r5, r2
 80017b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017b8:	682b      	ldr	r3, [r5, #0]
 80017ba:	461a      	mov	r2, r3
 80017bc:	8022      	strh	r2, [r4, #0]
 80017be:	3402      	adds	r4, #2
 80017c0:	0c1b      	lsrs	r3, r3, #16
 80017c2:	7023      	strb	r3, [r4, #0]
 80017c4:	e017      	b.n	80017f6 <printRadioSettings+0x3e6>
 80017c6:	bf00      	nop
 80017c8:	0800db98 	.word	0x0800db98
 80017cc:	200004cc 	.word	0x200004cc
 80017d0:	0800dbb0 	.word	0x0800dbb0
 80017d4:	0800dbc4 	.word	0x0800dbc4
 80017d8:	0800dbd8 	.word	0x0800dbd8
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 80017dc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017e0:	2b03      	cmp	r3, #3
 80017e2:	d108      	bne.n	80017f6 <printRadioSettings+0x3e6>
 80017e4:	f107 0308 	add.w	r3, r7, #8
 80017e8:	4ad7      	ldr	r2, [pc, #860]	; (8001b48 <printRadioSettings+0x738>)
 80017ea:	461c      	mov	r4, r3
 80017ec:	4615      	mov	r5, r2
 80017ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017f2:	682b      	ldr	r3, [r5, #0]
 80017f4:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80017f6:	f107 0308 	add.w	r3, r7, #8
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7fe fca8 	bl	8000150 <strlen>
 8001800:	4603      	mov	r3, r0
 8001802:	b29a      	uxth	r2, r3
 8001804:	f107 0108 	add.w	r1, r7, #8
 8001808:	230a      	movs	r3, #10
 800180a:	48d0      	ldr	r0, [pc, #832]	; (8001b4c <printRadioSettings+0x73c>)
 800180c:	f008 f95b 	bl	8009ac6 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8001810:	463b      	mov	r3, r7
 8001812:	2205      	movs	r2, #5
 8001814:	4619      	mov	r1, r3
 8001816:	200a      	movs	r0, #10
 8001818:	f7ff f9a8 	bl	8000b6c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800181c:	793b      	ldrb	r3, [r7, #4]
 800181e:	461c      	mov	r4, r3
 8001820:	78fb      	ldrb	r3, [r7, #3]
 8001822:	461d      	mov	r5, r3
 8001824:	78bb      	ldrb	r3, [r7, #2]
 8001826:	787a      	ldrb	r2, [r7, #1]
 8001828:	7839      	ldrb	r1, [r7, #0]
 800182a:	f107 0008 	add.w	r0, r7, #8
 800182e:	9102      	str	r1, [sp, #8]
 8001830:	9201      	str	r2, [sp, #4]
 8001832:	9300      	str	r3, [sp, #0]
 8001834:	462b      	mov	r3, r5
 8001836:	4622      	mov	r2, r4
 8001838:	49c5      	ldr	r1, [pc, #788]	; (8001b50 <printRadioSettings+0x740>)
 800183a:	f00b fced 	bl	800d218 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800183e:	f107 0308 	add.w	r3, r7, #8
 8001842:	4618      	mov	r0, r3
 8001844:	f7fe fc84 	bl	8000150 <strlen>
 8001848:	4603      	mov	r3, r0
 800184a:	b29a      	uxth	r2, r3
 800184c:	f107 0108 	add.w	r1, r7, #8
 8001850:	230a      	movs	r3, #10
 8001852:	48be      	ldr	r0, [pc, #760]	; (8001b4c <printRadioSettings+0x73c>)
 8001854:	f008 f937 	bl	8009ac6 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8001858:	463b      	mov	r3, r7
 800185a:	2205      	movs	r2, #5
 800185c:	4619      	mov	r1, r3
 800185e:	200b      	movs	r0, #11
 8001860:	f7ff f984 	bl	8000b6c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001864:	793b      	ldrb	r3, [r7, #4]
 8001866:	461c      	mov	r4, r3
 8001868:	78fb      	ldrb	r3, [r7, #3]
 800186a:	461d      	mov	r5, r3
 800186c:	78bb      	ldrb	r3, [r7, #2]
 800186e:	787a      	ldrb	r2, [r7, #1]
 8001870:	7839      	ldrb	r1, [r7, #0]
 8001872:	f107 0008 	add.w	r0, r7, #8
 8001876:	9102      	str	r1, [sp, #8]
 8001878:	9201      	str	r2, [sp, #4]
 800187a:	9300      	str	r3, [sp, #0]
 800187c:	462b      	mov	r3, r5
 800187e:	4622      	mov	r2, r4
 8001880:	49b4      	ldr	r1, [pc, #720]	; (8001b54 <printRadioSettings+0x744>)
 8001882:	f00b fcc9 	bl	800d218 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001886:	f107 0308 	add.w	r3, r7, #8
 800188a:	4618      	mov	r0, r3
 800188c:	f7fe fc60 	bl	8000150 <strlen>
 8001890:	4603      	mov	r3, r0
 8001892:	b29a      	uxth	r2, r3
 8001894:	f107 0108 	add.w	r1, r7, #8
 8001898:	230a      	movs	r3, #10
 800189a:	48ac      	ldr	r0, [pc, #688]	; (8001b4c <printRadioSettings+0x73c>)
 800189c:	f008 f913 	bl	8009ac6 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 80018a0:	463b      	mov	r3, r7
 80018a2:	2201      	movs	r2, #1
 80018a4:	4619      	mov	r1, r3
 80018a6:	200c      	movs	r0, #12
 80018a8:	f7ff f960 	bl	8000b6c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80018ac:	783b      	ldrb	r3, [r7, #0]
 80018ae:	461a      	mov	r2, r3
 80018b0:	f107 0308 	add.w	r3, r7, #8
 80018b4:	49a8      	ldr	r1, [pc, #672]	; (8001b58 <printRadioSettings+0x748>)
 80018b6:	4618      	mov	r0, r3
 80018b8:	f00b fcae 	bl	800d218 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018bc:	f107 0308 	add.w	r3, r7, #8
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7fe fc45 	bl	8000150 <strlen>
 80018c6:	4603      	mov	r3, r0
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	f107 0108 	add.w	r1, r7, #8
 80018ce:	230a      	movs	r3, #10
 80018d0:	489e      	ldr	r0, [pc, #632]	; (8001b4c <printRadioSettings+0x73c>)
 80018d2:	f008 f8f8 	bl	8009ac6 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 80018d6:	463b      	mov	r3, r7
 80018d8:	2201      	movs	r2, #1
 80018da:	4619      	mov	r1, r3
 80018dc:	200d      	movs	r0, #13
 80018de:	f7ff f945 	bl	8000b6c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80018e2:	783b      	ldrb	r3, [r7, #0]
 80018e4:	461a      	mov	r2, r3
 80018e6:	f107 0308 	add.w	r3, r7, #8
 80018ea:	499c      	ldr	r1, [pc, #624]	; (8001b5c <printRadioSettings+0x74c>)
 80018ec:	4618      	mov	r0, r3
 80018ee:	f00b fc93 	bl	800d218 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018f2:	f107 0308 	add.w	r3, r7, #8
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7fe fc2a 	bl	8000150 <strlen>
 80018fc:	4603      	mov	r3, r0
 80018fe:	b29a      	uxth	r2, r3
 8001900:	f107 0108 	add.w	r1, r7, #8
 8001904:	230a      	movs	r3, #10
 8001906:	4891      	ldr	r0, [pc, #580]	; (8001b4c <printRadioSettings+0x73c>)
 8001908:	f008 f8dd 	bl	8009ac6 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 800190c:	463b      	mov	r3, r7
 800190e:	2201      	movs	r2, #1
 8001910:	4619      	mov	r1, r3
 8001912:	200e      	movs	r0, #14
 8001914:	f7ff f92a 	bl	8000b6c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001918:	783b      	ldrb	r3, [r7, #0]
 800191a:	461a      	mov	r2, r3
 800191c:	f107 0308 	add.w	r3, r7, #8
 8001920:	498f      	ldr	r1, [pc, #572]	; (8001b60 <printRadioSettings+0x750>)
 8001922:	4618      	mov	r0, r3
 8001924:	f00b fc78 	bl	800d218 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001928:	f107 0308 	add.w	r3, r7, #8
 800192c:	4618      	mov	r0, r3
 800192e:	f7fe fc0f 	bl	8000150 <strlen>
 8001932:	4603      	mov	r3, r0
 8001934:	b29a      	uxth	r2, r3
 8001936:	f107 0108 	add.w	r1, r7, #8
 800193a:	230a      	movs	r3, #10
 800193c:	4883      	ldr	r0, [pc, #524]	; (8001b4c <printRadioSettings+0x73c>)
 800193e:	f008 f8c2 	bl	8009ac6 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8001942:	463b      	mov	r3, r7
 8001944:	2201      	movs	r2, #1
 8001946:	4619      	mov	r1, r3
 8001948:	200f      	movs	r0, #15
 800194a:	f7ff f90f 	bl	8000b6c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800194e:	783b      	ldrb	r3, [r7, #0]
 8001950:	461a      	mov	r2, r3
 8001952:	f107 0308 	add.w	r3, r7, #8
 8001956:	4983      	ldr	r1, [pc, #524]	; (8001b64 <printRadioSettings+0x754>)
 8001958:	4618      	mov	r0, r3
 800195a:	f00b fc5d 	bl	800d218 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800195e:	f107 0308 	add.w	r3, r7, #8
 8001962:	4618      	mov	r0, r3
 8001964:	f7fe fbf4 	bl	8000150 <strlen>
 8001968:	4603      	mov	r3, r0
 800196a:	b29a      	uxth	r2, r3
 800196c:	f107 0108 	add.w	r1, r7, #8
 8001970:	230a      	movs	r3, #10
 8001972:	4876      	ldr	r0, [pc, #472]	; (8001b4c <printRadioSettings+0x73c>)
 8001974:	f008 f8a7 	bl	8009ac6 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8001978:	463b      	mov	r3, r7
 800197a:	2205      	movs	r2, #5
 800197c:	4619      	mov	r1, r3
 800197e:	2010      	movs	r0, #16
 8001980:	f7ff f8f4 	bl	8000b6c <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001984:	793b      	ldrb	r3, [r7, #4]
 8001986:	461c      	mov	r4, r3
 8001988:	78fb      	ldrb	r3, [r7, #3]
 800198a:	461d      	mov	r5, r3
 800198c:	78bb      	ldrb	r3, [r7, #2]
 800198e:	787a      	ldrb	r2, [r7, #1]
 8001990:	7839      	ldrb	r1, [r7, #0]
 8001992:	f107 0008 	add.w	r0, r7, #8
 8001996:	9102      	str	r1, [sp, #8]
 8001998:	9201      	str	r2, [sp, #4]
 800199a:	9300      	str	r3, [sp, #0]
 800199c:	462b      	mov	r3, r5
 800199e:	4622      	mov	r2, r4
 80019a0:	4971      	ldr	r1, [pc, #452]	; (8001b68 <printRadioSettings+0x758>)
 80019a2:	f00b fc39 	bl	800d218 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80019a6:	f107 0308 	add.w	r3, r7, #8
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7fe fbd0 	bl	8000150 <strlen>
 80019b0:	4603      	mov	r3, r0
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	f107 0108 	add.w	r1, r7, #8
 80019b8:	230a      	movs	r3, #10
 80019ba:	4864      	ldr	r0, [pc, #400]	; (8001b4c <printRadioSettings+0x73c>)
 80019bc:	f008 f883 	bl	8009ac6 <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 80019c0:	2011      	movs	r0, #17
 80019c2:	f7ff f8ab 	bl	8000b1c <NRF24_read_register>
 80019c6:	4603      	mov	r3, r0
 80019c8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80019cc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80019d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019d4:	f107 0308 	add.w	r3, r7, #8
 80019d8:	4964      	ldr	r1, [pc, #400]	; (8001b6c <printRadioSettings+0x75c>)
 80019da:	4618      	mov	r0, r3
 80019dc:	f00b fc1c 	bl	800d218 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80019e0:	f107 0308 	add.w	r3, r7, #8
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7fe fbb3 	bl	8000150 <strlen>
 80019ea:	4603      	mov	r3, r0
 80019ec:	b29a      	uxth	r2, r3
 80019ee:	f107 0108 	add.w	r1, r7, #8
 80019f2:	230a      	movs	r3, #10
 80019f4:	4855      	ldr	r0, [pc, #340]	; (8001b4c <printRadioSettings+0x73c>)
 80019f6:	f008 f866 	bl	8009ac6 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 80019fa:	2012      	movs	r0, #18
 80019fc:	f7ff f88e 	bl	8000b1c <NRF24_read_register>
 8001a00:	4603      	mov	r3, r0
 8001a02:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001a06:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a0e:	f107 0308 	add.w	r3, r7, #8
 8001a12:	4957      	ldr	r1, [pc, #348]	; (8001b70 <printRadioSettings+0x760>)
 8001a14:	4618      	mov	r0, r3
 8001a16:	f00b fbff 	bl	800d218 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a1a:	f107 0308 	add.w	r3, r7, #8
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7fe fb96 	bl	8000150 <strlen>
 8001a24:	4603      	mov	r3, r0
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	f107 0108 	add.w	r1, r7, #8
 8001a2c:	230a      	movs	r3, #10
 8001a2e:	4847      	ldr	r0, [pc, #284]	; (8001b4c <printRadioSettings+0x73c>)
 8001a30:	f008 f849 	bl	8009ac6 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 8001a34:	2013      	movs	r0, #19
 8001a36:	f7ff f871 	bl	8000b1c <NRF24_read_register>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001a40:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a44:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a48:	f107 0308 	add.w	r3, r7, #8
 8001a4c:	4949      	ldr	r1, [pc, #292]	; (8001b74 <printRadioSettings+0x764>)
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f00b fbe2 	bl	800d218 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a54:	f107 0308 	add.w	r3, r7, #8
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7fe fb79 	bl	8000150 <strlen>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	f107 0108 	add.w	r1, r7, #8
 8001a66:	230a      	movs	r3, #10
 8001a68:	4838      	ldr	r0, [pc, #224]	; (8001b4c <printRadioSettings+0x73c>)
 8001a6a:	f008 f82c 	bl	8009ac6 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 8001a6e:	2014      	movs	r0, #20
 8001a70:	f7ff f854 	bl	8000b1c <NRF24_read_register>
 8001a74:	4603      	mov	r3, r0
 8001a76:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001a7a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a82:	f107 0308 	add.w	r3, r7, #8
 8001a86:	493c      	ldr	r1, [pc, #240]	; (8001b78 <printRadioSettings+0x768>)
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f00b fbc5 	bl	800d218 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a8e:	f107 0308 	add.w	r3, r7, #8
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7fe fb5c 	bl	8000150 <strlen>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	f107 0108 	add.w	r1, r7, #8
 8001aa0:	230a      	movs	r3, #10
 8001aa2:	482a      	ldr	r0, [pc, #168]	; (8001b4c <printRadioSettings+0x73c>)
 8001aa4:	f008 f80f 	bl	8009ac6 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 8001aa8:	2015      	movs	r0, #21
 8001aaa:	f7ff f837 	bl	8000b1c <NRF24_read_register>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001ab4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001ab8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001abc:	f107 0308 	add.w	r3, r7, #8
 8001ac0:	492e      	ldr	r1, [pc, #184]	; (8001b7c <printRadioSettings+0x76c>)
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f00b fba8 	bl	800d218 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001ac8:	f107 0308 	add.w	r3, r7, #8
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7fe fb3f 	bl	8000150 <strlen>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	f107 0108 	add.w	r1, r7, #8
 8001ada:	230a      	movs	r3, #10
 8001adc:	481b      	ldr	r0, [pc, #108]	; (8001b4c <printRadioSettings+0x73c>)
 8001ade:	f007 fff2 	bl	8009ac6 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 8001ae2:	2016      	movs	r0, #22
 8001ae4:	f7ff f81a 	bl	8000b1c <NRF24_read_register>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001aee:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001af2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001af6:	f107 0308 	add.w	r3, r7, #8
 8001afa:	4921      	ldr	r1, [pc, #132]	; (8001b80 <printRadioSettings+0x770>)
 8001afc:	4618      	mov	r0, r3
 8001afe:	f00b fb8b 	bl	800d218 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001b02:	f107 0308 	add.w	r3, r7, #8
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7fe fb22 	bl	8000150 <strlen>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	f107 0108 	add.w	r1, r7, #8
 8001b14:	230a      	movs	r3, #10
 8001b16:	480d      	ldr	r0, [pc, #52]	; (8001b4c <printRadioSettings+0x73c>)
 8001b18:	f007 ffd5 	bl	8009ac6 <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8001b1c:	201c      	movs	r0, #28
 8001b1e:	f7fe fffd 	bl	8000b1c <NRF24_read_register>
 8001b22:	4603      	mov	r3, r0
 8001b24:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001b28:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001b2c:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	bfcc      	ite	gt
 8001b34:	2301      	movgt	r3, #1
 8001b36:	2300      	movle	r3, #0
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001b3c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001b40:	f003 0302 	and.w	r3, r3, #2
 8001b44:	e01e      	b.n	8001b84 <printRadioSettings+0x774>
 8001b46:	bf00      	nop
 8001b48:	0800dbec 	.word	0x0800dbec
 8001b4c:	200004cc 	.word	0x200004cc
 8001b50:	0800dc00 	.word	0x0800dc00
 8001b54:	0800dc30 	.word	0x0800dc30
 8001b58:	0800dc60 	.word	0x0800dc60
 8001b5c:	0800dc88 	.word	0x0800dc88
 8001b60:	0800dcb0 	.word	0x0800dcb0
 8001b64:	0800dcd8 	.word	0x0800dcd8
 8001b68:	0800dd00 	.word	0x0800dd00
 8001b6c:	0800dd2c 	.word	0x0800dd2c
 8001b70:	0800dd48 	.word	0x0800dd48
 8001b74:	0800dd64 	.word	0x0800dd64
 8001b78:	0800dd80 	.word	0x0800dd80
 8001b7c:	0800dd9c 	.word	0x0800dd9c
 8001b80:	0800ddb8 	.word	0x0800ddb8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	bfcc      	ite	gt
 8001b88:	2301      	movgt	r3, #1
 8001b8a:	2300      	movle	r3, #0
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001b90:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001b94:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	bfcc      	ite	gt
 8001b9c:	2301      	movgt	r3, #1
 8001b9e:	2300      	movle	r3, #0
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001ba4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001ba8:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	bfcc      	ite	gt
 8001bb0:	2301      	movgt	r3, #1
 8001bb2:	2300      	movle	r3, #0
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001bb8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001bbc:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	bfcc      	ite	gt
 8001bc4:	2301      	movgt	r3, #1
 8001bc6:	2300      	movle	r3, #0
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001bcc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001bd0:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	bfcc      	ite	gt
 8001bd8:	2301      	movgt	r3, #1
 8001bda:	2300      	movle	r3, #0
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	f107 0008 	add.w	r0, r7, #8
 8001be2:	9303      	str	r3, [sp, #12]
 8001be4:	9402      	str	r4, [sp, #8]
 8001be6:	9101      	str	r1, [sp, #4]
 8001be8:	9200      	str	r2, [sp, #0]
 8001bea:	4633      	mov	r3, r6
 8001bec:	462a      	mov	r2, r5
 8001bee:	494a      	ldr	r1, [pc, #296]	; (8001d18 <printRadioSettings+0x908>)
 8001bf0:	f00b fb12 	bl	800d218 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001bf4:	f107 0308 	add.w	r3, r7, #8
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7fe faa9 	bl	8000150 <strlen>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	b29a      	uxth	r2, r3
 8001c02:	f107 0108 	add.w	r1, r7, #8
 8001c06:	230a      	movs	r3, #10
 8001c08:	4844      	ldr	r0, [pc, #272]	; (8001d1c <printRadioSettings+0x90c>)
 8001c0a:	f007 ff5c 	bl	8009ac6 <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8001c0e:	201d      	movs	r0, #29
 8001c10:	f7fe ff84 	bl	8000b1c <NRF24_read_register>
 8001c14:	4603      	mov	r3, r0
 8001c16:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8001c1a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001c1e:	f003 0304 	and.w	r3, r3, #4
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d00c      	beq.n	8001c40 <printRadioSettings+0x830>
 8001c26:	f107 0308 	add.w	r3, r7, #8
 8001c2a:	4a3d      	ldr	r2, [pc, #244]	; (8001d20 <printRadioSettings+0x910>)
 8001c2c:	461c      	mov	r4, r3
 8001c2e:	4615      	mov	r5, r2
 8001c30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c34:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c38:	6020      	str	r0, [r4, #0]
 8001c3a:	3404      	adds	r4, #4
 8001c3c:	8021      	strh	r1, [r4, #0]
 8001c3e:	e00e      	b.n	8001c5e <printRadioSettings+0x84e>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8001c40:	f107 0308 	add.w	r3, r7, #8
 8001c44:	4a37      	ldr	r2, [pc, #220]	; (8001d24 <printRadioSettings+0x914>)
 8001c46:	461c      	mov	r4, r3
 8001c48:	4615      	mov	r5, r2
 8001c4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c4e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c52:	6020      	str	r0, [r4, #0]
 8001c54:	3404      	adds	r4, #4
 8001c56:	8021      	strh	r1, [r4, #0]
 8001c58:	3402      	adds	r4, #2
 8001c5a:	0c0b      	lsrs	r3, r1, #16
 8001c5c:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001c5e:	f107 0308 	add.w	r3, r7, #8
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7fe fa74 	bl	8000150 <strlen>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	f107 0108 	add.w	r1, r7, #8
 8001c70:	230a      	movs	r3, #10
 8001c72:	482a      	ldr	r0, [pc, #168]	; (8001d1c <printRadioSettings+0x90c>)
 8001c74:	f007 ff27 	bl	8009ac6 <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8001c78:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001c7c:	f003 0302 	and.w	r3, r3, #2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d00b      	beq.n	8001c9c <printRadioSettings+0x88c>
 8001c84:	f107 0308 	add.w	r3, r7, #8
 8001c88:	4a27      	ldr	r2, [pc, #156]	; (8001d28 <printRadioSettings+0x918>)
 8001c8a:	461c      	mov	r4, r3
 8001c8c:	4615      	mov	r5, r2
 8001c8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c92:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c96:	c403      	stmia	r4!, {r0, r1}
 8001c98:	8022      	strh	r2, [r4, #0]
 8001c9a:	e00d      	b.n	8001cb8 <printRadioSettings+0x8a8>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8001c9c:	f107 0308 	add.w	r3, r7, #8
 8001ca0:	4a22      	ldr	r2, [pc, #136]	; (8001d2c <printRadioSettings+0x91c>)
 8001ca2:	461c      	mov	r4, r3
 8001ca4:	4615      	mov	r5, r2
 8001ca6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ca8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001caa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001cae:	c403      	stmia	r4!, {r0, r1}
 8001cb0:	8022      	strh	r2, [r4, #0]
 8001cb2:	3402      	adds	r4, #2
 8001cb4:	0c13      	lsrs	r3, r2, #16
 8001cb6:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001cb8:	f107 0308 	add.w	r3, r7, #8
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7fe fa47 	bl	8000150 <strlen>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	b29a      	uxth	r2, r3
 8001cc6:	f107 0108 	add.w	r1, r7, #8
 8001cca:	230a      	movs	r3, #10
 8001ccc:	4813      	ldr	r0, [pc, #76]	; (8001d1c <printRadioSettings+0x90c>)
 8001cce:	f007 fefa 	bl	8009ac6 <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001cd2:	f107 0308 	add.w	r3, r7, #8
 8001cd6:	4a16      	ldr	r2, [pc, #88]	; (8001d30 <printRadioSettings+0x920>)
 8001cd8:	461c      	mov	r4, r3
 8001cda:	4615      	mov	r5, r2
 8001cdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ce0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ce2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ce4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ce6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ce8:	682b      	ldr	r3, [r5, #0]
 8001cea:	461a      	mov	r2, r3
 8001cec:	8022      	strh	r2, [r4, #0]
 8001cee:	3402      	adds	r4, #2
 8001cf0:	0c1b      	lsrs	r3, r3, #16
 8001cf2:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001cf4:	f107 0308 	add.w	r3, r7, #8
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7fe fa29 	bl	8000150 <strlen>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	f107 0108 	add.w	r1, r7, #8
 8001d06:	230a      	movs	r3, #10
 8001d08:	4804      	ldr	r0, [pc, #16]	; (8001d1c <printRadioSettings+0x90c>)
 8001d0a:	f007 fedc 	bl	8009ac6 <HAL_UART_Transmit>
}
 8001d0e:	bf00      	nop
 8001d10:	3774      	adds	r7, #116	; 0x74
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d16:	bf00      	nop
 8001d18:	0800ddd4 	.word	0x0800ddd4
 8001d1c:	200004cc 	.word	0x200004cc
 8001d20:	0800de20 	.word	0x0800de20
 8001d24:	0800de38 	.word	0x0800de38
 8001d28:	0800de50 	.word	0x0800de50
 8001d2c:	0800de6c 	.word	0x0800de6c
 8001d30:	0800da40 	.word	0x0800da40

08001d34 <MPU6050_Init>:
static int16_t GyroRW[3];

//Fucntion Definitions
//1- i2c Handler 
void MPU6050_Init(I2C_HandleTypeDef *I2Chnd)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
	//Copy I2C CubeMX handle to local library
	memcpy(&i2cHandler, I2Chnd, sizeof(*I2Chnd));
 8001d3c:	2254      	movs	r2, #84	; 0x54
 8001d3e:	6879      	ldr	r1, [r7, #4]
 8001d40:	4803      	ldr	r0, [pc, #12]	; (8001d50 <MPU6050_Init+0x1c>)
 8001d42:	f00b fa55 	bl	800d1f0 <memcpy>
}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	2000050c 	.word	0x2000050c

08001d54 <I2C_Read>:

//2- i2c Read
void I2C_Read(uint8_t ADDR, uint8_t *i2cBif, uint8_t NofData)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af02      	add	r7, sp, #8
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	6039      	str	r1, [r7, #0]
 8001d5e:	71fb      	strb	r3, [r7, #7]
 8001d60:	4613      	mov	r3, r2
 8001d62:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cBuf[2];
	uint8_t MPUADDR;
	//Need to Shift address to make it proper to i2c operation
	MPUADDR = (MPU_ADDR<<1);
 8001d64:	23d0      	movs	r3, #208	; 0xd0
 8001d66:	73fb      	strb	r3, [r7, #15]
	i2cBuf[0] = ADDR;
 8001d68:	79fb      	ldrb	r3, [r7, #7]
 8001d6a:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cBuf, 1, 10);
 8001d6c:	7bfb      	ldrb	r3, [r7, #15]
 8001d6e:	b299      	uxth	r1, r3
 8001d70:	f107 020c 	add.w	r2, r7, #12
 8001d74:	230a      	movs	r3, #10
 8001d76:	9300      	str	r3, [sp, #0]
 8001d78:	2301      	movs	r3, #1
 8001d7a:	4809      	ldr	r0, [pc, #36]	; (8001da0 <I2C_Read+0x4c>)
 8001d7c:	f004 fa56 	bl	800622c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cHandler, MPUADDR, i2cBif, NofData, 100);
 8001d80:	7bfb      	ldrb	r3, [r7, #15]
 8001d82:	b299      	uxth	r1, r3
 8001d84:	79bb      	ldrb	r3, [r7, #6]
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	2364      	movs	r3, #100	; 0x64
 8001d8a:	9300      	str	r3, [sp, #0]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	683a      	ldr	r2, [r7, #0]
 8001d90:	4803      	ldr	r0, [pc, #12]	; (8001da0 <I2C_Read+0x4c>)
 8001d92:	f004 fb49 	bl	8006428 <HAL_I2C_Master_Receive>
}
 8001d96:	bf00      	nop
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	2000050c 	.word	0x2000050c

08001da4 <I2C_Write8>:

//3- i2c Write
void I2C_Write8(uint8_t ADDR, uint8_t data)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af02      	add	r7, sp, #8
 8001daa:	4603      	mov	r3, r0
 8001dac:	460a      	mov	r2, r1
 8001dae:	71fb      	strb	r3, [r7, #7]
 8001db0:	4613      	mov	r3, r2
 8001db2:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cData[2];
	i2cData[0] = ADDR;
 8001db4:	79fb      	ldrb	r3, [r7, #7]
 8001db6:	733b      	strb	r3, [r7, #12]
	i2cData[1] = data;
 8001db8:	79bb      	ldrb	r3, [r7, #6]
 8001dba:	737b      	strb	r3, [r7, #13]
	uint8_t MPUADDR = (MPU_ADDR<<1);
 8001dbc:	23d0      	movs	r3, #208	; 0xd0
 8001dbe:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cData, 2,100);
 8001dc0:	7bfb      	ldrb	r3, [r7, #15]
 8001dc2:	b299      	uxth	r1, r3
 8001dc4:	f107 020c 	add.w	r2, r7, #12
 8001dc8:	2364      	movs	r3, #100	; 0x64
 8001dca:	9300      	str	r3, [sp, #0]
 8001dcc:	2302      	movs	r3, #2
 8001dce:	4803      	ldr	r0, [pc, #12]	; (8001ddc <I2C_Write8+0x38>)
 8001dd0:	f004 fa2c 	bl	800622c <HAL_I2C_Master_Transmit>
}
 8001dd4:	bf00      	nop
 8001dd6:	3710      	adds	r7, #16
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	2000050c 	.word	0x2000050c

08001de0 <MPU6050_Config>:

//4- MPU6050 Initialaztion Configuration 
void MPU6050_Config(MPU_ConfigTypeDef *config)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
	uint8_t Buffer = 0;
 8001de8:	2300      	movs	r3, #0
 8001dea:	73fb      	strb	r3, [r7, #15]
	//Clock Source 
	//Reset Device
	I2C_Write8(PWR_MAGT_1_REG, 0x80);
 8001dec:	2180      	movs	r1, #128	; 0x80
 8001dee:	206b      	movs	r0, #107	; 0x6b
 8001df0:	f7ff ffd8 	bl	8001da4 <I2C_Write8>
	HAL_Delay(100);
 8001df4:	2064      	movs	r0, #100	; 0x64
 8001df6:	f003 f8f7 	bl	8004fe8 <HAL_Delay>
	Buffer = config ->ClockSource & 0x07; //change the 7th bits of register
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	73fb      	strb	r3, [r7, #15]
	Buffer |= (config ->Sleep_Mode_Bit << 6) &0x40; // change only the 7th bit in the register
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	791b      	ldrb	r3, [r3, #4]
 8001e08:	019b      	lsls	r3, r3, #6
 8001e0a:	b25b      	sxtb	r3, r3
 8001e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e10:	b25a      	sxtb	r2, r3
 8001e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	b25b      	sxtb	r3, r3
 8001e1a:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(PWR_MAGT_1_REG, Buffer);
 8001e1c:	7bfb      	ldrb	r3, [r7, #15]
 8001e1e:	4619      	mov	r1, r3
 8001e20:	206b      	movs	r0, #107	; 0x6b
 8001e22:	f7ff ffbf 	bl	8001da4 <I2C_Write8>
	HAL_Delay(100); // should wait 10ms after changeing the clock setting.
 8001e26:	2064      	movs	r0, #100	; 0x64
 8001e28:	f003 f8de 	bl	8004fe8 <HAL_Delay>
	
	//Set the Digital Low Pass Filter
	Buffer = 0;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	73fb      	strb	r3, [r7, #15]
	Buffer = config->CONFIG_DLPF & 0x07;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	78db      	ldrb	r3, [r3, #3]
 8001e34:	f003 0307 	and.w	r3, r3, #7
 8001e38:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(CONFIG_REG, Buffer);
 8001e3a:	7bfb      	ldrb	r3, [r7, #15]
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	201a      	movs	r0, #26
 8001e40:	f7ff ffb0 	bl	8001da4 <I2C_Write8>
	
	//Select the Gyroscope Full Scale Range
	Buffer = 0;
 8001e44:	2300      	movs	r3, #0
 8001e46:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Gyro_Full_Scale << 3) & 0x18;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	785b      	ldrb	r3, [r3, #1]
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	f003 0318 	and.w	r3, r3, #24
 8001e54:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(GYRO_CONFIG_REG, Buffer);
 8001e56:	7bfb      	ldrb	r3, [r7, #15]
 8001e58:	4619      	mov	r1, r3
 8001e5a:	201b      	movs	r0, #27
 8001e5c:	f7ff ffa2 	bl	8001da4 <I2C_Write8>
	
	//Select the Accelerometer Full Scale Range 
	Buffer = 0; 
 8001e60:	2300      	movs	r3, #0
 8001e62:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Accel_Full_Scale << 3) & 0x18;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	789b      	ldrb	r3, [r3, #2]
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	f003 0318 	and.w	r3, r3, #24
 8001e70:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(ACCEL_CONFIG_REG, Buffer);
 8001e72:	7bfb      	ldrb	r3, [r7, #15]
 8001e74:	4619      	mov	r1, r3
 8001e76:	201c      	movs	r0, #28
 8001e78:	f7ff ff94 	bl	8001da4 <I2C_Write8>
	//Set SRD To Default
	MPU6050_Set_SMPRT_DIV(0x04);
 8001e7c:	2004      	movs	r0, #4
 8001e7e:	f000 f857 	bl	8001f30 <MPU6050_Set_SMPRT_DIV>
	
	
	//Accelerometer Scaling Factor, Set the Accelerometer and Gyroscope Scaling Factor
	switch (config->Accel_Full_Scale)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	789b      	ldrb	r3, [r3, #2]
 8001e86:	2b03      	cmp	r3, #3
 8001e88:	d81a      	bhi.n	8001ec0 <MPU6050_Config+0xe0>
 8001e8a:	a201      	add	r2, pc, #4	; (adr r2, 8001e90 <MPU6050_Config+0xb0>)
 8001e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e90:	08001ea1 	.word	0x08001ea1
 8001e94:	08001ea9 	.word	0x08001ea9
 8001e98:	08001eb1 	.word	0x08001eb1
 8001e9c:	08001eb9 	.word	0x08001eb9
	{
		case AFS_SEL_2g:
			accelScalingFactor = (2000.0f/32768.0f);
 8001ea0:	4b1a      	ldr	r3, [pc, #104]	; (8001f0c <MPU6050_Config+0x12c>)
 8001ea2:	4a1b      	ldr	r2, [pc, #108]	; (8001f10 <MPU6050_Config+0x130>)
 8001ea4:	601a      	str	r2, [r3, #0]
			break;
 8001ea6:	e00c      	b.n	8001ec2 <MPU6050_Config+0xe2>
		
		case AFS_SEL_4g:
			accelScalingFactor = (4000.0f/32768.0f);
 8001ea8:	4b18      	ldr	r3, [pc, #96]	; (8001f0c <MPU6050_Config+0x12c>)
 8001eaa:	4a1a      	ldr	r2, [pc, #104]	; (8001f14 <MPU6050_Config+0x134>)
 8001eac:	601a      	str	r2, [r3, #0]
				break;
 8001eae:	e008      	b.n	8001ec2 <MPU6050_Config+0xe2>
		
		case AFS_SEL_8g:
			accelScalingFactor = (8000.0f/32768.0f);
 8001eb0:	4b16      	ldr	r3, [pc, #88]	; (8001f0c <MPU6050_Config+0x12c>)
 8001eb2:	4a19      	ldr	r2, [pc, #100]	; (8001f18 <MPU6050_Config+0x138>)
 8001eb4:	601a      	str	r2, [r3, #0]
			break;
 8001eb6:	e004      	b.n	8001ec2 <MPU6050_Config+0xe2>
		
		case AFS_SEL_16g:
			accelScalingFactor = (16000.0f/32768.0f);
 8001eb8:	4b14      	ldr	r3, [pc, #80]	; (8001f0c <MPU6050_Config+0x12c>)
 8001eba:	4a18      	ldr	r2, [pc, #96]	; (8001f1c <MPU6050_Config+0x13c>)
 8001ebc:	601a      	str	r2, [r3, #0]
			break;
 8001ebe:	e000      	b.n	8001ec2 <MPU6050_Config+0xe2>
		
		default:
			break;
 8001ec0:	bf00      	nop
	}
	//Gyroscope Scaling Factor 
	switch (config->Gyro_Full_Scale)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	785b      	ldrb	r3, [r3, #1]
 8001ec6:	2b03      	cmp	r3, #3
 8001ec8:	d81a      	bhi.n	8001f00 <MPU6050_Config+0x120>
 8001eca:	a201      	add	r2, pc, #4	; (adr r2, 8001ed0 <MPU6050_Config+0xf0>)
 8001ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ed0:	08001ee1 	.word	0x08001ee1
 8001ed4:	08001ee9 	.word	0x08001ee9
 8001ed8:	08001ef1 	.word	0x08001ef1
 8001edc:	08001ef9 	.word	0x08001ef9
	{
		case FS_SEL_250:
			gyroScalingFactor = 250.0f/32768.0f;
 8001ee0:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <MPU6050_Config+0x140>)
 8001ee2:	4a10      	ldr	r2, [pc, #64]	; (8001f24 <MPU6050_Config+0x144>)
 8001ee4:	601a      	str	r2, [r3, #0]
			break;
 8001ee6:	e00c      	b.n	8001f02 <MPU6050_Config+0x122>
		
		case FS_SEL_500:
				gyroScalingFactor = 500.0f/32768.0f;
 8001ee8:	4b0d      	ldr	r3, [pc, #52]	; (8001f20 <MPU6050_Config+0x140>)
 8001eea:	4a0f      	ldr	r2, [pc, #60]	; (8001f28 <MPU6050_Config+0x148>)
 8001eec:	601a      	str	r2, [r3, #0]
				break;
 8001eee:	e008      	b.n	8001f02 <MPU6050_Config+0x122>
		
		case FS_SEL_1000:
			gyroScalingFactor = 1000.0f/32768.0f;
 8001ef0:	4b0b      	ldr	r3, [pc, #44]	; (8001f20 <MPU6050_Config+0x140>)
 8001ef2:	4a0e      	ldr	r2, [pc, #56]	; (8001f2c <MPU6050_Config+0x14c>)
 8001ef4:	601a      	str	r2, [r3, #0]
			break;
 8001ef6:	e004      	b.n	8001f02 <MPU6050_Config+0x122>
		
		case FS_SEL_2000:
			gyroScalingFactor = 2000.0f/32768.0f;
 8001ef8:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <MPU6050_Config+0x140>)
 8001efa:	4a05      	ldr	r2, [pc, #20]	; (8001f10 <MPU6050_Config+0x130>)
 8001efc:	601a      	str	r2, [r3, #0]
			break;
 8001efe:	e000      	b.n	8001f02 <MPU6050_Config+0x122>
		
		default:
			break;
 8001f00:	bf00      	nop
	}
	
}
 8001f02:	bf00      	nop
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	20000560 	.word	0x20000560
 8001f10:	3d7a0000 	.word	0x3d7a0000
 8001f14:	3dfa0000 	.word	0x3dfa0000
 8001f18:	3e7a0000 	.word	0x3e7a0000
 8001f1c:	3efa0000 	.word	0x3efa0000
 8001f20:	20000564 	.word	0x20000564
 8001f24:	3bfa0000 	.word	0x3bfa0000
 8001f28:	3c7a0000 	.word	0x3c7a0000
 8001f2c:	3cfa0000 	.word	0x3cfa0000

08001f30 <MPU6050_Set_SMPRT_DIV>:
	return Buffer;
}

//6- Set Sample Rate Divider
void MPU6050_Set_SMPRT_DIV(uint8_t SMPRTvalue)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	71fb      	strb	r3, [r7, #7]
	I2C_Write8(SMPLRT_DIV_REG, SMPRTvalue);
 8001f3a:	79fb      	ldrb	r3, [r7, #7]
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	2019      	movs	r0, #25
 8001f40:	f7ff ff30 	bl	8001da4 <I2C_Write8>
}
 8001f44:	bf00      	nop
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <MPU6050_Get_Accel_RawData>:
	
}

//9- Get Accel Raw Data
void MPU6050_Get_Accel_RawData(RawData_Def *rawDef)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b088      	sub	sp, #32
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
	uint8_t i2cBuf[2];
	uint8_t AcceArr[6], GyroArr[6];
	
	//i2cBuf[1] = 0;

	I2C_Read(INT_STATUS_REG, &i2cBuf[1],1);
 8001f54:	f107 031c 	add.w	r3, r7, #28
 8001f58:	3301      	adds	r3, #1
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	203a      	movs	r0, #58	; 0x3a
 8001f60:	f7ff fef8 	bl	8001d54 <I2C_Read>
	if((i2cBuf[1]&&0x01))
 8001f64:	7f7b      	ldrb	r3, [r7, #29]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d04f      	beq.n	800200a <MPU6050_Get_Accel_RawData+0xbe>
	{
		I2C_Read(ACCEL_XOUT_H_REG, AcceArr,6);
 8001f6a:	f107 0314 	add.w	r3, r7, #20
 8001f6e:	2206      	movs	r2, #6
 8001f70:	4619      	mov	r1, r3
 8001f72:	203b      	movs	r0, #59	; 0x3b
 8001f74:	f7ff feee 	bl	8001d54 <I2C_Read>
		
		//Accel Raw Data
		rawDef->x = ((AcceArr[0]<<8) + AcceArr[1]); // x-Axis
 8001f78:	7d3b      	ldrb	r3, [r7, #20]
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	021b      	lsls	r3, r3, #8
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	7d7b      	ldrb	r3, [r7, #21]
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	4413      	add	r3, r2
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	b21a      	sxth	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	801a      	strh	r2, [r3, #0]
		rawDef->y = ((AcceArr[2]<<8) + AcceArr[3]); // y-Axis
 8001f8e:	7dbb      	ldrb	r3, [r7, #22]
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	021b      	lsls	r3, r3, #8
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	7dfb      	ldrb	r3, [r7, #23]
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	4413      	add	r3, r2
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	b21a      	sxth	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	805a      	strh	r2, [r3, #2]
		rawDef->z = ((AcceArr[4]<<8) + AcceArr[5]); // z-Axis
 8001fa4:	7e3b      	ldrb	r3, [r7, #24]
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	021b      	lsls	r3, r3, #8
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	7e7b      	ldrb	r3, [r7, #25]
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	4413      	add	r3, r2
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	b21a      	sxth	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	809a      	strh	r2, [r3, #4]
		//Gyro Raw Data
		I2C_Read(GYRO_XOUT_H_REG, GyroArr,6);
 8001fba:	f107 030c 	add.w	r3, r7, #12
 8001fbe:	2206      	movs	r2, #6
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	2043      	movs	r0, #67	; 0x43
 8001fc4:	f7ff fec6 	bl	8001d54 <I2C_Read>
		GyroRW[0] = ((GyroArr[0]<<8) + GyroArr[1]);
 8001fc8:	7b3b      	ldrb	r3, [r7, #12]
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	021b      	lsls	r3, r3, #8
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	7b7b      	ldrb	r3, [r7, #13]
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	4413      	add	r3, r2
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	b21a      	sxth	r2, r3
 8001fda:	4b0e      	ldr	r3, [pc, #56]	; (8002014 <MPU6050_Get_Accel_RawData+0xc8>)
 8001fdc:	801a      	strh	r2, [r3, #0]
		GyroRW[1] = (GyroArr[2]<<8) + GyroArr[3];
 8001fde:	7bbb      	ldrb	r3, [r7, #14]
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	021b      	lsls	r3, r3, #8
 8001fe4:	b29a      	uxth	r2, r3
 8001fe6:	7bfb      	ldrb	r3, [r7, #15]
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	4413      	add	r3, r2
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	b21a      	sxth	r2, r3
 8001ff0:	4b08      	ldr	r3, [pc, #32]	; (8002014 <MPU6050_Get_Accel_RawData+0xc8>)
 8001ff2:	805a      	strh	r2, [r3, #2]
		GyroRW[2] = ((GyroArr[4]<<8) + GyroArr[5]);
 8001ff4:	7c3b      	ldrb	r3, [r7, #16]
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	021b      	lsls	r3, r3, #8
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	7c7b      	ldrb	r3, [r7, #17]
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	4413      	add	r3, r2
 8002002:	b29b      	uxth	r3, r3
 8002004:	b21a      	sxth	r2, r3
 8002006:	4b03      	ldr	r3, [pc, #12]	; (8002014 <MPU6050_Get_Accel_RawData+0xc8>)
 8002008:	809a      	strh	r2, [r3, #4]
	}
}
 800200a:	bf00      	nop
 800200c:	3720      	adds	r7, #32
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	20000568 	.word	0x20000568

08002018 <MPU6050_Get_Gyro_RawData>:
	CaliDef->y = (AccelScaled.y) - A_Y_Bias;// y-Axis
	CaliDef->z = (AccelScaled.z) - A_Z_Bias;// z-Axis
}
//12- Get Gyro Raw Data
void MPU6050_Get_Gyro_RawData(RawData_Def *rawDef)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
	
	//Accel Raw Data
	rawDef->x = GyroRW[0];
 8002020:	4b09      	ldr	r3, [pc, #36]	; (8002048 <MPU6050_Get_Gyro_RawData+0x30>)
 8002022:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	801a      	strh	r2, [r3, #0]
	rawDef->y = GyroRW[1];
 800202a:	4b07      	ldr	r3, [pc, #28]	; (8002048 <MPU6050_Get_Gyro_RawData+0x30>)
 800202c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	805a      	strh	r2, [r3, #2]
	rawDef->z = GyroRW[2];
 8002034:	4b04      	ldr	r3, [pc, #16]	; (8002048 <MPU6050_Get_Gyro_RawData+0x30>)
 8002036:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	809a      	strh	r2, [r3, #4]
	
}
 800203e:	bf00      	nop
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	bc80      	pop	{r7}
 8002046:	4770      	bx	lr
 8002048:	20000568 	.word	0x20000568

0800204c <Serial_Send>:
uint8_t dataToSend[20] = {0x00, 0x14, 0x01, 0xEE, 0x0F, 0x00, 0x0F, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
//                        butns|size|     |     | lt  | rt  | lx        | ly        | rx        | ry        | unused
//                                    b10 & b9  & b7  & b8  & dr  & dl  & dd  & du
//

int Serial_Send(uint8_t* Buf, uint32_t *Len){
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
	CDC_Transmit_FS(Buf, Len);
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	4619      	mov	r1, r3
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f00a fc90 	bl	800c980 <CDC_Transmit_FS>
	return &Len;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <wait_for_gpio_state_timeout>:
#define I2C1_SCL_GPIO_Port SCL_GPIO_Port
#define I2C1_SDA_Pin SDA_Pin
#define I2C1_SDA_GPIO_Port SDA_GPIO_Port

static bool wait_for_gpio_state_timeout(GPIO_TypeDef *port, uint16_t pin, GPIO_PinState state, uint32_t timeout)
 {
 800206a:	b580      	push	{r7, lr}
 800206c:	b086      	sub	sp, #24
 800206e:	af00      	add	r7, sp, #0
 8002070:	60f8      	str	r0, [r7, #12]
 8002072:	607b      	str	r3, [r7, #4]
 8002074:	460b      	mov	r3, r1
 8002076:	817b      	strh	r3, [r7, #10]
 8002078:	4613      	mov	r3, r2
 800207a:	727b      	strb	r3, [r7, #9]
    uint32_t Tickstart = HAL_GetTick();
 800207c:	f002 ffaa 	bl	8004fd4 <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]
    bool ret = true;
 8002082:	2301      	movs	r3, #1
 8002084:	75fb      	strb	r3, [r7, #23]
    /* Wait until flag is set */
    for(;(state != HAL_GPIO_ReadPin(port, pin)) && (true == ret);)
 8002086:	e011      	b.n	80020ac <wait_for_gpio_state_timeout+0x42>
    {
        /* Check for the timeout */
        if (timeout != HAL_MAX_DELAY)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800208e:	d00c      	beq.n	80020aa <wait_for_gpio_state_timeout+0x40>
        {
            if ((timeout == 0U) || ((HAL_GetTick() - Tickstart) > timeout))
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d007      	beq.n	80020a6 <wait_for_gpio_state_timeout+0x3c>
 8002096:	f002 ff9d 	bl	8004fd4 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d201      	bcs.n	80020aa <wait_for_gpio_state_timeout+0x40>
            {
                ret = false;
 80020a6:	2300      	movs	r3, #0
 80020a8:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
            }
        }
        asm("nop");
 80020aa:	bf00      	nop
    for(;(state != HAL_GPIO_ReadPin(port, pin)) && (true == ret);)
 80020ac:	897b      	ldrh	r3, [r7, #10]
 80020ae:	4619      	mov	r1, r3
 80020b0:	68f8      	ldr	r0, [r7, #12]
 80020b2:	f003 ff1b 	bl	8005eec <HAL_GPIO_ReadPin>
 80020b6:	4603      	mov	r3, r0
 80020b8:	461a      	mov	r2, r3
 80020ba:	7a7b      	ldrb	r3, [r7, #9]
 80020bc:	4293      	cmp	r3, r2
 80020be:	d002      	beq.n	80020c6 <wait_for_gpio_state_timeout+0x5c>
 80020c0:	7dfb      	ldrb	r3, [r7, #23]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d1e0      	bne.n	8002088 <wait_for_gpio_state_timeout+0x1e>
    }
    return ret;
 80020c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3718      	adds	r7, #24
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <I2C_ClearBusyFlagErratum>:

static void I2C_ClearBusyFlagErratum(I2C_HandleTypeDef* handle, uint32_t timeout)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
    GPIO_InitTypeDef GPIO_InitStructure;

    // 1. Clear PE bit.
    CLEAR_BIT(handle->Instance->CR1, I2C_CR1_PE);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f022 0201 	bic.w	r2, r2, #1
 80020e8:	601a      	str	r2, [r3, #0]

    //  2. Configure the SCL and SDA I/Os as General Purpose Output Open-Drain, High level (Write 1 to GPIOx_ODR).
    HAL_I2C_DeInit(handle);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f004 f86e 	bl	80061cc <HAL_I2C_DeInit>

    GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 80020f0:	2311      	movs	r3, #17
 80020f2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Pull = GPIO_NOPULL;
 80020f4:	2300      	movs	r3, #0
 80020f6:	613b      	str	r3, [r7, #16]

    GPIO_InitStructure.Pin = I2C1_SCL_Pin;
 80020f8:	2340      	movs	r3, #64	; 0x40
 80020fa:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80020fc:	f107 0308 	add.w	r3, r7, #8
 8002100:	4619      	mov	r1, r3
 8002102:	4840      	ldr	r0, [pc, #256]	; (8002204 <I2C_ClearBusyFlagErratum+0x134>)
 8002104:	f003 fcdc 	bl	8005ac0 <HAL_GPIO_Init>

    GPIO_InitStructure.Pin = I2C1_SDA_Pin;
 8002108:	2380      	movs	r3, #128	; 0x80
 800210a:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(I2C1_SDA_GPIO_Port, &GPIO_InitStructure);
 800210c:	f107 0308 	add.w	r3, r7, #8
 8002110:	4619      	mov	r1, r3
 8002112:	483c      	ldr	r0, [pc, #240]	; (8002204 <I2C_ClearBusyFlagErratum+0x134>)
 8002114:	f003 fcd4 	bl	8005ac0 <HAL_GPIO_Init>

    // 3. Check SCL and SDA High level in GPIOx_IDR.
    HAL_GPIO_WritePin(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin, GPIO_PIN_SET);
 8002118:	2201      	movs	r2, #1
 800211a:	2180      	movs	r1, #128	; 0x80
 800211c:	4839      	ldr	r0, [pc, #228]	; (8002204 <I2C_ClearBusyFlagErratum+0x134>)
 800211e:	f003 fefc 	bl	8005f1a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin, GPIO_PIN_SET);
 8002122:	2201      	movs	r2, #1
 8002124:	2140      	movs	r1, #64	; 0x40
 8002126:	4837      	ldr	r0, [pc, #220]	; (8002204 <I2C_ClearBusyFlagErratum+0x134>)
 8002128:	f003 fef7 	bl	8005f1a <HAL_GPIO_WritePin>

    wait_for_gpio_state_timeout(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin, GPIO_PIN_SET, timeout);
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	2201      	movs	r2, #1
 8002130:	2140      	movs	r1, #64	; 0x40
 8002132:	4834      	ldr	r0, [pc, #208]	; (8002204 <I2C_ClearBusyFlagErratum+0x134>)
 8002134:	f7ff ff99 	bl	800206a <wait_for_gpio_state_timeout>
    wait_for_gpio_state_timeout(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin, GPIO_PIN_SET, timeout);
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	2201      	movs	r2, #1
 800213c:	2180      	movs	r1, #128	; 0x80
 800213e:	4831      	ldr	r0, [pc, #196]	; (8002204 <I2C_ClearBusyFlagErratum+0x134>)
 8002140:	f7ff ff93 	bl	800206a <wait_for_gpio_state_timeout>

    // 4. Configure the SDA I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR).
    HAL_GPIO_WritePin(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin, GPIO_PIN_RESET);
 8002144:	2200      	movs	r2, #0
 8002146:	2180      	movs	r1, #128	; 0x80
 8002148:	482e      	ldr	r0, [pc, #184]	; (8002204 <I2C_ClearBusyFlagErratum+0x134>)
 800214a:	f003 fee6 	bl	8005f1a <HAL_GPIO_WritePin>

    // 5. Check SDA Low level in GPIOx_IDR.
    wait_for_gpio_state_timeout(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin, GPIO_PIN_RESET, timeout);
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	2200      	movs	r2, #0
 8002152:	2180      	movs	r1, #128	; 0x80
 8002154:	482b      	ldr	r0, [pc, #172]	; (8002204 <I2C_ClearBusyFlagErratum+0x134>)
 8002156:	f7ff ff88 	bl	800206a <wait_for_gpio_state_timeout>

    // 6. Configure the SCL I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR).
    HAL_GPIO_WritePin(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin, GPIO_PIN_RESET);
 800215a:	2200      	movs	r2, #0
 800215c:	2140      	movs	r1, #64	; 0x40
 800215e:	4829      	ldr	r0, [pc, #164]	; (8002204 <I2C_ClearBusyFlagErratum+0x134>)
 8002160:	f003 fedb 	bl	8005f1a <HAL_GPIO_WritePin>

    // 7. Check SCL Low level in GPIOx_IDR.
    wait_for_gpio_state_timeout(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin, GPIO_PIN_RESET, timeout);
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	2200      	movs	r2, #0
 8002168:	2140      	movs	r1, #64	; 0x40
 800216a:	4826      	ldr	r0, [pc, #152]	; (8002204 <I2C_ClearBusyFlagErratum+0x134>)
 800216c:	f7ff ff7d 	bl	800206a <wait_for_gpio_state_timeout>

    // 8. Configure the SCL I/O as General Purpose Output Open-Drain, High level (Write 1 to GPIOx_ODR).
    HAL_GPIO_WritePin(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin, GPIO_PIN_SET);
 8002170:	2201      	movs	r2, #1
 8002172:	2140      	movs	r1, #64	; 0x40
 8002174:	4823      	ldr	r0, [pc, #140]	; (8002204 <I2C_ClearBusyFlagErratum+0x134>)
 8002176:	f003 fed0 	bl	8005f1a <HAL_GPIO_WritePin>

    // 9. Check SCL High level in GPIOx_IDR.
    wait_for_gpio_state_timeout(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin, GPIO_PIN_SET, timeout);
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	2201      	movs	r2, #1
 800217e:	2140      	movs	r1, #64	; 0x40
 8002180:	4820      	ldr	r0, [pc, #128]	; (8002204 <I2C_ClearBusyFlagErratum+0x134>)
 8002182:	f7ff ff72 	bl	800206a <wait_for_gpio_state_timeout>

    // 10. Configure the SDA I/O as General Purpose Output Open-Drain , High level (Write 1 to GPIOx_ODR).
    HAL_GPIO_WritePin(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin, GPIO_PIN_SET);
 8002186:	2201      	movs	r2, #1
 8002188:	2180      	movs	r1, #128	; 0x80
 800218a:	481e      	ldr	r0, [pc, #120]	; (8002204 <I2C_ClearBusyFlagErratum+0x134>)
 800218c:	f003 fec5 	bl	8005f1a <HAL_GPIO_WritePin>

    // 11. Check SDA High level in GPIOx_IDR.
    wait_for_gpio_state_timeout(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin, GPIO_PIN_SET, timeout);
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	2201      	movs	r2, #1
 8002194:	2180      	movs	r1, #128	; 0x80
 8002196:	481b      	ldr	r0, [pc, #108]	; (8002204 <I2C_ClearBusyFlagErratum+0x134>)
 8002198:	f7ff ff67 	bl	800206a <wait_for_gpio_state_timeout>

    // 12. Configure the SCL and SDA I/Os as Alternate function Open-Drain.
    GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 800219c:	2312      	movs	r3, #18
 800219e:	60fb      	str	r3, [r7, #12]
    //MAT//GPIO_InitStructure.Alternate = GPIO_AF1_I2C1;

    GPIO_InitStructure.Pin = I2C1_SCL_Pin;
 80021a0:	2340      	movs	r3, #64	; 0x40
 80021a2:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(I2C1_SCL_GPIO_Port, &GPIO_InitStructure);
 80021a4:	f107 0308 	add.w	r3, r7, #8
 80021a8:	4619      	mov	r1, r3
 80021aa:	4816      	ldr	r0, [pc, #88]	; (8002204 <I2C_ClearBusyFlagErratum+0x134>)
 80021ac:	f003 fc88 	bl	8005ac0 <HAL_GPIO_Init>

    GPIO_InitStructure.Pin = I2C1_SDA_Pin;
 80021b0:	2380      	movs	r3, #128	; 0x80
 80021b2:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(I2C1_SDA_GPIO_Port, &GPIO_InitStructure);
 80021b4:	f107 0308 	add.w	r3, r7, #8
 80021b8:	4619      	mov	r1, r3
 80021ba:	4812      	ldr	r0, [pc, #72]	; (8002204 <I2C_ClearBusyFlagErratum+0x134>)
 80021bc:	f003 fc80 	bl	8005ac0 <HAL_GPIO_Init>

    // 13. Set SWRST bit in I2Cx_CR1 register.
    SET_BIT(handle->Instance->CR1, I2C_CR1_SWRST);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021ce:	601a      	str	r2, [r3, #0]
    asm("nop");
 80021d0:	bf00      	nop

    /* 14. Clear SWRST bit in I2Cx_CR1 register. */
    CLEAR_BIT(handle->Instance->CR1, I2C_CR1_SWRST);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021e0:	601a      	str	r2, [r3, #0]
    asm("nop");
 80021e2:	bf00      	nop

    /* 15. Enable the I2C peripheral by setting the PE bit in I2Cx_CR1 register */
    SET_BIT(handle->Instance->CR1, I2C_CR1_PE);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f042 0201 	orr.w	r2, r2, #1
 80021f2:	601a      	str	r2, [r3, #0]
    asm("nop");
 80021f4:	bf00      	nop

    // Call initialization function.
    HAL_I2C_Init(handle);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f003 fec0 	bl	8005f7c <HAL_I2C_Init>
}
 80021fc:	bf00      	nop
 80021fe:	3718      	adds	r7, #24
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40010c00 	.word	0x40010c00

08002208 <MapValue>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
double MapValue(double Val, double FromLow,double FromHigh,double ToLow,double ToHigh){
 8002208:	b5b0      	push	{r4, r5, r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002212:	e9c7 2300 	strd	r2, r3, [r7]
	double out = ToLow + ((ToHigh - ToLow) / (FromHigh - FromLow)) * (Val - FromLow);
 8002216:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800221a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800221e:	f7fd ffa3 	bl	8000168 <__aeabi_dsub>
 8002222:	4603      	mov	r3, r0
 8002224:	460c      	mov	r4, r1
 8002226:	4625      	mov	r5, r4
 8002228:	461c      	mov	r4, r3
 800222a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800222e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002232:	f7fd ff99 	bl	8000168 <__aeabi_dsub>
 8002236:	4602      	mov	r2, r0
 8002238:	460b      	mov	r3, r1
 800223a:	4620      	mov	r0, r4
 800223c:	4629      	mov	r1, r5
 800223e:	f7fe fa75 	bl	800072c <__aeabi_ddiv>
 8002242:	4603      	mov	r3, r0
 8002244:	460c      	mov	r4, r1
 8002246:	4625      	mov	r5, r4
 8002248:	461c      	mov	r4, r3
 800224a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800224e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002252:	f7fd ff89 	bl	8000168 <__aeabi_dsub>
 8002256:	4602      	mov	r2, r0
 8002258:	460b      	mov	r3, r1
 800225a:	4620      	mov	r0, r4
 800225c:	4629      	mov	r1, r5
 800225e:	f7fe f93b 	bl	80004d8 <__aeabi_dmul>
 8002262:	4603      	mov	r3, r0
 8002264:	460c      	mov	r4, r1
 8002266:	461a      	mov	r2, r3
 8002268:	4623      	mov	r3, r4
 800226a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800226e:	f7fd ff7d 	bl	800016c <__adddf3>
 8002272:	4603      	mov	r3, r0
 8002274:	460c      	mov	r4, r1
 8002276:	e9c7 3404 	strd	r3, r4, [r7, #16]
	if (out > ToHigh) out = ToHigh;
 800227a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800227e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002282:	f7fe fbb9 	bl	80009f8 <__aeabi_dcmpgt>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d003      	beq.n	8002294 <MapValue+0x8c>
 800228c:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8002290:	e9c7 3404 	strd	r3, r4, [r7, #16]
	if (out < ToLow) out - ToLow;
	return out;
 8002294:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
}
 8002298:	4618      	mov	r0, r3
 800229a:	4621      	mov	r1, r4
 800229c:	3718      	adds	r7, #24
 800229e:	46bd      	mov	sp, r7
 80022a0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080022a4 <AdsRead>:

void AdsRead(int16_t *buf){
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af02      	add	r7, sp, #8
 80022aa:	6078      	str	r0, [r7, #4]
	for (int a = 0; a < 4; a++){
 80022ac:	2300      	movs	r3, #0
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	e052      	b.n	8002358 <AdsRead+0xb4>
		  ADSwrite[0] = 0x01;
 80022b2:	4b2d      	ldr	r3, [pc, #180]	; (8002368 <AdsRead+0xc4>)
 80022b4:	2201      	movs	r2, #1
 80022b6:	701a      	strb	r2, [r3, #0]
		  switch(a){
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2b03      	cmp	r3, #3
 80022bc:	d81a      	bhi.n	80022f4 <AdsRead+0x50>
 80022be:	a201      	add	r2, pc, #4	; (adr r2, 80022c4 <AdsRead+0x20>)
 80022c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c4:	080022d5 	.word	0x080022d5
 80022c8:	080022dd 	.word	0x080022dd
 80022cc:	080022e5 	.word	0x080022e5
 80022d0:	080022ed 	.word	0x080022ed
		  case 0: {
			  ADSwrite[1] = 0xC1; // 11000011
 80022d4:	4b24      	ldr	r3, [pc, #144]	; (8002368 <AdsRead+0xc4>)
 80022d6:	22c1      	movs	r2, #193	; 0xc1
 80022d8:	705a      	strb	r2, [r3, #1]
			  break;
 80022da:	e00b      	b.n	80022f4 <AdsRead+0x50>
		  }
		  case 1: {
			  ADSwrite[1] = 0xD1; // 11010011
 80022dc:	4b22      	ldr	r3, [pc, #136]	; (8002368 <AdsRead+0xc4>)
 80022de:	22d1      	movs	r2, #209	; 0xd1
 80022e0:	705a      	strb	r2, [r3, #1]
			  break;
 80022e2:	e007      	b.n	80022f4 <AdsRead+0x50>
		  }
		  case 2: {
			  ADSwrite[1] = 0xE1; // 11100011
 80022e4:	4b20      	ldr	r3, [pc, #128]	; (8002368 <AdsRead+0xc4>)
 80022e6:	22e1      	movs	r2, #225	; 0xe1
 80022e8:	705a      	strb	r2, [r3, #1]
			  break;
 80022ea:	e003      	b.n	80022f4 <AdsRead+0x50>
		  }
		  case 3: {
			  ADSwrite[1] = 0xF1; // 11110011
 80022ec:	4b1e      	ldr	r3, [pc, #120]	; (8002368 <AdsRead+0xc4>)
 80022ee:	22f1      	movs	r2, #241	; 0xf1
 80022f0:	705a      	strb	r2, [r3, #1]
			  break;
 80022f2:	bf00      	nop
		  }
		  }

		  ADSwrite[2] = 0xE3; // 10000011 // 10100011 // 11000011// 11100011
 80022f4:	4b1c      	ldr	r3, [pc, #112]	; (8002368 <AdsRead+0xc4>)
 80022f6:	22e3      	movs	r2, #227	; 0xe3
 80022f8:	709a      	strb	r2, [r3, #2]
		  HAL_I2C_Master_Transmit(&hi2c2, ADS1115_ADDRESS<<1, ADSwrite, 3, 100);
 80022fa:	2364      	movs	r3, #100	; 0x64
 80022fc:	9300      	str	r3, [sp, #0]
 80022fe:	2303      	movs	r3, #3
 8002300:	4a19      	ldr	r2, [pc, #100]	; (8002368 <AdsRead+0xc4>)
 8002302:	2190      	movs	r1, #144	; 0x90
 8002304:	4819      	ldr	r0, [pc, #100]	; (800236c <AdsRead+0xc8>)
 8002306:	f003 ff91 	bl	800622c <HAL_I2C_Master_Transmit>
		  ADSwrite[0] = 0x00;
 800230a:	4b17      	ldr	r3, [pc, #92]	; (8002368 <AdsRead+0xc4>)
 800230c:	2200      	movs	r2, #0
 800230e:	701a      	strb	r2, [r3, #0]
		  HAL_I2C_Master_Transmit(&hi2c2, ADS1115_ADDRESS<<1, ADSwrite, 1, 100);
 8002310:	2364      	movs	r3, #100	; 0x64
 8002312:	9300      	str	r3, [sp, #0]
 8002314:	2301      	movs	r3, #1
 8002316:	4a14      	ldr	r2, [pc, #80]	; (8002368 <AdsRead+0xc4>)
 8002318:	2190      	movs	r1, #144	; 0x90
 800231a:	4814      	ldr	r0, [pc, #80]	; (800236c <AdsRead+0xc8>)
 800231c:	f003 ff86 	bl	800622c <HAL_I2C_Master_Transmit>
		  NRF24_DelayMicroSeconds(100);
 8002320:	2064      	movs	r0, #100	; 0x64
 8002322:	f7fe fb9b 	bl	8000a5c <NRF24_DelayMicroSeconds>
		  HAL_I2C_Master_Receive(&hi2c2, ADS1115_ADDRESS<<1, ADSwrite, 2, 100);
 8002326:	2364      	movs	r3, #100	; 0x64
 8002328:	9300      	str	r3, [sp, #0]
 800232a:	2302      	movs	r3, #2
 800232c:	4a0e      	ldr	r2, [pc, #56]	; (8002368 <AdsRead+0xc4>)
 800232e:	2190      	movs	r1, #144	; 0x90
 8002330:	480e      	ldr	r0, [pc, #56]	; (800236c <AdsRead+0xc8>)
 8002332:	f004 f879 	bl	8006428 <HAL_I2C_Master_Receive>
		  buf[a] = (((int16_t)ADSwrite[0]) << 8 | ADSwrite[1]);
 8002336:	4b0c      	ldr	r3, [pc, #48]	; (8002368 <AdsRead+0xc4>)
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	021b      	lsls	r3, r3, #8
 800233c:	b219      	sxth	r1, r3
 800233e:	4b0a      	ldr	r3, [pc, #40]	; (8002368 <AdsRead+0xc4>)
 8002340:	785b      	ldrb	r3, [r3, #1]
 8002342:	b21a      	sxth	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	4403      	add	r3, r0
 800234c:	430a      	orrs	r2, r1
 800234e:	b212      	sxth	r2, r2
 8002350:	801a      	strh	r2, [r3, #0]
	for (int a = 0; a < 4; a++){
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	3301      	adds	r3, #1
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2b03      	cmp	r3, #3
 800235c:	dda9      	ble.n	80022b2 <AdsRead+0xe>
	  }
}
 800235e:	bf00      	nop
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	20000d64 	.word	0x20000d64
 800236c:	20000c14 	.word	0x20000c14

08002370 <AdcRead>:

void AdcRead(int16_t *buf){
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(&hadc1);
 8002378:	481c      	ldr	r0, [pc, #112]	; (80023ec <AdcRead+0x7c>)
 800237a:	f002 ff2f 	bl	80051dc <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK) {
 800237e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002382:	481a      	ldr	r0, [pc, #104]	; (80023ec <AdcRead+0x7c>)
 8002384:	f003 f804 	bl	8005390 <HAL_ADC_PollForConversion>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d106      	bne.n	800239c <AdcRead+0x2c>
		buf[0] = HAL_ADC_GetValue(&hadc1);
 800238e:	4817      	ldr	r0, [pc, #92]	; (80023ec <AdcRead+0x7c>)
 8002390:	f003 f8f8 	bl	8005584 <HAL_ADC_GetValue>
 8002394:	4603      	mov	r3, r0
 8002396:	b21a      	sxth	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	801a      	strh	r2, [r3, #0]
	}
	if (HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK) {
 800239c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80023a0:	4812      	ldr	r0, [pc, #72]	; (80023ec <AdcRead+0x7c>)
 80023a2:	f002 fff5 	bl	8005390 <HAL_ADC_PollForConversion>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d107      	bne.n	80023bc <AdcRead+0x4c>
		buf[1] = HAL_ADC_GetValue(&hadc1);
 80023ac:	480f      	ldr	r0, [pc, #60]	; (80023ec <AdcRead+0x7c>)
 80023ae:	f003 f8e9 	bl	8005584 <HAL_ADC_GetValue>
 80023b2:	4602      	mov	r2, r0
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3302      	adds	r3, #2
 80023b8:	b212      	sxth	r2, r2
 80023ba:	801a      	strh	r2, [r3, #0]
	}
	if (HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK) {
 80023bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80023c0:	480a      	ldr	r0, [pc, #40]	; (80023ec <AdcRead+0x7c>)
 80023c2:	f002 ffe5 	bl	8005390 <HAL_ADC_PollForConversion>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d107      	bne.n	80023dc <AdcRead+0x6c>
		buf[2] = HAL_ADC_GetValue(&hadc1);
 80023cc:	4807      	ldr	r0, [pc, #28]	; (80023ec <AdcRead+0x7c>)
 80023ce:	f003 f8d9 	bl	8005584 <HAL_ADC_GetValue>
 80023d2:	4602      	mov	r2, r0
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3304      	adds	r3, #4
 80023d8:	b212      	sxth	r2, r2
 80023da:	801a      	strh	r2, [r3, #0]
	}
	HAL_ADC_Stop(&hadc1);
 80023dc:	4803      	ldr	r0, [pc, #12]	; (80023ec <AdcRead+0x7c>)
 80023de:	f002 ffab 	bl	8005338 <HAL_ADC_Stop>
}
 80023e2:	bf00      	nop
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	20000cd0 	.word	0x20000cd0

080023f0 <updateButtons>:

void updateButtons()
{
 80023f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023f2:	b08b      	sub	sp, #44	; 0x2c
 80023f4:	af06      	add	r7, sp, #24
	  int16_t Val[4];
	  AdsRead(Val);
 80023f6:	f107 0308 	add.w	r3, r7, #8
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff ff52 	bl	80022a4 <AdsRead>
	  Val[1] = (int16_t)MapValue(Val[1], 0, Val[0], 0, 10);
 8002400:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002404:	4618      	mov	r0, r3
 8002406:	f7fd fffd 	bl	8000404 <__aeabi_i2d>
 800240a:	4605      	mov	r5, r0
 800240c:	460e      	mov	r6, r1
 800240e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002412:	4618      	mov	r0, r3
 8002414:	f7fd fff6 	bl	8000404 <__aeabi_i2d>
 8002418:	460a      	mov	r2, r1
 800241a:	4601      	mov	r1, r0
 800241c:	f04f 0300 	mov.w	r3, #0
 8002420:	4caf      	ldr	r4, [pc, #700]	; (80026e0 <updateButtons+0x2f0>)
 8002422:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8002426:	f04f 0300 	mov.w	r3, #0
 800242a:	f04f 0400 	mov.w	r4, #0
 800242e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8002432:	e9cd 1200 	strd	r1, r2, [sp]
 8002436:	f04f 0200 	mov.w	r2, #0
 800243a:	f04f 0300 	mov.w	r3, #0
 800243e:	4628      	mov	r0, r5
 8002440:	4631      	mov	r1, r6
 8002442:	f7ff fee1 	bl	8002208 <MapValue>
 8002446:	4603      	mov	r3, r0
 8002448:	460c      	mov	r4, r1
 800244a:	4618      	mov	r0, r3
 800244c:	4621      	mov	r1, r4
 800244e:	f7fe fadd 	bl	8000a0c <__aeabi_d2iz>
 8002452:	4603      	mov	r3, r0
 8002454:	b21b      	sxth	r3, r3
 8002456:	817b      	strh	r3, [r7, #10]
	  Val[2] = (int16_t)MapValue(Val[2], 0, Val[0], -32768, 32767);
 8002458:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800245c:	4618      	mov	r0, r3
 800245e:	f7fd ffd1 	bl	8000404 <__aeabi_i2d>
 8002462:	4605      	mov	r5, r0
 8002464:	460e      	mov	r6, r1
 8002466:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800246a:	4618      	mov	r0, r3
 800246c:	f7fd ffca 	bl	8000404 <__aeabi_i2d>
 8002470:	460a      	mov	r2, r1
 8002472:	4601      	mov	r1, r0
 8002474:	a496      	add	r4, pc, #600	; (adr r4, 80026d0 <updateButtons+0x2e0>)
 8002476:	e9d4 3400 	ldrd	r3, r4, [r4]
 800247a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800247e:	f04f 0300 	mov.w	r3, #0
 8002482:	4c98      	ldr	r4, [pc, #608]	; (80026e4 <updateButtons+0x2f4>)
 8002484:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8002488:	e9cd 1200 	strd	r1, r2, [sp]
 800248c:	f04f 0200 	mov.w	r2, #0
 8002490:	f04f 0300 	mov.w	r3, #0
 8002494:	4628      	mov	r0, r5
 8002496:	4631      	mov	r1, r6
 8002498:	f7ff feb6 	bl	8002208 <MapValue>
 800249c:	4603      	mov	r3, r0
 800249e:	460c      	mov	r4, r1
 80024a0:	4618      	mov	r0, r3
 80024a2:	4621      	mov	r1, r4
 80024a4:	f7fe fab2 	bl	8000a0c <__aeabi_d2iz>
 80024a8:	4603      	mov	r3, r0
 80024aa:	b21b      	sxth	r3, r3
 80024ac:	81bb      	strh	r3, [r7, #12]
	  Val[3] = (int16_t)MapValue(Val[3], 0, Val[0], -32768, 32767);
 80024ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7fd ffa6 	bl	8000404 <__aeabi_i2d>
 80024b8:	4605      	mov	r5, r0
 80024ba:	460e      	mov	r6, r1
 80024bc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7fd ff9f 	bl	8000404 <__aeabi_i2d>
 80024c6:	460a      	mov	r2, r1
 80024c8:	4601      	mov	r1, r0
 80024ca:	a481      	add	r4, pc, #516	; (adr r4, 80026d0 <updateButtons+0x2e0>)
 80024cc:	e9d4 3400 	ldrd	r3, r4, [r4]
 80024d0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80024d4:	f04f 0300 	mov.w	r3, #0
 80024d8:	4c82      	ldr	r4, [pc, #520]	; (80026e4 <updateButtons+0x2f4>)
 80024da:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80024de:	e9cd 1200 	strd	r1, r2, [sp]
 80024e2:	f04f 0200 	mov.w	r2, #0
 80024e6:	f04f 0300 	mov.w	r3, #0
 80024ea:	4628      	mov	r0, r5
 80024ec:	4631      	mov	r1, r6
 80024ee:	f7ff fe8b 	bl	8002208 <MapValue>
 80024f2:	4603      	mov	r3, r0
 80024f4:	460c      	mov	r4, r1
 80024f6:	4618      	mov	r0, r3
 80024f8:	4621      	mov	r1, r4
 80024fa:	f7fe fa87 	bl	8000a0c <__aeabi_d2iz>
 80024fe:	4603      	mov	r3, r0
 8002500:	b21b      	sxth	r3, r3
 8002502:	81fb      	strh	r3, [r7, #14]
	  if ((Val[2] <= 3) && (Val[2] >= -3)) Val[2] = 0;
 8002504:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002508:	2b03      	cmp	r3, #3
 800250a:	dc06      	bgt.n	800251a <updateButtons+0x12a>
 800250c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002510:	f113 0f03 	cmn.w	r3, #3
 8002514:	db01      	blt.n	800251a <updateButtons+0x12a>
 8002516:	2300      	movs	r3, #0
 8002518:	81bb      	strh	r3, [r7, #12]
	  if ((Val[3] <= 3) && (Val[3] >= -3)) Val[3] = 0;
 800251a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800251e:	2b03      	cmp	r3, #3
 8002520:	dc06      	bgt.n	8002530 <updateButtons+0x140>
 8002522:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002526:	f113 0f03 	cmn.w	r3, #3
 800252a:	db01      	blt.n	8002530 <updateButtons+0x140>
 800252c:	2300      	movs	r3, #0
 800252e:	81fb      	strh	r3, [r7, #14]
	  if (Val[1] > 5) Val[1] = 0; else Val[1] = 1;
 8002530:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002534:	2b05      	cmp	r3, #5
 8002536:	dd02      	ble.n	800253e <updateButtons+0x14e>
 8002538:	2300      	movs	r3, #0
 800253a:	817b      	strh	r3, [r7, #10]
 800253c:	e001      	b.n	8002542 <updateButtons+0x152>
 800253e:	2301      	movs	r3, #1
 8002540:	817b      	strh	r3, [r7, #10]

	 int16_t Adc[3];
	 AdcRead(Adc);
 8002542:	463b      	mov	r3, r7
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff ff13 	bl	8002370 <AdcRead>
	 Adc[0] = (int16_t)MapValue(Adc[0], 0, 4095, -32768, 32767);
 800254a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800254e:	4618      	mov	r0, r3
 8002550:	f7fd ff58 	bl	8000404 <__aeabi_i2d>
 8002554:	a45e      	add	r4, pc, #376	; (adr r4, 80026d0 <updateButtons+0x2e0>)
 8002556:	e9d4 3400 	ldrd	r3, r4, [r4]
 800255a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800255e:	f04f 0300 	mov.w	r3, #0
 8002562:	4c60      	ldr	r4, [pc, #384]	; (80026e4 <updateButtons+0x2f4>)
 8002564:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8002568:	a45b      	add	r4, pc, #364	; (adr r4, 80026d8 <updateButtons+0x2e8>)
 800256a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800256e:	e9cd 3400 	strd	r3, r4, [sp]
 8002572:	f04f 0200 	mov.w	r2, #0
 8002576:	f04f 0300 	mov.w	r3, #0
 800257a:	f7ff fe45 	bl	8002208 <MapValue>
 800257e:	4603      	mov	r3, r0
 8002580:	460c      	mov	r4, r1
 8002582:	4618      	mov	r0, r3
 8002584:	4621      	mov	r1, r4
 8002586:	f7fe fa41 	bl	8000a0c <__aeabi_d2iz>
 800258a:	4603      	mov	r3, r0
 800258c:	b21b      	sxth	r3, r3
 800258e:	803b      	strh	r3, [r7, #0]
	 Adc[1] = (int16_t)MapValue(Adc[1], 0, 4095, -32768, 32767);
 8002590:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002594:	4618      	mov	r0, r3
 8002596:	f7fd ff35 	bl	8000404 <__aeabi_i2d>
 800259a:	a44d      	add	r4, pc, #308	; (adr r4, 80026d0 <updateButtons+0x2e0>)
 800259c:	e9d4 3400 	ldrd	r3, r4, [r4]
 80025a0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80025a4:	f04f 0300 	mov.w	r3, #0
 80025a8:	4c4e      	ldr	r4, [pc, #312]	; (80026e4 <updateButtons+0x2f4>)
 80025aa:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80025ae:	a44a      	add	r4, pc, #296	; (adr r4, 80026d8 <updateButtons+0x2e8>)
 80025b0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80025b4:	e9cd 3400 	strd	r3, r4, [sp]
 80025b8:	f04f 0200 	mov.w	r2, #0
 80025bc:	f04f 0300 	mov.w	r3, #0
 80025c0:	f7ff fe22 	bl	8002208 <MapValue>
 80025c4:	4603      	mov	r3, r0
 80025c6:	460c      	mov	r4, r1
 80025c8:	4618      	mov	r0, r3
 80025ca:	4621      	mov	r1, r4
 80025cc:	f7fe fa1e 	bl	8000a0c <__aeabi_d2iz>
 80025d0:	4603      	mov	r3, r0
 80025d2:	b21b      	sxth	r3, r3
 80025d4:	807b      	strh	r3, [r7, #2]

	  ////////////////////////////////////////////////////////////////////////////////////////////////////
	// btns |rs|, |ls|, |select|, |start|, |dr|, |dl|, |dd|, |du|
	dataToSend[2] = 0;
 80025d6:	4b44      	ldr	r3, [pc, #272]	; (80026e8 <updateButtons+0x2f8>)
 80025d8:	2200      	movs	r2, #0
 80025da:	709a      	strb	r2, [r3, #2]
	dataToSend[2] |= Val[1] << 0;
 80025dc:	4b42      	ldr	r3, [pc, #264]	; (80026e8 <updateButtons+0x2f8>)
 80025de:	789b      	ldrb	r3, [r3, #2]
 80025e0:	b25a      	sxtb	r2, r3
 80025e2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80025e6:	b25b      	sxtb	r3, r3
 80025e8:	4313      	orrs	r3, r2
 80025ea:	b25b      	sxtb	r3, r3
 80025ec:	b2da      	uxtb	r2, r3
 80025ee:	4b3e      	ldr	r3, [pc, #248]	; (80026e8 <updateButtons+0x2f8>)
 80025f0:	709a      	strb	r2, [r3, #2]
	dataToSend[2] |= !HAL_GPIO_ReadPin(BT_LC_GPIO_Port, BT_LC_Pin) << 1;
 80025f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025f6:	483d      	ldr	r0, [pc, #244]	; (80026ec <updateButtons+0x2fc>)
 80025f8:	f003 fc78 	bl	8005eec <HAL_GPIO_ReadPin>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <updateButtons+0x216>
 8002602:	2102      	movs	r1, #2
 8002604:	e000      	b.n	8002608 <updateButtons+0x218>
 8002606:	2100      	movs	r1, #0
 8002608:	4b37      	ldr	r3, [pc, #220]	; (80026e8 <updateButtons+0x2f8>)
 800260a:	789b      	ldrb	r3, [r3, #2]
 800260c:	b25a      	sxtb	r2, r3
 800260e:	b24b      	sxtb	r3, r1
 8002610:	4313      	orrs	r3, r2
 8002612:	b25b      	sxtb	r3, r3
 8002614:	b2da      	uxtb	r2, r3
 8002616:	4b34      	ldr	r3, [pc, #208]	; (80026e8 <updateButtons+0x2f8>)
 8002618:	709a      	strb	r2, [r3, #2]
	dataToSend[2] |= !HAL_GPIO_ReadPin(BT_LB_GPIO_Port, BT_LB_Pin) << 2;
 800261a:	2108      	movs	r1, #8
 800261c:	4834      	ldr	r0, [pc, #208]	; (80026f0 <updateButtons+0x300>)
 800261e:	f003 fc65 	bl	8005eec <HAL_GPIO_ReadPin>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d101      	bne.n	800262c <updateButtons+0x23c>
 8002628:	2104      	movs	r1, #4
 800262a:	e000      	b.n	800262e <updateButtons+0x23e>
 800262c:	2100      	movs	r1, #0
 800262e:	4b2e      	ldr	r3, [pc, #184]	; (80026e8 <updateButtons+0x2f8>)
 8002630:	789b      	ldrb	r3, [r3, #2]
 8002632:	b25a      	sxtb	r2, r3
 8002634:	b24b      	sxtb	r3, r1
 8002636:	4313      	orrs	r3, r2
 8002638:	b25b      	sxtb	r3, r3
 800263a:	b2da      	uxtb	r2, r3
 800263c:	4b2a      	ldr	r3, [pc, #168]	; (80026e8 <updateButtons+0x2f8>)
 800263e:	709a      	strb	r2, [r3, #2]
	dataToSend[2] |= !HAL_GPIO_ReadPin(BT_LD_GPIO_Port, BT_LD_Pin) << 3;
 8002640:	2102      	movs	r1, #2
 8002642:	482b      	ldr	r0, [pc, #172]	; (80026f0 <updateButtons+0x300>)
 8002644:	f003 fc52 	bl	8005eec <HAL_GPIO_ReadPin>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <updateButtons+0x262>
 800264e:	2108      	movs	r1, #8
 8002650:	e000      	b.n	8002654 <updateButtons+0x264>
 8002652:	2100      	movs	r1, #0
 8002654:	4b24      	ldr	r3, [pc, #144]	; (80026e8 <updateButtons+0x2f8>)
 8002656:	789b      	ldrb	r3, [r3, #2]
 8002658:	b25a      	sxtb	r2, r3
 800265a:	b24b      	sxtb	r3, r1
 800265c:	4313      	orrs	r3, r2
 800265e:	b25b      	sxtb	r3, r3
 8002660:	b2da      	uxtb	r2, r3
 8002662:	4b21      	ldr	r3, [pc, #132]	; (80026e8 <updateButtons+0x2f8>)
 8002664:	709a      	strb	r2, [r3, #2]
	//dataToSend[2] |= (readStart() & 1) << 4;
	//dataToSend[2] |= (readBack()  & 1) << 5;
	//dataToSend[2] |= (Val[1]  & 1) << 6;
	//dataToSend[2] |= (readRS() & 1) << 7;
	// btns |y|, |x|, |b|, |a|, _, _, |rb|, |lb|
	dataToSend[3] = 0;
 8002666:	4b20      	ldr	r3, [pc, #128]	; (80026e8 <updateButtons+0x2f8>)
 8002668:	2200      	movs	r2, #0
 800266a:	70da      	strb	r2, [r3, #3]
	dataToSend[3] |= !HAL_GPIO_ReadPin(BT_LA_GPIO_Port, BT_LA_Pin)  & 1 << 0;
 800266c:	2104      	movs	r1, #4
 800266e:	4820      	ldr	r0, [pc, #128]	; (80026f0 <updateButtons+0x300>)
 8002670:	f003 fc3c 	bl	8005eec <HAL_GPIO_ReadPin>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	bf0c      	ite	eq
 800267a:	2301      	moveq	r3, #1
 800267c:	2300      	movne	r3, #0
 800267e:	b2db      	uxtb	r3, r3
 8002680:	4619      	mov	r1, r3
 8002682:	4b19      	ldr	r3, [pc, #100]	; (80026e8 <updateButtons+0x2f8>)
 8002684:	78db      	ldrb	r3, [r3, #3]
 8002686:	b25a      	sxtb	r2, r3
 8002688:	b24b      	sxtb	r3, r1
 800268a:	4313      	orrs	r3, r2
 800268c:	b25b      	sxtb	r3, r3
 800268e:	b2da      	uxtb	r2, r3
 8002690:	4b15      	ldr	r3, [pc, #84]	; (80026e8 <updateButtons+0x2f8>)
 8002692:	70da      	strb	r2, [r3, #3]
	dataToSend[3] |= !HAL_GPIO_ReadPin(BT_RA_GPIO_Port, BT_RA_Pin) << 1;
 8002694:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002698:	4815      	ldr	r0, [pc, #84]	; (80026f0 <updateButtons+0x300>)
 800269a:	f003 fc27 	bl	8005eec <HAL_GPIO_ReadPin>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d101      	bne.n	80026a8 <updateButtons+0x2b8>
 80026a4:	2102      	movs	r1, #2
 80026a6:	e000      	b.n	80026aa <updateButtons+0x2ba>
 80026a8:	2100      	movs	r1, #0
 80026aa:	4b0f      	ldr	r3, [pc, #60]	; (80026e8 <updateButtons+0x2f8>)
 80026ac:	78db      	ldrb	r3, [r3, #3]
 80026ae:	b25a      	sxtb	r2, r3
 80026b0:	b24b      	sxtb	r3, r1
 80026b2:	4313      	orrs	r3, r2
 80026b4:	b25b      	sxtb	r3, r3
 80026b6:	b2da      	uxtb	r2, r3
 80026b8:	4b0b      	ldr	r3, [pc, #44]	; (80026e8 <updateButtons+0x2f8>)
 80026ba:	70da      	strb	r2, [r3, #3]
	//dataToSend[3] |= (Val[1] & 1) << 2;
	//dataToSend[3] |= (Val[1] & 1) << 3;
	dataToSend[3] |= !HAL_GPIO_ReadPin(BT_RC_GPIO_Port, BT_RC_Pin) << 4;
 80026bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026c0:	480b      	ldr	r0, [pc, #44]	; (80026f0 <updateButtons+0x300>)
 80026c2:	f003 fc13 	bl	8005eec <HAL_GPIO_ReadPin>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d113      	bne.n	80026f4 <updateButtons+0x304>
 80026cc:	2110      	movs	r1, #16
 80026ce:	e012      	b.n	80026f6 <updateButtons+0x306>
 80026d0:	00000000 	.word	0x00000000
 80026d4:	40dfffc0 	.word	0x40dfffc0
 80026d8:	00000000 	.word	0x00000000
 80026dc:	40affe00 	.word	0x40affe00
 80026e0:	40240000 	.word	0x40240000
 80026e4:	c0e00000 	.word	0xc0e00000
 80026e8:	20000128 	.word	0x20000128
 80026ec:	40010800 	.word	0x40010800
 80026f0:	40010c00 	.word	0x40010c00
 80026f4:	2100      	movs	r1, #0
 80026f6:	4b3f      	ldr	r3, [pc, #252]	; (80027f4 <updateButtons+0x404>)
 80026f8:	78db      	ldrb	r3, [r3, #3]
 80026fa:	b25a      	sxtb	r2, r3
 80026fc:	b24b      	sxtb	r3, r1
 80026fe:	4313      	orrs	r3, r2
 8002700:	b25b      	sxtb	r3, r3
 8002702:	b2da      	uxtb	r2, r3
 8002704:	4b3b      	ldr	r3, [pc, #236]	; (80027f4 <updateButtons+0x404>)
 8002706:	70da      	strb	r2, [r3, #3]
	dataToSend[3] |= !HAL_GPIO_ReadPin(BT_RB_GPIO_Port, BT_RB_Pin) << 5;
 8002708:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800270c:	483a      	ldr	r0, [pc, #232]	; (80027f8 <updateButtons+0x408>)
 800270e:	f003 fbed 	bl	8005eec <HAL_GPIO_ReadPin>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d101      	bne.n	800271c <updateButtons+0x32c>
 8002718:	2120      	movs	r1, #32
 800271a:	e000      	b.n	800271e <updateButtons+0x32e>
 800271c:	2100      	movs	r1, #0
 800271e:	4b35      	ldr	r3, [pc, #212]	; (80027f4 <updateButtons+0x404>)
 8002720:	78db      	ldrb	r3, [r3, #3]
 8002722:	b25a      	sxtb	r2, r3
 8002724:	b24b      	sxtb	r3, r1
 8002726:	4313      	orrs	r3, r2
 8002728:	b25b      	sxtb	r3, r3
 800272a:	b2da      	uxtb	r2, r3
 800272c:	4b31      	ldr	r3, [pc, #196]	; (80027f4 <updateButtons+0x404>)
 800272e:	70da      	strb	r2, [r3, #3]
	dataToSend[3] |= !HAL_GPIO_ReadPin(BT_RD_GPIO_Port, BT_RD_Pin) << 6;
 8002730:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002734:	4831      	ldr	r0, [pc, #196]	; (80027fc <updateButtons+0x40c>)
 8002736:	f003 fbd9 	bl	8005eec <HAL_GPIO_ReadPin>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d101      	bne.n	8002744 <updateButtons+0x354>
 8002740:	2140      	movs	r1, #64	; 0x40
 8002742:	e000      	b.n	8002746 <updateButtons+0x356>
 8002744:	2100      	movs	r1, #0
 8002746:	4b2b      	ldr	r3, [pc, #172]	; (80027f4 <updateButtons+0x404>)
 8002748:	78db      	ldrb	r3, [r3, #3]
 800274a:	b25a      	sxtb	r2, r3
 800274c:	b24b      	sxtb	r3, r1
 800274e:	4313      	orrs	r3, r2
 8002750:	b25b      	sxtb	r3, r3
 8002752:	b2da      	uxtb	r2, r3
 8002754:	4b27      	ldr	r3, [pc, #156]	; (80027f4 <updateButtons+0x404>)
 8002756:	70da      	strb	r2, [r3, #3]
	dataToSend[3] |= !HAL_GPIO_ReadPin(BT_RS_GPIO_Port, BT_RS_Pin) << 7;
 8002758:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800275c:	4826      	ldr	r0, [pc, #152]	; (80027f8 <updateButtons+0x408>)
 800275e:	f003 fbc5 	bl	8005eec <HAL_GPIO_ReadPin>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d101      	bne.n	800276c <updateButtons+0x37c>
 8002768:	2180      	movs	r1, #128	; 0x80
 800276a:	e000      	b.n	800276e <updateButtons+0x37e>
 800276c:	2100      	movs	r1, #0
 800276e:	4b21      	ldr	r3, [pc, #132]	; (80027f4 <updateButtons+0x404>)
 8002770:	78db      	ldrb	r3, [r3, #3]
 8002772:	b25a      	sxtb	r2, r3
 8002774:	b24b      	sxtb	r3, r1
 8002776:	4313      	orrs	r3, r2
 8002778:	b25b      	sxtb	r3, r3
 800277a:	b2da      	uxtb	r2, r3
 800277c:	4b1d      	ldr	r3, [pc, #116]	; (80027f4 <updateButtons+0x404>)
 800277e:	70da      	strb	r2, [r3, #3]
	// left & right triggers
	dataToSend[4] = 0; //left
 8002780:	4b1c      	ldr	r3, [pc, #112]	; (80027f4 <updateButtons+0x404>)
 8002782:	2200      	movs	r2, #0
 8002784:	711a      	strb	r2, [r3, #4]
	dataToSend[5] = 0; //right
 8002786:	4b1b      	ldr	r3, [pc, #108]	; (80027f4 <updateButtons+0x404>)
 8002788:	2200      	movs	r2, #0
 800278a:	715a      	strb	r2, [r3, #5]
	//lx
	dataToSend[6] = Val[3] & 0xFF;
 800278c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002790:	b2da      	uxtb	r2, r3
 8002792:	4b18      	ldr	r3, [pc, #96]	; (80027f4 <updateButtons+0x404>)
 8002794:	719a      	strb	r2, [r3, #6]
	dataToSend[7] = (Val[3] >> 8) & 0xFF;
 8002796:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800279a:	121b      	asrs	r3, r3, #8
 800279c:	b21b      	sxth	r3, r3
 800279e:	b2da      	uxtb	r2, r3
 80027a0:	4b14      	ldr	r3, [pc, #80]	; (80027f4 <updateButtons+0x404>)
 80027a2:	71da      	strb	r2, [r3, #7]
	// ly
	dataToSend[8] = Val[2] & 0xFF;
 80027a4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80027a8:	b2da      	uxtb	r2, r3
 80027aa:	4b12      	ldr	r3, [pc, #72]	; (80027f4 <updateButtons+0x404>)
 80027ac:	721a      	strb	r2, [r3, #8]
	dataToSend[9] = (Val[2] >> 8) & 0xFF;
 80027ae:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80027b2:	121b      	asrs	r3, r3, #8
 80027b4:	b21b      	sxth	r3, r3
 80027b6:	b2da      	uxtb	r2, r3
 80027b8:	4b0e      	ldr	r3, [pc, #56]	; (80027f4 <updateButtons+0x404>)
 80027ba:	725a      	strb	r2, [r3, #9]
	// rx
	dataToSend[10] = Adc[1] & 0xFF;
 80027bc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80027c0:	b2da      	uxtb	r2, r3
 80027c2:	4b0c      	ldr	r3, [pc, #48]	; (80027f4 <updateButtons+0x404>)
 80027c4:	729a      	strb	r2, [r3, #10]
	dataToSend[11] = (Adc[1] >> 8) & 0xFF;
 80027c6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80027ca:	121b      	asrs	r3, r3, #8
 80027cc:	b21b      	sxth	r3, r3
 80027ce:	b2da      	uxtb	r2, r3
 80027d0:	4b08      	ldr	r3, [pc, #32]	; (80027f4 <updateButtons+0x404>)
 80027d2:	72da      	strb	r2, [r3, #11]
	// ry
	dataToSend[12] = Adc[0] & 0xFF;
 80027d4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80027d8:	b2da      	uxtb	r2, r3
 80027da:	4b06      	ldr	r3, [pc, #24]	; (80027f4 <updateButtons+0x404>)
 80027dc:	731a      	strb	r2, [r3, #12]
	dataToSend[13] = (Adc[0] >> 8) & 0xFF;
 80027de:	f9b7 3000 	ldrsh.w	r3, [r7]
 80027e2:	121b      	asrs	r3, r3, #8
 80027e4:	b21b      	sxth	r3, r3
 80027e6:	b2da      	uxtb	r2, r3
 80027e8:	4b02      	ldr	r3, [pc, #8]	; (80027f4 <updateButtons+0x404>)
 80027ea:	735a      	strb	r2, [r3, #13]
}
 80027ec:	bf00      	nop
 80027ee:	3714      	adds	r7, #20
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027f4:	20000128 	.word	0x20000128
 80027f8:	40010c00 	.word	0x40010c00
 80027fc:	40010800 	.word	0x40010800

08002800 <Serial_Recived>:
        *--s = (bin % 10) + '0';
        bin /= 10;
    }
}

void Serial_Recived(uint8_t* Buf, uint32_t *Len){
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
	switch(Buf[0]){
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	3b30      	subs	r3, #48	; 0x30
 8002810:	2b51      	cmp	r3, #81	; 0x51
 8002812:	f200 8167 	bhi.w	8002ae4 <Serial_Recived+0x2e4>
 8002816:	a201      	add	r2, pc, #4	; (adr r2, 800281c <Serial_Recived+0x1c>)
 8002818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800281c:	08002965 	.word	0x08002965
 8002820:	08002987 	.word	0x08002987
 8002824:	080029a9 	.word	0x080029a9
 8002828:	080029c5 	.word	0x080029c5
 800282c:	08002ae5 	.word	0x08002ae5
 8002830:	08002ae5 	.word	0x08002ae5
 8002834:	08002ae5 	.word	0x08002ae5
 8002838:	08002ae5 	.word	0x08002ae5
 800283c:	08002ae5 	.word	0x08002ae5
 8002840:	08002ae5 	.word	0x08002ae5
 8002844:	08002ae5 	.word	0x08002ae5
 8002848:	08002ae5 	.word	0x08002ae5
 800284c:	08002ae5 	.word	0x08002ae5
 8002850:	08002ae5 	.word	0x08002ae5
 8002854:	08002ae5 	.word	0x08002ae5
 8002858:	08002ae5 	.word	0x08002ae5
 800285c:	08002ae5 	.word	0x08002ae5
 8002860:	08002ae5 	.word	0x08002ae5
 8002864:	08002a95 	.word	0x08002a95
 8002868:	08002ae5 	.word	0x08002ae5
 800286c:	08002aad 	.word	0x08002aad
 8002870:	08002ae5 	.word	0x08002ae5
 8002874:	08002ae5 	.word	0x08002ae5
 8002878:	08002ae5 	.word	0x08002ae5
 800287c:	08002ae5 	.word	0x08002ae5
 8002880:	08002ae5 	.word	0x08002ae5
 8002884:	08002ae5 	.word	0x08002ae5
 8002888:	08002ae5 	.word	0x08002ae5
 800288c:	08002ae5 	.word	0x08002ae5
 8002890:	08002ae5 	.word	0x08002ae5
 8002894:	08002ae5 	.word	0x08002ae5
 8002898:	08002ae5 	.word	0x08002ae5
 800289c:	08002ae5 	.word	0x08002ae5
 80028a0:	08002ae5 	.word	0x08002ae5
 80028a4:	08002ae5 	.word	0x08002ae5
 80028a8:	08002ae5 	.word	0x08002ae5
 80028ac:	08002ae5 	.word	0x08002ae5
 80028b0:	08002ae5 	.word	0x08002ae5
 80028b4:	08002ae5 	.word	0x08002ae5
 80028b8:	08002ae5 	.word	0x08002ae5
 80028bc:	08002ae5 	.word	0x08002ae5
 80028c0:	08002ae5 	.word	0x08002ae5
 80028c4:	08002ae5 	.word	0x08002ae5
 80028c8:	08002ae5 	.word	0x08002ae5
 80028cc:	08002ae5 	.word	0x08002ae5
 80028d0:	08002ae5 	.word	0x08002ae5
 80028d4:	08002ae5 	.word	0x08002ae5
 80028d8:	08002ae5 	.word	0x08002ae5
 80028dc:	08002ae5 	.word	0x08002ae5
 80028e0:	08002a85 	.word	0x08002a85
 80028e4:	08002a8d 	.word	0x08002a8d
 80028e8:	08002a9d 	.word	0x08002a9d
 80028ec:	08002aa5 	.word	0x08002aa5
 80028f0:	08002ae5 	.word	0x08002ae5
 80028f4:	08002ae5 	.word	0x08002ae5
 80028f8:	08002ae5 	.word	0x08002ae5
 80028fc:	08002ae5 	.word	0x08002ae5
 8002900:	08002ae5 	.word	0x08002ae5
 8002904:	08002ae5 	.word	0x08002ae5
 8002908:	08002ae5 	.word	0x08002ae5
 800290c:	08002ae5 	.word	0x08002ae5
 8002910:	08002ae5 	.word	0x08002ae5
 8002914:	08002ae5 	.word	0x08002ae5
 8002918:	08002ae5 	.word	0x08002ae5
 800291c:	08002ae5 	.word	0x08002ae5
 8002920:	08002ae5 	.word	0x08002ae5
 8002924:	08002ae5 	.word	0x08002ae5
 8002928:	08002ae5 	.word	0x08002ae5
 800292c:	08002ae5 	.word	0x08002ae5
 8002930:	08002ae5 	.word	0x08002ae5
 8002934:	08002ae5 	.word	0x08002ae5
 8002938:	08002ae5 	.word	0x08002ae5
 800293c:	08002ae5 	.word	0x08002ae5
 8002940:	08002ae5 	.word	0x08002ae5
 8002944:	08002ae5 	.word	0x08002ae5
 8002948:	08002ae5 	.word	0x08002ae5
 800294c:	08002ae5 	.word	0x08002ae5
 8002950:	08002ae5 	.word	0x08002ae5
 8002954:	08002ae5 	.word	0x08002ae5
 8002958:	08002ae5 	.word	0x08002ae5
 800295c:	08002ae5 	.word	0x08002ae5
 8002960:	08002ab5 	.word	0x08002ab5
	case '0': {
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8002964:	2201      	movs	r2, #1
 8002966:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800296a:	4873      	ldr	r0, [pc, #460]	; (8002b38 <Serial_Recived+0x338>)
 800296c:	f003 fad5 	bl	8005f1a <HAL_GPIO_WritePin>
		Msg[0] = 'O';
 8002970:	4b72      	ldr	r3, [pc, #456]	; (8002b3c <Serial_Recived+0x33c>)
 8002972:	224f      	movs	r2, #79	; 0x4f
 8002974:	701a      	strb	r2, [r3, #0]
		Msg[1] = 'N';
 8002976:	4b71      	ldr	r3, [pc, #452]	; (8002b3c <Serial_Recived+0x33c>)
 8002978:	224e      	movs	r2, #78	; 0x4e
 800297a:	705a      	strb	r2, [r3, #1]
		Serial_Send(Msg, 2);
 800297c:	2102      	movs	r1, #2
 800297e:	486f      	ldr	r0, [pc, #444]	; (8002b3c <Serial_Recived+0x33c>)
 8002980:	f7ff fb64 	bl	800204c <Serial_Send>
		break;
 8002984:	e0d4      	b.n	8002b30 <Serial_Recived+0x330>
	}
	case '1': {
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8002986:	2200      	movs	r2, #0
 8002988:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800298c:	486a      	ldr	r0, [pc, #424]	; (8002b38 <Serial_Recived+0x338>)
 800298e:	f003 fac4 	bl	8005f1a <HAL_GPIO_WritePin>
		Msg[0] = 'O';
 8002992:	4b6a      	ldr	r3, [pc, #424]	; (8002b3c <Serial_Recived+0x33c>)
 8002994:	224f      	movs	r2, #79	; 0x4f
 8002996:	701a      	strb	r2, [r3, #0]
		Msg[1] = 'F';
 8002998:	4b68      	ldr	r3, [pc, #416]	; (8002b3c <Serial_Recived+0x33c>)
 800299a:	2246      	movs	r2, #70	; 0x46
 800299c:	705a      	strb	r2, [r3, #1]
		Serial_Send(Msg, 2);
 800299e:	2102      	movs	r1, #2
 80029a0:	4866      	ldr	r0, [pc, #408]	; (8002b3c <Serial_Recived+0x33c>)
 80029a2:	f7ff fb53 	bl	800204c <Serial_Send>
		break;
 80029a6:	e0c3      	b.n	8002b30 <Serial_Recived+0x330>
	}
	case '2': {
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 80029a8:	2200      	movs	r2, #0
 80029aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80029ae:	4862      	ldr	r0, [pc, #392]	; (8002b38 <Serial_Recived+0x338>)
 80029b0:	f003 fab3 	bl	8005f1a <HAL_GPIO_WritePin>
		Msg[0] = FUNC_ACCEL_GYRO_DATA;
 80029b4:	4b61      	ldr	r3, [pc, #388]	; (8002b3c <Serial_Recived+0x33c>)
 80029b6:	2280      	movs	r2, #128	; 0x80
 80029b8:	701a      	strb	r2, [r3, #0]
		Serial_Send(Msg, 1);
 80029ba:	2101      	movs	r1, #1
 80029bc:	485f      	ldr	r0, [pc, #380]	; (8002b3c <Serial_Recived+0x33c>)
 80029be:	f7ff fb45 	bl	800204c <Serial_Send>
		break;
 80029c2:	e0b5      	b.n	8002b30 <Serial_Recived+0x330>
	}
	case '3': {
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 80029c4:	2200      	movs	r2, #0
 80029c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80029ca:	485b      	ldr	r0, [pc, #364]	; (8002b38 <Serial_Recived+0x338>)
 80029cc:	f003 faa5 	bl	8005f1a <HAL_GPIO_WritePin>
		int16_t Ax = 1024;
 80029d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029d4:	827b      	strh	r3, [r7, #18]
		int16_t Ay = -1024;
 80029d6:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80029da:	823b      	strh	r3, [r7, #16]
		int16_t Az = 32767;
 80029dc:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80029e0:	81fb      	strh	r3, [r7, #14]
		int16_t Gx = -32767;
 80029e2:	f248 0301 	movw	r3, #32769	; 0x8001
 80029e6:	81bb      	strh	r3, [r7, #12]
		int16_t Gy = 255;
 80029e8:	23ff      	movs	r3, #255	; 0xff
 80029ea:	817b      	strh	r3, [r7, #10]
		int16_t Gz = -255;
 80029ec:	f64f 7301 	movw	r3, #65281	; 0xff01
 80029f0:	813b      	strh	r3, [r7, #8]
		Msg[0] = FUNC_ACCEL_GYRO_DATA;
 80029f2:	4b52      	ldr	r3, [pc, #328]	; (8002b3c <Serial_Recived+0x33c>)
 80029f4:	2280      	movs	r2, #128	; 0x80
 80029f6:	701a      	strb	r2, [r3, #0]
		Msg[1] = (char)Ax;
 80029f8:	8a7b      	ldrh	r3, [r7, #18]
 80029fa:	b2da      	uxtb	r2, r3
 80029fc:	4b4f      	ldr	r3, [pc, #316]	; (8002b3c <Serial_Recived+0x33c>)
 80029fe:	705a      	strb	r2, [r3, #1]
		Msg[2] = (char)(Ax >> 8);
 8002a00:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002a04:	121b      	asrs	r3, r3, #8
 8002a06:	b21b      	sxth	r3, r3
 8002a08:	b2da      	uxtb	r2, r3
 8002a0a:	4b4c      	ldr	r3, [pc, #304]	; (8002b3c <Serial_Recived+0x33c>)
 8002a0c:	709a      	strb	r2, [r3, #2]
		Msg[3] = (char)Ay;
 8002a0e:	8a3b      	ldrh	r3, [r7, #16]
 8002a10:	b2da      	uxtb	r2, r3
 8002a12:	4b4a      	ldr	r3, [pc, #296]	; (8002b3c <Serial_Recived+0x33c>)
 8002a14:	70da      	strb	r2, [r3, #3]
		Msg[4] = (char)(Ay >> 8);
 8002a16:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002a1a:	121b      	asrs	r3, r3, #8
 8002a1c:	b21b      	sxth	r3, r3
 8002a1e:	b2da      	uxtb	r2, r3
 8002a20:	4b46      	ldr	r3, [pc, #280]	; (8002b3c <Serial_Recived+0x33c>)
 8002a22:	711a      	strb	r2, [r3, #4]
		Msg[5] = (char)Az;
 8002a24:	89fb      	ldrh	r3, [r7, #14]
 8002a26:	b2da      	uxtb	r2, r3
 8002a28:	4b44      	ldr	r3, [pc, #272]	; (8002b3c <Serial_Recived+0x33c>)
 8002a2a:	715a      	strb	r2, [r3, #5]
		Msg[6] = (char)(Az >> 8);
 8002a2c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a30:	121b      	asrs	r3, r3, #8
 8002a32:	b21b      	sxth	r3, r3
 8002a34:	b2da      	uxtb	r2, r3
 8002a36:	4b41      	ldr	r3, [pc, #260]	; (8002b3c <Serial_Recived+0x33c>)
 8002a38:	719a      	strb	r2, [r3, #6]
		Msg[7] = (char)Gx;
 8002a3a:	89bb      	ldrh	r3, [r7, #12]
 8002a3c:	b2da      	uxtb	r2, r3
 8002a3e:	4b3f      	ldr	r3, [pc, #252]	; (8002b3c <Serial_Recived+0x33c>)
 8002a40:	71da      	strb	r2, [r3, #7]
		Msg[8] = (char)(Gx >> 8);
 8002a42:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002a46:	121b      	asrs	r3, r3, #8
 8002a48:	b21b      	sxth	r3, r3
 8002a4a:	b2da      	uxtb	r2, r3
 8002a4c:	4b3b      	ldr	r3, [pc, #236]	; (8002b3c <Serial_Recived+0x33c>)
 8002a4e:	721a      	strb	r2, [r3, #8]
		Msg[9] = (char)Gy;
 8002a50:	897b      	ldrh	r3, [r7, #10]
 8002a52:	b2da      	uxtb	r2, r3
 8002a54:	4b39      	ldr	r3, [pc, #228]	; (8002b3c <Serial_Recived+0x33c>)
 8002a56:	725a      	strb	r2, [r3, #9]
		Msg[10] = (char)(Gy >> 8);
 8002a58:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002a5c:	121b      	asrs	r3, r3, #8
 8002a5e:	b21b      	sxth	r3, r3
 8002a60:	b2da      	uxtb	r2, r3
 8002a62:	4b36      	ldr	r3, [pc, #216]	; (8002b3c <Serial_Recived+0x33c>)
 8002a64:	729a      	strb	r2, [r3, #10]
		Msg[11] = (char)Gz;
 8002a66:	893b      	ldrh	r3, [r7, #8]
 8002a68:	b2da      	uxtb	r2, r3
 8002a6a:	4b34      	ldr	r3, [pc, #208]	; (8002b3c <Serial_Recived+0x33c>)
 8002a6c:	72da      	strb	r2, [r3, #11]
		Msg[12] = (char)(Gz >> 8);
 8002a6e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002a72:	121b      	asrs	r3, r3, #8
 8002a74:	b21b      	sxth	r3, r3
 8002a76:	b2da      	uxtb	r2, r3
 8002a78:	4b30      	ldr	r3, [pc, #192]	; (8002b3c <Serial_Recived+0x33c>)
 8002a7a:	731a      	strb	r2, [r3, #12]

		Serial_Send(Msg, 13);
 8002a7c:	210d      	movs	r1, #13
 8002a7e:	482f      	ldr	r0, [pc, #188]	; (8002b3c <Serial_Recived+0x33c>)
 8002a80:	f7ff fae4 	bl	800204c <Serial_Send>
	}
	case 'a': {
		Flag[0] = 1;
 8002a84:	4b2e      	ldr	r3, [pc, #184]	; (8002b40 <Serial_Recived+0x340>)
 8002a86:	2201      	movs	r2, #1
 8002a88:	701a      	strb	r2, [r3, #0]
		break;
 8002a8a:	e051      	b.n	8002b30 <Serial_Recived+0x330>
	}
	case 'b': {
		Flag[1] = 1;
 8002a8c:	4b2c      	ldr	r3, [pc, #176]	; (8002b40 <Serial_Recived+0x340>)
 8002a8e:	2201      	movs	r2, #1
 8002a90:	705a      	strb	r2, [r3, #1]
		break;
 8002a92:	e04d      	b.n	8002b30 <Serial_Recived+0x330>
	}
	case 'B': {
		Flag[1] = 0;
 8002a94:	4b2a      	ldr	r3, [pc, #168]	; (8002b40 <Serial_Recived+0x340>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	705a      	strb	r2, [r3, #1]
		break;
 8002a9a:	e049      	b.n	8002b30 <Serial_Recived+0x330>
	}
	case 'c': {
		Flag[2] = 1;
 8002a9c:	4b28      	ldr	r3, [pc, #160]	; (8002b40 <Serial_Recived+0x340>)
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	709a      	strb	r2, [r3, #2]
		break;
 8002aa2:	e045      	b.n	8002b30 <Serial_Recived+0x330>
	}
	case 'd': {
		Flag[3] = 1;
 8002aa4:	4b26      	ldr	r3, [pc, #152]	; (8002b40 <Serial_Recived+0x340>)
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	70da      	strb	r2, [r3, #3]
		break;
 8002aaa:	e041      	b.n	8002b30 <Serial_Recived+0x330>
	}
	case 'D': {
		Flag[3] = 0;
 8002aac:	4b24      	ldr	r3, [pc, #144]	; (8002b40 <Serial_Recived+0x340>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	70da      	strb	r2, [r3, #3]
		break;
 8002ab2:	e03d      	b.n	8002b30 <Serial_Recived+0x330>
	}
	case FUNC_JOYSTICK_DATA: {
		//Flag[4] = 1;
		//BadFunc = 0;
		// Funkcja FUNC_JOYSTICK_DATA
		RF_TxData[0] = FUNC_JOYSTICK_DATA;
 8002ab4:	4b23      	ldr	r3, [pc, #140]	; (8002b44 <Serial_Recived+0x344>)
 8002ab6:	2281      	movs	r2, #129	; 0x81
 8002ab8:	701a      	strb	r2, [r3, #0]
		RF_TxData[1] = Buf[1];
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	3301      	adds	r3, #1
 8002abe:	781a      	ldrb	r2, [r3, #0]
 8002ac0:	4b20      	ldr	r3, [pc, #128]	; (8002b44 <Serial_Recived+0x344>)
 8002ac2:	705a      	strb	r2, [r3, #1]
		RF_TxData[2] = Buf[2];
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	3302      	adds	r3, #2
 8002ac8:	781a      	ldrb	r2, [r3, #0]
 8002aca:	4b1e      	ldr	r3, [pc, #120]	; (8002b44 <Serial_Recived+0x344>)
 8002acc:	709a      	strb	r2, [r3, #2]
		RF_TxData[3] = Buf[3];
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	3303      	adds	r3, #3
 8002ad2:	781a      	ldrb	r2, [r3, #0]
 8002ad4:	4b1b      	ldr	r3, [pc, #108]	; (8002b44 <Serial_Recived+0x344>)
 8002ad6:	70da      	strb	r2, [r3, #3]
		RF_TxData[4] = Buf[4];
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	3304      	adds	r3, #4
 8002adc:	781a      	ldrb	r2, [r3, #0]
 8002ade:	4b19      	ldr	r3, [pc, #100]	; (8002b44 <Serial_Recived+0x344>)
 8002ae0:	711a      	strb	r2, [r3, #4]
		break;
 8002ae2:	e025      	b.n	8002b30 <Serial_Recived+0x330>
	}
	default: {
		if (Buf[0] >= 128){
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	b25b      	sxtb	r3, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	da18      	bge.n	8002b20 <Serial_Recived+0x320>
			RF_TxData[0] = Buf[0];
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	781a      	ldrb	r2, [r3, #0]
 8002af2:	4b14      	ldr	r3, [pc, #80]	; (8002b44 <Serial_Recived+0x344>)
 8002af4:	701a      	strb	r2, [r3, #0]
			for (int a = 1; a < *Len; a ++){
 8002af6:	2301      	movs	r3, #1
 8002af8:	617b      	str	r3, [r7, #20]
 8002afa:	e00b      	b.n	8002b14 <Serial_Recived+0x314>
				RF_TxData[a] = Buf[a];
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	4413      	add	r3, r2
 8002b02:	7819      	ldrb	r1, [r3, #0]
 8002b04:	4a0f      	ldr	r2, [pc, #60]	; (8002b44 <Serial_Recived+0x344>)
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	4413      	add	r3, r2
 8002b0a:	460a      	mov	r2, r1
 8002b0c:	701a      	strb	r2, [r3, #0]
			for (int a = 1; a < *Len; a ++){
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	3301      	adds	r3, #1
 8002b12:	617b      	str	r3, [r7, #20]
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d8ee      	bhi.n	8002afc <Serial_Recived+0x2fc>
			Flag[4] = 1;
			BadFunc = Buf[0];
		}
	}
	}
}
 8002b1e:	e007      	b.n	8002b30 <Serial_Recived+0x330>
			Flag[4] = 1;
 8002b20:	4b07      	ldr	r3, [pc, #28]	; (8002b40 <Serial_Recived+0x340>)
 8002b22:	2201      	movs	r2, #1
 8002b24:	711a      	strb	r2, [r3, #4]
			BadFunc = Buf[0];
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	781a      	ldrb	r2, [r3, #0]
 8002b2a:	4b07      	ldr	r3, [pc, #28]	; (8002b48 <Serial_Recived+0x348>)
 8002b2c:	701a      	strb	r2, [r3, #0]
}
 8002b2e:	e7ff      	b.n	8002b30 <Serial_Recived+0x330>
 8002b30:	bf00      	nop
 8002b32:	3718      	adds	r7, #24
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	40011000 	.word	0x40011000
 8002b3c:	20000bb0 	.word	0x20000bb0
 8002b40:	20000570 	.word	0x20000570
 8002b44:	20000cb0 	.word	0x20000cb0
 8002b48:	20000e0c 	.word	0x20000e0c
 8002b4c:	00000000 	.word	0x00000000

08002b50 <Update>:

// Fast = 0 -> wykona sie rysowanie na ekranie
// Fast = 1 -> Wykona sie tylko sprawdzenie napiecia beteri
void Update(int Fast){
 8002b50:	b590      	push	{r4, r7, lr}
 8002b52:	b08d      	sub	sp, #52	; 0x34
 8002b54:	af06      	add	r7, sp, #24
 8002b56:	6078      	str	r0, [r7, #4]
	if (HAL_GPIO_ReadPin(VIN_GPIO_Port, VIN_Pin)){
 8002b58:	2110      	movs	r1, #16
 8002b5a:	4863      	ldr	r0, [pc, #396]	; (8002ce8 <Update+0x198>)
 8002b5c:	f003 f9c6 	bl	8005eec <HAL_GPIO_ReadPin>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d015      	beq.n	8002b92 <Update+0x42>
		// Zasilanie na USB
		HAL_GPIO_WritePin(ON_GPIO_Port, ON_Pin, 0);
 8002b66:	2200      	movs	r2, #0
 8002b68:	2120      	movs	r1, #32
 8002b6a:	485f      	ldr	r0, [pc, #380]	; (8002ce8 <Update+0x198>)
 8002b6c:	f003 f9d5 	bl	8005f1a <HAL_GPIO_WritePin>
		if (HAL_GPIO_ReadPin(BT_POWER_GPIO_Port, BT_POWER_Pin)){
 8002b70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b74:	485c      	ldr	r0, [pc, #368]	; (8002ce8 <Update+0x198>)
 8002b76:	f003 f9b9 	bl	8005eec <HAL_GPIO_ReadPin>
			// Mosfet i tak przeskoczy, pzrerwa w zasilaniu zresetuje procka
		}
		// Ikona zasilania z usb
		if (Fast < 1){
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	f300 80a2 	bgt.w	8002cc6 <Update+0x176>
			SSD1306_DrawIcon16x16(0,48, plug_icon16x16);
 8002b82:	4a5a      	ldr	r2, [pc, #360]	; (8002cec <Update+0x19c>)
 8002b84:	2130      	movs	r1, #48	; 0x30
 8002b86:	2000      	movs	r0, #0
 8002b88:	f001 fcde 	bl	8004548 <SSD1306_DrawIcon16x16>
			SSD1306_UpdateScreen();
 8002b8c:	f001 fc38 	bl	8004400 <SSD1306_UpdateScreen>
 8002b90:	e099      	b.n	8002cc6 <Update+0x176>
		}
	} else {
		// Zasilanie na Baterii
		if (HAL_GPIO_ReadPin(BT_POWER_GPIO_Port, BT_POWER_Pin)){
 8002b92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b96:	4854      	ldr	r0, [pc, #336]	; (8002ce8 <Update+0x198>)
 8002b98:	f003 f9a8 	bl	8005eec <HAL_GPIO_ReadPin>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d01b      	beq.n	8002bda <Update+0x8a>
			// Wyłączyć
			SSD1306_Fill(0);
 8002ba2:	2000      	movs	r0, #0
 8002ba4:	f001 fc5a 	bl	800445c <SSD1306_Fill>
			SSD1306_GotoXY(20, 20);
 8002ba8:	2114      	movs	r1, #20
 8002baa:	2014      	movs	r0, #20
 8002bac:	f001 fd90 	bl	80046d0 <SSD1306_GotoXY>
			SSD1306_Puts("Byo :D", &Font_16x26, 1);
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	494f      	ldr	r1, [pc, #316]	; (8002cf0 <Update+0x1a0>)
 8002bb4:	484f      	ldr	r0, [pc, #316]	; (8002cf4 <Update+0x1a4>)
 8002bb6:	f001 fe21 	bl	80047fc <SSD1306_Puts>
			SSD1306_UpdateScreen();
 8002bba:	f001 fc21 	bl	8004400 <SSD1306_UpdateScreen>
			HAL_Delay(1000);
 8002bbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002bc2:	f002 fa11 	bl	8004fe8 <HAL_Delay>
			HAL_GPIO_WritePin(ON_GPIO_Port, ON_Pin, 0);
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	2120      	movs	r1, #32
 8002bca:	4847      	ldr	r0, [pc, #284]	; (8002ce8 <Update+0x198>)
 8002bcc:	f003 f9a5 	bl	8005f1a <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 8002bd0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002bd4:	f002 fa08 	bl	8004fe8 <HAL_Delay>
 8002bd8:	e075      	b.n	8002cc6 <Update+0x176>
		} else {
			// Ikona naładowania
			HAL_GPIO_WritePin(ON_GPIO_Port, ON_Pin, 1);
 8002bda:	2201      	movs	r2, #1
 8002bdc:	2120      	movs	r1, #32
 8002bde:	4842      	ldr	r0, [pc, #264]	; (8002ce8 <Update+0x198>)
 8002be0:	f003 f99b 	bl	8005f1a <HAL_GPIO_WritePin>
			int16_t Val[3];
			AdcRead(Val);
 8002be4:	f107 030c 	add.w	r3, r7, #12
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7ff fbc1 	bl	8002370 <AdcRead>
			int bat = MapValue(Val[2], 0,4095 , 0, 1000);
 8002bee:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7fd fc06 	bl	8000404 <__aeabi_i2d>
 8002bf8:	f04f 0300 	mov.w	r3, #0
 8002bfc:	4c3e      	ldr	r4, [pc, #248]	; (8002cf8 <Update+0x1a8>)
 8002bfe:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8002c02:	f04f 0300 	mov.w	r3, #0
 8002c06:	f04f 0400 	mov.w	r4, #0
 8002c0a:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8002c0e:	a434      	add	r4, pc, #208	; (adr r4, 8002ce0 <Update+0x190>)
 8002c10:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002c14:	e9cd 3400 	strd	r3, r4, [sp]
 8002c18:	f04f 0200 	mov.w	r2, #0
 8002c1c:	f04f 0300 	mov.w	r3, #0
 8002c20:	f7ff faf2 	bl	8002208 <MapValue>
 8002c24:	4603      	mov	r3, r0
 8002c26:	460c      	mov	r4, r1
 8002c28:	4618      	mov	r0, r3
 8002c2a:	4621      	mov	r1, r4
 8002c2c:	f7fd feee 	bl	8000a0c <__aeabi_d2iz>
 8002c30:	4603      	mov	r3, r0
 8002c32:	617b      	str	r3, [r7, #20]
			if (Fast < 1){
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	dc26      	bgt.n	8002c88 <Update+0x138>
				if (bat > 390) {
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	f5b3 7fc3 	cmp.w	r3, #390	; 0x186
 8002c40:	dd05      	ble.n	8002c4e <Update+0xfe>
					SSD1306_DrawIcon16x16(0,48, bat3_icon16x16);
 8002c42:	4a2e      	ldr	r2, [pc, #184]	; (8002cfc <Update+0x1ac>)
 8002c44:	2130      	movs	r1, #48	; 0x30
 8002c46:	2000      	movs	r0, #0
 8002c48:	f001 fc7e 	bl	8004548 <SSD1306_DrawIcon16x16>
 8002c4c:	e01c      	b.n	8002c88 <Update+0x138>
				} else if (bat > 360) {
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8002c54:	dd05      	ble.n	8002c62 <Update+0x112>
					SSD1306_DrawIcon16x16(0,48, bat2_icon16x16);
 8002c56:	4a2a      	ldr	r2, [pc, #168]	; (8002d00 <Update+0x1b0>)
 8002c58:	2130      	movs	r1, #48	; 0x30
 8002c5a:	2000      	movs	r0, #0
 8002c5c:	f001 fc74 	bl	8004548 <SSD1306_DrawIcon16x16>
 8002c60:	e012      	b.n	8002c88 <Update+0x138>
				} else if (bat > 330) {
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 8002c68:	dd05      	ble.n	8002c76 <Update+0x126>
					SSD1306_DrawIcon16x16(0,48, bat1_icon16x16);
 8002c6a:	4a26      	ldr	r2, [pc, #152]	; (8002d04 <Update+0x1b4>)
 8002c6c:	2130      	movs	r1, #48	; 0x30
 8002c6e:	2000      	movs	r0, #0
 8002c70:	f001 fc6a 	bl	8004548 <SSD1306_DrawIcon16x16>
 8002c74:	e008      	b.n	8002c88 <Update+0x138>
				} else if (bat > 300) {
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002c7c:	dd04      	ble.n	8002c88 <Update+0x138>
					SSD1306_DrawIcon16x16(0,48, bat0_icon16x16);
 8002c7e:	4a22      	ldr	r2, [pc, #136]	; (8002d08 <Update+0x1b8>)
 8002c80:	2130      	movs	r1, #48	; 0x30
 8002c82:	2000      	movs	r0, #0
 8002c84:	f001 fc60 	bl	8004548 <SSD1306_DrawIcon16x16>
				}
			}
			if (bat <= 300){
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002c8e:	dc1a      	bgt.n	8002cc6 <Update+0x176>
				// Bateria rozładowana, wyłączenie
				SSD1306_Fill(0);
 8002c90:	2000      	movs	r0, #0
 8002c92:	f001 fbe3 	bl	800445c <SSD1306_Fill>
				SSD1306_GotoXY(20, 20);
 8002c96:	2114      	movs	r1, #20
 8002c98:	2014      	movs	r0, #20
 8002c9a:	f001 fd19 	bl	80046d0 <SSD1306_GotoXY>
				SSD1306_Puts("Battery", &Font_16x26, 1);
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	4913      	ldr	r1, [pc, #76]	; (8002cf0 <Update+0x1a0>)
 8002ca2:	481a      	ldr	r0, [pc, #104]	; (8002d0c <Update+0x1bc>)
 8002ca4:	f001 fdaa 	bl	80047fc <SSD1306_Puts>
				SSD1306_GotoXY(20, 40);
 8002ca8:	2128      	movs	r1, #40	; 0x28
 8002caa:	2014      	movs	r0, #20
 8002cac:	f001 fd10 	bl	80046d0 <SSD1306_GotoXY>
				SSD1306_Puts("is flat", &Font_16x26, 1);
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	490f      	ldr	r1, [pc, #60]	; (8002cf0 <Update+0x1a0>)
 8002cb4:	4816      	ldr	r0, [pc, #88]	; (8002d10 <Update+0x1c0>)
 8002cb6:	f001 fda1 	bl	80047fc <SSD1306_Puts>
				SSD1306_UpdateScreen();
 8002cba:	f001 fba1 	bl	8004400 <SSD1306_UpdateScreen>
				HAL_Delay(1000);
 8002cbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002cc2:	f002 f991 	bl	8004fe8 <HAL_Delay>
				//HAL_Delay(3000);
			}
			//SSD1306_UpdateScreen();
		}
	}
	if (Fast < 1){
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	dc04      	bgt.n	8002cd6 <Update+0x186>
		SSD1306_UpdateScreen();
 8002ccc:	f001 fb98 	bl	8004400 <SSD1306_UpdateScreen>
		SSD1306_Fill(0);
 8002cd0:	2000      	movs	r0, #0
 8002cd2:	f001 fbc3 	bl	800445c <SSD1306_Fill>
	}
}
 8002cd6:	bf00      	nop
 8002cd8:	371c      	adds	r7, #28
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd90      	pop	{r4, r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	00000000 	.word	0x00000000
 8002ce4:	40affe00 	.word	0x40affe00
 8002ce8:	40010c00 	.word	0x40010c00
 8002cec:	200000b8 	.word	0x200000b8
 8002cf0:	20000010 	.word	0x20000010
 8002cf4:	0800df84 	.word	0x0800df84
 8002cf8:	408f4000 	.word	0x408f4000
 8002cfc:	20000098 	.word	0x20000098
 8002d00:	20000078 	.word	0x20000078
 8002d04:	20000058 	.word	0x20000058
 8002d08:	20000038 	.word	0x20000038
 8002d0c:	0800df8c 	.word	0x0800df8c
 8002d10:	0800df94 	.word	0x0800df94

08002d14 <Begin>:

void Begin(){
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af02      	add	r7, sp, #8
	SSD1306_Fill(0);
 8002d1a:	2000      	movs	r0, #0
 8002d1c:	f001 fb9e 	bl	800445c <SSD1306_Fill>
	SSD1306_DrawBitmap(0, 0, logo_128x64, 128, 64);
 8002d20:	2340      	movs	r3, #64	; 0x40
 8002d22:	9300      	str	r3, [sp, #0]
 8002d24:	2380      	movs	r3, #128	; 0x80
 8002d26:	4a07      	ldr	r2, [pc, #28]	; (8002d44 <Begin+0x30>)
 8002d28:	2100      	movs	r1, #0
 8002d2a:	2000      	movs	r0, #0
 8002d2c:	f001 fc6f 	bl	800460e <SSD1306_DrawBitmap>
	SSD1306_UpdateScreen();
 8002d30:	f001 fb66 	bl	8004400 <SSD1306_UpdateScreen>
	HAL_Delay(1000);
 8002d34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d38:	f002 f956 	bl	8004fe8 <HAL_Delay>
}
 8002d3c:	bf00      	nop
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	08010910 	.word	0x08010910

08002d48 <SelectProgram>:

int SelectProgram(){
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b088      	sub	sp, #32
 8002d4c:	af00      	add	r7, sp, #0
	int s_row = 0;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	61fb      	str	r3, [r7, #28]
	int sel = 0;
 8002d52:	2300      	movs	r3, #0
 8002d54:	61bb      	str	r3, [r7, #24]
	int B = 0;
 8002d56:	2300      	movs	r3, #0
 8002d58:	617b      	str	r3, [r7, #20]
	int D = 0;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	613b      	str	r3, [r7, #16]
	while(1){
		SSD1306_Fill(0);
 8002d5e:	2000      	movs	r0, #0
 8002d60:	f001 fb7c 	bl	800445c <SSD1306_Fill>
		SSD1306_GotoXY(0, 0);
 8002d64:	2100      	movs	r1, #0
 8002d66:	2000      	movs	r0, #0
 8002d68:	f001 fcb2 	bl	80046d0 <SSD1306_GotoXY>
		SSD1306_Puts("Program Sel", &Font_11x18, 1);
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	495f      	ldr	r1, [pc, #380]	; (8002eec <SelectProgram+0x1a4>)
 8002d70:	485f      	ldr	r0, [pc, #380]	; (8002ef0 <SelectProgram+0x1a8>)
 8002d72:	f001 fd43 	bl	80047fc <SSD1306_Puts>
		int start = 0;
 8002d76:	2300      	movs	r3, #0
 8002d78:	60fb      	str	r3, [r7, #12]
		for (int a = 0; a < s_row; a++){
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	60bb      	str	r3, [r7, #8]
 8002d7e:	e009      	b.n	8002d94 <SelectProgram+0x4c>
			start+=Program_length[a];
 8002d80:	4a5c      	ldr	r2, [pc, #368]	; (8002ef4 <SelectProgram+0x1ac>)
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	60fb      	str	r3, [r7, #12]
		for (int a = 0; a < s_row; a++){
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	3301      	adds	r3, #1
 8002d92:	60bb      	str	r3, [r7, #8]
 8002d94:	68ba      	ldr	r2, [r7, #8]
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	dbf1      	blt.n	8002d80 <SelectProgram+0x38>
		}
		for (int num = 0; num < 3; num++){
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	607b      	str	r3, [r7, #4]
 8002da0:	e036      	b.n	8002e10 <SelectProgram+0xc8>
			if (num + s_row > Program_Count-1) break;
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	441a      	add	r2, r3
 8002da8:	4b53      	ldr	r3, [pc, #332]	; (8002ef8 <SelectProgram+0x1b0>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	3b01      	subs	r3, #1
 8002dae:	429a      	cmp	r2, r3
 8002db0:	dc32      	bgt.n	8002e18 <SelectProgram+0xd0>
			SSD1306_GotoXY(20, 20 + num*16);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	011b      	lsls	r3, r3, #4
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	3314      	adds	r3, #20
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	2014      	movs	r0, #20
 8002dc2:	f001 fc85 	bl	80046d0 <SSD1306_GotoXY>
			for (int c = 0; c < Program_length[s_row+num]; c++){
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	603b      	str	r3, [r7, #0]
 8002dca:	e00c      	b.n	8002de6 <SelectProgram+0x9e>
				SSD1306_Putc(Program_name[c + start], &Font_7x10, 1);
 8002dcc:	683a      	ldr	r2, [r7, #0]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	4a4a      	ldr	r2, [pc, #296]	; (8002efc <SelectProgram+0x1b4>)
 8002dd4:	5cd3      	ldrb	r3, [r2, r3]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	4949      	ldr	r1, [pc, #292]	; (8002f00 <SelectProgram+0x1b8>)
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f001 fc8e 	bl	80046fc <SSD1306_Putc>
			for (int c = 0; c < Program_length[s_row+num]; c++){
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	3301      	adds	r3, #1
 8002de4:	603b      	str	r3, [r7, #0]
 8002de6:	69fa      	ldr	r2, [r7, #28]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4413      	add	r3, r2
 8002dec:	4a41      	ldr	r2, [pc, #260]	; (8002ef4 <SelectProgram+0x1ac>)
 8002dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002df2:	683a      	ldr	r2, [r7, #0]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	dbe9      	blt.n	8002dcc <SelectProgram+0x84>
			}
			start+=Program_length[num+s_row];
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	4a3d      	ldr	r2, [pc, #244]	; (8002ef4 <SelectProgram+0x1ac>)
 8002e00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	4413      	add	r3, r2
 8002e08:	60fb      	str	r3, [r7, #12]
		for (int num = 0; num < 3; num++){
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	607b      	str	r3, [r7, #4]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	ddc5      	ble.n	8002da2 <SelectProgram+0x5a>
 8002e16:	e000      	b.n	8002e1a <SelectProgram+0xd2>
			if (num + s_row > Program_Count-1) break;
 8002e18:	bf00      	nop
		}
		SSD1306_DrawIcon16x16(0, 20-4 + (sel-s_row)*16, arrow_right_icon16x16);
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	3301      	adds	r3, #1
 8002e22:	011b      	lsls	r3, r3, #4
 8002e24:	4a37      	ldr	r2, [pc, #220]	; (8002f04 <SelectProgram+0x1bc>)
 8002e26:	4619      	mov	r1, r3
 8002e28:	2000      	movs	r0, #0
 8002e2a:	f001 fb8d 	bl	8004548 <SSD1306_DrawIcon16x16>
		SSD1306_UpdateScreen();
 8002e2e:	f001 fae7 	bl	8004400 <SSD1306_UpdateScreen>
		HAL_Delay(100);
 8002e32:	2064      	movs	r0, #100	; 0x64
 8002e34:	f002 f8d8 	bl	8004fe8 <HAL_Delay>
		while(1){
			if (!HAL_GPIO_ReadPin(BT_RD_GPIO_Port, BT_RD_Pin)){
 8002e38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e3c:	4832      	ldr	r0, [pc, #200]	; (8002f08 <SelectProgram+0x1c0>)
 8002e3e:	f003 f855 	bl	8005eec <HAL_GPIO_ReadPin>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d108      	bne.n	8002e5a <SelectProgram+0x112>
				if (B == 0){
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d107      	bne.n	8002e5e <SelectProgram+0x116>
					sel--;
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	3b01      	subs	r3, #1
 8002e52:	61bb      	str	r3, [r7, #24]
					B = 1;
 8002e54:	2301      	movs	r3, #1
 8002e56:	617b      	str	r3, [r7, #20]
					break;
 8002e58:	e01e      	b.n	8002e98 <SelectProgram+0x150>
				}
			} else B = 0;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	617b      	str	r3, [r7, #20]
			if (!HAL_GPIO_ReadPin(BT_RB_GPIO_Port, BT_RB_Pin)){
 8002e5e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002e62:	482a      	ldr	r0, [pc, #168]	; (8002f0c <SelectProgram+0x1c4>)
 8002e64:	f003 f842 	bl	8005eec <HAL_GPIO_ReadPin>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d108      	bne.n	8002e80 <SelectProgram+0x138>
				if (D == 0){
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d107      	bne.n	8002e84 <SelectProgram+0x13c>
					sel++;
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	3301      	adds	r3, #1
 8002e78:	61bb      	str	r3, [r7, #24]
					D = 1;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	613b      	str	r3, [r7, #16]
					break;
 8002e7e:	e00b      	b.n	8002e98 <SelectProgram+0x150>
				}
			} else D = 0;
 8002e80:	2300      	movs	r3, #0
 8002e82:	613b      	str	r3, [r7, #16]
			if (!HAL_GPIO_ReadPin(BT_RC_GPIO_Port, BT_RC_Pin)) return sel;
 8002e84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e88:	4820      	ldr	r0, [pc, #128]	; (8002f0c <SelectProgram+0x1c4>)
 8002e8a:	f003 f82f 	bl	8005eec <HAL_GPIO_ReadPin>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d1d1      	bne.n	8002e38 <SelectProgram+0xf0>
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	e025      	b.n	8002ee4 <SelectProgram+0x19c>
		}
		if (sel - 2> s_row) {	// Scroll w dół
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	3b02      	subs	r3, #2
 8002e9c:	69fa      	ldr	r2, [r7, #28]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	da02      	bge.n	8002ea8 <SelectProgram+0x160>
			s_row++;
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	61fb      	str	r3, [r7, #28]
		}
		if (sel < s_row) {		// scroll w górę
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	da02      	bge.n	8002eb6 <SelectProgram+0x16e>
			s_row--;
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	61fb      	str	r3, [r7, #28]
		}
		if (s_row + 3 > Program_Count) {	// Przepełnienie w dół
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	1cda      	adds	r2, r3, #3
 8002eba:	4b0f      	ldr	r3, [pc, #60]	; (8002ef8 <SelectProgram+0x1b0>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	dd03      	ble.n	8002eca <SelectProgram+0x182>
			s_row = sel = 0;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	61bb      	str	r3, [r7, #24]
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	61fb      	str	r3, [r7, #28]
		}
		if (s_row < 0) {		// Pzrepelnienie w górę
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f6bf af46 	bge.w	8002d5e <SelectProgram+0x16>
			s_row = Program_Count-3;
 8002ed2:	4b09      	ldr	r3, [pc, #36]	; (8002ef8 <SelectProgram+0x1b0>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	3b03      	subs	r3, #3
 8002ed8:	61fb      	str	r3, [r7, #28]
			sel = Program_Count-1;
 8002eda:	4b07      	ldr	r3, [pc, #28]	; (8002ef8 <SelectProgram+0x1b0>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	61bb      	str	r3, [r7, #24]
	while(1){
 8002ee2:	e73c      	b.n	8002d5e <SelectProgram+0x16>
		}
	}
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3720      	adds	r7, #32
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	20000008 	.word	0x20000008
 8002ef0:	0800df9c 	.word	0x0800df9c
 8002ef4:	20000100 	.word	0x20000100
 8002ef8:	20000118 	.word	0x20000118
 8002efc:	200000d8 	.word	0x200000d8
 8002f00:	20000000 	.word	0x20000000
 8002f04:	20000018 	.word	0x20000018
 8002f08:	40010800 	.word	0x40010800
 8002f0c:	40010c00 	.word	0x40010c00

08002f10 <InitDevice_NRF>:

void InitDevice_NRF(){
 8002f10:	b590      	push	{r4, r7, lr}
 8002f12:	b097      	sub	sp, #92	; 0x5c
 8002f14:	af16      	add	r7, sp, #88	; 0x58
	NRF24_begin(CSN_GPIO_Port, CSN_Pin, CE_Pin, hspi1);
 8002f16:	4c14      	ldr	r4, [pc, #80]	; (8002f68 <InitDevice_NRF+0x58>)
 8002f18:	4668      	mov	r0, sp
 8002f1a:	1d23      	adds	r3, r4, #4
 8002f1c:	2254      	movs	r2, #84	; 0x54
 8002f1e:	4619      	mov	r1, r3
 8002f20:	f00a f966 	bl	800d1f0 <memcpy>
 8002f24:	6823      	ldr	r3, [r4, #0]
 8002f26:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002f2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002f2e:	480f      	ldr	r0, [pc, #60]	; (8002f6c <InitDevice_NRF+0x5c>)
 8002f30:	f7fd fedc 	bl	8000cec <NRF24_begin>
	NRF24_setAutoAck(true);
 8002f34:	2001      	movs	r0, #1
 8002f36:	f7fe f923 	bl	8001180 <NRF24_setAutoAck>
	NRF24_setChannel(52);
 8002f3a:	2034      	movs	r0, #52	; 0x34
 8002f3c:	f7fe f86b 	bl	8001016 <NRF24_setChannel>
	NRF24_setPayloadSize(13);
 8002f40:	200d      	movs	r0, #13
 8002f42:	f7fe f87d 	bl	8001040 <NRF24_setPayloadSize>
	NRF24_openReadingPipe(1, PipeAddres);
 8002f46:	4b0a      	ldr	r3, [pc, #40]	; (8002f70 <InitDevice_NRF+0x60>)
 8002f48:	cb18      	ldmia	r3, {r3, r4}
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	4623      	mov	r3, r4
 8002f4e:	2001      	movs	r0, #1
 8002f50:	f7fd fff8 	bl	8000f44 <NRF24_openReadingPipe>
	NRF24_enableDynamicPayloads();
 8002f54:	f7fe f8ca 	bl	80010ec <NRF24_enableDynamicPayloads>
	NRF24_enableAckPayload();
 8002f58:	f7fe f89a 	bl	8001090 <NRF24_enableAckPayload>
	NRF24_startListening();
 8002f5c:	f7fd ffa6 	bl	8000eac <NRF24_startListening>
}
 8002f60:	bf00      	nop
 8002f62:	3704      	adds	r7, #4
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd90      	pop	{r4, r7, pc}
 8002f68:	20000d74 	.word	0x20000d74
 8002f6c:	40011000 	.word	0x40011000
 8002f70:	20000120 	.word	0x20000120

08002f74 <InitDevice_MPU>:

void InitDevice_MPU(){
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
	MPU_ConfigTypeDef MpuConfig;
	MPU6050_Init(&hi2c1);
 8002f7a:	480a      	ldr	r0, [pc, #40]	; (8002fa4 <InitDevice_MPU+0x30>)
 8002f7c:	f7fe feda 	bl	8001d34 <MPU6050_Init>
	MpuConfig.Accel_Full_Scale = AFS_SEL_4g;
 8002f80:	2301      	movs	r3, #1
 8002f82:	70bb      	strb	r3, [r7, #2]
	MpuConfig.ClockSource = Internal_8MHz;
 8002f84:	2300      	movs	r3, #0
 8002f86:	703b      	strb	r3, [r7, #0]
	MpuConfig.CONFIG_DLPF = DLPF_184A_188G_Hz;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	70fb      	strb	r3, [r7, #3]
	MpuConfig.Gyro_Full_Scale = FS_SEL_500;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	707b      	strb	r3, [r7, #1]
	MpuConfig.Sleep_Mode_Bit = 0;
 8002f90:	2300      	movs	r3, #0
 8002f92:	713b      	strb	r3, [r7, #4]
	MPU6050_Config(&MpuConfig);
 8002f94:	463b      	mov	r3, r7
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7fe ff22 	bl	8001de0 <MPU6050_Config>
}
 8002f9c:	bf00      	nop
 8002f9e:	3708      	adds	r7, #8
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	20000bc0 	.word	0x20000bc0

08002fa8 <Init_Test>:

void Init_Test(){
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
	SSD1306_Fill(0);
 8002fac:	2000      	movs	r0, #0
 8002fae:	f001 fa55 	bl	800445c <SSD1306_Fill>
	SSD1306_GotoXY(0, 0);
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	2000      	movs	r0, #0
 8002fb6:	f001 fb8b 	bl	80046d0 <SSD1306_GotoXY>
	SSD1306_Puts("Program", &Font_11x18, 1);
 8002fba:	2201      	movs	r2, #1
 8002fbc:	4908      	ldr	r1, [pc, #32]	; (8002fe0 <Init_Test+0x38>)
 8002fbe:	4809      	ldr	r0, [pc, #36]	; (8002fe4 <Init_Test+0x3c>)
 8002fc0:	f001 fc1c 	bl	80047fc <SSD1306_Puts>
	SSD1306_GotoXY(0, 20);
 8002fc4:	2114      	movs	r1, #20
 8002fc6:	2000      	movs	r0, #0
 8002fc8:	f001 fb82 	bl	80046d0 <SSD1306_GotoXY>
	SSD1306_Puts("testowy", &Font_11x18, 1);
 8002fcc:	2201      	movs	r2, #1
 8002fce:	4904      	ldr	r1, [pc, #16]	; (8002fe0 <Init_Test+0x38>)
 8002fd0:	4805      	ldr	r0, [pc, #20]	; (8002fe8 <Init_Test+0x40>)
 8002fd2:	f001 fc13 	bl	80047fc <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8002fd6:	f001 fa13 	bl	8004400 <SSD1306_UpdateScreen>
}
 8002fda:	bf00      	nop
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	20000008 	.word	0x20000008
 8002fe4:	0800dfa8 	.word	0x0800dfa8
 8002fe8:	0800dfb0 	.word	0x0800dfb0

08002fec <Loop_Test>:

void Loop_Test(){
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0

}
 8002ff0:	bf00      	nop
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bc80      	pop	{r7}
 8002ff6:	4770      	bx	lr

08002ff8 <Init_Gamepad>:

void Init_Gamepad(){
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
	my_MX_USB_DEVICE_Init();
 8002ffc:	f009 fbd6 	bl	800c7ac <my_MX_USB_DEVICE_Init>
	InitDevice_MPU();
 8003000:	f7ff ffb8 	bl	8002f74 <InitDevice_MPU>
	SSD1306_Fill(0);
 8003004:	2000      	movs	r0, #0
 8003006:	f001 fa29 	bl	800445c <SSD1306_Fill>
	SSD1306_GotoXY(0, 0);
 800300a:	2100      	movs	r1, #0
 800300c:	2000      	movs	r0, #0
 800300e:	f001 fb5f 	bl	80046d0 <SSD1306_GotoXY>
	SSD1306_Puts("GAMEPAD", &Font_11x18, 1);
 8003012:	2201      	movs	r2, #1
 8003014:	4904      	ldr	r1, [pc, #16]	; (8003028 <Init_Gamepad+0x30>)
 8003016:	4805      	ldr	r0, [pc, #20]	; (800302c <Init_Gamepad+0x34>)
 8003018:	f001 fbf0 	bl	80047fc <SSD1306_Puts>
	updateButtons();
 800301c:	f7ff f9e8 	bl	80023f0 <updateButtons>
	SSD1306_UpdateScreen();
 8003020:	f001 f9ee 	bl	8004400 <SSD1306_UpdateScreen>
}
 8003024:	bf00      	nop
 8003026:	bd80      	pop	{r7, pc}
 8003028:	20000008 	.word	0x20000008
 800302c:	0800dfb8 	.word	0x0800dfb8

08003030 <Loop_Gamepad>:

void Loop_Gamepad(){
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
	updateButtons();
 8003034:	f7ff f9dc 	bl	80023f0 <updateButtons>
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 20);
 8003038:	2214      	movs	r2, #20
 800303a:	4904      	ldr	r1, [pc, #16]	; (800304c <Loop_Gamepad+0x1c>)
 800303c:	4804      	ldr	r0, [pc, #16]	; (8003050 <Loop_Gamepad+0x20>)
 800303e:	f001 f877 	bl	8004130 <USBD_CUSTOM_HID_SendReport>
	HAL_Delay(10);
 8003042:	200a      	movs	r0, #10
 8003044:	f001 ffd0 	bl	8004fe8 <HAL_Delay>
}
 8003048:	bf00      	nop
 800304a:	bd80      	pop	{r7, pc}
 800304c:	20000128 	.word	0x20000128
 8003050:	20000e18 	.word	0x20000e18

08003054 <Init_SMicromouse>:

void Init_SMicromouse(){
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
	MX_USB_DEVICE_Init();
 8003058:	f009 fbca 	bl	800c7f0 <MX_USB_DEVICE_Init>
	InitDevice_MPU();
 800305c:	f7ff ff8a 	bl	8002f74 <InitDevice_MPU>
	InitDevice_NRF();
 8003060:	f7ff ff56 	bl	8002f10 <InitDevice_NRF>
	SSD1306_Fill(0);
 8003064:	2000      	movs	r0, #0
 8003066:	f001 f9f9 	bl	800445c <SSD1306_Fill>
	SSD1306_GotoXY(0, 0);
 800306a:	2100      	movs	r1, #0
 800306c:	2000      	movs	r0, #0
 800306e:	f001 fb2f 	bl	80046d0 <SSD1306_GotoXY>
	SSD1306_Puts("Micromouse", &Font_11x18, 1);
 8003072:	2201      	movs	r2, #1
 8003074:	4903      	ldr	r1, [pc, #12]	; (8003084 <Init_SMicromouse+0x30>)
 8003076:	4804      	ldr	r0, [pc, #16]	; (8003088 <Init_SMicromouse+0x34>)
 8003078:	f001 fbc0 	bl	80047fc <SSD1306_Puts>
	SSD1306_UpdateScreen();
 800307c:	f001 f9c0 	bl	8004400 <SSD1306_UpdateScreen>
}
 8003080:	bf00      	nop
 8003082:	bd80      	pop	{r7, pc}
 8003084:	20000008 	.word	0x20000008
 8003088:	0800dfc0 	.word	0x0800dfc0
 800308c:	00000000 	.word	0x00000000

08003090 <Loop_SMicromouse>:

void Loop_SMicromouse(){
 8003090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003092:	b08f      	sub	sp, #60	; 0x3c
 8003094:	af06      	add	r7, sp, #24
	if (NRF24_available()){
 8003096:	f7fd ff2d 	bl	8000ef4 <NRF24_available>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	f000 810e 	beq.w	80032be <Loop_SMicromouse+0x22e>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80030a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030a6:	481d      	ldr	r0, [pc, #116]	; (800311c <Loop_SMicromouse+0x8c>)
 80030a8:	f002 ff4f 	bl	8005f4a <HAL_GPIO_TogglePin>
		NRF24_read(RF_RxData, 13);
 80030ac:	210d      	movs	r1, #13
 80030ae:	481c      	ldr	r0, [pc, #112]	; (8003120 <Loop_SMicromouse+0x90>)
 80030b0:	f7fd ff28 	bl	8000f04 <NRF24_read>
		Serial_Send(RF_RxData, 13);
 80030b4:	210d      	movs	r1, #13
 80030b6:	481a      	ldr	r0, [pc, #104]	; (8003120 <Loop_SMicromouse+0x90>)
 80030b8:	f7fe ffc8 	bl	800204c <Serial_Send>
		NRF24_writeAckPayload(1, RF_TxData, 16);
 80030bc:	2210      	movs	r2, #16
 80030be:	4919      	ldr	r1, [pc, #100]	; (8003124 <Loop_SMicromouse+0x94>)
 80030c0:	2001      	movs	r0, #1
 80030c2:	f7fe f958 	bl	8001376 <NRF24_writeAckPayload>
		// BARDZO ISTOTNE, I2C i NRF ZAKLUCAJA SIE JAKOS, DLA TEGO DANE ZBIERAMY PO TRANSMISJI NRF
		// ZAKLUCENIA NADAL WYSTEPUJA ALE ZADZIEJ, JE WYELIMINOWAC TRZEBA INACZEJ ??
		// Ustawienie funkcji
		RF_TxData[0] = 0;
 80030c6:	4b17      	ldr	r3, [pc, #92]	; (8003124 <Loop_SMicromouse+0x94>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	701a      	strb	r2, [r3, #0]
		int16_t Val[4];
		if (Flag[3] == 1) {
 80030cc:	4b16      	ldr	r3, [pc, #88]	; (8003128 <Loop_SMicromouse+0x98>)
 80030ce:	78db      	ldrb	r3, [r3, #3]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	f040 80f4 	bne.w	80032be <Loop_SMicromouse+0x22e>
		  // Ustawienie funkcji
		  RF_TxData[0] = FUNC_JOYSTICK_DATA;
 80030d6:	4b13      	ldr	r3, [pc, #76]	; (8003124 <Loop_SMicromouse+0x94>)
 80030d8:	2281      	movs	r2, #129	; 0x81
 80030da:	701a      	strb	r2, [r3, #0]
		  // Odczyt z ADS1115
		  for (int a = 0; a < 4; a++){
 80030dc:	2300      	movs	r3, #0
 80030de:	61fb      	str	r3, [r7, #28]
 80030e0:	e05e      	b.n	80031a0 <Loop_SMicromouse+0x110>
			  ADSwrite[0] = 0x01;
 80030e2:	4b12      	ldr	r3, [pc, #72]	; (800312c <Loop_SMicromouse+0x9c>)
 80030e4:	2201      	movs	r2, #1
 80030e6:	701a      	strb	r2, [r3, #0]
			  switch(a){
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	2b03      	cmp	r3, #3
 80030ec:	d824      	bhi.n	8003138 <Loop_SMicromouse+0xa8>
 80030ee:	a201      	add	r2, pc, #4	; (adr r2, 80030f4 <Loop_SMicromouse+0x64>)
 80030f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030f4:	08003105 	.word	0x08003105
 80030f8:	0800310d 	.word	0x0800310d
 80030fc:	08003115 	.word	0x08003115
 8003100:	08003131 	.word	0x08003131
			  case 0: {
				  ADSwrite[1] = 0xC1; // 11000011
 8003104:	4b09      	ldr	r3, [pc, #36]	; (800312c <Loop_SMicromouse+0x9c>)
 8003106:	22c1      	movs	r2, #193	; 0xc1
 8003108:	705a      	strb	r2, [r3, #1]
				  break;
 800310a:	e015      	b.n	8003138 <Loop_SMicromouse+0xa8>
			  }
			  case 1: {
				  ADSwrite[1] = 0xD1; // 11010011
 800310c:	4b07      	ldr	r3, [pc, #28]	; (800312c <Loop_SMicromouse+0x9c>)
 800310e:	22d1      	movs	r2, #209	; 0xd1
 8003110:	705a      	strb	r2, [r3, #1]
				  break;
 8003112:	e011      	b.n	8003138 <Loop_SMicromouse+0xa8>
			  }
			  case 2: {
				  ADSwrite[1] = 0xE1; // 11100011
 8003114:	4b05      	ldr	r3, [pc, #20]	; (800312c <Loop_SMicromouse+0x9c>)
 8003116:	22e1      	movs	r2, #225	; 0xe1
 8003118:	705a      	strb	r2, [r3, #1]
				  break;
 800311a:	e00d      	b.n	8003138 <Loop_SMicromouse+0xa8>
 800311c:	40011000 	.word	0x40011000
 8003120:	20000d04 	.word	0x20000d04
 8003124:	20000cb0 	.word	0x20000cb0
 8003128:	20000570 	.word	0x20000570
 800312c:	20000d64 	.word	0x20000d64
			  }
			  case 3: {
				  ADSwrite[1] = 0xF1; // 11110011
 8003130:	4bb9      	ldr	r3, [pc, #740]	; (8003418 <Loop_SMicromouse+0x388>)
 8003132:	22f1      	movs	r2, #241	; 0xf1
 8003134:	705a      	strb	r2, [r3, #1]
				  break;
 8003136:	bf00      	nop
			  __HAL_RCC_I2C2_FORCE_RESET();
			  __HAL_RCC_I2C2_RELEASE_RESET();
			  MX_I2C2_Init();*/


			  ADSwrite[2] = 0xE3; // 10000011 // 10100011 // 11000011// 11100011
 8003138:	4bb7      	ldr	r3, [pc, #732]	; (8003418 <Loop_SMicromouse+0x388>)
 800313a:	22e3      	movs	r2, #227	; 0xe3
 800313c:	709a      	strb	r2, [r3, #2]
			  HAL_I2C_Master_Transmit(&hi2c2, ADS1115_ADDRESS<<1, ADSwrite, 3, 100);
 800313e:	2364      	movs	r3, #100	; 0x64
 8003140:	9300      	str	r3, [sp, #0]
 8003142:	2303      	movs	r3, #3
 8003144:	4ab4      	ldr	r2, [pc, #720]	; (8003418 <Loop_SMicromouse+0x388>)
 8003146:	2190      	movs	r1, #144	; 0x90
 8003148:	48b4      	ldr	r0, [pc, #720]	; (800341c <Loop_SMicromouse+0x38c>)
 800314a:	f003 f86f 	bl	800622c <HAL_I2C_Master_Transmit>
			  ADSwrite[0] = 0x00;
 800314e:	4bb2      	ldr	r3, [pc, #712]	; (8003418 <Loop_SMicromouse+0x388>)
 8003150:	2200      	movs	r2, #0
 8003152:	701a      	strb	r2, [r3, #0]
			  HAL_I2C_Master_Transmit(&hi2c2, ADS1115_ADDRESS<<1, ADSwrite, 1, 100);
 8003154:	2364      	movs	r3, #100	; 0x64
 8003156:	9300      	str	r3, [sp, #0]
 8003158:	2301      	movs	r3, #1
 800315a:	4aaf      	ldr	r2, [pc, #700]	; (8003418 <Loop_SMicromouse+0x388>)
 800315c:	2190      	movs	r1, #144	; 0x90
 800315e:	48af      	ldr	r0, [pc, #700]	; (800341c <Loop_SMicromouse+0x38c>)
 8003160:	f003 f864 	bl	800622c <HAL_I2C_Master_Transmit>
			  //HAL_Delay(1);
			  NRF24_DelayMicroSeconds(100);
 8003164:	2064      	movs	r0, #100	; 0x64
 8003166:	f7fd fc79 	bl	8000a5c <NRF24_DelayMicroSeconds>
			  HAL_I2C_Master_Receive(&hi2c2, ADS1115_ADDRESS<<1, ADSwrite, 2, 100);
 800316a:	2364      	movs	r3, #100	; 0x64
 800316c:	9300      	str	r3, [sp, #0]
 800316e:	2302      	movs	r3, #2
 8003170:	4aa9      	ldr	r2, [pc, #676]	; (8003418 <Loop_SMicromouse+0x388>)
 8003172:	2190      	movs	r1, #144	; 0x90
 8003174:	48a9      	ldr	r0, [pc, #676]	; (800341c <Loop_SMicromouse+0x38c>)
 8003176:	f003 f957 	bl	8006428 <HAL_I2C_Master_Receive>

			  //RF_TxData[1 + a*2] = ADSwrite[1];
			  //RF_TxData[1 + a*2 + 1] = ADSwrite[0];
			  Val[a] = (((int16_t)ADSwrite[0]) << 8 | ADSwrite[1]);
 800317a:	4ba7      	ldr	r3, [pc, #668]	; (8003418 <Loop_SMicromouse+0x388>)
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	021b      	lsls	r3, r3, #8
 8003180:	b21a      	sxth	r2, r3
 8003182:	4ba5      	ldr	r3, [pc, #660]	; (8003418 <Loop_SMicromouse+0x388>)
 8003184:	785b      	ldrb	r3, [r3, #1]
 8003186:	b21b      	sxth	r3, r3
 8003188:	4313      	orrs	r3, r2
 800318a:	b21a      	sxth	r2, r3
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	f107 0120 	add.w	r1, r7, #32
 8003194:	440b      	add	r3, r1
 8003196:	f823 2c10 	strh.w	r2, [r3, #-16]
		  for (int a = 0; a < 4; a++){
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	3301      	adds	r3, #1
 800319e:	61fb      	str	r3, [r7, #28]
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	2b03      	cmp	r3, #3
 80031a4:	dd9d      	ble.n	80030e2 <Loop_SMicromouse+0x52>
			}
		  //Val[1] = (int16_t)MapValue(Val[1], 0, Val[0], -1023, 1023);
		  Val[2] = (int16_t)MapValue(Val[2], 0, Val[0], -1023, 1023) - 22;
 80031a6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7fd f92a 	bl	8000404 <__aeabi_i2d>
 80031b0:	4605      	mov	r5, r0
 80031b2:	460e      	mov	r6, r1
 80031b4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7fd f923 	bl	8000404 <__aeabi_i2d>
 80031be:	460a      	mov	r2, r1
 80031c0:	4601      	mov	r1, r0
 80031c2:	a491      	add	r4, pc, #580	; (adr r4, 8003408 <Loop_SMicromouse+0x378>)
 80031c4:	e9d4 3400 	ldrd	r3, r4, [r4]
 80031c8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80031cc:	a490      	add	r4, pc, #576	; (adr r4, 8003410 <Loop_SMicromouse+0x380>)
 80031ce:	e9d4 3400 	ldrd	r3, r4, [r4]
 80031d2:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80031d6:	e9cd 1200 	strd	r1, r2, [sp]
 80031da:	f04f 0200 	mov.w	r2, #0
 80031de:	f04f 0300 	mov.w	r3, #0
 80031e2:	4628      	mov	r0, r5
 80031e4:	4631      	mov	r1, r6
 80031e6:	f7ff f80f 	bl	8002208 <MapValue>
 80031ea:	4603      	mov	r3, r0
 80031ec:	460c      	mov	r4, r1
 80031ee:	4618      	mov	r0, r3
 80031f0:	4621      	mov	r1, r4
 80031f2:	f7fd fc0b 	bl	8000a0c <__aeabi_d2iz>
 80031f6:	4603      	mov	r3, r0
 80031f8:	b21b      	sxth	r3, r3
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	3b16      	subs	r3, #22
 80031fe:	b29b      	uxth	r3, r3
 8003200:	b21b      	sxth	r3, r3
 8003202:	82bb      	strh	r3, [r7, #20]
		  Val[3] = (int16_t)MapValue(Val[3], 0, Val[0], -1023, 1023) - 22;
 8003204:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003208:	4618      	mov	r0, r3
 800320a:	f7fd f8fb 	bl	8000404 <__aeabi_i2d>
 800320e:	4605      	mov	r5, r0
 8003210:	460e      	mov	r6, r1
 8003212:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003216:	4618      	mov	r0, r3
 8003218:	f7fd f8f4 	bl	8000404 <__aeabi_i2d>
 800321c:	460a      	mov	r2, r1
 800321e:	4601      	mov	r1, r0
 8003220:	a479      	add	r4, pc, #484	; (adr r4, 8003408 <Loop_SMicromouse+0x378>)
 8003222:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003226:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800322a:	a479      	add	r4, pc, #484	; (adr r4, 8003410 <Loop_SMicromouse+0x380>)
 800322c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003230:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8003234:	e9cd 1200 	strd	r1, r2, [sp]
 8003238:	f04f 0200 	mov.w	r2, #0
 800323c:	f04f 0300 	mov.w	r3, #0
 8003240:	4628      	mov	r0, r5
 8003242:	4631      	mov	r1, r6
 8003244:	f7fe ffe0 	bl	8002208 <MapValue>
 8003248:	4603      	mov	r3, r0
 800324a:	460c      	mov	r4, r1
 800324c:	4618      	mov	r0, r3
 800324e:	4621      	mov	r1, r4
 8003250:	f7fd fbdc 	bl	8000a0c <__aeabi_d2iz>
 8003254:	4603      	mov	r3, r0
 8003256:	b21b      	sxth	r3, r3
 8003258:	b29b      	uxth	r3, r3
 800325a:	3b16      	subs	r3, #22
 800325c:	b29b      	uxth	r3, r3
 800325e:	b21b      	sxth	r3, r3
 8003260:	82fb      	strh	r3, [r7, #22]
		  //Val[0] = (int16_t)MapValue(Val[0], 0, Val[0], -1023, 1023);

		  if ((Val[2] <= 6) && (Val[2] >= -6)) Val[2] = 0;
 8003262:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003266:	2b06      	cmp	r3, #6
 8003268:	dc06      	bgt.n	8003278 <Loop_SMicromouse+0x1e8>
 800326a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800326e:	f113 0f06 	cmn.w	r3, #6
 8003272:	db01      	blt.n	8003278 <Loop_SMicromouse+0x1e8>
 8003274:	2300      	movs	r3, #0
 8003276:	82bb      	strh	r3, [r7, #20]
		  if ((Val[3] <= 6) && (Val[3] >= -6)) Val[3] = 0;
 8003278:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800327c:	2b06      	cmp	r3, #6
 800327e:	dc06      	bgt.n	800328e <Loop_SMicromouse+0x1fe>
 8003280:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003284:	f113 0f06 	cmn.w	r3, #6
 8003288:	db01      	blt.n	800328e <Loop_SMicromouse+0x1fe>
 800328a:	2300      	movs	r3, #0
 800328c:	82fb      	strh	r3, [r7, #22]

		  RF_TxData[1] = Val[2];
 800328e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003292:	b2da      	uxtb	r2, r3
 8003294:	4b62      	ldr	r3, [pc, #392]	; (8003420 <Loop_SMicromouse+0x390>)
 8003296:	705a      	strb	r2, [r3, #1]
		  RF_TxData[2] = Val[2] >> 8;
 8003298:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800329c:	121b      	asrs	r3, r3, #8
 800329e:	b21b      	sxth	r3, r3
 80032a0:	b2da      	uxtb	r2, r3
 80032a2:	4b5f      	ldr	r3, [pc, #380]	; (8003420 <Loop_SMicromouse+0x390>)
 80032a4:	709a      	strb	r2, [r3, #2]
		  RF_TxData[3] = Val[3];
 80032a6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80032aa:	b2da      	uxtb	r2, r3
 80032ac:	4b5c      	ldr	r3, [pc, #368]	; (8003420 <Loop_SMicromouse+0x390>)
 80032ae:	70da      	strb	r2, [r3, #3]
		  RF_TxData[4] = Val[3] >> 8;
 80032b0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80032b4:	121b      	asrs	r3, r3, #8
 80032b6:	b21b      	sxth	r3, r3
 80032b8:	b2da      	uxtb	r2, r3
 80032ba:	4b59      	ldr	r3, [pc, #356]	; (8003420 <Loop_SMicromouse+0x390>)
 80032bc:	711a      	strb	r2, [r3, #4]

		  // Nastepne odczyty...

		}
		}
		if (Flag[4] == 1){
 80032be:	4b59      	ldr	r3, [pc, #356]	; (8003424 <Loop_SMicromouse+0x394>)
 80032c0:	791b      	ldrb	r3, [r3, #4]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d122      	bne.n	800330c <Loop_SMicromouse+0x27c>
		Flag[4] = 0;
 80032c6:	4b57      	ldr	r3, [pc, #348]	; (8003424 <Loop_SMicromouse+0x394>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	711a      	strb	r2, [r3, #4]
		char Bad[6] = {'B', 'A', 'D', '(', BadFunc, ')'};
 80032cc:	2342      	movs	r3, #66	; 0x42
 80032ce:	723b      	strb	r3, [r7, #8]
 80032d0:	2341      	movs	r3, #65	; 0x41
 80032d2:	727b      	strb	r3, [r7, #9]
 80032d4:	2344      	movs	r3, #68	; 0x44
 80032d6:	72bb      	strb	r3, [r7, #10]
 80032d8:	2328      	movs	r3, #40	; 0x28
 80032da:	72fb      	strb	r3, [r7, #11]
 80032dc:	4b52      	ldr	r3, [pc, #328]	; (8003428 <Loop_SMicromouse+0x398>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	733b      	strb	r3, [r7, #12]
 80032e2:	2329      	movs	r3, #41	; 0x29
 80032e4:	737b      	strb	r3, [r7, #13]
		Serial_Send(Bad, 6);
 80032e6:	f107 0308 	add.w	r3, r7, #8
 80032ea:	2106      	movs	r1, #6
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7fe fead 	bl	800204c <Serial_Send>
		HAL_Delay(1000);
 80032f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80032f6:	f001 fe77 	bl	8004fe8 <HAL_Delay>
		Bad[0] = BadFunc;
 80032fa:	4b4b      	ldr	r3, [pc, #300]	; (8003428 <Loop_SMicromouse+0x398>)
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	723b      	strb	r3, [r7, #8]
		Serial_Send(Bad, 6);
 8003300:	f107 0308 	add.w	r3, r7, #8
 8003304:	2106      	movs	r1, #6
 8003306:	4618      	mov	r0, r3
 8003308:	f7fe fea0 	bl	800204c <Serial_Send>
		}
		if ((Flag[0] == 1) || (Flag[1] == 1)) {
 800330c:	4b45      	ldr	r3, [pc, #276]	; (8003424 <Loop_SMicromouse+0x394>)
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d004      	beq.n	800331e <Loop_SMicromouse+0x28e>
 8003314:	4b43      	ldr	r3, [pc, #268]	; (8003424 <Loop_SMicromouse+0x394>)
 8003316:	785b      	ldrb	r3, [r3, #1]
 8003318:	2b01      	cmp	r3, #1
 800331a:	f040 80a6 	bne.w	800346a <Loop_SMicromouse+0x3da>
		Flag[0] = 0;
 800331e:	4b41      	ldr	r3, [pc, #260]	; (8003424 <Loop_SMicromouse+0x394>)
 8003320:	2200      	movs	r2, #0
 8003322:	701a      	strb	r2, [r3, #0]

		I2C_ClearBusyFlagErratum(&hi2c1, 1000);
 8003324:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003328:	4840      	ldr	r0, [pc, #256]	; (800342c <Loop_SMicromouse+0x39c>)
 800332a:	f7fe fed1 	bl	80020d0 <I2C_ClearBusyFlagErratum>

		__HAL_RCC_I2C1_FORCE_RESET();
 800332e:	4b40      	ldr	r3, [pc, #256]	; (8003430 <Loop_SMicromouse+0x3a0>)
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	4a3f      	ldr	r2, [pc, #252]	; (8003430 <Loop_SMicromouse+0x3a0>)
 8003334:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003338:	6113      	str	r3, [r2, #16]
		__HAL_RCC_I2C1_RELEASE_RESET();
 800333a:	4b3d      	ldr	r3, [pc, #244]	; (8003430 <Loop_SMicromouse+0x3a0>)
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	4a3c      	ldr	r2, [pc, #240]	; (8003430 <Loop_SMicromouse+0x3a0>)
 8003340:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003344:	6113      	str	r3, [r2, #16]
		MX_I2C1_Init();
 8003346:	f000 fbfb 	bl	8003b40 <MX_I2C1_Init>
		__HAL_RCC_I2C1_FORCE_RESET();
 800334a:	4b39      	ldr	r3, [pc, #228]	; (8003430 <Loop_SMicromouse+0x3a0>)
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	4a38      	ldr	r2, [pc, #224]	; (8003430 <Loop_SMicromouse+0x3a0>)
 8003350:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003354:	6113      	str	r3, [r2, #16]
		__HAL_RCC_I2C1_RELEASE_RESET();
 8003356:	4b36      	ldr	r3, [pc, #216]	; (8003430 <Loop_SMicromouse+0x3a0>)
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	4a35      	ldr	r2, [pc, #212]	; (8003430 <Loop_SMicromouse+0x3a0>)
 800335c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003360:	6113      	str	r3, [r2, #16]
		MX_I2C1_Init();
 8003362:	f000 fbed 	bl	8003b40 <MX_I2C1_Init>

		//HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);

		MPU6050_Get_Accel_RawData(&AccelData);	// Najpier trzeba akcelerometr
 8003366:	4833      	ldr	r0, [pc, #204]	; (8003434 <Loop_SMicromouse+0x3a4>)
 8003368:	f7fe fdf0 	bl	8001f4c <MPU6050_Get_Accel_RawData>
		MPU6050_Get_Gyro_RawData(&GyroData);		// Potem zyroskop
 800336c:	4832      	ldr	r0, [pc, #200]	; (8003438 <Loop_SMicromouse+0x3a8>)
 800336e:	f7fe fe53 	bl	8002018 <MPU6050_Get_Gyro_RawData>

		Msg[0] = FUNC_ACCEL_GYRO_DATA;
 8003372:	4b32      	ldr	r3, [pc, #200]	; (800343c <Loop_SMicromouse+0x3ac>)
 8003374:	2280      	movs	r2, #128	; 0x80
 8003376:	701a      	strb	r2, [r3, #0]
		Msg[1] = AccelData.x;
 8003378:	4b2e      	ldr	r3, [pc, #184]	; (8003434 <Loop_SMicromouse+0x3a4>)
 800337a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800337e:	b2da      	uxtb	r2, r3
 8003380:	4b2e      	ldr	r3, [pc, #184]	; (800343c <Loop_SMicromouse+0x3ac>)
 8003382:	705a      	strb	r2, [r3, #1]
		Msg[2] = AccelData.x >> 8;
 8003384:	4b2b      	ldr	r3, [pc, #172]	; (8003434 <Loop_SMicromouse+0x3a4>)
 8003386:	f9b3 3000 	ldrsh.w	r3, [r3]
 800338a:	121b      	asrs	r3, r3, #8
 800338c:	b21b      	sxth	r3, r3
 800338e:	b2da      	uxtb	r2, r3
 8003390:	4b2a      	ldr	r3, [pc, #168]	; (800343c <Loop_SMicromouse+0x3ac>)
 8003392:	709a      	strb	r2, [r3, #2]
		Msg[3] = AccelData.y;
 8003394:	4b27      	ldr	r3, [pc, #156]	; (8003434 <Loop_SMicromouse+0x3a4>)
 8003396:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800339a:	b2da      	uxtb	r2, r3
 800339c:	4b27      	ldr	r3, [pc, #156]	; (800343c <Loop_SMicromouse+0x3ac>)
 800339e:	70da      	strb	r2, [r3, #3]
		Msg[4] = AccelData.y >> 8;
 80033a0:	4b24      	ldr	r3, [pc, #144]	; (8003434 <Loop_SMicromouse+0x3a4>)
 80033a2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80033a6:	121b      	asrs	r3, r3, #8
 80033a8:	b21b      	sxth	r3, r3
 80033aa:	b2da      	uxtb	r2, r3
 80033ac:	4b23      	ldr	r3, [pc, #140]	; (800343c <Loop_SMicromouse+0x3ac>)
 80033ae:	711a      	strb	r2, [r3, #4]
		Msg[5] = AccelData.z;
 80033b0:	4b20      	ldr	r3, [pc, #128]	; (8003434 <Loop_SMicromouse+0x3a4>)
 80033b2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80033b6:	b2da      	uxtb	r2, r3
 80033b8:	4b20      	ldr	r3, [pc, #128]	; (800343c <Loop_SMicromouse+0x3ac>)
 80033ba:	715a      	strb	r2, [r3, #5]
		Msg[6] = AccelData.z >> 8;
 80033bc:	4b1d      	ldr	r3, [pc, #116]	; (8003434 <Loop_SMicromouse+0x3a4>)
 80033be:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80033c2:	121b      	asrs	r3, r3, #8
 80033c4:	b21b      	sxth	r3, r3
 80033c6:	b2da      	uxtb	r2, r3
 80033c8:	4b1c      	ldr	r3, [pc, #112]	; (800343c <Loop_SMicromouse+0x3ac>)
 80033ca:	719a      	strb	r2, [r3, #6]

		Msg[7] = GyroData.x;
 80033cc:	4b1a      	ldr	r3, [pc, #104]	; (8003438 <Loop_SMicromouse+0x3a8>)
 80033ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033d2:	b2da      	uxtb	r2, r3
 80033d4:	4b19      	ldr	r3, [pc, #100]	; (800343c <Loop_SMicromouse+0x3ac>)
 80033d6:	71da      	strb	r2, [r3, #7]
		Msg[8] = GyroData.x >> 8;
 80033d8:	4b17      	ldr	r3, [pc, #92]	; (8003438 <Loop_SMicromouse+0x3a8>)
 80033da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033de:	121b      	asrs	r3, r3, #8
 80033e0:	b21b      	sxth	r3, r3
 80033e2:	b2da      	uxtb	r2, r3
 80033e4:	4b15      	ldr	r3, [pc, #84]	; (800343c <Loop_SMicromouse+0x3ac>)
 80033e6:	721a      	strb	r2, [r3, #8]
		Msg[9] = GyroData.y;
 80033e8:	4b13      	ldr	r3, [pc, #76]	; (8003438 <Loop_SMicromouse+0x3a8>)
 80033ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80033ee:	b2da      	uxtb	r2, r3
 80033f0:	4b12      	ldr	r3, [pc, #72]	; (800343c <Loop_SMicromouse+0x3ac>)
 80033f2:	725a      	strb	r2, [r3, #9]
		Msg[10] = GyroData.y >> 8;
 80033f4:	4b10      	ldr	r3, [pc, #64]	; (8003438 <Loop_SMicromouse+0x3a8>)
 80033f6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80033fa:	121b      	asrs	r3, r3, #8
 80033fc:	b21b      	sxth	r3, r3
 80033fe:	b2da      	uxtb	r2, r3
 8003400:	4b0e      	ldr	r3, [pc, #56]	; (800343c <Loop_SMicromouse+0x3ac>)
 8003402:	729a      	strb	r2, [r3, #10]
 8003404:	e01c      	b.n	8003440 <Loop_SMicromouse+0x3b0>
 8003406:	bf00      	nop
 8003408:	00000000 	.word	0x00000000
 800340c:	408ff800 	.word	0x408ff800
 8003410:	00000000 	.word	0x00000000
 8003414:	c08ff800 	.word	0xc08ff800
 8003418:	20000d64 	.word	0x20000d64
 800341c:	20000c14 	.word	0x20000c14
 8003420:	20000cb0 	.word	0x20000cb0
 8003424:	20000570 	.word	0x20000570
 8003428:	20000e0c 	.word	0x20000e0c
 800342c:	20000bc0 	.word	0x20000bc0
 8003430:	40021000 	.word	0x40021000
 8003434:	20000c68 	.word	0x20000c68
 8003438:	20000d6c 	.word	0x20000d6c
 800343c:	20000bb0 	.word	0x20000bb0
		Msg[11] = GyroData.z;
 8003440:	4bb7      	ldr	r3, [pc, #732]	; (8003720 <Loop_SMicromouse+0x690>)
 8003442:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003446:	b2da      	uxtb	r2, r3
 8003448:	4bb6      	ldr	r3, [pc, #728]	; (8003724 <Loop_SMicromouse+0x694>)
 800344a:	72da      	strb	r2, [r3, #11]
		Msg[12] = GyroData.z >> 8;
 800344c:	4bb4      	ldr	r3, [pc, #720]	; (8003720 <Loop_SMicromouse+0x690>)
 800344e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003452:	121b      	asrs	r3, r3, #8
 8003454:	b21b      	sxth	r3, r3
 8003456:	b2da      	uxtb	r2, r3
 8003458:	4bb2      	ldr	r3, [pc, #712]	; (8003724 <Loop_SMicromouse+0x694>)
 800345a:	731a      	strb	r2, [r3, #12]

		Serial_Send(Msg, 13);
 800345c:	210d      	movs	r1, #13
 800345e:	48b1      	ldr	r0, [pc, #708]	; (8003724 <Loop_SMicromouse+0x694>)
 8003460:	f7fe fdf4 	bl	800204c <Serial_Send>
		HAL_Delay(10);
 8003464:	200a      	movs	r0, #10
 8003466:	f001 fdbf 	bl	8004fe8 <HAL_Delay>
		}
		if (Flag[2] == 1){
 800346a:	4baf      	ldr	r3, [pc, #700]	; (8003728 <Loop_SMicromouse+0x698>)
 800346c:	789b      	ldrb	r3, [r3, #2]
 800346e:	2b01      	cmp	r3, #1
 8003470:	f040 81ff 	bne.w	8003872 <Loop_SMicromouse+0x7e2>
		Flag[2] = 0;
 8003474:	4bac      	ldr	r3, [pc, #688]	; (8003728 <Loop_SMicromouse+0x698>)
 8003476:	2200      	movs	r2, #0
 8003478:	709a      	strb	r2, [r3, #2]
		// Odczyt z ADS1115
		int16_t Val[4];
		for (int a = 0; a < 4; a++){
 800347a:	2300      	movs	r3, #0
 800347c:	61bb      	str	r3, [r7, #24]
 800347e:	e055      	b.n	800352c <Loop_SMicromouse+0x49c>
		  ADSwrite[0] = 0x01;
 8003480:	4baa      	ldr	r3, [pc, #680]	; (800372c <Loop_SMicromouse+0x69c>)
 8003482:	2201      	movs	r2, #1
 8003484:	701a      	strb	r2, [r3, #0]
		  switch(a){
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	2b03      	cmp	r3, #3
 800348a:	d81b      	bhi.n	80034c4 <Loop_SMicromouse+0x434>
 800348c:	a201      	add	r2, pc, #4	; (adr r2, 8003494 <Loop_SMicromouse+0x404>)
 800348e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003492:	bf00      	nop
 8003494:	080034a5 	.word	0x080034a5
 8003498:	080034ad 	.word	0x080034ad
 800349c:	080034b5 	.word	0x080034b5
 80034a0:	080034bd 	.word	0x080034bd
		  case 0: {
			  ADSwrite[1] = 0xC1; // 11000011
 80034a4:	4ba1      	ldr	r3, [pc, #644]	; (800372c <Loop_SMicromouse+0x69c>)
 80034a6:	22c1      	movs	r2, #193	; 0xc1
 80034a8:	705a      	strb	r2, [r3, #1]
			  break;
 80034aa:	e00b      	b.n	80034c4 <Loop_SMicromouse+0x434>
		  }
		  case 1: {
			  ADSwrite[1] = 0xD1; // 11010011
 80034ac:	4b9f      	ldr	r3, [pc, #636]	; (800372c <Loop_SMicromouse+0x69c>)
 80034ae:	22d1      	movs	r2, #209	; 0xd1
 80034b0:	705a      	strb	r2, [r3, #1]
			  break;
 80034b2:	e007      	b.n	80034c4 <Loop_SMicromouse+0x434>
		  }
		  case 2: {
			  ADSwrite[1] = 0xE1; // 11100011
 80034b4:	4b9d      	ldr	r3, [pc, #628]	; (800372c <Loop_SMicromouse+0x69c>)
 80034b6:	22e1      	movs	r2, #225	; 0xe1
 80034b8:	705a      	strb	r2, [r3, #1]
			  break;
 80034ba:	e003      	b.n	80034c4 <Loop_SMicromouse+0x434>
		  }
		  case 3: {
			  ADSwrite[1] = 0xF1; // 11110011
 80034bc:	4b9b      	ldr	r3, [pc, #620]	; (800372c <Loop_SMicromouse+0x69c>)
 80034be:	22f1      	movs	r2, #241	; 0xf1
 80034c0:	705a      	strb	r2, [r3, #1]
			  break;
 80034c2:	bf00      	nop
		  MX_I2C2_Init();
		  __HAL_RCC_I2C2_FORCE_RESET();
		  __HAL_RCC_I2C2_RELEASE_RESET();
		  MX_I2C2_Init();*/

		  ADSwrite[2] = 0xE3; // 10000011 // 10100011 // 11000011// 11100011
 80034c4:	4b99      	ldr	r3, [pc, #612]	; (800372c <Loop_SMicromouse+0x69c>)
 80034c6:	22e3      	movs	r2, #227	; 0xe3
 80034c8:	709a      	strb	r2, [r3, #2]
		  HAL_I2C_Master_Transmit(&hi2c2, ADS1115_ADDRESS<<1, ADSwrite, 3, 100);
 80034ca:	2364      	movs	r3, #100	; 0x64
 80034cc:	9300      	str	r3, [sp, #0]
 80034ce:	2303      	movs	r3, #3
 80034d0:	4a96      	ldr	r2, [pc, #600]	; (800372c <Loop_SMicromouse+0x69c>)
 80034d2:	2190      	movs	r1, #144	; 0x90
 80034d4:	4896      	ldr	r0, [pc, #600]	; (8003730 <Loop_SMicromouse+0x6a0>)
 80034d6:	f002 fea9 	bl	800622c <HAL_I2C_Master_Transmit>
		  ADSwrite[0] = 0x00;
 80034da:	4b94      	ldr	r3, [pc, #592]	; (800372c <Loop_SMicromouse+0x69c>)
 80034dc:	2200      	movs	r2, #0
 80034de:	701a      	strb	r2, [r3, #0]
		  HAL_I2C_Master_Transmit(&hi2c2, ADS1115_ADDRESS<<1, ADSwrite, 1, 100);
 80034e0:	2364      	movs	r3, #100	; 0x64
 80034e2:	9300      	str	r3, [sp, #0]
 80034e4:	2301      	movs	r3, #1
 80034e6:	4a91      	ldr	r2, [pc, #580]	; (800372c <Loop_SMicromouse+0x69c>)
 80034e8:	2190      	movs	r1, #144	; 0x90
 80034ea:	4891      	ldr	r0, [pc, #580]	; (8003730 <Loop_SMicromouse+0x6a0>)
 80034ec:	f002 fe9e 	bl	800622c <HAL_I2C_Master_Transmit>
		  //HAL_Delay(1);
		  NRF24_DelayMicroSeconds(100);
 80034f0:	2064      	movs	r0, #100	; 0x64
 80034f2:	f7fd fab3 	bl	8000a5c <NRF24_DelayMicroSeconds>
		  HAL_I2C_Master_Receive(&hi2c2, ADS1115_ADDRESS<<1, ADSwrite, 2, 100);
 80034f6:	2364      	movs	r3, #100	; 0x64
 80034f8:	9300      	str	r3, [sp, #0]
 80034fa:	2302      	movs	r3, #2
 80034fc:	4a8b      	ldr	r2, [pc, #556]	; (800372c <Loop_SMicromouse+0x69c>)
 80034fe:	2190      	movs	r1, #144	; 0x90
 8003500:	488b      	ldr	r0, [pc, #556]	; (8003730 <Loop_SMicromouse+0x6a0>)
 8003502:	f002 ff91 	bl	8006428 <HAL_I2C_Master_Receive>

		  //Msg[1 + a*2] = ADSwrite[1];
		  //Msg[1 + a*2 + 1] = ADSwrite[0];
		  Val[a] = (((int16_t)ADSwrite[0]) << 8 | ADSwrite[1]);
 8003506:	4b89      	ldr	r3, [pc, #548]	; (800372c <Loop_SMicromouse+0x69c>)
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	021b      	lsls	r3, r3, #8
 800350c:	b21a      	sxth	r2, r3
 800350e:	4b87      	ldr	r3, [pc, #540]	; (800372c <Loop_SMicromouse+0x69c>)
 8003510:	785b      	ldrb	r3, [r3, #1]
 8003512:	b21b      	sxth	r3, r3
 8003514:	4313      	orrs	r3, r2
 8003516:	b21a      	sxth	r2, r3
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	005b      	lsls	r3, r3, #1
 800351c:	f107 0120 	add.w	r1, r7, #32
 8003520:	440b      	add	r3, r1
 8003522:	f823 2c20 	strh.w	r2, [r3, #-32]
		for (int a = 0; a < 4; a++){
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	3301      	adds	r3, #1
 800352a:	61bb      	str	r3, [r7, #24]
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	2b03      	cmp	r3, #3
 8003530:	dda6      	ble.n	8003480 <Loop_SMicromouse+0x3f0>
		  //Serial_Send("ELO", 3);

		}

		Val[1] = (int16_t)MapValue(Val[1], 0, Val[0], -1023, 1023);
 8003532:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003536:	4618      	mov	r0, r3
 8003538:	f7fc ff64 	bl	8000404 <__aeabi_i2d>
 800353c:	4605      	mov	r5, r0
 800353e:	460e      	mov	r6, r1
 8003540:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003544:	4618      	mov	r0, r3
 8003546:	f7fc ff5d 	bl	8000404 <__aeabi_i2d>
 800354a:	460a      	mov	r2, r1
 800354c:	4601      	mov	r1, r0
 800354e:	a470      	add	r4, pc, #448	; (adr r4, 8003710 <Loop_SMicromouse+0x680>)
 8003550:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003554:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003558:	a46f      	add	r4, pc, #444	; (adr r4, 8003718 <Loop_SMicromouse+0x688>)
 800355a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800355e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8003562:	e9cd 1200 	strd	r1, r2, [sp]
 8003566:	f04f 0200 	mov.w	r2, #0
 800356a:	f04f 0300 	mov.w	r3, #0
 800356e:	4628      	mov	r0, r5
 8003570:	4631      	mov	r1, r6
 8003572:	f7fe fe49 	bl	8002208 <MapValue>
 8003576:	4603      	mov	r3, r0
 8003578:	460c      	mov	r4, r1
 800357a:	4618      	mov	r0, r3
 800357c:	4621      	mov	r1, r4
 800357e:	f7fd fa45 	bl	8000a0c <__aeabi_d2iz>
 8003582:	4603      	mov	r3, r0
 8003584:	b21b      	sxth	r3, r3
 8003586:	807b      	strh	r3, [r7, #2]
		Val[2] = (int16_t)MapValue(Val[2], 0, Val[0], -1023, 1023) - 22;
 8003588:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800358c:	4618      	mov	r0, r3
 800358e:	f7fc ff39 	bl	8000404 <__aeabi_i2d>
 8003592:	4605      	mov	r5, r0
 8003594:	460e      	mov	r6, r1
 8003596:	f9b7 3000 	ldrsh.w	r3, [r7]
 800359a:	4618      	mov	r0, r3
 800359c:	f7fc ff32 	bl	8000404 <__aeabi_i2d>
 80035a0:	460a      	mov	r2, r1
 80035a2:	4601      	mov	r1, r0
 80035a4:	a45a      	add	r4, pc, #360	; (adr r4, 8003710 <Loop_SMicromouse+0x680>)
 80035a6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80035aa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80035ae:	a45a      	add	r4, pc, #360	; (adr r4, 8003718 <Loop_SMicromouse+0x688>)
 80035b0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80035b4:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80035b8:	e9cd 1200 	strd	r1, r2, [sp]
 80035bc:	f04f 0200 	mov.w	r2, #0
 80035c0:	f04f 0300 	mov.w	r3, #0
 80035c4:	4628      	mov	r0, r5
 80035c6:	4631      	mov	r1, r6
 80035c8:	f7fe fe1e 	bl	8002208 <MapValue>
 80035cc:	4603      	mov	r3, r0
 80035ce:	460c      	mov	r4, r1
 80035d0:	4618      	mov	r0, r3
 80035d2:	4621      	mov	r1, r4
 80035d4:	f7fd fa1a 	bl	8000a0c <__aeabi_d2iz>
 80035d8:	4603      	mov	r3, r0
 80035da:	b21b      	sxth	r3, r3
 80035dc:	b29b      	uxth	r3, r3
 80035de:	3b16      	subs	r3, #22
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	b21b      	sxth	r3, r3
 80035e4:	80bb      	strh	r3, [r7, #4]
		Val[3] = (int16_t)MapValue(Val[3], 0, Val[0], -1023, 1023) -22;
 80035e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7fc ff0a 	bl	8000404 <__aeabi_i2d>
 80035f0:	4605      	mov	r5, r0
 80035f2:	460e      	mov	r6, r1
 80035f4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7fc ff03 	bl	8000404 <__aeabi_i2d>
 80035fe:	460a      	mov	r2, r1
 8003600:	4601      	mov	r1, r0
 8003602:	a443      	add	r4, pc, #268	; (adr r4, 8003710 <Loop_SMicromouse+0x680>)
 8003604:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003608:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800360c:	a442      	add	r4, pc, #264	; (adr r4, 8003718 <Loop_SMicromouse+0x688>)
 800360e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003612:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8003616:	e9cd 1200 	strd	r1, r2, [sp]
 800361a:	f04f 0200 	mov.w	r2, #0
 800361e:	f04f 0300 	mov.w	r3, #0
 8003622:	4628      	mov	r0, r5
 8003624:	4631      	mov	r1, r6
 8003626:	f7fe fdef 	bl	8002208 <MapValue>
 800362a:	4603      	mov	r3, r0
 800362c:	460c      	mov	r4, r1
 800362e:	4618      	mov	r0, r3
 8003630:	4621      	mov	r1, r4
 8003632:	f7fd f9eb 	bl	8000a0c <__aeabi_d2iz>
 8003636:	4603      	mov	r3, r0
 8003638:	b21b      	sxth	r3, r3
 800363a:	b29b      	uxth	r3, r3
 800363c:	3b16      	subs	r3, #22
 800363e:	b29b      	uxth	r3, r3
 8003640:	b21b      	sxth	r3, r3
 8003642:	80fb      	strh	r3, [r7, #6]
		Val[0] = (int16_t)MapValue(Val[0], 0, Val[0], -1023, 1023);
 8003644:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003648:	4618      	mov	r0, r3
 800364a:	f7fc fedb 	bl	8000404 <__aeabi_i2d>
 800364e:	4605      	mov	r5, r0
 8003650:	460e      	mov	r6, r1
 8003652:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003656:	4618      	mov	r0, r3
 8003658:	f7fc fed4 	bl	8000404 <__aeabi_i2d>
 800365c:	460a      	mov	r2, r1
 800365e:	4601      	mov	r1, r0
 8003660:	a42b      	add	r4, pc, #172	; (adr r4, 8003710 <Loop_SMicromouse+0x680>)
 8003662:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003666:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800366a:	a42b      	add	r4, pc, #172	; (adr r4, 8003718 <Loop_SMicromouse+0x688>)
 800366c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003670:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8003674:	e9cd 1200 	strd	r1, r2, [sp]
 8003678:	f04f 0200 	mov.w	r2, #0
 800367c:	f04f 0300 	mov.w	r3, #0
 8003680:	4628      	mov	r0, r5
 8003682:	4631      	mov	r1, r6
 8003684:	f7fe fdc0 	bl	8002208 <MapValue>
 8003688:	4603      	mov	r3, r0
 800368a:	460c      	mov	r4, r1
 800368c:	4618      	mov	r0, r3
 800368e:	4621      	mov	r1, r4
 8003690:	f7fd f9bc 	bl	8000a0c <__aeabi_d2iz>
 8003694:	4603      	mov	r3, r0
 8003696:	b21b      	sxth	r3, r3
 8003698:	803b      	strh	r3, [r7, #0]

		if ((Val[2] <= 3) && (Val[2] >= -3)) Val[2] = 0;
 800369a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800369e:	2b03      	cmp	r3, #3
 80036a0:	dc06      	bgt.n	80036b0 <Loop_SMicromouse+0x620>
 80036a2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80036a6:	f113 0f03 	cmn.w	r3, #3
 80036aa:	db01      	blt.n	80036b0 <Loop_SMicromouse+0x620>
 80036ac:	2300      	movs	r3, #0
 80036ae:	80bb      	strh	r3, [r7, #4]
		if ((Val[3] <= 3) && (Val[3] >= -3)) Val[3] = 0;
 80036b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036b4:	2b03      	cmp	r3, #3
 80036b6:	dc06      	bgt.n	80036c6 <Loop_SMicromouse+0x636>
 80036b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036bc:	f113 0f03 	cmn.w	r3, #3
 80036c0:	db01      	blt.n	80036c6 <Loop_SMicromouse+0x636>
 80036c2:	2300      	movs	r3, #0
 80036c4:	80fb      	strh	r3, [r7, #6]

		Msg[0] = FUNC_JOYSTICK_DATA;
 80036c6:	4b17      	ldr	r3, [pc, #92]	; (8003724 <Loop_SMicromouse+0x694>)
 80036c8:	2281      	movs	r2, #129	; 0x81
 80036ca:	701a      	strb	r2, [r3, #0]
		Msg[1] = Val[2];
 80036cc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80036d0:	b2da      	uxtb	r2, r3
 80036d2:	4b14      	ldr	r3, [pc, #80]	; (8003724 <Loop_SMicromouse+0x694>)
 80036d4:	705a      	strb	r2, [r3, #1]
		Msg[2] = Val[2] >> 8;
 80036d6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80036da:	121b      	asrs	r3, r3, #8
 80036dc:	b21b      	sxth	r3, r3
 80036de:	b2da      	uxtb	r2, r3
 80036e0:	4b10      	ldr	r3, [pc, #64]	; (8003724 <Loop_SMicromouse+0x694>)
 80036e2:	709a      	strb	r2, [r3, #2]
		Msg[3] = Val[3];
 80036e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036e8:	b2da      	uxtb	r2, r3
 80036ea:	4b0e      	ldr	r3, [pc, #56]	; (8003724 <Loop_SMicromouse+0x694>)
 80036ec:	70da      	strb	r2, [r3, #3]
		Msg[4] = Val[3] >> 8;
 80036ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036f2:	121b      	asrs	r3, r3, #8
 80036f4:	b21b      	sxth	r3, r3
 80036f6:	b2da      	uxtb	r2, r3
 80036f8:	4b0a      	ldr	r3, [pc, #40]	; (8003724 <Loop_SMicromouse+0x694>)
 80036fa:	711a      	strb	r2, [r3, #4]
		if (Val[1] > 0) Msg[5] = 0; else Msg[5] = 128;
 80036fc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003700:	2b00      	cmp	r3, #0
 8003702:	dd17      	ble.n	8003734 <Loop_SMicromouse+0x6a4>
 8003704:	4b07      	ldr	r3, [pc, #28]	; (8003724 <Loop_SMicromouse+0x694>)
 8003706:	2200      	movs	r2, #0
 8003708:	715a      	strb	r2, [r3, #5]
 800370a:	e016      	b.n	800373a <Loop_SMicromouse+0x6aa>
 800370c:	f3af 8000 	nop.w
 8003710:	00000000 	.word	0x00000000
 8003714:	408ff800 	.word	0x408ff800
 8003718:	00000000 	.word	0x00000000
 800371c:	c08ff800 	.word	0xc08ff800
 8003720:	20000d6c 	.word	0x20000d6c
 8003724:	20000bb0 	.word	0x20000bb0
 8003728:	20000570 	.word	0x20000570
 800372c:	20000d64 	.word	0x20000d64
 8003730:	20000c14 	.word	0x20000c14
 8003734:	4b51      	ldr	r3, [pc, #324]	; (800387c <Loop_SMicromouse+0x7ec>)
 8003736:	2280      	movs	r2, #128	; 0x80
 8003738:	715a      	strb	r2, [r3, #5]
		if (HAL_GPIO_ReadPin(BT_LA_GPIO_Port, BT_LA_Pin) == GPIO_PIN_RESET) Msg[5] += 64;
 800373a:	2104      	movs	r1, #4
 800373c:	4850      	ldr	r0, [pc, #320]	; (8003880 <Loop_SMicromouse+0x7f0>)
 800373e:	f002 fbd5 	bl	8005eec <HAL_GPIO_ReadPin>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d105      	bne.n	8003754 <Loop_SMicromouse+0x6c4>
 8003748:	4b4c      	ldr	r3, [pc, #304]	; (800387c <Loop_SMicromouse+0x7ec>)
 800374a:	795b      	ldrb	r3, [r3, #5]
 800374c:	3340      	adds	r3, #64	; 0x40
 800374e:	b2da      	uxtb	r2, r3
 8003750:	4b4a      	ldr	r3, [pc, #296]	; (800387c <Loop_SMicromouse+0x7ec>)
 8003752:	715a      	strb	r2, [r3, #5]
		if (HAL_GPIO_ReadPin(BT_LB_GPIO_Port, BT_LB_Pin) == GPIO_PIN_RESET) Msg[5] += 32;
 8003754:	2108      	movs	r1, #8
 8003756:	484a      	ldr	r0, [pc, #296]	; (8003880 <Loop_SMicromouse+0x7f0>)
 8003758:	f002 fbc8 	bl	8005eec <HAL_GPIO_ReadPin>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d105      	bne.n	800376e <Loop_SMicromouse+0x6de>
 8003762:	4b46      	ldr	r3, [pc, #280]	; (800387c <Loop_SMicromouse+0x7ec>)
 8003764:	795b      	ldrb	r3, [r3, #5]
 8003766:	3320      	adds	r3, #32
 8003768:	b2da      	uxtb	r2, r3
 800376a:	4b44      	ldr	r3, [pc, #272]	; (800387c <Loop_SMicromouse+0x7ec>)
 800376c:	715a      	strb	r2, [r3, #5]
		if (HAL_GPIO_ReadPin(BT_LC_GPIO_Port, BT_LC_Pin) == GPIO_PIN_RESET) Msg[5] += 16;
 800376e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003772:	4844      	ldr	r0, [pc, #272]	; (8003884 <Loop_SMicromouse+0x7f4>)
 8003774:	f002 fbba 	bl	8005eec <HAL_GPIO_ReadPin>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d105      	bne.n	800378a <Loop_SMicromouse+0x6fa>
 800377e:	4b3f      	ldr	r3, [pc, #252]	; (800387c <Loop_SMicromouse+0x7ec>)
 8003780:	795b      	ldrb	r3, [r3, #5]
 8003782:	3310      	adds	r3, #16
 8003784:	b2da      	uxtb	r2, r3
 8003786:	4b3d      	ldr	r3, [pc, #244]	; (800387c <Loop_SMicromouse+0x7ec>)
 8003788:	715a      	strb	r2, [r3, #5]
		if (HAL_GPIO_ReadPin(BT_LD_GPIO_Port, BT_LD_Pin) == GPIO_PIN_RESET) Msg[5] += 8;
 800378a:	2102      	movs	r1, #2
 800378c:	483c      	ldr	r0, [pc, #240]	; (8003880 <Loop_SMicromouse+0x7f0>)
 800378e:	f002 fbad 	bl	8005eec <HAL_GPIO_ReadPin>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d105      	bne.n	80037a4 <Loop_SMicromouse+0x714>
 8003798:	4b38      	ldr	r3, [pc, #224]	; (800387c <Loop_SMicromouse+0x7ec>)
 800379a:	795b      	ldrb	r3, [r3, #5]
 800379c:	3308      	adds	r3, #8
 800379e:	b2da      	uxtb	r2, r3
 80037a0:	4b36      	ldr	r3, [pc, #216]	; (800387c <Loop_SMicromouse+0x7ec>)
 80037a2:	715a      	strb	r2, [r3, #5]

		if (HAL_GPIO_ReadPin(BT_POWER_GPIO_Port, BT_POWER_Pin) == GPIO_PIN_SET) Msg[5] += 1;
 80037a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80037a8:	4835      	ldr	r0, [pc, #212]	; (8003880 <Loop_SMicromouse+0x7f0>)
 80037aa:	f002 fb9f 	bl	8005eec <HAL_GPIO_ReadPin>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d105      	bne.n	80037c0 <Loop_SMicromouse+0x730>
 80037b4:	4b31      	ldr	r3, [pc, #196]	; (800387c <Loop_SMicromouse+0x7ec>)
 80037b6:	795b      	ldrb	r3, [r3, #5]
 80037b8:	3301      	adds	r3, #1
 80037ba:	b2da      	uxtb	r2, r3
 80037bc:	4b2f      	ldr	r3, [pc, #188]	; (800387c <Loop_SMicromouse+0x7ec>)
 80037be:	715a      	strb	r2, [r3, #5]

		Msg[6] = 0;
 80037c0:	4b2e      	ldr	r3, [pc, #184]	; (800387c <Loop_SMicromouse+0x7ec>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	719a      	strb	r2, [r3, #6]
		Msg[7] = 0;
 80037c6:	4b2d      	ldr	r3, [pc, #180]	; (800387c <Loop_SMicromouse+0x7ec>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	71da      	strb	r2, [r3, #7]
		Msg[8] = 0;
 80037cc:	4b2b      	ldr	r3, [pc, #172]	; (800387c <Loop_SMicromouse+0x7ec>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	721a      	strb	r2, [r3, #8]
		Msg[9] = 0;
 80037d2:	4b2a      	ldr	r3, [pc, #168]	; (800387c <Loop_SMicromouse+0x7ec>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	725a      	strb	r2, [r3, #9]

		Msg[10] = 0;
 80037d8:	4b28      	ldr	r3, [pc, #160]	; (800387c <Loop_SMicromouse+0x7ec>)
 80037da:	2200      	movs	r2, #0
 80037dc:	729a      	strb	r2, [r3, #10]
		if (HAL_GPIO_ReadPin(BT_RS_GPIO_Port, BT_RS_Pin) == GPIO_PIN_RESET) Msg[10] += 128;
 80037de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80037e2:	4827      	ldr	r0, [pc, #156]	; (8003880 <Loop_SMicromouse+0x7f0>)
 80037e4:	f002 fb82 	bl	8005eec <HAL_GPIO_ReadPin>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d105      	bne.n	80037fa <Loop_SMicromouse+0x76a>
 80037ee:	4b23      	ldr	r3, [pc, #140]	; (800387c <Loop_SMicromouse+0x7ec>)
 80037f0:	7a9b      	ldrb	r3, [r3, #10]
 80037f2:	3b80      	subs	r3, #128	; 0x80
 80037f4:	b2da      	uxtb	r2, r3
 80037f6:	4b21      	ldr	r3, [pc, #132]	; (800387c <Loop_SMicromouse+0x7ec>)
 80037f8:	729a      	strb	r2, [r3, #10]
		if (HAL_GPIO_ReadPin(BT_RA_GPIO_Port, BT_RA_Pin) == GPIO_PIN_RESET) Msg[10] += 64;
 80037fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80037fe:	4820      	ldr	r0, [pc, #128]	; (8003880 <Loop_SMicromouse+0x7f0>)
 8003800:	f002 fb74 	bl	8005eec <HAL_GPIO_ReadPin>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d105      	bne.n	8003816 <Loop_SMicromouse+0x786>
 800380a:	4b1c      	ldr	r3, [pc, #112]	; (800387c <Loop_SMicromouse+0x7ec>)
 800380c:	7a9b      	ldrb	r3, [r3, #10]
 800380e:	3340      	adds	r3, #64	; 0x40
 8003810:	b2da      	uxtb	r2, r3
 8003812:	4b1a      	ldr	r3, [pc, #104]	; (800387c <Loop_SMicromouse+0x7ec>)
 8003814:	729a      	strb	r2, [r3, #10]
		if (HAL_GPIO_ReadPin(BT_RB_GPIO_Port, BT_RB_Pin) == GPIO_PIN_RESET) Msg[10] += 32;
 8003816:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800381a:	4819      	ldr	r0, [pc, #100]	; (8003880 <Loop_SMicromouse+0x7f0>)
 800381c:	f002 fb66 	bl	8005eec <HAL_GPIO_ReadPin>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d105      	bne.n	8003832 <Loop_SMicromouse+0x7a2>
 8003826:	4b15      	ldr	r3, [pc, #84]	; (800387c <Loop_SMicromouse+0x7ec>)
 8003828:	7a9b      	ldrb	r3, [r3, #10]
 800382a:	3320      	adds	r3, #32
 800382c:	b2da      	uxtb	r2, r3
 800382e:	4b13      	ldr	r3, [pc, #76]	; (800387c <Loop_SMicromouse+0x7ec>)
 8003830:	729a      	strb	r2, [r3, #10]
		if (HAL_GPIO_ReadPin(BT_RC_GPIO_Port, BT_RC_Pin) == GPIO_PIN_RESET) Msg[10] += 16;
 8003832:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003836:	4812      	ldr	r0, [pc, #72]	; (8003880 <Loop_SMicromouse+0x7f0>)
 8003838:	f002 fb58 	bl	8005eec <HAL_GPIO_ReadPin>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d105      	bne.n	800384e <Loop_SMicromouse+0x7be>
 8003842:	4b0e      	ldr	r3, [pc, #56]	; (800387c <Loop_SMicromouse+0x7ec>)
 8003844:	7a9b      	ldrb	r3, [r3, #10]
 8003846:	3310      	adds	r3, #16
 8003848:	b2da      	uxtb	r2, r3
 800384a:	4b0c      	ldr	r3, [pc, #48]	; (800387c <Loop_SMicromouse+0x7ec>)
 800384c:	729a      	strb	r2, [r3, #10]
		if (HAL_GPIO_ReadPin(BT_RD_GPIO_Port, BT_RD_Pin) == GPIO_PIN_RESET) Msg[10] += 8;
 800384e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003852:	480c      	ldr	r0, [pc, #48]	; (8003884 <Loop_SMicromouse+0x7f4>)
 8003854:	f002 fb4a 	bl	8005eec <HAL_GPIO_ReadPin>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d105      	bne.n	800386a <Loop_SMicromouse+0x7da>
 800385e:	4b07      	ldr	r3, [pc, #28]	; (800387c <Loop_SMicromouse+0x7ec>)
 8003860:	7a9b      	ldrb	r3, [r3, #10]
 8003862:	3308      	adds	r3, #8
 8003864:	b2da      	uxtb	r2, r3
 8003866:	4b05      	ldr	r3, [pc, #20]	; (800387c <Loop_SMicromouse+0x7ec>)
 8003868:	729a      	strb	r2, [r3, #10]

		// Nastepne odczyty

		//RF_TXData[5] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)

		Serial_Send(Msg, 11);
 800386a:	210b      	movs	r1, #11
 800386c:	4803      	ldr	r0, [pc, #12]	; (800387c <Loop_SMicromouse+0x7ec>)
 800386e:	f7fe fbed 	bl	800204c <Serial_Send>

		}
}
 8003872:	bf00      	nop
 8003874:	3724      	adds	r7, #36	; 0x24
 8003876:	46bd      	mov	sp, r7
 8003878:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800387a:	bf00      	nop
 800387c:	20000bb0 	.word	0x20000bb0
 8003880:	40010c00 	.word	0x40010c00
 8003884:	40010800 	.word	0x40010800

08003888 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800388c:	f001 fb4a 	bl	8004f24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003890:	f000 f898 	bl	80039c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003894:	f000 fa92 	bl	8003dbc <MX_GPIO_Init>
  MX_ADC1_Init();
 8003898:	f000 f8f2 	bl	8003a80 <MX_ADC1_Init>
  MX_I2C1_Init();
 800389c:	f000 f950 	bl	8003b40 <MX_I2C1_Init>
  MX_I2C2_Init();
 80038a0:	f000 f97c 	bl	8003b9c <MX_I2C2_Init>
  MX_SPI1_Init();
 80038a4:	f000 f9a8 	bl	8003bf8 <MX_SPI1_Init>
  MX_TIM3_Init();
 80038a8:	f000 f9dc 	bl	8003c64 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80038ac:	f000 fa32 	bl	8003d14 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80038b0:	f000 fa5a 	bl	8003d68 <MX_USART2_UART_Init>
  //MX_USB_DEVICE_Init();
  /* USER CODE BEGIN 2 */

// Zasilanie
  if (!HAL_GPIO_ReadPin(VIN_GPIO_Port, VIN_Pin)){
 80038b4:	2110      	movs	r1, #16
 80038b6:	483f      	ldr	r0, [pc, #252]	; (80039b4 <main+0x12c>)
 80038b8:	f002 fb18 	bl	8005eec <HAL_GPIO_ReadPin>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d104      	bne.n	80038cc <main+0x44>
	  // Zasilanie baterynje
    HAL_GPIO_WritePin(ON_GPIO_Port, ON_Pin, 1);
 80038c2:	2201      	movs	r2, #1
 80038c4:	2120      	movs	r1, #32
 80038c6:	483b      	ldr	r0, [pc, #236]	; (80039b4 <main+0x12c>)
 80038c8:	f002 fb27 	bl	8005f1a <HAL_GPIO_WritePin>
  }
// Reanimacja I2C
  I2C_ClearBusyFlagErratum(&hi2c1, 1000);
 80038cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80038d0:	4839      	ldr	r0, [pc, #228]	; (80039b8 <main+0x130>)
 80038d2:	f7fe fbfd 	bl	80020d0 <I2C_ClearBusyFlagErratum>
  __HAL_RCC_I2C1_FORCE_RESET();
 80038d6:	4b39      	ldr	r3, [pc, #228]	; (80039bc <main+0x134>)
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	4a38      	ldr	r2, [pc, #224]	; (80039bc <main+0x134>)
 80038dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80038e0:	6113      	str	r3, [r2, #16]
  __HAL_RCC_I2C1_RELEASE_RESET();
 80038e2:	4b36      	ldr	r3, [pc, #216]	; (80039bc <main+0x134>)
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	4a35      	ldr	r2, [pc, #212]	; (80039bc <main+0x134>)
 80038e8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80038ec:	6113      	str	r3, [r2, #16]
  MX_I2C1_Init();
 80038ee:	f000 f927 	bl	8003b40 <MX_I2C1_Init>
  __HAL_RCC_I2C1_FORCE_RESET();
 80038f2:	4b32      	ldr	r3, [pc, #200]	; (80039bc <main+0x134>)
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	4a31      	ldr	r2, [pc, #196]	; (80039bc <main+0x134>)
 80038f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80038fc:	6113      	str	r3, [r2, #16]
  __HAL_RCC_I2C1_RELEASE_RESET();
 80038fe:	4b2f      	ldr	r3, [pc, #188]	; (80039bc <main+0x134>)
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	4a2e      	ldr	r2, [pc, #184]	; (80039bc <main+0x134>)
 8003904:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003908:	6113      	str	r3, [r2, #16]
  MX_I2C1_Init();
 800390a:	f000 f919 	bl	8003b40 <MX_I2C1_Init>
  //I2C_ClearBusyFlagErratum2(&hi2c2, 1000);
  __HAL_RCC_I2C2_FORCE_RESET();
 800390e:	4b2b      	ldr	r3, [pc, #172]	; (80039bc <main+0x134>)
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	4a2a      	ldr	r2, [pc, #168]	; (80039bc <main+0x134>)
 8003914:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003918:	6113      	str	r3, [r2, #16]
  __HAL_RCC_I2C2_RELEASE_RESET();
 800391a:	4b28      	ldr	r3, [pc, #160]	; (80039bc <main+0x134>)
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	4a27      	ldr	r2, [pc, #156]	; (80039bc <main+0x134>)
 8003920:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003924:	6113      	str	r3, [r2, #16]
  MX_I2C2_Init();
 8003926:	f000 f939 	bl	8003b9c <MX_I2C2_Init>
  __HAL_RCC_I2C2_FORCE_RESET();
 800392a:	4b24      	ldr	r3, [pc, #144]	; (80039bc <main+0x134>)
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	4a23      	ldr	r2, [pc, #140]	; (80039bc <main+0x134>)
 8003930:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003934:	6113      	str	r3, [r2, #16]
  __HAL_RCC_I2C2_RELEASE_RESET();
 8003936:	4b21      	ldr	r3, [pc, #132]	; (80039bc <main+0x134>)
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	4a20      	ldr	r2, [pc, #128]	; (80039bc <main+0x134>)
 800393c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003940:	6113      	str	r3, [r2, #16]
  MX_I2C2_Init();
 8003942:	f000 f92b 	bl	8003b9c <MX_I2C2_Init>
// Ekran
  SSD1306_Init ();
 8003946:	f000 fc9d 	bl	8004284 <SSD1306_Init>
//
  	Begin();
 800394a:	f7ff f9e3 	bl	8002d14 <Begin>
	Program_Running = SelectProgram();
 800394e:	f7ff f9fb 	bl	8002d48 <SelectProgram>
 8003952:	4602      	mov	r2, r0
 8003954:	4b1a      	ldr	r3, [pc, #104]	; (80039c0 <main+0x138>)
 8003956:	601a      	str	r2, [r3, #0]
	switch (Program_Running){
 8003958:	4b19      	ldr	r3, [pc, #100]	; (80039c0 <main+0x138>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d002      	beq.n	8003966 <main+0xde>
 8003960:	2b01      	cmp	r3, #1
 8003962:	d003      	beq.n	800396c <main+0xe4>
 8003964:	e005      	b.n	8003972 <main+0xea>
		case 0: {
			Init_Gamepad();
 8003966:	f7ff fb47 	bl	8002ff8 <Init_Gamepad>
			break;
 800396a:	e005      	b.n	8003978 <main+0xf0>
		}
		case 1: {
			Init_SMicromouse();
 800396c:	f7ff fb72 	bl	8003054 <Init_SMicromouse>
			break;
 8003970:	e002      	b.n	8003978 <main+0xf0>
		}
		default:  {
			Init_Test();
 8003972:	f7ff fb19 	bl	8002fa8 <Init_Test>
			break;
 8003976:	bf00      	nop
		}
	}
	Update(0);
 8003978:	2000      	movs	r0, #0
 800397a:	f7ff f8e9 	bl	8002b50 <Update>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	switch (Program_Running){
 800397e:	4b10      	ldr	r3, [pc, #64]	; (80039c0 <main+0x138>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d002      	beq.n	800398c <main+0x104>
 8003986:	2b01      	cmp	r3, #1
 8003988:	d006      	beq.n	8003998 <main+0x110>
 800398a:	e00b      	b.n	80039a4 <main+0x11c>
		case 0: {
			Loop_Gamepad();
 800398c:	f7ff fb50 	bl	8003030 <Loop_Gamepad>
			Update(1);
 8003990:	2001      	movs	r0, #1
 8003992:	f7ff f8dd 	bl	8002b50 <Update>
			break;
 8003996:	e00b      	b.n	80039b0 <main+0x128>
		}
		case 1: {
			Loop_SMicromouse();
 8003998:	f7ff fb7a 	bl	8003090 <Loop_SMicromouse>
			Update(1);
 800399c:	2001      	movs	r0, #1
 800399e:	f7ff f8d7 	bl	8002b50 <Update>
			break;
 80039a2:	e005      	b.n	80039b0 <main+0x128>
		}
		default:  {
			Loop_Test();
 80039a4:	f7ff fb22 	bl	8002fec <Loop_Test>
			Update(0);
 80039a8:	2000      	movs	r0, #0
 80039aa:	f7ff f8d1 	bl	8002b50 <Update>
			break;
 80039ae:	bf00      	nop
	switch (Program_Running){
 80039b0:	e7e5      	b.n	800397e <main+0xf6>
 80039b2:	bf00      	nop
 80039b4:	40010c00 	.word	0x40010c00
 80039b8:	20000bc0 	.word	0x20000bc0
 80039bc:	40021000 	.word	0x40021000
 80039c0:	20000d00 	.word	0x20000d00

080039c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b094      	sub	sp, #80	; 0x50
 80039c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80039ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80039ce:	2228      	movs	r2, #40	; 0x28
 80039d0:	2100      	movs	r1, #0
 80039d2:	4618      	mov	r0, r3
 80039d4:	f009 fc17 	bl	800d206 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80039d8:	f107 0314 	add.w	r3, r7, #20
 80039dc:	2200      	movs	r2, #0
 80039de:	601a      	str	r2, [r3, #0]
 80039e0:	605a      	str	r2, [r3, #4]
 80039e2:	609a      	str	r2, [r3, #8]
 80039e4:	60da      	str	r2, [r3, #12]
 80039e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80039e8:	1d3b      	adds	r3, r7, #4
 80039ea:	2200      	movs	r2, #0
 80039ec:	601a      	str	r2, [r3, #0]
 80039ee:	605a      	str	r2, [r3, #4]
 80039f0:	609a      	str	r2, [r3, #8]
 80039f2:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80039f4:	2301      	movs	r3, #1
 80039f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80039f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80039fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80039fe:	2300      	movs	r3, #0
 8003a00:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003a02:	2301      	movs	r3, #1
 8003a04:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a06:	2302      	movs	r3, #2
 8003a08:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003a0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003a10:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003a14:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f004 fa3e 	bl	8007e9c <HAL_RCC_OscConfig>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8003a26:	f000 fa53 	bl	8003ed0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a2a:	230f      	movs	r3, #15
 8003a2c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a2e:	2302      	movs	r3, #2
 8003a30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a32:	2300      	movs	r3, #0
 8003a34:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003a36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a3a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003a3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a40:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003a42:	f107 0314 	add.w	r3, r7, #20
 8003a46:	2102      	movs	r1, #2
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f004 fca7 	bl	800839c <HAL_RCC_ClockConfig>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d001      	beq.n	8003a58 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003a54:	f000 fa3c 	bl	8003ed0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8003a58:	2312      	movs	r3, #18
 8003a5a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8003a5c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003a60:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8003a62:	2300      	movs	r3, #0
 8003a64:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a66:	1d3b      	adds	r3, r7, #4
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f004 fe33 	bl	80086d4 <HAL_RCCEx_PeriphCLKConfig>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d001      	beq.n	8003a78 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8003a74:	f000 fa2c 	bl	8003ed0 <Error_Handler>
  }
}
 8003a78:	bf00      	nop
 8003a7a:	3750      	adds	r7, #80	; 0x50
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003a86:	1d3b      	adds	r3, r7, #4
 8003a88:	2200      	movs	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]
 8003a8c:	605a      	str	r2, [r3, #4]
 8003a8e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8003a90:	4b29      	ldr	r3, [pc, #164]	; (8003b38 <MX_ADC1_Init+0xb8>)
 8003a92:	4a2a      	ldr	r2, [pc, #168]	; (8003b3c <MX_ADC1_Init+0xbc>)
 8003a94:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003a96:	4b28      	ldr	r3, [pc, #160]	; (8003b38 <MX_ADC1_Init+0xb8>)
 8003a98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a9c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003a9e:	4b26      	ldr	r3, [pc, #152]	; (8003b38 <MX_ADC1_Init+0xb8>)
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003aa4:	4b24      	ldr	r3, [pc, #144]	; (8003b38 <MX_ADC1_Init+0xb8>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003aaa:	4b23      	ldr	r3, [pc, #140]	; (8003b38 <MX_ADC1_Init+0xb8>)
 8003aac:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8003ab0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003ab2:	4b21      	ldr	r3, [pc, #132]	; (8003b38 <MX_ADC1_Init+0xb8>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8003ab8:	4b1f      	ldr	r3, [pc, #124]	; (8003b38 <MX_ADC1_Init+0xb8>)
 8003aba:	2203      	movs	r2, #3
 8003abc:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003abe:	481e      	ldr	r0, [pc, #120]	; (8003b38 <MX_ADC1_Init+0xb8>)
 8003ac0:	f001 fab4 	bl	800502c <HAL_ADC_Init>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d001      	beq.n	8003ace <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8003aca:	f000 fa01 	bl	8003ed0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8003ad6:	2307      	movs	r3, #7
 8003ad8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003ada:	1d3b      	adds	r3, r7, #4
 8003adc:	4619      	mov	r1, r3
 8003ade:	4816      	ldr	r0, [pc, #88]	; (8003b38 <MX_ADC1_Init+0xb8>)
 8003ae0:	f001 fd5c 	bl	800559c <HAL_ADC_ConfigChannel>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8003aea:	f000 f9f1 	bl	8003ed0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  sConfig.Channel = ADC_CHANNEL_1;
 8003aee:	2301      	movs	r3, #1
 8003af0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003af2:	2303      	movs	r3, #3
 8003af4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8003af6:	2307      	movs	r3, #7
 8003af8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003afa:	1d3b      	adds	r3, r7, #4
 8003afc:	4619      	mov	r1, r3
 8003afe:	480e      	ldr	r0, [pc, #56]	; (8003b38 <MX_ADC1_Init+0xb8>)
 8003b00:	f001 fd4c 	bl	800559c <HAL_ADC_ConfigChannel>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <MX_ADC1_Init+0x8e>
  {
	Error_Handler();
 8003b0a:	f000 f9e1 	bl	8003ed0 <Error_Handler>
  }
  sConfig.Channel = ADC_CHANNEL_4;
 8003b0e:	2304      	movs	r3, #4
 8003b10:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003b12:	2302      	movs	r3, #2
 8003b14:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8003b16:	2307      	movs	r3, #7
 8003b18:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003b1a:	1d3b      	adds	r3, r7, #4
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	4806      	ldr	r0, [pc, #24]	; (8003b38 <MX_ADC1_Init+0xb8>)
 8003b20:	f001 fd3c 	bl	800559c <HAL_ADC_ConfigChannel>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <MX_ADC1_Init+0xae>
  {
	Error_Handler();
 8003b2a:	f000 f9d1 	bl	8003ed0 <Error_Handler>
  }
  /* USER CODE END ADC1_Init 2 */

}
 8003b2e:	bf00      	nop
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	20000cd0 	.word	0x20000cd0
 8003b3c:	40012400 	.word	0x40012400

08003b40 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003b44:	4b12      	ldr	r3, [pc, #72]	; (8003b90 <MX_I2C1_Init+0x50>)
 8003b46:	4a13      	ldr	r2, [pc, #76]	; (8003b94 <MX_I2C1_Init+0x54>)
 8003b48:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003b4a:	4b11      	ldr	r3, [pc, #68]	; (8003b90 <MX_I2C1_Init+0x50>)
 8003b4c:	4a12      	ldr	r2, [pc, #72]	; (8003b98 <MX_I2C1_Init+0x58>)
 8003b4e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003b50:	4b0f      	ldr	r3, [pc, #60]	; (8003b90 <MX_I2C1_Init+0x50>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003b56:	4b0e      	ldr	r3, [pc, #56]	; (8003b90 <MX_I2C1_Init+0x50>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003b5c:	4b0c      	ldr	r3, [pc, #48]	; (8003b90 <MX_I2C1_Init+0x50>)
 8003b5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003b62:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003b64:	4b0a      	ldr	r3, [pc, #40]	; (8003b90 <MX_I2C1_Init+0x50>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003b6a:	4b09      	ldr	r3, [pc, #36]	; (8003b90 <MX_I2C1_Init+0x50>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003b70:	4b07      	ldr	r3, [pc, #28]	; (8003b90 <MX_I2C1_Init+0x50>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003b76:	4b06      	ldr	r3, [pc, #24]	; (8003b90 <MX_I2C1_Init+0x50>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003b7c:	4804      	ldr	r0, [pc, #16]	; (8003b90 <MX_I2C1_Init+0x50>)
 8003b7e:	f002 f9fd 	bl	8005f7c <HAL_I2C_Init>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d001      	beq.n	8003b8c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003b88:	f000 f9a2 	bl	8003ed0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003b8c:	bf00      	nop
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	20000bc0 	.word	0x20000bc0
 8003b94:	40005400 	.word	0x40005400
 8003b98:	00061a80 	.word	0x00061a80

08003b9c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003ba0:	4b12      	ldr	r3, [pc, #72]	; (8003bec <MX_I2C2_Init+0x50>)
 8003ba2:	4a13      	ldr	r2, [pc, #76]	; (8003bf0 <MX_I2C2_Init+0x54>)
 8003ba4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8003ba6:	4b11      	ldr	r3, [pc, #68]	; (8003bec <MX_I2C2_Init+0x50>)
 8003ba8:	4a12      	ldr	r2, [pc, #72]	; (8003bf4 <MX_I2C2_Init+0x58>)
 8003baa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003bac:	4b0f      	ldr	r3, [pc, #60]	; (8003bec <MX_I2C2_Init+0x50>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003bb2:	4b0e      	ldr	r3, [pc, #56]	; (8003bec <MX_I2C2_Init+0x50>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003bb8:	4b0c      	ldr	r3, [pc, #48]	; (8003bec <MX_I2C2_Init+0x50>)
 8003bba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003bbe:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003bc0:	4b0a      	ldr	r3, [pc, #40]	; (8003bec <MX_I2C2_Init+0x50>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003bc6:	4b09      	ldr	r3, [pc, #36]	; (8003bec <MX_I2C2_Init+0x50>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003bcc:	4b07      	ldr	r3, [pc, #28]	; (8003bec <MX_I2C2_Init+0x50>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003bd2:	4b06      	ldr	r3, [pc, #24]	; (8003bec <MX_I2C2_Init+0x50>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003bd8:	4804      	ldr	r0, [pc, #16]	; (8003bec <MX_I2C2_Init+0x50>)
 8003bda:	f002 f9cf 	bl	8005f7c <HAL_I2C_Init>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d001      	beq.n	8003be8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003be4:	f000 f974 	bl	8003ed0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003be8:	bf00      	nop
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	20000c14 	.word	0x20000c14
 8003bf0:	40005800 	.word	0x40005800
 8003bf4:	00061a80 	.word	0x00061a80

08003bf8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003bfc:	4b17      	ldr	r3, [pc, #92]	; (8003c5c <MX_SPI1_Init+0x64>)
 8003bfe:	4a18      	ldr	r2, [pc, #96]	; (8003c60 <MX_SPI1_Init+0x68>)
 8003c00:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003c02:	4b16      	ldr	r3, [pc, #88]	; (8003c5c <MX_SPI1_Init+0x64>)
 8003c04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003c08:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003c0a:	4b14      	ldr	r3, [pc, #80]	; (8003c5c <MX_SPI1_Init+0x64>)
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003c10:	4b12      	ldr	r3, [pc, #72]	; (8003c5c <MX_SPI1_Init+0x64>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c16:	4b11      	ldr	r3, [pc, #68]	; (8003c5c <MX_SPI1_Init+0x64>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003c1c:	4b0f      	ldr	r3, [pc, #60]	; (8003c5c <MX_SPI1_Init+0x64>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003c22:	4b0e      	ldr	r3, [pc, #56]	; (8003c5c <MX_SPI1_Init+0x64>)
 8003c24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c28:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003c2a:	4b0c      	ldr	r3, [pc, #48]	; (8003c5c <MX_SPI1_Init+0x64>)
 8003c2c:	2220      	movs	r2, #32
 8003c2e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003c30:	4b0a      	ldr	r3, [pc, #40]	; (8003c5c <MX_SPI1_Init+0x64>)
 8003c32:	2200      	movs	r2, #0
 8003c34:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003c36:	4b09      	ldr	r3, [pc, #36]	; (8003c5c <MX_SPI1_Init+0x64>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c3c:	4b07      	ldr	r3, [pc, #28]	; (8003c5c <MX_SPI1_Init+0x64>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003c42:	4b06      	ldr	r3, [pc, #24]	; (8003c5c <MX_SPI1_Init+0x64>)
 8003c44:	220a      	movs	r2, #10
 8003c46:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003c48:	4804      	ldr	r0, [pc, #16]	; (8003c5c <MX_SPI1_Init+0x64>)
 8003c4a:	f004 feb5 	bl	80089b8 <HAL_SPI_Init>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d001      	beq.n	8003c58 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003c54:	f000 f93c 	bl	8003ed0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003c58:	bf00      	nop
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	20000d74 	.word	0x20000d74
 8003c60:	40013000 	.word	0x40013000

08003c64 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b08a      	sub	sp, #40	; 0x28
 8003c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c6a:	f107 0320 	add.w	r3, r7, #32
 8003c6e:	2200      	movs	r2, #0
 8003c70:	601a      	str	r2, [r3, #0]
 8003c72:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003c74:	1d3b      	adds	r3, r7, #4
 8003c76:	2200      	movs	r2, #0
 8003c78:	601a      	str	r2, [r3, #0]
 8003c7a:	605a      	str	r2, [r3, #4]
 8003c7c:	609a      	str	r2, [r3, #8]
 8003c7e:	60da      	str	r2, [r3, #12]
 8003c80:	611a      	str	r2, [r3, #16]
 8003c82:	615a      	str	r2, [r3, #20]
 8003c84:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003c86:	4b21      	ldr	r3, [pc, #132]	; (8003d0c <MX_TIM3_Init+0xa8>)
 8003c88:	4a21      	ldr	r2, [pc, #132]	; (8003d10 <MX_TIM3_Init+0xac>)
 8003c8a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003c8c:	4b1f      	ldr	r3, [pc, #124]	; (8003d0c <MX_TIM3_Init+0xa8>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c92:	4b1e      	ldr	r3, [pc, #120]	; (8003d0c <MX_TIM3_Init+0xa8>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8003c98:	4b1c      	ldr	r3, [pc, #112]	; (8003d0c <MX_TIM3_Init+0xa8>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c9e:	4b1b      	ldr	r3, [pc, #108]	; (8003d0c <MX_TIM3_Init+0xa8>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ca4:	4b19      	ldr	r3, [pc, #100]	; (8003d0c <MX_TIM3_Init+0xa8>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003caa:	4818      	ldr	r0, [pc, #96]	; (8003d0c <MX_TIM3_Init+0xa8>)
 8003cac:	f005 fb9e 	bl	80093ec <HAL_TIM_PWM_Init>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8003cb6:	f000 f90b 	bl	8003ed0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003cc2:	f107 0320 	add.w	r3, r7, #32
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	4810      	ldr	r0, [pc, #64]	; (8003d0c <MX_TIM3_Init+0xa8>)
 8003cca:	f005 fe6b 	bl	80099a4 <HAL_TIMEx_MasterConfigSynchronization>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d001      	beq.n	8003cd8 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8003cd4:	f000 f8fc 	bl	8003ed0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003cd8:	2360      	movs	r3, #96	; 0x60
 8003cda:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003ce8:	1d3b      	adds	r3, r7, #4
 8003cea:	2208      	movs	r2, #8
 8003cec:	4619      	mov	r1, r3
 8003cee:	4807      	ldr	r0, [pc, #28]	; (8003d0c <MX_TIM3_Init+0xa8>)
 8003cf0:	f005 fba8 	bl	8009444 <HAL_TIM_PWM_ConfigChannel>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d001      	beq.n	8003cfe <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8003cfa:	f000 f8e9 	bl	8003ed0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003cfe:	4803      	ldr	r0, [pc, #12]	; (8003d0c <MX_TIM3_Init+0xa8>)
 8003d00:	f000 ffa0 	bl	8004c44 <HAL_TIM_MspPostInit>

}
 8003d04:	bf00      	nop
 8003d06:	3728      	adds	r7, #40	; 0x28
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	20000c70 	.word	0x20000c70
 8003d10:	40000400 	.word	0x40000400

08003d14 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003d18:	4b11      	ldr	r3, [pc, #68]	; (8003d60 <MX_USART1_UART_Init+0x4c>)
 8003d1a:	4a12      	ldr	r2, [pc, #72]	; (8003d64 <MX_USART1_UART_Init+0x50>)
 8003d1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003d1e:	4b10      	ldr	r3, [pc, #64]	; (8003d60 <MX_USART1_UART_Init+0x4c>)
 8003d20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003d24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003d26:	4b0e      	ldr	r3, [pc, #56]	; (8003d60 <MX_USART1_UART_Init+0x4c>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003d2c:	4b0c      	ldr	r3, [pc, #48]	; (8003d60 <MX_USART1_UART_Init+0x4c>)
 8003d2e:	2200      	movs	r2, #0
 8003d30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003d32:	4b0b      	ldr	r3, [pc, #44]	; (8003d60 <MX_USART1_UART_Init+0x4c>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003d38:	4b09      	ldr	r3, [pc, #36]	; (8003d60 <MX_USART1_UART_Init+0x4c>)
 8003d3a:	220c      	movs	r2, #12
 8003d3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d3e:	4b08      	ldr	r3, [pc, #32]	; (8003d60 <MX_USART1_UART_Init+0x4c>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d44:	4b06      	ldr	r3, [pc, #24]	; (8003d60 <MX_USART1_UART_Init+0x4c>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003d4a:	4805      	ldr	r0, [pc, #20]	; (8003d60 <MX_USART1_UART_Init+0x4c>)
 8003d4c:	f005 fe6e 	bl	8009a2c <HAL_UART_Init>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d001      	beq.n	8003d5a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003d56:	f000 f8bb 	bl	8003ed0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003d5a:	bf00      	nop
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	20000d24 	.word	0x20000d24
 8003d64:	40013800 	.word	0x40013800

08003d68 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003d6c:	4b11      	ldr	r3, [pc, #68]	; (8003db4 <MX_USART2_UART_Init+0x4c>)
 8003d6e:	4a12      	ldr	r2, [pc, #72]	; (8003db8 <MX_USART2_UART_Init+0x50>)
 8003d70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003d72:	4b10      	ldr	r3, [pc, #64]	; (8003db4 <MX_USART2_UART_Init+0x4c>)
 8003d74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003d78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003d7a:	4b0e      	ldr	r3, [pc, #56]	; (8003db4 <MX_USART2_UART_Init+0x4c>)
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003d80:	4b0c      	ldr	r3, [pc, #48]	; (8003db4 <MX_USART2_UART_Init+0x4c>)
 8003d82:	2200      	movs	r2, #0
 8003d84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003d86:	4b0b      	ldr	r3, [pc, #44]	; (8003db4 <MX_USART2_UART_Init+0x4c>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003d8c:	4b09      	ldr	r3, [pc, #36]	; (8003db4 <MX_USART2_UART_Init+0x4c>)
 8003d8e:	220c      	movs	r2, #12
 8003d90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d92:	4b08      	ldr	r3, [pc, #32]	; (8003db4 <MX_USART2_UART_Init+0x4c>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d98:	4b06      	ldr	r3, [pc, #24]	; (8003db4 <MX_USART2_UART_Init+0x4c>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003d9e:	4805      	ldr	r0, [pc, #20]	; (8003db4 <MX_USART2_UART_Init+0x4c>)
 8003da0:	f005 fe44 	bl	8009a2c <HAL_UART_Init>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d001      	beq.n	8003dae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003daa:	f000 f891 	bl	8003ed0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003dae:	bf00      	nop
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	20000dcc 	.word	0x20000dcc
 8003db8:	40004400 	.word	0x40004400

08003dbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b088      	sub	sp, #32
 8003dc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dc2:	f107 0310 	add.w	r3, r7, #16
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	601a      	str	r2, [r3, #0]
 8003dca:	605a      	str	r2, [r3, #4]
 8003dcc:	609a      	str	r2, [r3, #8]
 8003dce:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003dd0:	4b3b      	ldr	r3, [pc, #236]	; (8003ec0 <MX_GPIO_Init+0x104>)
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	4a3a      	ldr	r2, [pc, #232]	; (8003ec0 <MX_GPIO_Init+0x104>)
 8003dd6:	f043 0310 	orr.w	r3, r3, #16
 8003dda:	6193      	str	r3, [r2, #24]
 8003ddc:	4b38      	ldr	r3, [pc, #224]	; (8003ec0 <MX_GPIO_Init+0x104>)
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	f003 0310 	and.w	r3, r3, #16
 8003de4:	60fb      	str	r3, [r7, #12]
 8003de6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003de8:	4b35      	ldr	r3, [pc, #212]	; (8003ec0 <MX_GPIO_Init+0x104>)
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	4a34      	ldr	r2, [pc, #208]	; (8003ec0 <MX_GPIO_Init+0x104>)
 8003dee:	f043 0320 	orr.w	r3, r3, #32
 8003df2:	6193      	str	r3, [r2, #24]
 8003df4:	4b32      	ldr	r3, [pc, #200]	; (8003ec0 <MX_GPIO_Init+0x104>)
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	f003 0320 	and.w	r3, r3, #32
 8003dfc:	60bb      	str	r3, [r7, #8]
 8003dfe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e00:	4b2f      	ldr	r3, [pc, #188]	; (8003ec0 <MX_GPIO_Init+0x104>)
 8003e02:	699b      	ldr	r3, [r3, #24]
 8003e04:	4a2e      	ldr	r2, [pc, #184]	; (8003ec0 <MX_GPIO_Init+0x104>)
 8003e06:	f043 0304 	orr.w	r3, r3, #4
 8003e0a:	6193      	str	r3, [r2, #24]
 8003e0c:	4b2c      	ldr	r3, [pc, #176]	; (8003ec0 <MX_GPIO_Init+0x104>)
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	f003 0304 	and.w	r3, r3, #4
 8003e14:	607b      	str	r3, [r7, #4]
 8003e16:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e18:	4b29      	ldr	r3, [pc, #164]	; (8003ec0 <MX_GPIO_Init+0x104>)
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	4a28      	ldr	r2, [pc, #160]	; (8003ec0 <MX_GPIO_Init+0x104>)
 8003e1e:	f043 0308 	orr.w	r3, r3, #8
 8003e22:	6193      	str	r3, [r2, #24]
 8003e24:	4b26      	ldr	r3, [pc, #152]	; (8003ec0 <MX_GPIO_Init+0x104>)
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	f003 0308 	and.w	r3, r3, #8
 8003e2c:	603b      	str	r3, [r7, #0]
 8003e2e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|CSN_Pin|CE_Pin, GPIO_PIN_RESET);
 8003e30:	2200      	movs	r2, #0
 8003e32:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8003e36:	4823      	ldr	r0, [pc, #140]	; (8003ec4 <MX_GPIO_Init+0x108>)
 8003e38:	f002 f86f 	bl	8005f1a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ON_Pin|MOS_Pin, GPIO_PIN_RESET);
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f44f 7108 	mov.w	r1, #544	; 0x220
 8003e42:	4821      	ldr	r0, [pc, #132]	; (8003ec8 <MX_GPIO_Init+0x10c>)
 8003e44:	f002 f869 	bl	8005f1a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin CSN_Pin CE_Pin */
  GPIO_InitStruct.Pin = LED_Pin|CSN_Pin|CE_Pin;
 8003e48:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003e4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e52:	2300      	movs	r3, #0
 8003e54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e56:	2302      	movs	r3, #2
 8003e58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e5a:	f107 0310 	add.w	r3, r7, #16
 8003e5e:	4619      	mov	r1, r3
 8003e60:	4818      	ldr	r0, [pc, #96]	; (8003ec4 <MX_GPIO_Init+0x108>)
 8003e62:	f001 fe2d 	bl	8005ac0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BT_LD_Pin BT_LA_Pin BT_RS_Pin BT_RA_Pin 
                           BT_RB_Pin BT_RC_Pin BT_LB_Pin VIN_Pin 
                           BT_POWER_Pin */
  GPIO_InitStruct.Pin = BT_LD_Pin|BT_LA_Pin|BT_RS_Pin|BT_RA_Pin 
 8003e66:	f24f 131e 	movw	r3, #61726	; 0xf11e
 8003e6a:	613b      	str	r3, [r7, #16]
                          |BT_RB_Pin|BT_RC_Pin|BT_LB_Pin|VIN_Pin 
                          |BT_POWER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e70:	2300      	movs	r3, #0
 8003e72:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e74:	f107 0310 	add.w	r3, r7, #16
 8003e78:	4619      	mov	r1, r3
 8003e7a:	4813      	ldr	r0, [pc, #76]	; (8003ec8 <MX_GPIO_Init+0x10c>)
 8003e7c:	f001 fe20 	bl	8005ac0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BT_RD_Pin BT_LC_Pin */
  GPIO_InitStruct.Pin = BT_RD_Pin|BT_LC_Pin;
 8003e80:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8003e84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e86:	2300      	movs	r3, #0
 8003e88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e8e:	f107 0310 	add.w	r3, r7, #16
 8003e92:	4619      	mov	r1, r3
 8003e94:	480d      	ldr	r0, [pc, #52]	; (8003ecc <MX_GPIO_Init+0x110>)
 8003e96:	f001 fe13 	bl	8005ac0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ON_Pin MOS_Pin */
  GPIO_InitStruct.Pin = ON_Pin|MOS_Pin;
 8003e9a:	f44f 7308 	mov.w	r3, #544	; 0x220
 8003e9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003eac:	f107 0310 	add.w	r3, r7, #16
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	4805      	ldr	r0, [pc, #20]	; (8003ec8 <MX_GPIO_Init+0x10c>)
 8003eb4:	f001 fe04 	bl	8005ac0 <HAL_GPIO_Init>

}
 8003eb8:	bf00      	nop
 8003eba:	3720      	adds	r7, #32
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	40021000 	.word	0x40021000
 8003ec4:	40011000 	.word	0x40011000
 8003ec8:	40010c00 	.word	0x40010c00
 8003ecc:	40010800 	.word	0x40010800

08003ed0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003ed4:	bf00      	nop
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bc80      	pop	{r7}
 8003eda:	4770      	bx	lr

08003edc <CUSTOM_HID_Init_FS>:
  *         Initializes the CUSTOM HID media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{ 
 8003edc:	b480      	push	{r7}
 8003ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */ 
  return (0);
 8003ee0:	2300      	movs	r3, #0
  /* USER CODE END 4 */ 
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bc80      	pop	{r7}
 8003ee8:	4770      	bx	lr

08003eea <CUSTOM_HID_DeInit_FS>:
  *         DeInitializes the CUSTOM HID media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8003eea:	b480      	push	{r7}
 8003eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */ 
  return (0);
 8003eee:	2300      	movs	r3, #0
  /* USER CODE END 5 */ 
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bc80      	pop	{r7}
 8003ef6:	4770      	bx	lr

08003ef8 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: event index
  * @param  state: event state
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS  (uint8_t event_idx, uint8_t state)
{ 
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	4603      	mov	r3, r0
 8003f00:	460a      	mov	r2, r1
 8003f02:	71fb      	strb	r3, [r7, #7]
 8003f04:	4613      	mov	r3, r2
 8003f06:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */ 
  return (0);
 8003f08:	2300      	movs	r3, #0
  /* USER CODE END 6 */ 
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bc80      	pop	{r7}
 8003f12:	4770      	bx	lr

08003f14 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8003f20:	2300      	movs	r3, #0
 8003f22:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;
  /* Open EP IN */
  USBD_LL_OpenEP(pdev,
 8003f24:	2320      	movs	r3, #32
 8003f26:	2203      	movs	r2, #3
 8003f28:	2181      	movs	r1, #129	; 0x81
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f008 ffc9 	bl	800cec2 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_ADDR,
                 USBD_EP_TYPE_INTR,
                 CUSTOM_HID_EPIN_SIZE);  
  
  /* Open EP OUT */
  USBD_LL_OpenEP(pdev,
 8003f30:	2308      	movs	r3, #8
 8003f32:	2203      	movs	r2, #3
 8003f34:	2101      	movs	r1, #1
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f008 ffc3 	bl	800cec2 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_ADDR,
                 USBD_EP_TYPE_INTR,
                 CUSTOM_HID_EPOUT_SIZE);
  
  pdev->pClassData = USBD_malloc(sizeof (USBD_CUSTOM_HID_HandleTypeDef));
 8003f3c:	2028      	movs	r0, #40	; 0x28
 8003f3e:	f009 f8e1 	bl	800d104 <USBD_static_malloc>
 8003f42:	4602      	mov	r2, r0
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  
  if(pdev->pClassData == NULL)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d102      	bne.n	8003f5a <USBD_CUSTOM_HID_Init+0x46>
  {
    ret = 1; 
 8003f54:	2301      	movs	r3, #1
 8003f56:	73fb      	strb	r3, [r7, #15]
 8003f58:	e012      	b.n	8003f80 <USBD_CUSTOM_HID_Init+0x6c>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef*) pdev->pClassData;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003f60:	60bb      	str	r3, [r7, #8]
      
    hhid->state = CUSTOM_HID_IDLE;
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	4798      	blx	r3
          /* Prepare Out endpoint to receive 1st packet */ 
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf, 
 8003f74:	68ba      	ldr	r2, [r7, #8]
 8003f76:	2314      	movs	r3, #20
 8003f78:	2101      	movs	r1, #1
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f009 f88b 	bl	800d096 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }
    
  return ret;
 8003f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3710      	adds	r7, #16
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b082      	sub	sp, #8
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
 8003f92:	460b      	mov	r3, r1
 8003f94:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev,
 8003f96:	2181      	movs	r1, #129	; 0x81
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f008 ffb8 	bl	800cf0e <USBD_LL_CloseEP>
                  CUSTOM_HID_EPIN_ADDR);
  
  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev,
 8003f9e:	2101      	movs	r1, #1
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f008 ffb4 	bl	800cf0e <USBD_LL_CloseEP>
                  CUSTOM_HID_EPOUT_ADDR);
  
  /* FRee allocated memory */
  if(pdev->pClassData != NULL)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00e      	beq.n	8003fce <USBD_CUSTOM_HID_DeInit+0x44>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f009 f8ab 	bl	800d11c <USBD_static_free>
    pdev->pClassData = NULL;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }
  return USBD_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3708      	adds	r7, #8
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b086      	sub	sp, #24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	82fb      	strh	r3, [r7, #22]
  uint8_t  *pbuf = NULL;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	613b      	str	r3, [r7, #16]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003ff0:	60fb      	str	r3, [r7, #12]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d052      	beq.n	80040a4 <USBD_CUSTOM_HID_Setup+0xcc>
 8003ffe:	2b20      	cmp	r3, #32
 8004000:	f040 808e 	bne.w	8004120 <USBD_CUSTOM_HID_Setup+0x148>
  {
  case USB_REQ_TYPE_CLASS :  
    switch (req->bRequest)
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	785b      	ldrb	r3, [r3, #1]
 8004008:	3b02      	subs	r3, #2
 800400a:	2b09      	cmp	r3, #9
 800400c:	d843      	bhi.n	8004096 <USBD_CUSTOM_HID_Setup+0xbe>
 800400e:	a201      	add	r2, pc, #4	; (adr r2, 8004014 <USBD_CUSTOM_HID_Setup+0x3c>)
 8004010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004014:	0800406d 	.word	0x0800406d
 8004018:	0800404b 	.word	0x0800404b
 800401c:	08004097 	.word	0x08004097
 8004020:	08004097 	.word	0x08004097
 8004024:	08004097 	.word	0x08004097
 8004028:	08004097 	.word	0x08004097
 800402c:	08004097 	.word	0x08004097
 8004030:	0800407d 	.word	0x0800407d
 8004034:	0800405b 	.word	0x0800405b
 8004038:	0800403d 	.word	0x0800403d
    {
      
      
    case CUSTOM_HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	885b      	ldrh	r3, [r3, #2]
 8004040:	b2db      	uxtb	r3, r3
 8004042:	461a      	mov	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	615a      	str	r2, [r3, #20]
      break;
 8004048:	e02b      	b.n	80040a2 <USBD_CUSTOM_HID_Setup+0xca>
      
    case CUSTOM_HID_REQ_GET_PROTOCOL:
      USBD_CtlSendData (pdev, 
                        (uint8_t *)&hhid->Protocol,
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	3314      	adds	r3, #20
      USBD_CtlSendData (pdev, 
 800404e:	2201      	movs	r2, #1
 8004050:	4619      	mov	r1, r3
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f008 fb26 	bl	800c6a4 <USBD_CtlSendData>
                        1);    
      break;
 8004058:	e023      	b.n	80040a2 <USBD_CUSTOM_HID_Setup+0xca>
      
    case CUSTOM_HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	885b      	ldrh	r3, [r3, #2]
 800405e:	0a1b      	lsrs	r3, r3, #8
 8004060:	b29b      	uxth	r3, r3
 8004062:	b2db      	uxtb	r3, r3
 8004064:	461a      	mov	r2, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	619a      	str	r2, [r3, #24]
      break;
 800406a:	e01a      	b.n	80040a2 <USBD_CUSTOM_HID_Setup+0xca>
      
    case CUSTOM_HID_REQ_GET_IDLE:
      USBD_CtlSendData (pdev, 
                        (uint8_t *)&hhid->IdleState,
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	3318      	adds	r3, #24
      USBD_CtlSendData (pdev, 
 8004070:	2201      	movs	r2, #1
 8004072:	4619      	mov	r1, r3
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f008 fb15 	bl	800c6a4 <USBD_CtlSendData>
                        1);        
      break;      
 800407a:	e012      	b.n	80040a2 <USBD_CUSTOM_HID_Setup+0xca>
    
    case CUSTOM_HID_REQ_SET_REPORT:
      hhid->IsReportAvailable = 1;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2201      	movs	r2, #1
 8004080:	621a      	str	r2, [r3, #32]
      USBD_CtlPrepareRx (pdev, hhid->Report_buf, (uint8_t)(req->wLength));
 8004082:	68f9      	ldr	r1, [r7, #12]
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	88db      	ldrh	r3, [r3, #6]
 8004088:	b2db      	uxtb	r3, r3
 800408a:	b29b      	uxth	r3, r3
 800408c:	461a      	mov	r2, r3
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f008 fb36 	bl	800c700 <USBD_CtlPrepareRx>
      
      break;
 8004094:	e005      	b.n	80040a2 <USBD_CUSTOM_HID_Setup+0xca>
    default:
      USBD_CtlError (pdev, req);
 8004096:	6839      	ldr	r1, [r7, #0]
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f008 fa99 	bl	800c5d0 <USBD_CtlError>
      return USBD_FAIL; 
 800409e:	2302      	movs	r3, #2
 80040a0:	e03f      	b.n	8004122 <USBD_CUSTOM_HID_Setup+0x14a>
    }
    break;
 80040a2:	e03d      	b.n	8004120 <USBD_CUSTOM_HID_Setup+0x148>
    
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	785b      	ldrb	r3, [r3, #1]
 80040a8:	2b0a      	cmp	r3, #10
 80040aa:	d02a      	beq.n	8004102 <USBD_CUSTOM_HID_Setup+0x12a>
 80040ac:	2b0b      	cmp	r3, #11
 80040ae:	d030      	beq.n	8004112 <USBD_CUSTOM_HID_Setup+0x13a>
 80040b0:	2b06      	cmp	r3, #6
 80040b2:	d135      	bne.n	8004120 <USBD_CUSTOM_HID_Setup+0x148>
    {
    case USB_REQ_GET_DESCRIPTOR: 
      if( req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	885b      	ldrh	r3, [r3, #2]
 80040b8:	0a1b      	lsrs	r3, r3, #8
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	2b22      	cmp	r3, #34	; 0x22
 80040be:	d10b      	bne.n	80040d8 <USBD_CUSTOM_HID_Setup+0x100>
      {
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE , req->wLength);
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	88db      	ldrh	r3, [r3, #6]
 80040c4:	2b14      	cmp	r3, #20
 80040c6:	bf28      	it	cs
 80040c8:	2314      	movcs	r3, #20
 80040ca:	82fb      	strh	r3, [r7, #22]
        pbuf =  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	613b      	str	r3, [r7, #16]
 80040d6:	e00d      	b.n	80040f4 <USBD_CUSTOM_HID_Setup+0x11c>
      }
      else if( req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	885b      	ldrh	r3, [r3, #2]
 80040dc:	0a1b      	lsrs	r3, r3, #8
 80040de:	b29b      	uxth	r3, r3
 80040e0:	2b21      	cmp	r3, #33	; 0x21
 80040e2:	d107      	bne.n	80040f4 <USBD_CUSTOM_HID_Setup+0x11c>
      {
        pbuf = USBD_CUSTOM_HID_Desc;   
 80040e4:	4b11      	ldr	r3, [pc, #68]	; (800412c <USBD_CUSTOM_HID_Setup+0x154>)
 80040e6:	613b      	str	r3, [r7, #16]
        len = MIN(USB_CUSTOM_HID_DESC_SIZ , req->wLength);
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	88db      	ldrh	r3, [r3, #6]
 80040ec:	2b09      	cmp	r3, #9
 80040ee:	bf28      	it	cs
 80040f0:	2309      	movcs	r3, #9
 80040f2:	82fb      	strh	r3, [r7, #22]
      }
      
      USBD_CtlSendData (pdev, 
 80040f4:	8afb      	ldrh	r3, [r7, #22]
 80040f6:	461a      	mov	r2, r3
 80040f8:	6939      	ldr	r1, [r7, #16]
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f008 fad2 	bl	800c6a4 <USBD_CtlSendData>
                        pbuf,
                        len);
      
      break;
 8004100:	e00e      	b.n	8004120 <USBD_CUSTOM_HID_Setup+0x148>
      
    case USB_REQ_GET_INTERFACE :
      USBD_CtlSendData (pdev,
                        (uint8_t *)&hhid->AltSetting,
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	331c      	adds	r3, #28
      USBD_CtlSendData (pdev,
 8004106:	2201      	movs	r2, #1
 8004108:	4619      	mov	r1, r3
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f008 faca 	bl	800c6a4 <USBD_CtlSendData>
                        1);
      break;
 8004110:	e006      	b.n	8004120 <USBD_CUSTOM_HID_Setup+0x148>
      
    case USB_REQ_SET_INTERFACE :
      hhid->AltSetting = (uint8_t)(req->wValue);
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	885b      	ldrh	r3, [r3, #2]
 8004116:	b2db      	uxtb	r3, r3
 8004118:	461a      	mov	r2, r3
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	61da      	str	r2, [r3, #28]
      break;
 800411e:	bf00      	nop
    }
  }
  return USBD_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3718      	adds	r7, #24
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	20000234 	.word	0x20000234

08004130 <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport     (USBD_HandleTypeDef  *pdev, 
                                 uint8_t *report,
                                 uint16_t len)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	4613      	mov	r3, r2
 800413c:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004144:	617b      	str	r3, [r7, #20]
  
  if (pdev->dev_state == USBD_STATE_CONFIGURED )
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800414c:	2b03      	cmp	r3, #3
 800414e:	d10e      	bne.n	800416e <USBD_CUSTOM_HID_SendReport+0x3e>
  {
    if(hhid->state == CUSTOM_HID_IDLE)
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004156:	2b00      	cmp	r3, #0
 8004158:	d109      	bne.n	800416e <USBD_CUSTOM_HID_SendReport+0x3e>
    {
      hhid->state = CUSTOM_HID_BUSY;
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	2201      	movs	r2, #1
 800415e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      USBD_LL_Transmit (pdev, 
 8004162:	88fb      	ldrh	r3, [r7, #6]
 8004164:	68ba      	ldr	r2, [r7, #8]
 8004166:	2181      	movs	r1, #129	; 0x81
 8004168:	68f8      	ldr	r0, [r7, #12]
 800416a:	f008 ff71 	bl	800d050 <USBD_LL_Transmit>
                        CUSTOM_HID_EPIN_ADDR,                                      
                        report,
                        len);
    }
  }
  return USBD_OK;
 800416e:	2300      	movs	r3, #0
}
 8004170:	4618      	mov	r0, r3
 8004172:	3718      	adds	r7, #24
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <USBD_CUSTOM_HID_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetCfgDesc (uint16_t *length)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_CfgDesc);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2299      	movs	r2, #153	; 0x99
 8004184:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8004186:	4b03      	ldr	r3, [pc, #12]	; (8004194 <USBD_CUSTOM_HID_GetCfgDesc+0x1c>)
}
 8004188:	4618      	mov	r0, r3
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	bc80      	pop	{r7}
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	20000198 	.word	0x20000198

08004198 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn (USBD_HandleTypeDef *pdev, 
                              uint8_t epnum)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	460b      	mov	r3, r1
 80041a2:	70fb      	strb	r3, [r7, #3]
  
  /* Ensure that the FIFO is empty before a new transfer, this condition could 
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return USBD_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	370c      	adds	r7, #12
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bc80      	pop	{r7}
 80041ba:	4770      	bx	lr

080041bc <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut (USBD_HandleTypeDef *pdev, 
                              uint8_t epnum)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	460b      	mov	r3, r1
 80041c6:	70fb      	strb	r3, [r7, #3]
  
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;  
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80041ce:	60fb      	str	r3, [r7, #12]
  
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0], 
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	7810      	ldrb	r0, [r2, #0]
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	7852      	ldrb	r2, [r2, #1]
 80041e0:	4611      	mov	r1, r2
 80041e2:	4798      	blx	r3
                                                            hhid->Report_buf[1]);
    
  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR , hhid->Report_buf, 
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	2314      	movs	r3, #20
 80041e8:	2101      	movs	r1, #1
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f008 ff53 	bl	800d096 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}

080041fa <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80041fa:	b580      	push	{r7, lr}
 80041fc:	b084      	sub	sp, #16
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;  
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004208:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6a1b      	ldr	r3, [r3, #32]
 800420e:	2b01      	cmp	r3, #1
 8004210:	d10c      	bne.n	800422c <USBD_CUSTOM_HID_EP0_RxReady+0x32>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0], 
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	7810      	ldrb	r0, [r2, #0]
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	7852      	ldrb	r2, [r2, #1]
 8004222:	4611      	mov	r1, r2
 8004224:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0;      
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2200      	movs	r2, #0
 800422a:	621a      	str	r2, [r3, #32]
  }

  return USBD_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3710      	adds	r7, #16
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
	...

08004238 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc (uint16_t *length)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_DeviceQualifierDesc);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	220a      	movs	r2, #10
 8004244:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8004246:	4b03      	ldr	r3, [pc, #12]	; (8004254 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8004248:	4618      	mov	r0, r3
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	bc80      	pop	{r7}
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	20000240 	.word	0x20000240

08004258 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                             USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8004258:	b480      	push	{r7}
 800425a:	b085      	sub	sp, #20
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8004262:	2302      	movs	r3, #2
 8004264:	73fb      	strb	r3, [r7, #15]
  
  if(fops != NULL)
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d005      	beq.n	8004278 <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;    
 8004274:	2300      	movs	r3, #0
 8004276:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8004278:	7bfb      	ldrb	r3, [r7, #15]
}
 800427a:	4618      	mov	r0, r3
 800427c:	3714      	adds	r7, #20
 800427e:	46bd      	mov	sp, r7
 8004280:	bc80      	pop	{r7}
 8004282:	4770      	bx	lr

08004284 <SSD1306_Init>:
} SSD1306_t;

/* Private variable */
static SSD1306_t SSD1306;

uint8_t SSD1306_Init(void) {
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800428a:	f000 fadd 	bl	8004848 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800428e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8004292:	2201      	movs	r2, #1
 8004294:	2178      	movs	r1, #120	; 0x78
 8004296:	4858      	ldr	r0, [pc, #352]	; (80043f8 <SSD1306_Init+0x174>)
 8004298:	f002 faf4 	bl	8006884 <HAL_I2C_IsDeviceReady>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d001      	beq.n	80042a6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80042a2:	2300      	movs	r3, #0
 80042a4:	e0a4      	b.n	80043f0 <SSD1306_Init+0x16c>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80042a6:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80042aa:	607b      	str	r3, [r7, #4]
	while(p>0)
 80042ac:	e002      	b.n	80042b4 <SSD1306_Init+0x30>
		p--;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	3b01      	subs	r3, #1
 80042b2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1f9      	bne.n	80042ae <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80042ba:	22ae      	movs	r2, #174	; 0xae
 80042bc:	2100      	movs	r1, #0
 80042be:	2078      	movs	r0, #120	; 0x78
 80042c0:	f000 fb30 	bl	8004924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80042c4:	2220      	movs	r2, #32
 80042c6:	2100      	movs	r1, #0
 80042c8:	2078      	movs	r0, #120	; 0x78
 80042ca:	f000 fb2b 	bl	8004924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80042ce:	2210      	movs	r2, #16
 80042d0:	2100      	movs	r1, #0
 80042d2:	2078      	movs	r0, #120	; 0x78
 80042d4:	f000 fb26 	bl	8004924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80042d8:	22b0      	movs	r2, #176	; 0xb0
 80042da:	2100      	movs	r1, #0
 80042dc:	2078      	movs	r0, #120	; 0x78
 80042de:	f000 fb21 	bl	8004924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80042e2:	22c8      	movs	r2, #200	; 0xc8
 80042e4:	2100      	movs	r1, #0
 80042e6:	2078      	movs	r0, #120	; 0x78
 80042e8:	f000 fb1c 	bl	8004924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80042ec:	2200      	movs	r2, #0
 80042ee:	2100      	movs	r1, #0
 80042f0:	2078      	movs	r0, #120	; 0x78
 80042f2:	f000 fb17 	bl	8004924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80042f6:	2210      	movs	r2, #16
 80042f8:	2100      	movs	r1, #0
 80042fa:	2078      	movs	r0, #120	; 0x78
 80042fc:	f000 fb12 	bl	8004924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8004300:	2240      	movs	r2, #64	; 0x40
 8004302:	2100      	movs	r1, #0
 8004304:	2078      	movs	r0, #120	; 0x78
 8004306:	f000 fb0d 	bl	8004924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800430a:	2281      	movs	r2, #129	; 0x81
 800430c:	2100      	movs	r1, #0
 800430e:	2078      	movs	r0, #120	; 0x78
 8004310:	f000 fb08 	bl	8004924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8004314:	22ff      	movs	r2, #255	; 0xff
 8004316:	2100      	movs	r1, #0
 8004318:	2078      	movs	r0, #120	; 0x78
 800431a:	f000 fb03 	bl	8004924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800431e:	22a1      	movs	r2, #161	; 0xa1
 8004320:	2100      	movs	r1, #0
 8004322:	2078      	movs	r0, #120	; 0x78
 8004324:	f000 fafe 	bl	8004924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8004328:	22a6      	movs	r2, #166	; 0xa6
 800432a:	2100      	movs	r1, #0
 800432c:	2078      	movs	r0, #120	; 0x78
 800432e:	f000 faf9 	bl	8004924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8004332:	22a8      	movs	r2, #168	; 0xa8
 8004334:	2100      	movs	r1, #0
 8004336:	2078      	movs	r0, #120	; 0x78
 8004338:	f000 faf4 	bl	8004924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800433c:	223f      	movs	r2, #63	; 0x3f
 800433e:	2100      	movs	r1, #0
 8004340:	2078      	movs	r0, #120	; 0x78
 8004342:	f000 faef 	bl	8004924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8004346:	22a4      	movs	r2, #164	; 0xa4
 8004348:	2100      	movs	r1, #0
 800434a:	2078      	movs	r0, #120	; 0x78
 800434c:	f000 faea 	bl	8004924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8004350:	22d3      	movs	r2, #211	; 0xd3
 8004352:	2100      	movs	r1, #0
 8004354:	2078      	movs	r0, #120	; 0x78
 8004356:	f000 fae5 	bl	8004924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800435a:	2200      	movs	r2, #0
 800435c:	2100      	movs	r1, #0
 800435e:	2078      	movs	r0, #120	; 0x78
 8004360:	f000 fae0 	bl	8004924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8004364:	22d5      	movs	r2, #213	; 0xd5
 8004366:	2100      	movs	r1, #0
 8004368:	2078      	movs	r0, #120	; 0x78
 800436a:	f000 fadb 	bl	8004924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800436e:	22f0      	movs	r2, #240	; 0xf0
 8004370:	2100      	movs	r1, #0
 8004372:	2078      	movs	r0, #120	; 0x78
 8004374:	f000 fad6 	bl	8004924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8004378:	22d9      	movs	r2, #217	; 0xd9
 800437a:	2100      	movs	r1, #0
 800437c:	2078      	movs	r0, #120	; 0x78
 800437e:	f000 fad1 	bl	8004924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8004382:	2222      	movs	r2, #34	; 0x22
 8004384:	2100      	movs	r1, #0
 8004386:	2078      	movs	r0, #120	; 0x78
 8004388:	f000 facc 	bl	8004924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800438c:	22da      	movs	r2, #218	; 0xda
 800438e:	2100      	movs	r1, #0
 8004390:	2078      	movs	r0, #120	; 0x78
 8004392:	f000 fac7 	bl	8004924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8004396:	2212      	movs	r2, #18
 8004398:	2100      	movs	r1, #0
 800439a:	2078      	movs	r0, #120	; 0x78
 800439c:	f000 fac2 	bl	8004924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80043a0:	22db      	movs	r2, #219	; 0xdb
 80043a2:	2100      	movs	r1, #0
 80043a4:	2078      	movs	r0, #120	; 0x78
 80043a6:	f000 fabd 	bl	8004924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80043aa:	2220      	movs	r2, #32
 80043ac:	2100      	movs	r1, #0
 80043ae:	2078      	movs	r0, #120	; 0x78
 80043b0:	f000 fab8 	bl	8004924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80043b4:	228d      	movs	r2, #141	; 0x8d
 80043b6:	2100      	movs	r1, #0
 80043b8:	2078      	movs	r0, #120	; 0x78
 80043ba:	f000 fab3 	bl	8004924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80043be:	2214      	movs	r2, #20
 80043c0:	2100      	movs	r1, #0
 80043c2:	2078      	movs	r0, #120	; 0x78
 80043c4:	f000 faae 	bl	8004924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80043c8:	22af      	movs	r2, #175	; 0xaf
 80043ca:	2100      	movs	r1, #0
 80043cc:	2078      	movs	r0, #120	; 0x78
 80043ce:	f000 faa9 	bl	8004924 <ssd1306_I2C_Write>
	
	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80043d2:	2000      	movs	r0, #0
 80043d4:	f000 f842 	bl	800445c <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80043d8:	f000 f812 	bl	8004400 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80043dc:	4b07      	ldr	r3, [pc, #28]	; (80043fc <SSD1306_Init+0x178>)
 80043de:	2200      	movs	r2, #0
 80043e0:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80043e2:	4b06      	ldr	r3, [pc, #24]	; (80043fc <SSD1306_Init+0x178>)
 80043e4:	2200      	movs	r2, #0
 80043e6:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80043e8:	4b04      	ldr	r3, [pc, #16]	; (80043fc <SSD1306_Init+0x178>)
 80043ea:	2201      	movs	r2, #1
 80043ec:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80043ee:	2301      	movs	r3, #1
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3708      	adds	r7, #8
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	20000bc0 	.word	0x20000bc0
 80043fc:	20000978 	.word	0x20000978

08004400 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8004406:	2300      	movs	r3, #0
 8004408:	71fb      	strb	r3, [r7, #7]
 800440a:	e01d      	b.n	8004448 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800440c:	79fb      	ldrb	r3, [r7, #7]
 800440e:	3b50      	subs	r3, #80	; 0x50
 8004410:	b2db      	uxtb	r3, r3
 8004412:	461a      	mov	r2, r3
 8004414:	2100      	movs	r1, #0
 8004416:	2078      	movs	r0, #120	; 0x78
 8004418:	f000 fa84 	bl	8004924 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800441c:	2200      	movs	r2, #0
 800441e:	2100      	movs	r1, #0
 8004420:	2078      	movs	r0, #120	; 0x78
 8004422:	f000 fa7f 	bl	8004924 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8004426:	2210      	movs	r2, #16
 8004428:	2100      	movs	r1, #0
 800442a:	2078      	movs	r0, #120	; 0x78
 800442c:	f000 fa7a 	bl	8004924 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8004430:	79fb      	ldrb	r3, [r7, #7]
 8004432:	01db      	lsls	r3, r3, #7
 8004434:	4a08      	ldr	r2, [pc, #32]	; (8004458 <SSD1306_UpdateScreen+0x58>)
 8004436:	441a      	add	r2, r3
 8004438:	2380      	movs	r3, #128	; 0x80
 800443a:	2140      	movs	r1, #64	; 0x40
 800443c:	2078      	movs	r0, #120	; 0x78
 800443e:	f000 fa17 	bl	8004870 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8004442:	79fb      	ldrb	r3, [r7, #7]
 8004444:	3301      	adds	r3, #1
 8004446:	71fb      	strb	r3, [r7, #7]
 8004448:	79fb      	ldrb	r3, [r7, #7]
 800444a:	2b07      	cmp	r3, #7
 800444c:	d9de      	bls.n	800440c <SSD1306_UpdateScreen+0xc>
	}
}
 800444e:	bf00      	nop
 8004450:	3708      	adds	r7, #8
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	20000578 	.word	0x20000578

0800445c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	4603      	mov	r3, r0
 8004464:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8004466:	79fb      	ldrb	r3, [r7, #7]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d101      	bne.n	8004470 <SSD1306_Fill+0x14>
 800446c:	2300      	movs	r3, #0
 800446e:	e000      	b.n	8004472 <SSD1306_Fill+0x16>
 8004470:	23ff      	movs	r3, #255	; 0xff
 8004472:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004476:	4619      	mov	r1, r3
 8004478:	4803      	ldr	r0, [pc, #12]	; (8004488 <SSD1306_Fill+0x2c>)
 800447a:	f008 fec4 	bl	800d206 <memset>
}
 800447e:	bf00      	nop
 8004480:	3708      	adds	r7, #8
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	20000578 	.word	0x20000578

0800448c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	4603      	mov	r3, r0
 8004494:	80fb      	strh	r3, [r7, #6]
 8004496:	460b      	mov	r3, r1
 8004498:	80bb      	strh	r3, [r7, #4]
 800449a:	4613      	mov	r3, r2
 800449c:	70fb      	strb	r3, [r7, #3]
	if (
 800449e:	88fb      	ldrh	r3, [r7, #6]
 80044a0:	2b7f      	cmp	r3, #127	; 0x7f
 80044a2:	d848      	bhi.n	8004536 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80044a4:	88bb      	ldrh	r3, [r7, #4]
 80044a6:	2b3f      	cmp	r3, #63	; 0x3f
 80044a8:	d845      	bhi.n	8004536 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80044aa:	4b25      	ldr	r3, [pc, #148]	; (8004540 <SSD1306_DrawPixel+0xb4>)
 80044ac:	791b      	ldrb	r3, [r3, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d006      	beq.n	80044c0 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80044b2:	78fb      	ldrb	r3, [r7, #3]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	bf0c      	ite	eq
 80044b8:	2301      	moveq	r3, #1
 80044ba:	2300      	movne	r3, #0
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80044c0:	78fb      	ldrb	r3, [r7, #3]
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d11a      	bne.n	80044fc <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80044c6:	88fa      	ldrh	r2, [r7, #6]
 80044c8:	88bb      	ldrh	r3, [r7, #4]
 80044ca:	08db      	lsrs	r3, r3, #3
 80044cc:	b298      	uxth	r0, r3
 80044ce:	4603      	mov	r3, r0
 80044d0:	01db      	lsls	r3, r3, #7
 80044d2:	4413      	add	r3, r2
 80044d4:	4a1b      	ldr	r2, [pc, #108]	; (8004544 <SSD1306_DrawPixel+0xb8>)
 80044d6:	5cd3      	ldrb	r3, [r2, r3]
 80044d8:	b25a      	sxtb	r2, r3
 80044da:	88bb      	ldrh	r3, [r7, #4]
 80044dc:	f003 0307 	and.w	r3, r3, #7
 80044e0:	2101      	movs	r1, #1
 80044e2:	fa01 f303 	lsl.w	r3, r1, r3
 80044e6:	b25b      	sxtb	r3, r3
 80044e8:	4313      	orrs	r3, r2
 80044ea:	b259      	sxtb	r1, r3
 80044ec:	88fa      	ldrh	r2, [r7, #6]
 80044ee:	4603      	mov	r3, r0
 80044f0:	01db      	lsls	r3, r3, #7
 80044f2:	4413      	add	r3, r2
 80044f4:	b2c9      	uxtb	r1, r1
 80044f6:	4a13      	ldr	r2, [pc, #76]	; (8004544 <SSD1306_DrawPixel+0xb8>)
 80044f8:	54d1      	strb	r1, [r2, r3]
 80044fa:	e01d      	b.n	8004538 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80044fc:	88fa      	ldrh	r2, [r7, #6]
 80044fe:	88bb      	ldrh	r3, [r7, #4]
 8004500:	08db      	lsrs	r3, r3, #3
 8004502:	b298      	uxth	r0, r3
 8004504:	4603      	mov	r3, r0
 8004506:	01db      	lsls	r3, r3, #7
 8004508:	4413      	add	r3, r2
 800450a:	4a0e      	ldr	r2, [pc, #56]	; (8004544 <SSD1306_DrawPixel+0xb8>)
 800450c:	5cd3      	ldrb	r3, [r2, r3]
 800450e:	b25a      	sxtb	r2, r3
 8004510:	88bb      	ldrh	r3, [r7, #4]
 8004512:	f003 0307 	and.w	r3, r3, #7
 8004516:	2101      	movs	r1, #1
 8004518:	fa01 f303 	lsl.w	r3, r1, r3
 800451c:	b25b      	sxtb	r3, r3
 800451e:	43db      	mvns	r3, r3
 8004520:	b25b      	sxtb	r3, r3
 8004522:	4013      	ands	r3, r2
 8004524:	b259      	sxtb	r1, r3
 8004526:	88fa      	ldrh	r2, [r7, #6]
 8004528:	4603      	mov	r3, r0
 800452a:	01db      	lsls	r3, r3, #7
 800452c:	4413      	add	r3, r2
 800452e:	b2c9      	uxtb	r1, r1
 8004530:	4a04      	ldr	r2, [pc, #16]	; (8004544 <SSD1306_DrawPixel+0xb8>)
 8004532:	54d1      	strb	r1, [r2, r3]
 8004534:	e000      	b.n	8004538 <SSD1306_DrawPixel+0xac>
		return;
 8004536:	bf00      	nop
	}
}
 8004538:	370c      	adds	r7, #12
 800453a:	46bd      	mov	sp, r7
 800453c:	bc80      	pop	{r7}
 800453e:	4770      	bx	lr
 8004540:	20000978 	.word	0x20000978
 8004544:	20000578 	.word	0x20000578

08004548 <SSD1306_DrawIcon16x16>:

void SSD1306_DrawIcon16x16(int x, int y, char* Icon) {
 8004548:	b580      	push	{r7, lr}
 800454a:	b088      	sub	sp, #32
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	607a      	str	r2, [r7, #4]
	for (int a = 0; a  < 16; a++){
 8004554:	2300      	movs	r3, #0
 8004556:	61fb      	str	r3, [r7, #28]
 8004558:	e052      	b.n	8004600 <SSD1306_DrawIcon16x16+0xb8>
		for (int b = 0; b < 8; b++){
 800455a:	2300      	movs	r3, #0
 800455c:	61bb      	str	r3, [r7, #24]
 800455e:	e021      	b.n	80045a4 <SSD1306_DrawIcon16x16+0x5c>
			SSD1306_DrawPixel(8-b+x,a+y, (Icon[a*2] >> b) & 1);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	b29a      	uxth	r2, r3
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	b29b      	uxth	r3, r3
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	b29b      	uxth	r3, r3
 800456c:	3308      	adds	r3, #8
 800456e:	b298      	uxth	r0, r3
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	b29a      	uxth	r2, r3
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	b29b      	uxth	r3, r3
 8004578:	4413      	add	r3, r2
 800457a:	b299      	uxth	r1, r3
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	005b      	lsls	r3, r3, #1
 8004580:	461a      	mov	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4413      	add	r3, r2
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	461a      	mov	r2, r3
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	fa42 f303 	asr.w	r3, r2, r3
 8004590:	b2db      	uxtb	r3, r3
 8004592:	f003 0301 	and.w	r3, r3, #1
 8004596:	b2db      	uxtb	r3, r3
 8004598:	461a      	mov	r2, r3
 800459a:	f7ff ff77 	bl	800448c <SSD1306_DrawPixel>
		for (int b = 0; b < 8; b++){
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	3301      	adds	r3, #1
 80045a2:	61bb      	str	r3, [r7, #24]
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	2b07      	cmp	r3, #7
 80045a8:	ddda      	ble.n	8004560 <SSD1306_DrawIcon16x16+0x18>
		}
		for (int b = 0; b < 8; b++){
 80045aa:	2300      	movs	r3, #0
 80045ac:	617b      	str	r3, [r7, #20]
 80045ae:	e021      	b.n	80045f4 <SSD1306_DrawIcon16x16+0xac>
			SSD1306_DrawPixel(8-b+8+x,a+y, (Icon[a*2+1] >> b) & 1);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	b29a      	uxth	r2, r3
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	3310      	adds	r3, #16
 80045be:	b298      	uxth	r0, r3
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	b29a      	uxth	r2, r3
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	4413      	add	r3, r2
 80045ca:	b299      	uxth	r1, r3
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	005b      	lsls	r3, r3, #1
 80045d0:	3301      	adds	r3, #1
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	4413      	add	r3, r2
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	461a      	mov	r2, r3
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	fa42 f303 	asr.w	r3, r2, r3
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	f003 0301 	and.w	r3, r3, #1
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	461a      	mov	r2, r3
 80045ea:	f7ff ff4f 	bl	800448c <SSD1306_DrawPixel>
		for (int b = 0; b < 8; b++){
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	3301      	adds	r3, #1
 80045f2:	617b      	str	r3, [r7, #20]
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	2b07      	cmp	r3, #7
 80045f8:	ddda      	ble.n	80045b0 <SSD1306_DrawIcon16x16+0x68>
	for (int a = 0; a  < 16; a++){
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	3301      	adds	r3, #1
 80045fe:	61fb      	str	r3, [r7, #28]
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	2b0f      	cmp	r3, #15
 8004604:	dda9      	ble.n	800455a <SSD1306_DrawIcon16x16+0x12>
		}
	}
}
 8004606:	bf00      	nop
 8004608:	3720      	adds	r7, #32
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}

0800460e <SSD1306_DrawBitmap>:

void SSD1306_DrawBitmap(int x, int y, char* BitMap, int width, int height){
 800460e:	b580      	push	{r7, lr}
 8004610:	b08a      	sub	sp, #40	; 0x28
 8004612:	af00      	add	r7, sp, #0
 8004614:	60f8      	str	r0, [r7, #12]
 8004616:	60b9      	str	r1, [r7, #8]
 8004618:	607a      	str	r2, [r7, #4]
 800461a:	603b      	str	r3, [r7, #0]
	width = width/8;
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	2b00      	cmp	r3, #0
 8004620:	da00      	bge.n	8004624 <SSD1306_DrawBitmap+0x16>
 8004622:	3307      	adds	r3, #7
 8004624:	10db      	asrs	r3, r3, #3
 8004626:	603b      	str	r3, [r7, #0]
	int row = 0;
 8004628:	2300      	movs	r3, #0
 800462a:	627b      	str	r3, [r7, #36]	; 0x24
	int col = 0;
 800462c:	2300      	movs	r3, #0
 800462e:	623b      	str	r3, [r7, #32]
	for (int row_s = 0; row_s  < height*width; row_s += width){
 8004630:	2300      	movs	r3, #0
 8004632:	61fb      	str	r3, [r7, #28]
 8004634:	e040      	b.n	80046b8 <SSD1306_DrawBitmap+0xaa>
		for (int c = 0; c < width; c++){
 8004636:	2300      	movs	r3, #0
 8004638:	61bb      	str	r3, [r7, #24]
 800463a:	e032      	b.n	80046a2 <SSD1306_DrawBitmap+0x94>
			for (int b = 0; b < 8; b++){
 800463c:	2300      	movs	r3, #0
 800463e:	617b      	str	r3, [r7, #20]
 8004640:	e026      	b.n	8004690 <SSD1306_DrawBitmap+0x82>
				SSD1306_DrawPixel(8-b + col + x,row+y, (BitMap[row_s+c] >> b) & 1);
 8004642:	6a3b      	ldr	r3, [r7, #32]
 8004644:	b29a      	uxth	r2, r3
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	b29b      	uxth	r3, r3
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	b29a      	uxth	r2, r3
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	b29b      	uxth	r3, r3
 8004652:	4413      	add	r3, r2
 8004654:	b29b      	uxth	r3, r3
 8004656:	3308      	adds	r3, #8
 8004658:	b298      	uxth	r0, r3
 800465a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465c:	b29a      	uxth	r2, r3
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	b29b      	uxth	r3, r3
 8004662:	4413      	add	r3, r2
 8004664:	b299      	uxth	r1, r3
 8004666:	69fa      	ldr	r2, [r7, #28]
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	4413      	add	r3, r2
 800466c:	461a      	mov	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4413      	add	r3, r2
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	461a      	mov	r2, r3
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	fa42 f303 	asr.w	r3, r2, r3
 800467c:	b2db      	uxtb	r3, r3
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	b2db      	uxtb	r3, r3
 8004684:	461a      	mov	r2, r3
 8004686:	f7ff ff01 	bl	800448c <SSD1306_DrawPixel>
			for (int b = 0; b < 8; b++){
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	3301      	adds	r3, #1
 800468e:	617b      	str	r3, [r7, #20]
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	2b07      	cmp	r3, #7
 8004694:	ddd5      	ble.n	8004642 <SSD1306_DrawBitmap+0x34>
			}
			col= c*8;
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	00db      	lsls	r3, r3, #3
 800469a:	623b      	str	r3, [r7, #32]
		for (int c = 0; c < width; c++){
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	3301      	adds	r3, #1
 80046a0:	61bb      	str	r3, [r7, #24]
 80046a2:	69ba      	ldr	r2, [r7, #24]
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	dbc8      	blt.n	800463c <SSD1306_DrawBitmap+0x2e>
		}
		row++;
 80046aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ac:	3301      	adds	r3, #1
 80046ae:	627b      	str	r3, [r7, #36]	; 0x24
	for (int row_s = 0; row_s  < height*width; row_s += width){
 80046b0:	69fa      	ldr	r2, [r7, #28]
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	4413      	add	r3, r2
 80046b6:	61fb      	str	r3, [r7, #28]
 80046b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ba:	683a      	ldr	r2, [r7, #0]
 80046bc:	fb02 f303 	mul.w	r3, r2, r3
 80046c0:	69fa      	ldr	r2, [r7, #28]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	dbb7      	blt.n	8004636 <SSD1306_DrawBitmap+0x28>
	}
}
 80046c6:	bf00      	nop
 80046c8:	3728      	adds	r7, #40	; 0x28
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
	...

080046d0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	4603      	mov	r3, r0
 80046d8:	460a      	mov	r2, r1
 80046da:	80fb      	strh	r3, [r7, #6]
 80046dc:	4613      	mov	r3, r2
 80046de:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80046e0:	4a05      	ldr	r2, [pc, #20]	; (80046f8 <SSD1306_GotoXY+0x28>)
 80046e2:	88fb      	ldrh	r3, [r7, #6]
 80046e4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80046e6:	4a04      	ldr	r2, [pc, #16]	; (80046f8 <SSD1306_GotoXY+0x28>)
 80046e8:	88bb      	ldrh	r3, [r7, #4]
 80046ea:	8053      	strh	r3, [r2, #2]
}
 80046ec:	bf00      	nop
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bc80      	pop	{r7}
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	20000978 	.word	0x20000978

080046fc <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b086      	sub	sp, #24
 8004700:	af00      	add	r7, sp, #0
 8004702:	4603      	mov	r3, r0
 8004704:	6039      	str	r1, [r7, #0]
 8004706:	71fb      	strb	r3, [r7, #7]
 8004708:	4613      	mov	r3, r2
 800470a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800470c:	4b3a      	ldr	r3, [pc, #232]	; (80047f8 <SSD1306_Putc+0xfc>)
 800470e:	881b      	ldrh	r3, [r3, #0]
 8004710:	461a      	mov	r2, r3
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	4413      	add	r3, r2
	if (
 8004718:	2b7f      	cmp	r3, #127	; 0x7f
 800471a:	dc07      	bgt.n	800472c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800471c:	4b36      	ldr	r3, [pc, #216]	; (80047f8 <SSD1306_Putc+0xfc>)
 800471e:	885b      	ldrh	r3, [r3, #2]
 8004720:	461a      	mov	r2, r3
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	785b      	ldrb	r3, [r3, #1]
 8004726:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8004728:	2b3f      	cmp	r3, #63	; 0x3f
 800472a:	dd01      	ble.n	8004730 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800472c:	2300      	movs	r3, #0
 800472e:	e05e      	b.n	80047ee <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8004730:	2300      	movs	r3, #0
 8004732:	617b      	str	r3, [r7, #20]
 8004734:	e04b      	b.n	80047ce <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	685a      	ldr	r2, [r3, #4]
 800473a:	79fb      	ldrb	r3, [r7, #7]
 800473c:	3b20      	subs	r3, #32
 800473e:	6839      	ldr	r1, [r7, #0]
 8004740:	7849      	ldrb	r1, [r1, #1]
 8004742:	fb01 f303 	mul.w	r3, r1, r3
 8004746:	4619      	mov	r1, r3
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	440b      	add	r3, r1
 800474c:	005b      	lsls	r3, r3, #1
 800474e:	4413      	add	r3, r2
 8004750:	881b      	ldrh	r3, [r3, #0]
 8004752:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8004754:	2300      	movs	r3, #0
 8004756:	613b      	str	r3, [r7, #16]
 8004758:	e030      	b.n	80047bc <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	fa02 f303 	lsl.w	r3, r2, r3
 8004762:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d010      	beq.n	800478c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800476a:	4b23      	ldr	r3, [pc, #140]	; (80047f8 <SSD1306_Putc+0xfc>)
 800476c:	881a      	ldrh	r2, [r3, #0]
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	b29b      	uxth	r3, r3
 8004772:	4413      	add	r3, r2
 8004774:	b298      	uxth	r0, r3
 8004776:	4b20      	ldr	r3, [pc, #128]	; (80047f8 <SSD1306_Putc+0xfc>)
 8004778:	885a      	ldrh	r2, [r3, #2]
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	b29b      	uxth	r3, r3
 800477e:	4413      	add	r3, r2
 8004780:	b29b      	uxth	r3, r3
 8004782:	79ba      	ldrb	r2, [r7, #6]
 8004784:	4619      	mov	r1, r3
 8004786:	f7ff fe81 	bl	800448c <SSD1306_DrawPixel>
 800478a:	e014      	b.n	80047b6 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800478c:	4b1a      	ldr	r3, [pc, #104]	; (80047f8 <SSD1306_Putc+0xfc>)
 800478e:	881a      	ldrh	r2, [r3, #0]
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	b29b      	uxth	r3, r3
 8004794:	4413      	add	r3, r2
 8004796:	b298      	uxth	r0, r3
 8004798:	4b17      	ldr	r3, [pc, #92]	; (80047f8 <SSD1306_Putc+0xfc>)
 800479a:	885a      	ldrh	r2, [r3, #2]
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	b29b      	uxth	r3, r3
 80047a0:	4413      	add	r3, r2
 80047a2:	b299      	uxth	r1, r3
 80047a4:	79bb      	ldrb	r3, [r7, #6]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	bf0c      	ite	eq
 80047aa:	2301      	moveq	r3, #1
 80047ac:	2300      	movne	r3, #0
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	461a      	mov	r2, r3
 80047b2:	f7ff fe6b 	bl	800448c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	3301      	adds	r3, #1
 80047ba:	613b      	str	r3, [r7, #16]
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	461a      	mov	r2, r3
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d3c8      	bcc.n	800475a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	3301      	adds	r3, #1
 80047cc:	617b      	str	r3, [r7, #20]
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	785b      	ldrb	r3, [r3, #1]
 80047d2:	461a      	mov	r2, r3
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d3ad      	bcc.n	8004736 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80047da:	4b07      	ldr	r3, [pc, #28]	; (80047f8 <SSD1306_Putc+0xfc>)
 80047dc:	881a      	ldrh	r2, [r3, #0]
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	4413      	add	r3, r2
 80047e6:	b29a      	uxth	r2, r3
 80047e8:	4b03      	ldr	r3, [pc, #12]	; (80047f8 <SSD1306_Putc+0xfc>)
 80047ea:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80047ec:	79fb      	ldrb	r3, [r7, #7]
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3718      	adds	r7, #24
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	20000978 	.word	0x20000978

080047fc <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	4613      	mov	r3, r2
 8004808:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800480a:	e012      	b.n	8004832 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	79fa      	ldrb	r2, [r7, #7]
 8004812:	68b9      	ldr	r1, [r7, #8]
 8004814:	4618      	mov	r0, r3
 8004816:	f7ff ff71 	bl	80046fc <SSD1306_Putc>
 800481a:	4603      	mov	r3, r0
 800481c:	461a      	mov	r2, r3
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	429a      	cmp	r2, r3
 8004824:	d002      	beq.n	800482c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	e008      	b.n	800483e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	3301      	adds	r3, #1
 8004830:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1e8      	bne.n	800480c <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	781b      	ldrb	r3, [r3, #0]
}
 800483e:	4618      	mov	r0, r3
 8004840:	3710      	adds	r7, #16
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
	...

08004848 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800484e:	4b07      	ldr	r3, [pc, #28]	; (800486c <ssd1306_I2C_Init+0x24>)
 8004850:	607b      	str	r3, [r7, #4]
	while(p>0)
 8004852:	e002      	b.n	800485a <ssd1306_I2C_Init+0x12>
		p--;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	3b01      	subs	r3, #1
 8004858:	607b      	str	r3, [r7, #4]
	while(p>0)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1f9      	bne.n	8004854 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8004860:	bf00      	nop
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	bc80      	pop	{r7}
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	0003d090 	.word	0x0003d090

08004870 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8004870:	b5b0      	push	{r4, r5, r7, lr}
 8004872:	b088      	sub	sp, #32
 8004874:	af02      	add	r7, sp, #8
 8004876:	603a      	str	r2, [r7, #0]
 8004878:	461a      	mov	r2, r3
 800487a:	4603      	mov	r3, r0
 800487c:	71fb      	strb	r3, [r7, #7]
 800487e:	460b      	mov	r3, r1
 8004880:	71bb      	strb	r3, [r7, #6]
 8004882:	4613      	mov	r3, r2
 8004884:	80bb      	strh	r3, [r7, #4]
 8004886:	466b      	mov	r3, sp
 8004888:	461d      	mov	r5, r3
	uint8_t dt[count + 1];
 800488a:	88bb      	ldrh	r3, [r7, #4]
 800488c:	1c58      	adds	r0, r3, #1
 800488e:	1e43      	subs	r3, r0, #1
 8004890:	613b      	str	r3, [r7, #16]
 8004892:	4603      	mov	r3, r0
 8004894:	4619      	mov	r1, r3
 8004896:	f04f 0200 	mov.w	r2, #0
 800489a:	f04f 0300 	mov.w	r3, #0
 800489e:	f04f 0400 	mov.w	r4, #0
 80048a2:	00d4      	lsls	r4, r2, #3
 80048a4:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80048a8:	00cb      	lsls	r3, r1, #3
 80048aa:	4603      	mov	r3, r0
 80048ac:	4619      	mov	r1, r3
 80048ae:	f04f 0200 	mov.w	r2, #0
 80048b2:	f04f 0300 	mov.w	r3, #0
 80048b6:	f04f 0400 	mov.w	r4, #0
 80048ba:	00d4      	lsls	r4, r2, #3
 80048bc:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80048c0:	00cb      	lsls	r3, r1, #3
 80048c2:	4603      	mov	r3, r0
 80048c4:	3307      	adds	r3, #7
 80048c6:	08db      	lsrs	r3, r3, #3
 80048c8:	00db      	lsls	r3, r3, #3
 80048ca:	ebad 0d03 	sub.w	sp, sp, r3
 80048ce:	ab02      	add	r3, sp, #8
 80048d0:	3300      	adds	r3, #0
 80048d2:	60fb      	str	r3, [r7, #12]
	dt[0] = reg;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	79ba      	ldrb	r2, [r7, #6]
 80048d8:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 1; i <= count; i++)
 80048da:	2301      	movs	r3, #1
 80048dc:	75fb      	strb	r3, [r7, #23]
 80048de:	e00a      	b.n	80048f6 <ssd1306_I2C_WriteMulti+0x86>
		dt[i] = data[i-1];
 80048e0:	7dfb      	ldrb	r3, [r7, #23]
 80048e2:	3b01      	subs	r3, #1
 80048e4:	683a      	ldr	r2, [r7, #0]
 80048e6:	441a      	add	r2, r3
 80048e8:	7dfb      	ldrb	r3, [r7, #23]
 80048ea:	7811      	ldrb	r1, [r2, #0]
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	54d1      	strb	r1, [r2, r3]
	for(i = 1; i <= count; i++)
 80048f0:	7dfb      	ldrb	r3, [r7, #23]
 80048f2:	3301      	adds	r3, #1
 80048f4:	75fb      	strb	r3, [r7, #23]
 80048f6:	7dfb      	ldrb	r3, [r7, #23]
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	88ba      	ldrh	r2, [r7, #4]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d2ef      	bcs.n	80048e0 <ssd1306_I2C_WriteMulti+0x70>
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, count, 10);
 8004900:	79fb      	ldrb	r3, [r7, #7]
 8004902:	b299      	uxth	r1, r3
 8004904:	68fa      	ldr	r2, [r7, #12]
 8004906:	88b8      	ldrh	r0, [r7, #4]
 8004908:	230a      	movs	r3, #10
 800490a:	9300      	str	r3, [sp, #0]
 800490c:	4603      	mov	r3, r0
 800490e:	4804      	ldr	r0, [pc, #16]	; (8004920 <ssd1306_I2C_WriteMulti+0xb0>)
 8004910:	f001 fc8c 	bl	800622c <HAL_I2C_Master_Transmit>
 8004914:	46ad      	mov	sp, r5
}
 8004916:	bf00      	nop
 8004918:	3718      	adds	r7, #24
 800491a:	46bd      	mov	sp, r7
 800491c:	bdb0      	pop	{r4, r5, r7, pc}
 800491e:	bf00      	nop
 8004920:	20000bc0 	.word	0x20000bc0

08004924 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8004924:	b580      	push	{r7, lr}
 8004926:	b086      	sub	sp, #24
 8004928:	af02      	add	r7, sp, #8
 800492a:	4603      	mov	r3, r0
 800492c:	71fb      	strb	r3, [r7, #7]
 800492e:	460b      	mov	r3, r1
 8004930:	71bb      	strb	r3, [r7, #6]
 8004932:	4613      	mov	r3, r2
 8004934:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8004936:	79bb      	ldrb	r3, [r7, #6]
 8004938:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800493a:	797b      	ldrb	r3, [r7, #5]
 800493c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800493e:	79fb      	ldrb	r3, [r7, #7]
 8004940:	b299      	uxth	r1, r3
 8004942:	f107 020c 	add.w	r2, r7, #12
 8004946:	230a      	movs	r3, #10
 8004948:	9300      	str	r3, [sp, #0]
 800494a:	2302      	movs	r3, #2
 800494c:	4803      	ldr	r0, [pc, #12]	; (800495c <ssd1306_I2C_Write+0x38>)
 800494e:	f001 fc6d 	bl	800622c <HAL_I2C_Master_Transmit>
}
 8004952:	bf00      	nop
 8004954:	3710      	adds	r7, #16
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	20000bc0 	.word	0x20000bc0

08004960 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004960:	b480      	push	{r7}
 8004962:	b085      	sub	sp, #20
 8004964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004966:	4b15      	ldr	r3, [pc, #84]	; (80049bc <HAL_MspInit+0x5c>)
 8004968:	699b      	ldr	r3, [r3, #24]
 800496a:	4a14      	ldr	r2, [pc, #80]	; (80049bc <HAL_MspInit+0x5c>)
 800496c:	f043 0301 	orr.w	r3, r3, #1
 8004970:	6193      	str	r3, [r2, #24]
 8004972:	4b12      	ldr	r3, [pc, #72]	; (80049bc <HAL_MspInit+0x5c>)
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	60bb      	str	r3, [r7, #8]
 800497c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800497e:	4b0f      	ldr	r3, [pc, #60]	; (80049bc <HAL_MspInit+0x5c>)
 8004980:	69db      	ldr	r3, [r3, #28]
 8004982:	4a0e      	ldr	r2, [pc, #56]	; (80049bc <HAL_MspInit+0x5c>)
 8004984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004988:	61d3      	str	r3, [r2, #28]
 800498a:	4b0c      	ldr	r3, [pc, #48]	; (80049bc <HAL_MspInit+0x5c>)
 800498c:	69db      	ldr	r3, [r3, #28]
 800498e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004992:	607b      	str	r3, [r7, #4]
 8004994:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004996:	4b0a      	ldr	r3, [pc, #40]	; (80049c0 <HAL_MspInit+0x60>)
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	60fb      	str	r3, [r7, #12]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80049a2:	60fb      	str	r3, [r7, #12]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80049aa:	60fb      	str	r3, [r7, #12]
 80049ac:	4a04      	ldr	r2, [pc, #16]	; (80049c0 <HAL_MspInit+0x60>)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80049b2:	bf00      	nop
 80049b4:	3714      	adds	r7, #20
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bc80      	pop	{r7}
 80049ba:	4770      	bx	lr
 80049bc:	40021000 	.word	0x40021000
 80049c0:	40010000 	.word	0x40010000

080049c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b088      	sub	sp, #32
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049cc:	f107 0310 	add.w	r3, r7, #16
 80049d0:	2200      	movs	r2, #0
 80049d2:	601a      	str	r2, [r3, #0]
 80049d4:	605a      	str	r2, [r3, #4]
 80049d6:	609a      	str	r2, [r3, #8]
 80049d8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a14      	ldr	r2, [pc, #80]	; (8004a30 <HAL_ADC_MspInit+0x6c>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d121      	bne.n	8004a28 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80049e4:	4b13      	ldr	r3, [pc, #76]	; (8004a34 <HAL_ADC_MspInit+0x70>)
 80049e6:	699b      	ldr	r3, [r3, #24]
 80049e8:	4a12      	ldr	r2, [pc, #72]	; (8004a34 <HAL_ADC_MspInit+0x70>)
 80049ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80049ee:	6193      	str	r3, [r2, #24]
 80049f0:	4b10      	ldr	r3, [pc, #64]	; (8004a34 <HAL_ADC_MspInit+0x70>)
 80049f2:	699b      	ldr	r3, [r3, #24]
 80049f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049f8:	60fb      	str	r3, [r7, #12]
 80049fa:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049fc:	4b0d      	ldr	r3, [pc, #52]	; (8004a34 <HAL_ADC_MspInit+0x70>)
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	4a0c      	ldr	r2, [pc, #48]	; (8004a34 <HAL_ADC_MspInit+0x70>)
 8004a02:	f043 0304 	orr.w	r3, r3, #4
 8004a06:	6193      	str	r3, [r2, #24]
 8004a08:	4b0a      	ldr	r3, [pc, #40]	; (8004a34 <HAL_ADC_MspInit+0x70>)
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	f003 0304 	and.w	r3, r3, #4
 8004a10:	60bb      	str	r3, [r7, #8]
 8004a12:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = HORISONTAL_Pin|VERTICAL_Pin|BAT_Pin;
 8004a14:	2313      	movs	r3, #19
 8004a16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a1c:	f107 0310 	add.w	r3, r7, #16
 8004a20:	4619      	mov	r1, r3
 8004a22:	4805      	ldr	r0, [pc, #20]	; (8004a38 <HAL_ADC_MspInit+0x74>)
 8004a24:	f001 f84c 	bl	8005ac0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004a28:	bf00      	nop
 8004a2a:	3720      	adds	r7, #32
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	40012400 	.word	0x40012400
 8004a34:	40021000 	.word	0x40021000
 8004a38:	40010800 	.word	0x40010800

08004a3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b08a      	sub	sp, #40	; 0x28
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a44:	f107 0318 	add.w	r3, r7, #24
 8004a48:	2200      	movs	r2, #0
 8004a4a:	601a      	str	r2, [r3, #0]
 8004a4c:	605a      	str	r2, [r3, #4]
 8004a4e:	609a      	str	r2, [r3, #8]
 8004a50:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a2b      	ldr	r2, [pc, #172]	; (8004b04 <HAL_I2C_MspInit+0xc8>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d124      	bne.n	8004aa6 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a5c:	4b2a      	ldr	r3, [pc, #168]	; (8004b08 <HAL_I2C_MspInit+0xcc>)
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	4a29      	ldr	r2, [pc, #164]	; (8004b08 <HAL_I2C_MspInit+0xcc>)
 8004a62:	f043 0308 	orr.w	r3, r3, #8
 8004a66:	6193      	str	r3, [r2, #24]
 8004a68:	4b27      	ldr	r3, [pc, #156]	; (8004b08 <HAL_I2C_MspInit+0xcc>)
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	f003 0308 	and.w	r3, r3, #8
 8004a70:	617b      	str	r3, [r7, #20]
 8004a72:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 8004a74:	23c0      	movs	r3, #192	; 0xc0
 8004a76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004a78:	2312      	movs	r3, #18
 8004a7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a80:	f107 0318 	add.w	r3, r7, #24
 8004a84:	4619      	mov	r1, r3
 8004a86:	4821      	ldr	r0, [pc, #132]	; (8004b0c <HAL_I2C_MspInit+0xd0>)
 8004a88:	f001 f81a 	bl	8005ac0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004a8c:	4b1e      	ldr	r3, [pc, #120]	; (8004b08 <HAL_I2C_MspInit+0xcc>)
 8004a8e:	69db      	ldr	r3, [r3, #28]
 8004a90:	4a1d      	ldr	r2, [pc, #116]	; (8004b08 <HAL_I2C_MspInit+0xcc>)
 8004a92:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a96:	61d3      	str	r3, [r2, #28]
 8004a98:	4b1b      	ldr	r3, [pc, #108]	; (8004b08 <HAL_I2C_MspInit+0xcc>)
 8004a9a:	69db      	ldr	r3, [r3, #28]
 8004a9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004aa0:	613b      	str	r3, [r7, #16]
 8004aa2:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004aa4:	e029      	b.n	8004afa <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a19      	ldr	r2, [pc, #100]	; (8004b10 <HAL_I2C_MspInit+0xd4>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d124      	bne.n	8004afa <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ab0:	4b15      	ldr	r3, [pc, #84]	; (8004b08 <HAL_I2C_MspInit+0xcc>)
 8004ab2:	699b      	ldr	r3, [r3, #24]
 8004ab4:	4a14      	ldr	r2, [pc, #80]	; (8004b08 <HAL_I2C_MspInit+0xcc>)
 8004ab6:	f043 0308 	orr.w	r3, r3, #8
 8004aba:	6193      	str	r3, [r2, #24]
 8004abc:	4b12      	ldr	r3, [pc, #72]	; (8004b08 <HAL_I2C_MspInit+0xcc>)
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	f003 0308 	and.w	r3, r3, #8
 8004ac4:	60fb      	str	r3, [r7, #12]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SCL_IMU_Pin|SDA_IMU_Pin;
 8004ac8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004acc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004ace:	2312      	movs	r3, #18
 8004ad0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ad6:	f107 0318 	add.w	r3, r7, #24
 8004ada:	4619      	mov	r1, r3
 8004adc:	480b      	ldr	r0, [pc, #44]	; (8004b0c <HAL_I2C_MspInit+0xd0>)
 8004ade:	f000 ffef 	bl	8005ac0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004ae2:	4b09      	ldr	r3, [pc, #36]	; (8004b08 <HAL_I2C_MspInit+0xcc>)
 8004ae4:	69db      	ldr	r3, [r3, #28]
 8004ae6:	4a08      	ldr	r2, [pc, #32]	; (8004b08 <HAL_I2C_MspInit+0xcc>)
 8004ae8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004aec:	61d3      	str	r3, [r2, #28]
 8004aee:	4b06      	ldr	r3, [pc, #24]	; (8004b08 <HAL_I2C_MspInit+0xcc>)
 8004af0:	69db      	ldr	r3, [r3, #28]
 8004af2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004af6:	60bb      	str	r3, [r7, #8]
 8004af8:	68bb      	ldr	r3, [r7, #8]
}
 8004afa:	bf00      	nop
 8004afc:	3728      	adds	r7, #40	; 0x28
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	40005400 	.word	0x40005400
 8004b08:	40021000 	.word	0x40021000
 8004b0c:	40010c00 	.word	0x40010c00
 8004b10:	40005800 	.word	0x40005800

08004b14 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b082      	sub	sp, #8
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a10      	ldr	r2, [pc, #64]	; (8004b64 <HAL_I2C_MspDeInit+0x50>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d10a      	bne.n	8004b3c <HAL_I2C_MspDeInit+0x28>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8004b26:	4b10      	ldr	r3, [pc, #64]	; (8004b68 <HAL_I2C_MspDeInit+0x54>)
 8004b28:	69db      	ldr	r3, [r3, #28]
 8004b2a:	4a0f      	ldr	r2, [pc, #60]	; (8004b68 <HAL_I2C_MspDeInit+0x54>)
 8004b2c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b30:	61d3      	str	r3, [r2, #28]
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, SCL_Pin|SDA_Pin);
 8004b32:	21c0      	movs	r1, #192	; 0xc0
 8004b34:	480d      	ldr	r0, [pc, #52]	; (8004b6c <HAL_I2C_MspDeInit+0x58>)
 8004b36:	f001 f91d 	bl	8005d74 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8004b3a:	e00f      	b.n	8004b5c <HAL_I2C_MspDeInit+0x48>
  else if(hi2c->Instance==I2C2)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a0b      	ldr	r2, [pc, #44]	; (8004b70 <HAL_I2C_MspDeInit+0x5c>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d10a      	bne.n	8004b5c <HAL_I2C_MspDeInit+0x48>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8004b46:	4b08      	ldr	r3, [pc, #32]	; (8004b68 <HAL_I2C_MspDeInit+0x54>)
 8004b48:	69db      	ldr	r3, [r3, #28]
 8004b4a:	4a07      	ldr	r2, [pc, #28]	; (8004b68 <HAL_I2C_MspDeInit+0x54>)
 8004b4c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004b50:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, SCL_IMU_Pin|SDA_IMU_Pin);
 8004b52:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8004b56:	4805      	ldr	r0, [pc, #20]	; (8004b6c <HAL_I2C_MspDeInit+0x58>)
 8004b58:	f001 f90c 	bl	8005d74 <HAL_GPIO_DeInit>
}
 8004b5c:	bf00      	nop
 8004b5e:	3708      	adds	r7, #8
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	40005400 	.word	0x40005400
 8004b68:	40021000 	.word	0x40021000
 8004b6c:	40010c00 	.word	0x40010c00
 8004b70:	40005800 	.word	0x40005800

08004b74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b088      	sub	sp, #32
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b7c:	f107 0310 	add.w	r3, r7, #16
 8004b80:	2200      	movs	r2, #0
 8004b82:	601a      	str	r2, [r3, #0]
 8004b84:	605a      	str	r2, [r3, #4]
 8004b86:	609a      	str	r2, [r3, #8]
 8004b88:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a1b      	ldr	r2, [pc, #108]	; (8004bfc <HAL_SPI_MspInit+0x88>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d12f      	bne.n	8004bf4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004b94:	4b1a      	ldr	r3, [pc, #104]	; (8004c00 <HAL_SPI_MspInit+0x8c>)
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	4a19      	ldr	r2, [pc, #100]	; (8004c00 <HAL_SPI_MspInit+0x8c>)
 8004b9a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004b9e:	6193      	str	r3, [r2, #24]
 8004ba0:	4b17      	ldr	r3, [pc, #92]	; (8004c00 <HAL_SPI_MspInit+0x8c>)
 8004ba2:	699b      	ldr	r3, [r3, #24]
 8004ba4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ba8:	60fb      	str	r3, [r7, #12]
 8004baa:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bac:	4b14      	ldr	r3, [pc, #80]	; (8004c00 <HAL_SPI_MspInit+0x8c>)
 8004bae:	699b      	ldr	r3, [r3, #24]
 8004bb0:	4a13      	ldr	r2, [pc, #76]	; (8004c00 <HAL_SPI_MspInit+0x8c>)
 8004bb2:	f043 0304 	orr.w	r3, r3, #4
 8004bb6:	6193      	str	r3, [r2, #24]
 8004bb8:	4b11      	ldr	r3, [pc, #68]	; (8004c00 <HAL_SPI_MspInit+0x8c>)
 8004bba:	699b      	ldr	r3, [r3, #24]
 8004bbc:	f003 0304 	and.w	r3, r3, #4
 8004bc0:	60bb      	str	r3, [r7, #8]
 8004bc2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8004bc4:	23a0      	movs	r3, #160	; 0xa0
 8004bc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bc8:	2302      	movs	r3, #2
 8004bca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bd0:	f107 0310 	add.w	r3, r7, #16
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	480b      	ldr	r0, [pc, #44]	; (8004c04 <HAL_SPI_MspInit+0x90>)
 8004bd8:	f000 ff72 	bl	8005ac0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004bdc:	2340      	movs	r3, #64	; 0x40
 8004bde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004be0:	2300      	movs	r3, #0
 8004be2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004be4:	2300      	movs	r3, #0
 8004be6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004be8:	f107 0310 	add.w	r3, r7, #16
 8004bec:	4619      	mov	r1, r3
 8004bee:	4805      	ldr	r0, [pc, #20]	; (8004c04 <HAL_SPI_MspInit+0x90>)
 8004bf0:	f000 ff66 	bl	8005ac0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004bf4:	bf00      	nop
 8004bf6:	3720      	adds	r7, #32
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	40013000 	.word	0x40013000
 8004c00:	40021000 	.word	0x40021000
 8004c04:	40010800 	.word	0x40010800

08004c08 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a09      	ldr	r2, [pc, #36]	; (8004c3c <HAL_TIM_PWM_MspInit+0x34>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d10b      	bne.n	8004c32 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004c1a:	4b09      	ldr	r3, [pc, #36]	; (8004c40 <HAL_TIM_PWM_MspInit+0x38>)
 8004c1c:	69db      	ldr	r3, [r3, #28]
 8004c1e:	4a08      	ldr	r2, [pc, #32]	; (8004c40 <HAL_TIM_PWM_MspInit+0x38>)
 8004c20:	f043 0302 	orr.w	r3, r3, #2
 8004c24:	61d3      	str	r3, [r2, #28]
 8004c26:	4b06      	ldr	r3, [pc, #24]	; (8004c40 <HAL_TIM_PWM_MspInit+0x38>)
 8004c28:	69db      	ldr	r3, [r3, #28]
 8004c2a:	f003 0302 	and.w	r3, r3, #2
 8004c2e:	60fb      	str	r3, [r7, #12]
 8004c30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004c32:	bf00      	nop
 8004c34:	3714      	adds	r7, #20
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bc80      	pop	{r7}
 8004c3a:	4770      	bx	lr
 8004c3c:	40000400 	.word	0x40000400
 8004c40:	40021000 	.word	0x40021000

08004c44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b088      	sub	sp, #32
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c4c:	f107 0310 	add.w	r3, r7, #16
 8004c50:	2200      	movs	r2, #0
 8004c52:	601a      	str	r2, [r3, #0]
 8004c54:	605a      	str	r2, [r3, #4]
 8004c56:	609a      	str	r2, [r3, #8]
 8004c58:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a0f      	ldr	r2, [pc, #60]	; (8004c9c <HAL_TIM_MspPostInit+0x58>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d117      	bne.n	8004c94 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c64:	4b0e      	ldr	r3, [pc, #56]	; (8004ca0 <HAL_TIM_MspPostInit+0x5c>)
 8004c66:	699b      	ldr	r3, [r3, #24]
 8004c68:	4a0d      	ldr	r2, [pc, #52]	; (8004ca0 <HAL_TIM_MspPostInit+0x5c>)
 8004c6a:	f043 0308 	orr.w	r3, r3, #8
 8004c6e:	6193      	str	r3, [r2, #24]
 8004c70:	4b0b      	ldr	r3, [pc, #44]	; (8004ca0 <HAL_TIM_MspPostInit+0x5c>)
 8004c72:	699b      	ldr	r3, [r3, #24]
 8004c74:	f003 0308 	and.w	r3, r3, #8
 8004c78:	60fb      	str	r3, [r7, #12]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration    
    PB0     ------> TIM3_CH3 
    */
    GPIO_InitStruct.Pin = BUZZ_Pin;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c80:	2302      	movs	r3, #2
 8004c82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c84:	2302      	movs	r3, #2
 8004c86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUZZ_GPIO_Port, &GPIO_InitStruct);
 8004c88:	f107 0310 	add.w	r3, r7, #16
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	4805      	ldr	r0, [pc, #20]	; (8004ca4 <HAL_TIM_MspPostInit+0x60>)
 8004c90:	f000 ff16 	bl	8005ac0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004c94:	bf00      	nop
 8004c96:	3720      	adds	r7, #32
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	40000400 	.word	0x40000400
 8004ca0:	40021000 	.word	0x40021000
 8004ca4:	40010c00 	.word	0x40010c00

08004ca8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b08a      	sub	sp, #40	; 0x28
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cb0:	f107 0318 	add.w	r3, r7, #24
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	601a      	str	r2, [r3, #0]
 8004cb8:	605a      	str	r2, [r3, #4]
 8004cba:	609a      	str	r2, [r3, #8]
 8004cbc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a37      	ldr	r2, [pc, #220]	; (8004da0 <HAL_UART_MspInit+0xf8>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d132      	bne.n	8004d2e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004cc8:	4b36      	ldr	r3, [pc, #216]	; (8004da4 <HAL_UART_MspInit+0xfc>)
 8004cca:	699b      	ldr	r3, [r3, #24]
 8004ccc:	4a35      	ldr	r2, [pc, #212]	; (8004da4 <HAL_UART_MspInit+0xfc>)
 8004cce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004cd2:	6193      	str	r3, [r2, #24]
 8004cd4:	4b33      	ldr	r3, [pc, #204]	; (8004da4 <HAL_UART_MspInit+0xfc>)
 8004cd6:	699b      	ldr	r3, [r3, #24]
 8004cd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cdc:	617b      	str	r3, [r7, #20]
 8004cde:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ce0:	4b30      	ldr	r3, [pc, #192]	; (8004da4 <HAL_UART_MspInit+0xfc>)
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	4a2f      	ldr	r2, [pc, #188]	; (8004da4 <HAL_UART_MspInit+0xfc>)
 8004ce6:	f043 0304 	orr.w	r3, r3, #4
 8004cea:	6193      	str	r3, [r2, #24]
 8004cec:	4b2d      	ldr	r3, [pc, #180]	; (8004da4 <HAL_UART_MspInit+0xfc>)
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	f003 0304 	and.w	r3, r3, #4
 8004cf4:	613b      	str	r3, [r7, #16]
 8004cf6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004cf8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004cfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cfe:	2302      	movs	r3, #2
 8004d00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004d02:	2303      	movs	r3, #3
 8004d04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d06:	f107 0318 	add.w	r3, r7, #24
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	4826      	ldr	r0, [pc, #152]	; (8004da8 <HAL_UART_MspInit+0x100>)
 8004d0e:	f000 fed7 	bl	8005ac0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004d12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d20:	f107 0318 	add.w	r3, r7, #24
 8004d24:	4619      	mov	r1, r3
 8004d26:	4820      	ldr	r0, [pc, #128]	; (8004da8 <HAL_UART_MspInit+0x100>)
 8004d28:	f000 feca 	bl	8005ac0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004d2c:	e034      	b.n	8004d98 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a1e      	ldr	r2, [pc, #120]	; (8004dac <HAL_UART_MspInit+0x104>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d12f      	bne.n	8004d98 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004d38:	4b1a      	ldr	r3, [pc, #104]	; (8004da4 <HAL_UART_MspInit+0xfc>)
 8004d3a:	69db      	ldr	r3, [r3, #28]
 8004d3c:	4a19      	ldr	r2, [pc, #100]	; (8004da4 <HAL_UART_MspInit+0xfc>)
 8004d3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d42:	61d3      	str	r3, [r2, #28]
 8004d44:	4b17      	ldr	r3, [pc, #92]	; (8004da4 <HAL_UART_MspInit+0xfc>)
 8004d46:	69db      	ldr	r3, [r3, #28]
 8004d48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d4c:	60fb      	str	r3, [r7, #12]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d50:	4b14      	ldr	r3, [pc, #80]	; (8004da4 <HAL_UART_MspInit+0xfc>)
 8004d52:	699b      	ldr	r3, [r3, #24]
 8004d54:	4a13      	ldr	r2, [pc, #76]	; (8004da4 <HAL_UART_MspInit+0xfc>)
 8004d56:	f043 0304 	orr.w	r3, r3, #4
 8004d5a:	6193      	str	r3, [r2, #24]
 8004d5c:	4b11      	ldr	r3, [pc, #68]	; (8004da4 <HAL_UART_MspInit+0xfc>)
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	f003 0304 	and.w	r3, r3, #4
 8004d64:	60bb      	str	r3, [r7, #8]
 8004d66:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BT_TX_Pin;
 8004d68:	2304      	movs	r3, #4
 8004d6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d6c:	2302      	movs	r3, #2
 8004d6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004d70:	2303      	movs	r3, #3
 8004d72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BT_TX_GPIO_Port, &GPIO_InitStruct);
 8004d74:	f107 0318 	add.w	r3, r7, #24
 8004d78:	4619      	mov	r1, r3
 8004d7a:	480b      	ldr	r0, [pc, #44]	; (8004da8 <HAL_UART_MspInit+0x100>)
 8004d7c:	f000 fea0 	bl	8005ac0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BT_RX_Pin;
 8004d80:	2308      	movs	r3, #8
 8004d82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d84:	2300      	movs	r3, #0
 8004d86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BT_RX_GPIO_Port, &GPIO_InitStruct);
 8004d8c:	f107 0318 	add.w	r3, r7, #24
 8004d90:	4619      	mov	r1, r3
 8004d92:	4805      	ldr	r0, [pc, #20]	; (8004da8 <HAL_UART_MspInit+0x100>)
 8004d94:	f000 fe94 	bl	8005ac0 <HAL_GPIO_Init>
}
 8004d98:	bf00      	nop
 8004d9a:	3728      	adds	r7, #40	; 0x28
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	40013800 	.word	0x40013800
 8004da4:	40021000 	.word	0x40021000
 8004da8:	40010800 	.word	0x40010800
 8004dac:	40004400 	.word	0x40004400

08004db0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004db0:	b480      	push	{r7}
 8004db2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004db4:	bf00      	nop
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bc80      	pop	{r7}
 8004dba:	4770      	bx	lr

08004dbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004dc0:	e7fe      	b.n	8004dc0 <HardFault_Handler+0x4>

08004dc2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004dc2:	b480      	push	{r7}
 8004dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004dc6:	e7fe      	b.n	8004dc6 <MemManage_Handler+0x4>

08004dc8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004dcc:	e7fe      	b.n	8004dcc <BusFault_Handler+0x4>

08004dce <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004dce:	b480      	push	{r7}
 8004dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004dd2:	e7fe      	b.n	8004dd2 <UsageFault_Handler+0x4>

08004dd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004dd8:	bf00      	nop
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bc80      	pop	{r7}
 8004dde:	4770      	bx	lr

08004de0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004de0:	b480      	push	{r7}
 8004de2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004de4:	bf00      	nop
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bc80      	pop	{r7}
 8004dea:	4770      	bx	lr

08004dec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004dec:	b480      	push	{r7}
 8004dee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004df0:	bf00      	nop
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bc80      	pop	{r7}
 8004df6:	4770      	bx	lr

08004df8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004dfc:	f000 f8d8 	bl	8004fb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004e00:	bf00      	nop
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8004e08:	4802      	ldr	r0, [pc, #8]	; (8004e14 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8004e0a:	f002 fa6c 	bl	80072e6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8004e0e:	bf00      	nop
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	20001aac 	.word	0x20001aac

08004e18 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004e20:	4b11      	ldr	r3, [pc, #68]	; (8004e68 <_sbrk+0x50>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d102      	bne.n	8004e2e <_sbrk+0x16>
		heap_end = &end;
 8004e28:	4b0f      	ldr	r3, [pc, #60]	; (8004e68 <_sbrk+0x50>)
 8004e2a:	4a10      	ldr	r2, [pc, #64]	; (8004e6c <_sbrk+0x54>)
 8004e2c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004e2e:	4b0e      	ldr	r3, [pc, #56]	; (8004e68 <_sbrk+0x50>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004e34:	4b0c      	ldr	r3, [pc, #48]	; (8004e68 <_sbrk+0x50>)
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	466a      	mov	r2, sp
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d907      	bls.n	8004e52 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004e42:	f008 f9ab 	bl	800d19c <__errno>
 8004e46:	4602      	mov	r2, r0
 8004e48:	230c      	movs	r3, #12
 8004e4a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8004e50:	e006      	b.n	8004e60 <_sbrk+0x48>
	}

	heap_end += incr;
 8004e52:	4b05      	ldr	r3, [pc, #20]	; (8004e68 <_sbrk+0x50>)
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4413      	add	r3, r2
 8004e5a:	4a03      	ldr	r2, [pc, #12]	; (8004e68 <_sbrk+0x50>)
 8004e5c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	20000980 	.word	0x20000980
 8004e6c:	20001d20 	.word	0x20001d20

08004e70 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004e70:	b480      	push	{r7}
 8004e72:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004e74:	4b15      	ldr	r3, [pc, #84]	; (8004ecc <SystemInit+0x5c>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a14      	ldr	r2, [pc, #80]	; (8004ecc <SystemInit+0x5c>)
 8004e7a:	f043 0301 	orr.w	r3, r3, #1
 8004e7e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8004e80:	4b12      	ldr	r3, [pc, #72]	; (8004ecc <SystemInit+0x5c>)
 8004e82:	685a      	ldr	r2, [r3, #4]
 8004e84:	4911      	ldr	r1, [pc, #68]	; (8004ecc <SystemInit+0x5c>)
 8004e86:	4b12      	ldr	r3, [pc, #72]	; (8004ed0 <SystemInit+0x60>)
 8004e88:	4013      	ands	r3, r2
 8004e8a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004e8c:	4b0f      	ldr	r3, [pc, #60]	; (8004ecc <SystemInit+0x5c>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a0e      	ldr	r2, [pc, #56]	; (8004ecc <SystemInit+0x5c>)
 8004e92:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004e96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e9a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004e9c:	4b0b      	ldr	r3, [pc, #44]	; (8004ecc <SystemInit+0x5c>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a0a      	ldr	r2, [pc, #40]	; (8004ecc <SystemInit+0x5c>)
 8004ea2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ea6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8004ea8:	4b08      	ldr	r3, [pc, #32]	; (8004ecc <SystemInit+0x5c>)
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	4a07      	ldr	r2, [pc, #28]	; (8004ecc <SystemInit+0x5c>)
 8004eae:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8004eb2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8004eb4:	4b05      	ldr	r3, [pc, #20]	; (8004ecc <SystemInit+0x5c>)
 8004eb6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8004eba:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004ebc:	4b05      	ldr	r3, [pc, #20]	; (8004ed4 <SystemInit+0x64>)
 8004ebe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004ec2:	609a      	str	r2, [r3, #8]
#endif 
}
 8004ec4:	bf00      	nop
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bc80      	pop	{r7}
 8004eca:	4770      	bx	lr
 8004ecc:	40021000 	.word	0x40021000
 8004ed0:	f8ff0000 	.word	0xf8ff0000
 8004ed4:	e000ed00 	.word	0xe000ed00

08004ed8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004ed8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004eda:	e003      	b.n	8004ee4 <LoopCopyDataInit>

08004edc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004edc:	4b0b      	ldr	r3, [pc, #44]	; (8004f0c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004ede:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004ee0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004ee2:	3104      	adds	r1, #4

08004ee4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004ee4:	480a      	ldr	r0, [pc, #40]	; (8004f10 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8004ee6:	4b0b      	ldr	r3, [pc, #44]	; (8004f14 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004ee8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004eea:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004eec:	d3f6      	bcc.n	8004edc <CopyDataInit>
  ldr r2, =_sbss
 8004eee:	4a0a      	ldr	r2, [pc, #40]	; (8004f18 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004ef0:	e002      	b.n	8004ef8 <LoopFillZerobss>

08004ef2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004ef2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004ef4:	f842 3b04 	str.w	r3, [r2], #4

08004ef8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004ef8:	4b08      	ldr	r3, [pc, #32]	; (8004f1c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8004efa:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004efc:	d3f9      	bcc.n	8004ef2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004efe:	f7ff ffb7 	bl	8004e70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004f02:	f008 f951 	bl	800d1a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004f06:	f7fe fcbf 	bl	8003888 <main>
  bx lr
 8004f0a:	4770      	bx	lr
  ldr r3, =_sidata
 8004f0c:	08010d64 	.word	0x08010d64
  ldr r0, =_sdata
 8004f10:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004f14:	20000440 	.word	0x20000440
  ldr r2, =_sbss
 8004f18:	20000440 	.word	0x20000440
  ldr r3, = _ebss
 8004f1c:	20001d1c 	.word	0x20001d1c

08004f20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004f20:	e7fe      	b.n	8004f20 <ADC1_2_IRQHandler>
	...

08004f24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004f28:	4b08      	ldr	r3, [pc, #32]	; (8004f4c <HAL_Init+0x28>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a07      	ldr	r2, [pc, #28]	; (8004f4c <HAL_Init+0x28>)
 8004f2e:	f043 0310 	orr.w	r3, r3, #16
 8004f32:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004f34:	2003      	movs	r0, #3
 8004f36:	f000 fd81 	bl	8005a3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004f3a:	2000      	movs	r0, #0
 8004f3c:	f000 f808 	bl	8004f50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004f40:	f7ff fd0e 	bl	8004960 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	40022000 	.word	0x40022000

08004f50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004f58:	4b12      	ldr	r3, [pc, #72]	; (8004fa4 <HAL_InitTick+0x54>)
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	4b12      	ldr	r3, [pc, #72]	; (8004fa8 <HAL_InitTick+0x58>)
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	4619      	mov	r1, r3
 8004f62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f66:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f000 fd99 	bl	8005aa6 <HAL_SYSTICK_Config>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d001      	beq.n	8004f7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e00e      	b.n	8004f9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2b0f      	cmp	r3, #15
 8004f82:	d80a      	bhi.n	8004f9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004f84:	2200      	movs	r2, #0
 8004f86:	6879      	ldr	r1, [r7, #4]
 8004f88:	f04f 30ff 	mov.w	r0, #4294967295
 8004f8c:	f000 fd61 	bl	8005a52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004f90:	4a06      	ldr	r2, [pc, #24]	; (8004fac <HAL_InitTick+0x5c>)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
 8004f98:	e000      	b.n	8004f9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3708      	adds	r7, #8
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	2000024c 	.word	0x2000024c
 8004fa8:	20000254 	.word	0x20000254
 8004fac:	20000250 	.word	0x20000250

08004fb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004fb4:	4b05      	ldr	r3, [pc, #20]	; (8004fcc <HAL_IncTick+0x1c>)
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	461a      	mov	r2, r3
 8004fba:	4b05      	ldr	r3, [pc, #20]	; (8004fd0 <HAL_IncTick+0x20>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	4a03      	ldr	r2, [pc, #12]	; (8004fd0 <HAL_IncTick+0x20>)
 8004fc2:	6013      	str	r3, [r2, #0]
}
 8004fc4:	bf00      	nop
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bc80      	pop	{r7}
 8004fca:	4770      	bx	lr
 8004fcc:	20000254 	.word	0x20000254
 8004fd0:	20000e14 	.word	0x20000e14

08004fd4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	af00      	add	r7, sp, #0
  return uwTick;
 8004fd8:	4b02      	ldr	r3, [pc, #8]	; (8004fe4 <HAL_GetTick+0x10>)
 8004fda:	681b      	ldr	r3, [r3, #0]
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bc80      	pop	{r7}
 8004fe2:	4770      	bx	lr
 8004fe4:	20000e14 	.word	0x20000e14

08004fe8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004ff0:	f7ff fff0 	bl	8004fd4 <HAL_GetTick>
 8004ff4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005000:	d005      	beq.n	800500e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005002:	4b09      	ldr	r3, [pc, #36]	; (8005028 <HAL_Delay+0x40>)
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	461a      	mov	r2, r3
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	4413      	add	r3, r2
 800500c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800500e:	bf00      	nop
 8005010:	f7ff ffe0 	bl	8004fd4 <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	429a      	cmp	r2, r3
 800501e:	d8f7      	bhi.n	8005010 <HAL_Delay+0x28>
  {
  }
}
 8005020:	bf00      	nop
 8005022:	3710      	adds	r7, #16
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}
 8005028:	20000254 	.word	0x20000254

0800502c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b086      	sub	sp, #24
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005034:	2300      	movs	r3, #0
 8005036:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8005038:	2300      	movs	r3, #0
 800503a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800503c:	2300      	movs	r3, #0
 800503e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8005040:	2300      	movs	r3, #0
 8005042:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d101      	bne.n	800504e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e0be      	b.n	80051cc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005058:	2b00      	cmp	r3, #0
 800505a:	d109      	bne.n	8005070 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f7ff fcaa 	bl	80049c4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 fbdd 	bl	8005830 <ADC_ConversionStop_Disable>
 8005076:	4603      	mov	r3, r0
 8005078:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800507e:	f003 0310 	and.w	r3, r3, #16
 8005082:	2b00      	cmp	r3, #0
 8005084:	f040 8099 	bne.w	80051ba <HAL_ADC_Init+0x18e>
 8005088:	7dfb      	ldrb	r3, [r7, #23]
 800508a:	2b00      	cmp	r3, #0
 800508c:	f040 8095 	bne.w	80051ba <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005094:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005098:	f023 0302 	bic.w	r3, r3, #2
 800509c:	f043 0202 	orr.w	r2, r3, #2
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80050ac:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	7b1b      	ldrb	r3, [r3, #12]
 80050b2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80050b4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80050b6:	68ba      	ldr	r2, [r7, #8]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050c4:	d003      	beq.n	80050ce <HAL_ADC_Init+0xa2>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d102      	bne.n	80050d4 <HAL_ADC_Init+0xa8>
 80050ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050d2:	e000      	b.n	80050d6 <HAL_ADC_Init+0xaa>
 80050d4:	2300      	movs	r3, #0
 80050d6:	693a      	ldr	r2, [r7, #16]
 80050d8:	4313      	orrs	r3, r2
 80050da:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	7d1b      	ldrb	r3, [r3, #20]
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d119      	bne.n	8005118 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	7b1b      	ldrb	r3, [r3, #12]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d109      	bne.n	8005100 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	699b      	ldr	r3, [r3, #24]
 80050f0:	3b01      	subs	r3, #1
 80050f2:	035a      	lsls	r2, r3, #13
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80050fc:	613b      	str	r3, [r7, #16]
 80050fe:	e00b      	b.n	8005118 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005104:	f043 0220 	orr.w	r2, r3, #32
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005110:	f043 0201 	orr.w	r2, r3, #1
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	693a      	ldr	r2, [r7, #16]
 8005128:	430a      	orrs	r2, r1
 800512a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	689a      	ldr	r2, [r3, #8]
 8005132:	4b28      	ldr	r3, [pc, #160]	; (80051d4 <HAL_ADC_Init+0x1a8>)
 8005134:	4013      	ands	r3, r2
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	6812      	ldr	r2, [r2, #0]
 800513a:	68b9      	ldr	r1, [r7, #8]
 800513c:	430b      	orrs	r3, r1
 800513e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005148:	d003      	beq.n	8005152 <HAL_ADC_Init+0x126>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	2b01      	cmp	r3, #1
 8005150:	d104      	bne.n	800515c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	3b01      	subs	r3, #1
 8005158:	051b      	lsls	r3, r3, #20
 800515a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005162:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	430a      	orrs	r2, r1
 800516e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	689a      	ldr	r2, [r3, #8]
 8005176:	4b18      	ldr	r3, [pc, #96]	; (80051d8 <HAL_ADC_Init+0x1ac>)
 8005178:	4013      	ands	r3, r2
 800517a:	68ba      	ldr	r2, [r7, #8]
 800517c:	429a      	cmp	r2, r3
 800517e:	d10b      	bne.n	8005198 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800518a:	f023 0303 	bic.w	r3, r3, #3
 800518e:	f043 0201 	orr.w	r2, r3, #1
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005196:	e018      	b.n	80051ca <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800519c:	f023 0312 	bic.w	r3, r3, #18
 80051a0:	f043 0210 	orr.w	r2, r3, #16
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ac:	f043 0201 	orr.w	r2, r3, #1
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80051b8:	e007      	b.n	80051ca <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051be:	f043 0210 	orr.w	r2, r3, #16
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80051ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3718      	adds	r7, #24
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	ffe1f7fd 	.word	0xffe1f7fd
 80051d8:	ff1f0efe 	.word	0xff1f0efe

080051dc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80051e4:	2300      	movs	r3, #0
 80051e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d101      	bne.n	80051f6 <HAL_ADC_Start+0x1a>
 80051f2:	2302      	movs	r3, #2
 80051f4:	e098      	b.n	8005328 <HAL_ADC_Start+0x14c>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2201      	movs	r2, #1
 80051fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 fac4 	bl	800578c <ADC_Enable>
 8005204:	4603      	mov	r3, r0
 8005206:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8005208:	7bfb      	ldrb	r3, [r7, #15]
 800520a:	2b00      	cmp	r3, #0
 800520c:	f040 8087 	bne.w	800531e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005214:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005218:	f023 0301 	bic.w	r3, r3, #1
 800521c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a41      	ldr	r2, [pc, #260]	; (8005330 <HAL_ADC_Start+0x154>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d105      	bne.n	800523a <HAL_ADC_Start+0x5e>
 800522e:	4b41      	ldr	r3, [pc, #260]	; (8005334 <HAL_ADC_Start+0x158>)
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d115      	bne.n	8005266 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800523e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005250:	2b00      	cmp	r3, #0
 8005252:	d026      	beq.n	80052a2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005258:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800525c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005264:	e01d      	b.n	80052a2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800526a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a2f      	ldr	r2, [pc, #188]	; (8005334 <HAL_ADC_Start+0x158>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d004      	beq.n	8005286 <HAL_ADC_Start+0xaa>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a2b      	ldr	r2, [pc, #172]	; (8005330 <HAL_ADC_Start+0x154>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d10d      	bne.n	80052a2 <HAL_ADC_Start+0xc6>
 8005286:	4b2b      	ldr	r3, [pc, #172]	; (8005334 <HAL_ADC_Start+0x158>)
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800528e:	2b00      	cmp	r3, #0
 8005290:	d007      	beq.n	80052a2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005296:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800529a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d006      	beq.n	80052bc <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b2:	f023 0206 	bic.w	r2, r3, #6
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80052ba:	e002      	b.n	80052c2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f06f 0202 	mvn.w	r2, #2
 80052d2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80052de:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80052e2:	d113      	bne.n	800530c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80052e8:	4a11      	ldr	r2, [pc, #68]	; (8005330 <HAL_ADC_Start+0x154>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d105      	bne.n	80052fa <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80052ee:	4b11      	ldr	r3, [pc, #68]	; (8005334 <HAL_ADC_Start+0x158>)
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d108      	bne.n	800530c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	689a      	ldr	r2, [r3, #8]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8005308:	609a      	str	r2, [r3, #8]
 800530a:	e00c      	b.n	8005326 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	689a      	ldr	r2, [r3, #8]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800531a:	609a      	str	r2, [r3, #8]
 800531c:	e003      	b.n	8005326 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8005326:	7bfb      	ldrb	r3, [r7, #15]
}
 8005328:	4618      	mov	r0, r3
 800532a:	3710      	adds	r7, #16
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	40012800 	.word	0x40012800
 8005334:	40012400 	.word	0x40012400

08005338 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b084      	sub	sp, #16
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005340:	2300      	movs	r3, #0
 8005342:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800534a:	2b01      	cmp	r3, #1
 800534c:	d101      	bne.n	8005352 <HAL_ADC_Stop+0x1a>
 800534e:	2302      	movs	r3, #2
 8005350:	e01a      	b.n	8005388 <HAL_ADC_Stop+0x50>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2201      	movs	r2, #1
 8005356:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 fa68 	bl	8005830 <ADC_ConversionStop_Disable>
 8005360:	4603      	mov	r3, r0
 8005362:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005364:	7bfb      	ldrb	r3, [r7, #15]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d109      	bne.n	800537e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800536e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005372:	f023 0301 	bic.w	r3, r3, #1
 8005376:	f043 0201 	orr.w	r2, r3, #1
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8005386:	7bfb      	ldrb	r3, [r7, #15]
}
 8005388:	4618      	mov	r0, r3
 800538a:	3710      	adds	r7, #16
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005390:	b590      	push	{r4, r7, lr}
 8005392:	b087      	sub	sp, #28
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800539a:	2300      	movs	r3, #0
 800539c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800539e:	2300      	movs	r3, #0
 80053a0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80053a2:	2300      	movs	r3, #0
 80053a4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80053a6:	f7ff fe15 	bl	8004fd4 <HAL_GetTick>
 80053aa:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00b      	beq.n	80053d2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053be:	f043 0220 	orr.w	r2, r3, #32
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e0c8      	b.n	8005564 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d12a      	bne.n	8005436 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d123      	bne.n	8005436 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80053ee:	e01a      	b.n	8005426 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f6:	d016      	beq.n	8005426 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d007      	beq.n	800540e <HAL_ADC_PollForConversion+0x7e>
 80053fe:	f7ff fde9 	bl	8004fd4 <HAL_GetTick>
 8005402:	4602      	mov	r2, r0
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	683a      	ldr	r2, [r7, #0]
 800540a:	429a      	cmp	r2, r3
 800540c:	d20b      	bcs.n	8005426 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005412:	f043 0204 	orr.w	r2, r3, #4
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e09e      	b.n	8005564 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0302 	and.w	r3, r3, #2
 8005430:	2b00      	cmp	r3, #0
 8005432:	d0dd      	beq.n	80053f0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8005434:	e06c      	b.n	8005510 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8005436:	4b4d      	ldr	r3, [pc, #308]	; (800556c <HAL_ADC_PollForConversion+0x1dc>)
 8005438:	681c      	ldr	r4, [r3, #0]
 800543a:	2002      	movs	r0, #2
 800543c:	f003 fa00 	bl	8008840 <HAL_RCCEx_GetPeriphCLKFreq>
 8005440:	4603      	mov	r3, r0
 8005442:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	6919      	ldr	r1, [r3, #16]
 800544c:	4b48      	ldr	r3, [pc, #288]	; (8005570 <HAL_ADC_PollForConversion+0x1e0>)
 800544e:	400b      	ands	r3, r1
 8005450:	2b00      	cmp	r3, #0
 8005452:	d118      	bne.n	8005486 <HAL_ADC_PollForConversion+0xf6>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68d9      	ldr	r1, [r3, #12]
 800545a:	4b46      	ldr	r3, [pc, #280]	; (8005574 <HAL_ADC_PollForConversion+0x1e4>)
 800545c:	400b      	ands	r3, r1
 800545e:	2b00      	cmp	r3, #0
 8005460:	d111      	bne.n	8005486 <HAL_ADC_PollForConversion+0xf6>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	6919      	ldr	r1, [r3, #16]
 8005468:	4b43      	ldr	r3, [pc, #268]	; (8005578 <HAL_ADC_PollForConversion+0x1e8>)
 800546a:	400b      	ands	r3, r1
 800546c:	2b00      	cmp	r3, #0
 800546e:	d108      	bne.n	8005482 <HAL_ADC_PollForConversion+0xf2>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68d9      	ldr	r1, [r3, #12]
 8005476:	4b41      	ldr	r3, [pc, #260]	; (800557c <HAL_ADC_PollForConversion+0x1ec>)
 8005478:	400b      	ands	r3, r1
 800547a:	2b00      	cmp	r3, #0
 800547c:	d101      	bne.n	8005482 <HAL_ADC_PollForConversion+0xf2>
 800547e:	2314      	movs	r3, #20
 8005480:	e020      	b.n	80054c4 <HAL_ADC_PollForConversion+0x134>
 8005482:	2329      	movs	r3, #41	; 0x29
 8005484:	e01e      	b.n	80054c4 <HAL_ADC_PollForConversion+0x134>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	6919      	ldr	r1, [r3, #16]
 800548c:	4b3a      	ldr	r3, [pc, #232]	; (8005578 <HAL_ADC_PollForConversion+0x1e8>)
 800548e:	400b      	ands	r3, r1
 8005490:	2b00      	cmp	r3, #0
 8005492:	d106      	bne.n	80054a2 <HAL_ADC_PollForConversion+0x112>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68d9      	ldr	r1, [r3, #12]
 800549a:	4b38      	ldr	r3, [pc, #224]	; (800557c <HAL_ADC_PollForConversion+0x1ec>)
 800549c:	400b      	ands	r3, r1
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d00d      	beq.n	80054be <HAL_ADC_PollForConversion+0x12e>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	6919      	ldr	r1, [r3, #16]
 80054a8:	4b35      	ldr	r3, [pc, #212]	; (8005580 <HAL_ADC_PollForConversion+0x1f0>)
 80054aa:	400b      	ands	r3, r1
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d108      	bne.n	80054c2 <HAL_ADC_PollForConversion+0x132>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68d9      	ldr	r1, [r3, #12]
 80054b6:	4b32      	ldr	r3, [pc, #200]	; (8005580 <HAL_ADC_PollForConversion+0x1f0>)
 80054b8:	400b      	ands	r3, r1
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d101      	bne.n	80054c2 <HAL_ADC_PollForConversion+0x132>
 80054be:	2354      	movs	r3, #84	; 0x54
 80054c0:	e000      	b.n	80054c4 <HAL_ADC_PollForConversion+0x134>
 80054c2:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80054c4:	fb02 f303 	mul.w	r3, r2, r3
 80054c8:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80054ca:	e01d      	b.n	8005508 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054d2:	d016      	beq.n	8005502 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d007      	beq.n	80054ea <HAL_ADC_PollForConversion+0x15a>
 80054da:	f7ff fd7b 	bl	8004fd4 <HAL_GetTick>
 80054de:	4602      	mov	r2, r0
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	1ad3      	subs	r3, r2, r3
 80054e4:	683a      	ldr	r2, [r7, #0]
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d20b      	bcs.n	8005502 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ee:	f043 0204 	orr.w	r2, r3, #4
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	e030      	b.n	8005564 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	3301      	adds	r3, #1
 8005506:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	429a      	cmp	r2, r3
 800550e:	d8dd      	bhi.n	80054cc <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f06f 0212 	mvn.w	r2, #18
 8005518:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800551e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8005530:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8005534:	d115      	bne.n	8005562 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800553a:	2b00      	cmp	r3, #0
 800553c:	d111      	bne.n	8005562 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005542:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800554e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005552:	2b00      	cmp	r3, #0
 8005554:	d105      	bne.n	8005562 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800555a:	f043 0201 	orr.w	r2, r3, #1
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005562:	2300      	movs	r3, #0
}
 8005564:	4618      	mov	r0, r3
 8005566:	371c      	adds	r7, #28
 8005568:	46bd      	mov	sp, r7
 800556a:	bd90      	pop	{r4, r7, pc}
 800556c:	2000024c 	.word	0x2000024c
 8005570:	24924924 	.word	0x24924924
 8005574:	00924924 	.word	0x00924924
 8005578:	12492492 	.word	0x12492492
 800557c:	00492492 	.word	0x00492492
 8005580:	00249249 	.word	0x00249249

08005584 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8005592:	4618      	mov	r0, r3
 8005594:	370c      	adds	r7, #12
 8005596:	46bd      	mov	sp, r7
 8005598:	bc80      	pop	{r7}
 800559a:	4770      	bx	lr

0800559c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800559c:	b480      	push	{r7}
 800559e:	b085      	sub	sp, #20
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80055a6:	2300      	movs	r3, #0
 80055a8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80055aa:	2300      	movs	r3, #0
 80055ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d101      	bne.n	80055bc <HAL_ADC_ConfigChannel+0x20>
 80055b8:	2302      	movs	r3, #2
 80055ba:	e0dc      	b.n	8005776 <HAL_ADC_ConfigChannel+0x1da>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	2b06      	cmp	r3, #6
 80055ca:	d81c      	bhi.n	8005606 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	685a      	ldr	r2, [r3, #4]
 80055d6:	4613      	mov	r3, r2
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	4413      	add	r3, r2
 80055dc:	3b05      	subs	r3, #5
 80055de:	221f      	movs	r2, #31
 80055e0:	fa02 f303 	lsl.w	r3, r2, r3
 80055e4:	43db      	mvns	r3, r3
 80055e6:	4019      	ands	r1, r3
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	6818      	ldr	r0, [r3, #0]
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	685a      	ldr	r2, [r3, #4]
 80055f0:	4613      	mov	r3, r2
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	4413      	add	r3, r2
 80055f6:	3b05      	subs	r3, #5
 80055f8:	fa00 f203 	lsl.w	r2, r0, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	430a      	orrs	r2, r1
 8005602:	635a      	str	r2, [r3, #52]	; 0x34
 8005604:	e03c      	b.n	8005680 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	2b0c      	cmp	r3, #12
 800560c:	d81c      	bhi.n	8005648 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	685a      	ldr	r2, [r3, #4]
 8005618:	4613      	mov	r3, r2
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	4413      	add	r3, r2
 800561e:	3b23      	subs	r3, #35	; 0x23
 8005620:	221f      	movs	r2, #31
 8005622:	fa02 f303 	lsl.w	r3, r2, r3
 8005626:	43db      	mvns	r3, r3
 8005628:	4019      	ands	r1, r3
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	6818      	ldr	r0, [r3, #0]
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	685a      	ldr	r2, [r3, #4]
 8005632:	4613      	mov	r3, r2
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	4413      	add	r3, r2
 8005638:	3b23      	subs	r3, #35	; 0x23
 800563a:	fa00 f203 	lsl.w	r2, r0, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	430a      	orrs	r2, r1
 8005644:	631a      	str	r2, [r3, #48]	; 0x30
 8005646:	e01b      	b.n	8005680 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	685a      	ldr	r2, [r3, #4]
 8005652:	4613      	mov	r3, r2
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	4413      	add	r3, r2
 8005658:	3b41      	subs	r3, #65	; 0x41
 800565a:	221f      	movs	r2, #31
 800565c:	fa02 f303 	lsl.w	r3, r2, r3
 8005660:	43db      	mvns	r3, r3
 8005662:	4019      	ands	r1, r3
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	6818      	ldr	r0, [r3, #0]
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	685a      	ldr	r2, [r3, #4]
 800566c:	4613      	mov	r3, r2
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	4413      	add	r3, r2
 8005672:	3b41      	subs	r3, #65	; 0x41
 8005674:	fa00 f203 	lsl.w	r2, r0, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	430a      	orrs	r2, r1
 800567e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2b09      	cmp	r3, #9
 8005686:	d91c      	bls.n	80056c2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68d9      	ldr	r1, [r3, #12]
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	4613      	mov	r3, r2
 8005694:	005b      	lsls	r3, r3, #1
 8005696:	4413      	add	r3, r2
 8005698:	3b1e      	subs	r3, #30
 800569a:	2207      	movs	r2, #7
 800569c:	fa02 f303 	lsl.w	r3, r2, r3
 80056a0:	43db      	mvns	r3, r3
 80056a2:	4019      	ands	r1, r3
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	6898      	ldr	r0, [r3, #8]
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	4613      	mov	r3, r2
 80056ae:	005b      	lsls	r3, r3, #1
 80056b0:	4413      	add	r3, r2
 80056b2:	3b1e      	subs	r3, #30
 80056b4:	fa00 f203 	lsl.w	r2, r0, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	430a      	orrs	r2, r1
 80056be:	60da      	str	r2, [r3, #12]
 80056c0:	e019      	b.n	80056f6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	6919      	ldr	r1, [r3, #16]
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	4613      	mov	r3, r2
 80056ce:	005b      	lsls	r3, r3, #1
 80056d0:	4413      	add	r3, r2
 80056d2:	2207      	movs	r2, #7
 80056d4:	fa02 f303 	lsl.w	r3, r2, r3
 80056d8:	43db      	mvns	r3, r3
 80056da:	4019      	ands	r1, r3
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	6898      	ldr	r0, [r3, #8]
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	4613      	mov	r3, r2
 80056e6:	005b      	lsls	r3, r3, #1
 80056e8:	4413      	add	r3, r2
 80056ea:	fa00 f203 	lsl.w	r2, r0, r3
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	430a      	orrs	r2, r1
 80056f4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2b10      	cmp	r3, #16
 80056fc:	d003      	beq.n	8005706 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005702:	2b11      	cmp	r3, #17
 8005704:	d132      	bne.n	800576c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a1d      	ldr	r2, [pc, #116]	; (8005780 <HAL_ADC_ConfigChannel+0x1e4>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d125      	bne.n	800575c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800571a:	2b00      	cmp	r3, #0
 800571c:	d126      	bne.n	800576c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	689a      	ldr	r2, [r3, #8]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800572c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2b10      	cmp	r3, #16
 8005734:	d11a      	bne.n	800576c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005736:	4b13      	ldr	r3, [pc, #76]	; (8005784 <HAL_ADC_ConfigChannel+0x1e8>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a13      	ldr	r2, [pc, #76]	; (8005788 <HAL_ADC_ConfigChannel+0x1ec>)
 800573c:	fba2 2303 	umull	r2, r3, r2, r3
 8005740:	0c9a      	lsrs	r2, r3, #18
 8005742:	4613      	mov	r3, r2
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	4413      	add	r3, r2
 8005748:	005b      	lsls	r3, r3, #1
 800574a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800574c:	e002      	b.n	8005754 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	3b01      	subs	r3, #1
 8005752:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1f9      	bne.n	800574e <HAL_ADC_ConfigChannel+0x1b2>
 800575a:	e007      	b.n	800576c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005760:	f043 0220 	orr.w	r2, r3, #32
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8005774:	7bfb      	ldrb	r3, [r7, #15]
}
 8005776:	4618      	mov	r0, r3
 8005778:	3714      	adds	r7, #20
 800577a:	46bd      	mov	sp, r7
 800577c:	bc80      	pop	{r7}
 800577e:	4770      	bx	lr
 8005780:	40012400 	.word	0x40012400
 8005784:	2000024c 	.word	0x2000024c
 8005788:	431bde83 	.word	0x431bde83

0800578c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005794:	2300      	movs	r3, #0
 8005796:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8005798:	2300      	movs	r3, #0
 800579a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	f003 0301 	and.w	r3, r3, #1
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d039      	beq.n	800581e <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	689a      	ldr	r2, [r3, #8]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f042 0201 	orr.w	r2, r2, #1
 80057b8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80057ba:	4b1b      	ldr	r3, [pc, #108]	; (8005828 <ADC_Enable+0x9c>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a1b      	ldr	r2, [pc, #108]	; (800582c <ADC_Enable+0xa0>)
 80057c0:	fba2 2303 	umull	r2, r3, r2, r3
 80057c4:	0c9b      	lsrs	r3, r3, #18
 80057c6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80057c8:	e002      	b.n	80057d0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	3b01      	subs	r3, #1
 80057ce:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d1f9      	bne.n	80057ca <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80057d6:	f7ff fbfd 	bl	8004fd4 <HAL_GetTick>
 80057da:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80057dc:	e018      	b.n	8005810 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80057de:	f7ff fbf9 	bl	8004fd4 <HAL_GetTick>
 80057e2:	4602      	mov	r2, r0
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	2b02      	cmp	r3, #2
 80057ea:	d911      	bls.n	8005810 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f0:	f043 0210 	orr.w	r2, r3, #16
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057fc:	f043 0201 	orr.w	r2, r3, #1
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e007      	b.n	8005820 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f003 0301 	and.w	r3, r3, #1
 800581a:	2b01      	cmp	r3, #1
 800581c:	d1df      	bne.n	80057de <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800581e:	2300      	movs	r3, #0
}
 8005820:	4618      	mov	r0, r3
 8005822:	3710      	adds	r7, #16
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	2000024c 	.word	0x2000024c
 800582c:	431bde83 	.word	0x431bde83

08005830 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005838:	2300      	movs	r3, #0
 800583a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f003 0301 	and.w	r3, r3, #1
 8005846:	2b01      	cmp	r3, #1
 8005848:	d127      	bne.n	800589a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	689a      	ldr	r2, [r3, #8]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f022 0201 	bic.w	r2, r2, #1
 8005858:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800585a:	f7ff fbbb 	bl	8004fd4 <HAL_GetTick>
 800585e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005860:	e014      	b.n	800588c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005862:	f7ff fbb7 	bl	8004fd4 <HAL_GetTick>
 8005866:	4602      	mov	r2, r0
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	2b02      	cmp	r3, #2
 800586e:	d90d      	bls.n	800588c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005874:	f043 0210 	orr.w	r2, r3, #16
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005880:	f043 0201 	orr.w	r2, r3, #1
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e007      	b.n	800589c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	f003 0301 	and.w	r3, r3, #1
 8005896:	2b01      	cmp	r3, #1
 8005898:	d0e3      	beq.n	8005862 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800589a:	2300      	movs	r3, #0
}
 800589c:	4618      	mov	r0, r3
 800589e:	3710      	adds	r7, #16
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b085      	sub	sp, #20
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f003 0307 	and.w	r3, r3, #7
 80058b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80058b4:	4b0c      	ldr	r3, [pc, #48]	; (80058e8 <__NVIC_SetPriorityGrouping+0x44>)
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80058ba:	68ba      	ldr	r2, [r7, #8]
 80058bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80058c0:	4013      	ands	r3, r2
 80058c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80058cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80058d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80058d6:	4a04      	ldr	r2, [pc, #16]	; (80058e8 <__NVIC_SetPriorityGrouping+0x44>)
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	60d3      	str	r3, [r2, #12]
}
 80058dc:	bf00      	nop
 80058de:	3714      	adds	r7, #20
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bc80      	pop	{r7}
 80058e4:	4770      	bx	lr
 80058e6:	bf00      	nop
 80058e8:	e000ed00 	.word	0xe000ed00

080058ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80058ec:	b480      	push	{r7}
 80058ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80058f0:	4b04      	ldr	r3, [pc, #16]	; (8005904 <__NVIC_GetPriorityGrouping+0x18>)
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	0a1b      	lsrs	r3, r3, #8
 80058f6:	f003 0307 	and.w	r3, r3, #7
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bc80      	pop	{r7}
 8005900:	4770      	bx	lr
 8005902:	bf00      	nop
 8005904:	e000ed00 	.word	0xe000ed00

08005908 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	4603      	mov	r3, r0
 8005910:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005916:	2b00      	cmp	r3, #0
 8005918:	db0b      	blt.n	8005932 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800591a:	79fb      	ldrb	r3, [r7, #7]
 800591c:	f003 021f 	and.w	r2, r3, #31
 8005920:	4906      	ldr	r1, [pc, #24]	; (800593c <__NVIC_EnableIRQ+0x34>)
 8005922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005926:	095b      	lsrs	r3, r3, #5
 8005928:	2001      	movs	r0, #1
 800592a:	fa00 f202 	lsl.w	r2, r0, r2
 800592e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005932:	bf00      	nop
 8005934:	370c      	adds	r7, #12
 8005936:	46bd      	mov	sp, r7
 8005938:	bc80      	pop	{r7}
 800593a:	4770      	bx	lr
 800593c:	e000e100 	.word	0xe000e100

08005940 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	4603      	mov	r3, r0
 8005948:	6039      	str	r1, [r7, #0]
 800594a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800594c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005950:	2b00      	cmp	r3, #0
 8005952:	db0a      	blt.n	800596a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	b2da      	uxtb	r2, r3
 8005958:	490c      	ldr	r1, [pc, #48]	; (800598c <__NVIC_SetPriority+0x4c>)
 800595a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800595e:	0112      	lsls	r2, r2, #4
 8005960:	b2d2      	uxtb	r2, r2
 8005962:	440b      	add	r3, r1
 8005964:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005968:	e00a      	b.n	8005980 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	b2da      	uxtb	r2, r3
 800596e:	4908      	ldr	r1, [pc, #32]	; (8005990 <__NVIC_SetPriority+0x50>)
 8005970:	79fb      	ldrb	r3, [r7, #7]
 8005972:	f003 030f 	and.w	r3, r3, #15
 8005976:	3b04      	subs	r3, #4
 8005978:	0112      	lsls	r2, r2, #4
 800597a:	b2d2      	uxtb	r2, r2
 800597c:	440b      	add	r3, r1
 800597e:	761a      	strb	r2, [r3, #24]
}
 8005980:	bf00      	nop
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	bc80      	pop	{r7}
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop
 800598c:	e000e100 	.word	0xe000e100
 8005990:	e000ed00 	.word	0xe000ed00

08005994 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005994:	b480      	push	{r7}
 8005996:	b089      	sub	sp, #36	; 0x24
 8005998:	af00      	add	r7, sp, #0
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	60b9      	str	r1, [r7, #8]
 800599e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f003 0307 	and.w	r3, r3, #7
 80059a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	f1c3 0307 	rsb	r3, r3, #7
 80059ae:	2b04      	cmp	r3, #4
 80059b0:	bf28      	it	cs
 80059b2:	2304      	movcs	r3, #4
 80059b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	3304      	adds	r3, #4
 80059ba:	2b06      	cmp	r3, #6
 80059bc:	d902      	bls.n	80059c4 <NVIC_EncodePriority+0x30>
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	3b03      	subs	r3, #3
 80059c2:	e000      	b.n	80059c6 <NVIC_EncodePriority+0x32>
 80059c4:	2300      	movs	r3, #0
 80059c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059c8:	f04f 32ff 	mov.w	r2, #4294967295
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	fa02 f303 	lsl.w	r3, r2, r3
 80059d2:	43da      	mvns	r2, r3
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	401a      	ands	r2, r3
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80059dc:	f04f 31ff 	mov.w	r1, #4294967295
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	fa01 f303 	lsl.w	r3, r1, r3
 80059e6:	43d9      	mvns	r1, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059ec:	4313      	orrs	r3, r2
         );
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3724      	adds	r7, #36	; 0x24
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bc80      	pop	{r7}
 80059f6:	4770      	bx	lr

080059f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b082      	sub	sp, #8
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	3b01      	subs	r3, #1
 8005a04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a08:	d301      	bcc.n	8005a0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e00f      	b.n	8005a2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005a0e:	4a0a      	ldr	r2, [pc, #40]	; (8005a38 <SysTick_Config+0x40>)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	3b01      	subs	r3, #1
 8005a14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005a16:	210f      	movs	r1, #15
 8005a18:	f04f 30ff 	mov.w	r0, #4294967295
 8005a1c:	f7ff ff90 	bl	8005940 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005a20:	4b05      	ldr	r3, [pc, #20]	; (8005a38 <SysTick_Config+0x40>)
 8005a22:	2200      	movs	r2, #0
 8005a24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005a26:	4b04      	ldr	r3, [pc, #16]	; (8005a38 <SysTick_Config+0x40>)
 8005a28:	2207      	movs	r2, #7
 8005a2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3708      	adds	r7, #8
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	e000e010 	.word	0xe000e010

08005a3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f7ff ff2d 	bl	80058a4 <__NVIC_SetPriorityGrouping>
}
 8005a4a:	bf00      	nop
 8005a4c:	3708      	adds	r7, #8
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}

08005a52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005a52:	b580      	push	{r7, lr}
 8005a54:	b086      	sub	sp, #24
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	4603      	mov	r3, r0
 8005a5a:	60b9      	str	r1, [r7, #8]
 8005a5c:	607a      	str	r2, [r7, #4]
 8005a5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005a60:	2300      	movs	r3, #0
 8005a62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005a64:	f7ff ff42 	bl	80058ec <__NVIC_GetPriorityGrouping>
 8005a68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	68b9      	ldr	r1, [r7, #8]
 8005a6e:	6978      	ldr	r0, [r7, #20]
 8005a70:	f7ff ff90 	bl	8005994 <NVIC_EncodePriority>
 8005a74:	4602      	mov	r2, r0
 8005a76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a7a:	4611      	mov	r1, r2
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f7ff ff5f 	bl	8005940 <__NVIC_SetPriority>
}
 8005a82:	bf00      	nop
 8005a84:	3718      	adds	r7, #24
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}

08005a8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a8a:	b580      	push	{r7, lr}
 8005a8c:	b082      	sub	sp, #8
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	4603      	mov	r3, r0
 8005a92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f7ff ff35 	bl	8005908 <__NVIC_EnableIRQ>
}
 8005a9e:	bf00      	nop
 8005aa0:	3708      	adds	r7, #8
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}

08005aa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005aa6:	b580      	push	{r7, lr}
 8005aa8:	b082      	sub	sp, #8
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f7ff ffa2 	bl	80059f8 <SysTick_Config>
 8005ab4:	4603      	mov	r3, r0
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3708      	adds	r7, #8
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
	...

08005ac0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b08b      	sub	sp, #44	; 0x2c
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005aca:	2300      	movs	r3, #0
 8005acc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005ad2:	e127      	b.n	8005d24 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8005adc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	69fa      	ldr	r2, [r7, #28]
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005ae8:	69ba      	ldr	r2, [r7, #24]
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	f040 8116 	bne.w	8005d1e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	2b12      	cmp	r3, #18
 8005af8:	d034      	beq.n	8005b64 <HAL_GPIO_Init+0xa4>
 8005afa:	2b12      	cmp	r3, #18
 8005afc:	d80d      	bhi.n	8005b1a <HAL_GPIO_Init+0x5a>
 8005afe:	2b02      	cmp	r3, #2
 8005b00:	d02b      	beq.n	8005b5a <HAL_GPIO_Init+0x9a>
 8005b02:	2b02      	cmp	r3, #2
 8005b04:	d804      	bhi.n	8005b10 <HAL_GPIO_Init+0x50>
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d031      	beq.n	8005b6e <HAL_GPIO_Init+0xae>
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d01c      	beq.n	8005b48 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005b0e:	e048      	b.n	8005ba2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8005b10:	2b03      	cmp	r3, #3
 8005b12:	d043      	beq.n	8005b9c <HAL_GPIO_Init+0xdc>
 8005b14:	2b11      	cmp	r3, #17
 8005b16:	d01b      	beq.n	8005b50 <HAL_GPIO_Init+0x90>
          break;
 8005b18:	e043      	b.n	8005ba2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8005b1a:	4a89      	ldr	r2, [pc, #548]	; (8005d40 <HAL_GPIO_Init+0x280>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d026      	beq.n	8005b6e <HAL_GPIO_Init+0xae>
 8005b20:	4a87      	ldr	r2, [pc, #540]	; (8005d40 <HAL_GPIO_Init+0x280>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d806      	bhi.n	8005b34 <HAL_GPIO_Init+0x74>
 8005b26:	4a87      	ldr	r2, [pc, #540]	; (8005d44 <HAL_GPIO_Init+0x284>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d020      	beq.n	8005b6e <HAL_GPIO_Init+0xae>
 8005b2c:	4a86      	ldr	r2, [pc, #536]	; (8005d48 <HAL_GPIO_Init+0x288>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d01d      	beq.n	8005b6e <HAL_GPIO_Init+0xae>
          break;
 8005b32:	e036      	b.n	8005ba2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8005b34:	4a85      	ldr	r2, [pc, #532]	; (8005d4c <HAL_GPIO_Init+0x28c>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d019      	beq.n	8005b6e <HAL_GPIO_Init+0xae>
 8005b3a:	4a85      	ldr	r2, [pc, #532]	; (8005d50 <HAL_GPIO_Init+0x290>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d016      	beq.n	8005b6e <HAL_GPIO_Init+0xae>
 8005b40:	4a84      	ldr	r2, [pc, #528]	; (8005d54 <HAL_GPIO_Init+0x294>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d013      	beq.n	8005b6e <HAL_GPIO_Init+0xae>
          break;
 8005b46:	e02c      	b.n	8005ba2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	623b      	str	r3, [r7, #32]
          break;
 8005b4e:	e028      	b.n	8005ba2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	3304      	adds	r3, #4
 8005b56:	623b      	str	r3, [r7, #32]
          break;
 8005b58:	e023      	b.n	8005ba2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	3308      	adds	r3, #8
 8005b60:	623b      	str	r3, [r7, #32]
          break;
 8005b62:	e01e      	b.n	8005ba2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	330c      	adds	r3, #12
 8005b6a:	623b      	str	r3, [r7, #32]
          break;
 8005b6c:	e019      	b.n	8005ba2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d102      	bne.n	8005b7c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005b76:	2304      	movs	r3, #4
 8005b78:	623b      	str	r3, [r7, #32]
          break;
 8005b7a:	e012      	b.n	8005ba2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d105      	bne.n	8005b90 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005b84:	2308      	movs	r3, #8
 8005b86:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	69fa      	ldr	r2, [r7, #28]
 8005b8c:	611a      	str	r2, [r3, #16]
          break;
 8005b8e:	e008      	b.n	8005ba2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005b90:	2308      	movs	r3, #8
 8005b92:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	69fa      	ldr	r2, [r7, #28]
 8005b98:	615a      	str	r2, [r3, #20]
          break;
 8005b9a:	e002      	b.n	8005ba2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	623b      	str	r3, [r7, #32]
          break;
 8005ba0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	2bff      	cmp	r3, #255	; 0xff
 8005ba6:	d801      	bhi.n	8005bac <HAL_GPIO_Init+0xec>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	e001      	b.n	8005bb0 <HAL_GPIO_Init+0xf0>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	3304      	adds	r3, #4
 8005bb0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	2bff      	cmp	r3, #255	; 0xff
 8005bb6:	d802      	bhi.n	8005bbe <HAL_GPIO_Init+0xfe>
 8005bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	e002      	b.n	8005bc4 <HAL_GPIO_Init+0x104>
 8005bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc0:	3b08      	subs	r3, #8
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	210f      	movs	r1, #15
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	fa01 f303 	lsl.w	r3, r1, r3
 8005bd2:	43db      	mvns	r3, r3
 8005bd4:	401a      	ands	r2, r3
 8005bd6:	6a39      	ldr	r1, [r7, #32]
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	fa01 f303 	lsl.w	r3, r1, r3
 8005bde:	431a      	orrs	r2, r3
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	f000 8096 	beq.w	8005d1e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005bf2:	4b59      	ldr	r3, [pc, #356]	; (8005d58 <HAL_GPIO_Init+0x298>)
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	4a58      	ldr	r2, [pc, #352]	; (8005d58 <HAL_GPIO_Init+0x298>)
 8005bf8:	f043 0301 	orr.w	r3, r3, #1
 8005bfc:	6193      	str	r3, [r2, #24]
 8005bfe:	4b56      	ldr	r3, [pc, #344]	; (8005d58 <HAL_GPIO_Init+0x298>)
 8005c00:	699b      	ldr	r3, [r3, #24]
 8005c02:	f003 0301 	and.w	r3, r3, #1
 8005c06:	60bb      	str	r3, [r7, #8]
 8005c08:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005c0a:	4a54      	ldr	r2, [pc, #336]	; (8005d5c <HAL_GPIO_Init+0x29c>)
 8005c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0e:	089b      	lsrs	r3, r3, #2
 8005c10:	3302      	adds	r3, #2
 8005c12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c16:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1a:	f003 0303 	and.w	r3, r3, #3
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	220f      	movs	r2, #15
 8005c22:	fa02 f303 	lsl.w	r3, r2, r3
 8005c26:	43db      	mvns	r3, r3
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a4b      	ldr	r2, [pc, #300]	; (8005d60 <HAL_GPIO_Init+0x2a0>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d013      	beq.n	8005c5e <HAL_GPIO_Init+0x19e>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a4a      	ldr	r2, [pc, #296]	; (8005d64 <HAL_GPIO_Init+0x2a4>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d00d      	beq.n	8005c5a <HAL_GPIO_Init+0x19a>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a49      	ldr	r2, [pc, #292]	; (8005d68 <HAL_GPIO_Init+0x2a8>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d007      	beq.n	8005c56 <HAL_GPIO_Init+0x196>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a48      	ldr	r2, [pc, #288]	; (8005d6c <HAL_GPIO_Init+0x2ac>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d101      	bne.n	8005c52 <HAL_GPIO_Init+0x192>
 8005c4e:	2303      	movs	r3, #3
 8005c50:	e006      	b.n	8005c60 <HAL_GPIO_Init+0x1a0>
 8005c52:	2304      	movs	r3, #4
 8005c54:	e004      	b.n	8005c60 <HAL_GPIO_Init+0x1a0>
 8005c56:	2302      	movs	r3, #2
 8005c58:	e002      	b.n	8005c60 <HAL_GPIO_Init+0x1a0>
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e000      	b.n	8005c60 <HAL_GPIO_Init+0x1a0>
 8005c5e:	2300      	movs	r3, #0
 8005c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c62:	f002 0203 	and.w	r2, r2, #3
 8005c66:	0092      	lsls	r2, r2, #2
 8005c68:	4093      	lsls	r3, r2
 8005c6a:	68fa      	ldr	r2, [r7, #12]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005c70:	493a      	ldr	r1, [pc, #232]	; (8005d5c <HAL_GPIO_Init+0x29c>)
 8005c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c74:	089b      	lsrs	r3, r3, #2
 8005c76:	3302      	adds	r3, #2
 8005c78:	68fa      	ldr	r2, [r7, #12]
 8005c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d006      	beq.n	8005c98 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005c8a:	4b39      	ldr	r3, [pc, #228]	; (8005d70 <HAL_GPIO_Init+0x2b0>)
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	4938      	ldr	r1, [pc, #224]	; (8005d70 <HAL_GPIO_Init+0x2b0>)
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	600b      	str	r3, [r1, #0]
 8005c96:	e006      	b.n	8005ca6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005c98:	4b35      	ldr	r3, [pc, #212]	; (8005d70 <HAL_GPIO_Init+0x2b0>)
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	43db      	mvns	r3, r3
 8005ca0:	4933      	ldr	r1, [pc, #204]	; (8005d70 <HAL_GPIO_Init+0x2b0>)
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d006      	beq.n	8005cc0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005cb2:	4b2f      	ldr	r3, [pc, #188]	; (8005d70 <HAL_GPIO_Init+0x2b0>)
 8005cb4:	685a      	ldr	r2, [r3, #4]
 8005cb6:	492e      	ldr	r1, [pc, #184]	; (8005d70 <HAL_GPIO_Init+0x2b0>)
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	604b      	str	r3, [r1, #4]
 8005cbe:	e006      	b.n	8005cce <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005cc0:	4b2b      	ldr	r3, [pc, #172]	; (8005d70 <HAL_GPIO_Init+0x2b0>)
 8005cc2:	685a      	ldr	r2, [r3, #4]
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	43db      	mvns	r3, r3
 8005cc8:	4929      	ldr	r1, [pc, #164]	; (8005d70 <HAL_GPIO_Init+0x2b0>)
 8005cca:	4013      	ands	r3, r2
 8005ccc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d006      	beq.n	8005ce8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005cda:	4b25      	ldr	r3, [pc, #148]	; (8005d70 <HAL_GPIO_Init+0x2b0>)
 8005cdc:	689a      	ldr	r2, [r3, #8]
 8005cde:	4924      	ldr	r1, [pc, #144]	; (8005d70 <HAL_GPIO_Init+0x2b0>)
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	608b      	str	r3, [r1, #8]
 8005ce6:	e006      	b.n	8005cf6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005ce8:	4b21      	ldr	r3, [pc, #132]	; (8005d70 <HAL_GPIO_Init+0x2b0>)
 8005cea:	689a      	ldr	r2, [r3, #8]
 8005cec:	69bb      	ldr	r3, [r7, #24]
 8005cee:	43db      	mvns	r3, r3
 8005cf0:	491f      	ldr	r1, [pc, #124]	; (8005d70 <HAL_GPIO_Init+0x2b0>)
 8005cf2:	4013      	ands	r3, r2
 8005cf4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d006      	beq.n	8005d10 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005d02:	4b1b      	ldr	r3, [pc, #108]	; (8005d70 <HAL_GPIO_Init+0x2b0>)
 8005d04:	68da      	ldr	r2, [r3, #12]
 8005d06:	491a      	ldr	r1, [pc, #104]	; (8005d70 <HAL_GPIO_Init+0x2b0>)
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	60cb      	str	r3, [r1, #12]
 8005d0e:	e006      	b.n	8005d1e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005d10:	4b17      	ldr	r3, [pc, #92]	; (8005d70 <HAL_GPIO_Init+0x2b0>)
 8005d12:	68da      	ldr	r2, [r3, #12]
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	43db      	mvns	r3, r3
 8005d18:	4915      	ldr	r1, [pc, #84]	; (8005d70 <HAL_GPIO_Init+0x2b0>)
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8005d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d20:	3301      	adds	r3, #1
 8005d22:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	f47f aed0 	bne.w	8005ad4 <HAL_GPIO_Init+0x14>
  }
}
 8005d34:	bf00      	nop
 8005d36:	372c      	adds	r7, #44	; 0x2c
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bc80      	pop	{r7}
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	10210000 	.word	0x10210000
 8005d44:	10110000 	.word	0x10110000
 8005d48:	10120000 	.word	0x10120000
 8005d4c:	10310000 	.word	0x10310000
 8005d50:	10320000 	.word	0x10320000
 8005d54:	10220000 	.word	0x10220000
 8005d58:	40021000 	.word	0x40021000
 8005d5c:	40010000 	.word	0x40010000
 8005d60:	40010800 	.word	0x40010800
 8005d64:	40010c00 	.word	0x40010c00
 8005d68:	40011000 	.word	0x40011000
 8005d6c:	40011400 	.word	0x40011400
 8005d70:	40010400 	.word	0x40010400

08005d74 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b089      	sub	sp, #36	; 0x24
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8005d82:	e09a      	b.n	8005eba <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005d84:	2201      	movs	r2, #1
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	fa02 f303 	lsl.w	r3, r2, r3
 8005d8c:	683a      	ldr	r2, [r7, #0]
 8005d8e:	4013      	ands	r3, r2
 8005d90:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	f000 808d 	beq.w	8005eb4 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8005d9a:	4a4e      	ldr	r2, [pc, #312]	; (8005ed4 <HAL_GPIO_DeInit+0x160>)
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	089b      	lsrs	r3, r3, #2
 8005da0:	3302      	adds	r3, #2
 8005da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005da6:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	f003 0303 	and.w	r3, r3, #3
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	220f      	movs	r2, #15
 8005db2:	fa02 f303 	lsl.w	r3, r2, r3
 8005db6:	697a      	ldr	r2, [r7, #20]
 8005db8:	4013      	ands	r3, r2
 8005dba:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a46      	ldr	r2, [pc, #280]	; (8005ed8 <HAL_GPIO_DeInit+0x164>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d013      	beq.n	8005dec <HAL_GPIO_DeInit+0x78>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4a45      	ldr	r2, [pc, #276]	; (8005edc <HAL_GPIO_DeInit+0x168>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d00d      	beq.n	8005de8 <HAL_GPIO_DeInit+0x74>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4a44      	ldr	r2, [pc, #272]	; (8005ee0 <HAL_GPIO_DeInit+0x16c>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d007      	beq.n	8005de4 <HAL_GPIO_DeInit+0x70>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a43      	ldr	r2, [pc, #268]	; (8005ee4 <HAL_GPIO_DeInit+0x170>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d101      	bne.n	8005de0 <HAL_GPIO_DeInit+0x6c>
 8005ddc:	2303      	movs	r3, #3
 8005dde:	e006      	b.n	8005dee <HAL_GPIO_DeInit+0x7a>
 8005de0:	2304      	movs	r3, #4
 8005de2:	e004      	b.n	8005dee <HAL_GPIO_DeInit+0x7a>
 8005de4:	2302      	movs	r3, #2
 8005de6:	e002      	b.n	8005dee <HAL_GPIO_DeInit+0x7a>
 8005de8:	2301      	movs	r3, #1
 8005dea:	e000      	b.n	8005dee <HAL_GPIO_DeInit+0x7a>
 8005dec:	2300      	movs	r3, #0
 8005dee:	69fa      	ldr	r2, [r7, #28]
 8005df0:	f002 0203 	and.w	r2, r2, #3
 8005df4:	0092      	lsls	r2, r2, #2
 8005df6:	4093      	lsls	r3, r2
 8005df8:	697a      	ldr	r2, [r7, #20]
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d132      	bne.n	8005e64 <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	f003 0303 	and.w	r3, r3, #3
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	220f      	movs	r2, #15
 8005e08:	fa02 f303 	lsl.w	r3, r2, r3
 8005e0c:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8005e0e:	4a31      	ldr	r2, [pc, #196]	; (8005ed4 <HAL_GPIO_DeInit+0x160>)
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	089b      	lsrs	r3, r3, #2
 8005e14:	3302      	adds	r3, #2
 8005e16:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	43da      	mvns	r2, r3
 8005e1e:	482d      	ldr	r0, [pc, #180]	; (8005ed4 <HAL_GPIO_DeInit+0x160>)
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	089b      	lsrs	r3, r3, #2
 8005e24:	400a      	ands	r2, r1
 8005e26:	3302      	adds	r3, #2
 8005e28:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8005e2c:	4b2e      	ldr	r3, [pc, #184]	; (8005ee8 <HAL_GPIO_DeInit+0x174>)
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	43db      	mvns	r3, r3
 8005e34:	492c      	ldr	r1, [pc, #176]	; (8005ee8 <HAL_GPIO_DeInit+0x174>)
 8005e36:	4013      	ands	r3, r2
 8005e38:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8005e3a:	4b2b      	ldr	r3, [pc, #172]	; (8005ee8 <HAL_GPIO_DeInit+0x174>)
 8005e3c:	685a      	ldr	r2, [r3, #4]
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	43db      	mvns	r3, r3
 8005e42:	4929      	ldr	r1, [pc, #164]	; (8005ee8 <HAL_GPIO_DeInit+0x174>)
 8005e44:	4013      	ands	r3, r2
 8005e46:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8005e48:	4b27      	ldr	r3, [pc, #156]	; (8005ee8 <HAL_GPIO_DeInit+0x174>)
 8005e4a:	689a      	ldr	r2, [r3, #8]
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	43db      	mvns	r3, r3
 8005e50:	4925      	ldr	r1, [pc, #148]	; (8005ee8 <HAL_GPIO_DeInit+0x174>)
 8005e52:	4013      	ands	r3, r2
 8005e54:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8005e56:	4b24      	ldr	r3, [pc, #144]	; (8005ee8 <HAL_GPIO_DeInit+0x174>)
 8005e58:	68da      	ldr	r2, [r3, #12]
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	43db      	mvns	r3, r3
 8005e5e:	4922      	ldr	r1, [pc, #136]	; (8005ee8 <HAL_GPIO_DeInit+0x174>)
 8005e60:	4013      	ands	r3, r2
 8005e62:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	2bff      	cmp	r3, #255	; 0xff
 8005e68:	d801      	bhi.n	8005e6e <HAL_GPIO_DeInit+0xfa>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	e001      	b.n	8005e72 <HAL_GPIO_DeInit+0xfe>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	3304      	adds	r3, #4
 8005e72:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005e74:	69bb      	ldr	r3, [r7, #24]
 8005e76:	2bff      	cmp	r3, #255	; 0xff
 8005e78:	d802      	bhi.n	8005e80 <HAL_GPIO_DeInit+0x10c>
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	e002      	b.n	8005e86 <HAL_GPIO_DeInit+0x112>
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	3b08      	subs	r3, #8
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	210f      	movs	r1, #15
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	fa01 f303 	lsl.w	r3, r1, r3
 8005e94:	43db      	mvns	r3, r3
 8005e96:	401a      	ands	r2, r3
 8005e98:	2104      	movs	r1, #4
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8005ea0:	431a      	orrs	r2, r3
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	68da      	ldr	r2, [r3, #12]
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	43db      	mvns	r3, r3
 8005eae:	401a      	ands	r2, r3
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	60da      	str	r2, [r3, #12]
    }

    position++;
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8005eba:	683a      	ldr	r2, [r7, #0]
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	f47f af5e 	bne.w	8005d84 <HAL_GPIO_DeInit+0x10>
  }
}
 8005ec8:	bf00      	nop
 8005eca:	3724      	adds	r7, #36	; 0x24
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bc80      	pop	{r7}
 8005ed0:	4770      	bx	lr
 8005ed2:	bf00      	nop
 8005ed4:	40010000 	.word	0x40010000
 8005ed8:	40010800 	.word	0x40010800
 8005edc:	40010c00 	.word	0x40010c00
 8005ee0:	40011000 	.word	0x40011000
 8005ee4:	40011400 	.word	0x40011400
 8005ee8:	40010400 	.word	0x40010400

08005eec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b085      	sub	sp, #20
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	689a      	ldr	r2, [r3, #8]
 8005efc:	887b      	ldrh	r3, [r7, #2]
 8005efe:	4013      	ands	r3, r2
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d002      	beq.n	8005f0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005f04:	2301      	movs	r3, #1
 8005f06:	73fb      	strb	r3, [r7, #15]
 8005f08:	e001      	b.n	8005f0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3714      	adds	r7, #20
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bc80      	pop	{r7}
 8005f18:	4770      	bx	lr

08005f1a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	b083      	sub	sp, #12
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
 8005f22:	460b      	mov	r3, r1
 8005f24:	807b      	strh	r3, [r7, #2]
 8005f26:	4613      	mov	r3, r2
 8005f28:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005f2a:	787b      	ldrb	r3, [r7, #1]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d003      	beq.n	8005f38 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005f30:	887a      	ldrh	r2, [r7, #2]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005f36:	e003      	b.n	8005f40 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005f38:	887b      	ldrh	r3, [r7, #2]
 8005f3a:	041a      	lsls	r2, r3, #16
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	611a      	str	r2, [r3, #16]
}
 8005f40:	bf00      	nop
 8005f42:	370c      	adds	r7, #12
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bc80      	pop	{r7}
 8005f48:	4770      	bx	lr

08005f4a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005f4a:	b480      	push	{r7}
 8005f4c:	b083      	sub	sp, #12
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
 8005f52:	460b      	mov	r3, r1
 8005f54:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	68da      	ldr	r2, [r3, #12]
 8005f5a:	887b      	ldrh	r3, [r7, #2]
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d003      	beq.n	8005f6a <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005f62:	887a      	ldrh	r2, [r7, #2]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8005f68:	e002      	b.n	8005f70 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005f6a:	887a      	ldrh	r2, [r7, #2]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	611a      	str	r2, [r3, #16]
}
 8005f70:	bf00      	nop
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bc80      	pop	{r7}
 8005f78:	4770      	bx	lr
	...

08005f7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d101      	bne.n	8005f8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e10f      	b.n	80061ae <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d106      	bne.n	8005fa8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f7fe fd4a 	bl	8004a3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2224      	movs	r2, #36	; 0x24
 8005fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f022 0201 	bic.w	r2, r2, #1
 8005fbe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005fc0:	f002 fb42 	bl	8008648 <HAL_RCC_GetPCLK1Freq>
 8005fc4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	4a7b      	ldr	r2, [pc, #492]	; (80061b8 <HAL_I2C_Init+0x23c>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d807      	bhi.n	8005fe0 <HAL_I2C_Init+0x64>
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	4a7a      	ldr	r2, [pc, #488]	; (80061bc <HAL_I2C_Init+0x240>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	bf94      	ite	ls
 8005fd8:	2301      	movls	r3, #1
 8005fda:	2300      	movhi	r3, #0
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	e006      	b.n	8005fee <HAL_I2C_Init+0x72>
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	4a77      	ldr	r2, [pc, #476]	; (80061c0 <HAL_I2C_Init+0x244>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	bf94      	ite	ls
 8005fe8:	2301      	movls	r3, #1
 8005fea:	2300      	movhi	r3, #0
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d001      	beq.n	8005ff6 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e0db      	b.n	80061ae <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	4a72      	ldr	r2, [pc, #456]	; (80061c4 <HAL_I2C_Init+0x248>)
 8005ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8005ffe:	0c9b      	lsrs	r3, r3, #18
 8006000:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	68ba      	ldr	r2, [r7, #8]
 8006012:	430a      	orrs	r2, r1
 8006014:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	6a1b      	ldr	r3, [r3, #32]
 800601c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	4a64      	ldr	r2, [pc, #400]	; (80061b8 <HAL_I2C_Init+0x23c>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d802      	bhi.n	8006030 <HAL_I2C_Init+0xb4>
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	3301      	adds	r3, #1
 800602e:	e009      	b.n	8006044 <HAL_I2C_Init+0xc8>
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006036:	fb02 f303 	mul.w	r3, r2, r3
 800603a:	4a63      	ldr	r2, [pc, #396]	; (80061c8 <HAL_I2C_Init+0x24c>)
 800603c:	fba2 2303 	umull	r2, r3, r2, r3
 8006040:	099b      	lsrs	r3, r3, #6
 8006042:	3301      	adds	r3, #1
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	6812      	ldr	r2, [r2, #0]
 8006048:	430b      	orrs	r3, r1
 800604a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	69db      	ldr	r3, [r3, #28]
 8006052:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006056:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	4956      	ldr	r1, [pc, #344]	; (80061b8 <HAL_I2C_Init+0x23c>)
 8006060:	428b      	cmp	r3, r1
 8006062:	d80d      	bhi.n	8006080 <HAL_I2C_Init+0x104>
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	1e59      	subs	r1, r3, #1
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	005b      	lsls	r3, r3, #1
 800606e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006072:	3301      	adds	r3, #1
 8006074:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006078:	2b04      	cmp	r3, #4
 800607a:	bf38      	it	cc
 800607c:	2304      	movcc	r3, #4
 800607e:	e04f      	b.n	8006120 <HAL_I2C_Init+0x1a4>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d111      	bne.n	80060ac <HAL_I2C_Init+0x130>
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	1e58      	subs	r0, r3, #1
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6859      	ldr	r1, [r3, #4]
 8006090:	460b      	mov	r3, r1
 8006092:	005b      	lsls	r3, r3, #1
 8006094:	440b      	add	r3, r1
 8006096:	fbb0 f3f3 	udiv	r3, r0, r3
 800609a:	3301      	adds	r3, #1
 800609c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	bf0c      	ite	eq
 80060a4:	2301      	moveq	r3, #1
 80060a6:	2300      	movne	r3, #0
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	e012      	b.n	80060d2 <HAL_I2C_Init+0x156>
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	1e58      	subs	r0, r3, #1
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6859      	ldr	r1, [r3, #4]
 80060b4:	460b      	mov	r3, r1
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	440b      	add	r3, r1
 80060ba:	0099      	lsls	r1, r3, #2
 80060bc:	440b      	add	r3, r1
 80060be:	fbb0 f3f3 	udiv	r3, r0, r3
 80060c2:	3301      	adds	r3, #1
 80060c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	bf0c      	ite	eq
 80060cc:	2301      	moveq	r3, #1
 80060ce:	2300      	movne	r3, #0
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d001      	beq.n	80060da <HAL_I2C_Init+0x15e>
 80060d6:	2301      	movs	r3, #1
 80060d8:	e022      	b.n	8006120 <HAL_I2C_Init+0x1a4>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d10e      	bne.n	8006100 <HAL_I2C_Init+0x184>
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	1e58      	subs	r0, r3, #1
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6859      	ldr	r1, [r3, #4]
 80060ea:	460b      	mov	r3, r1
 80060ec:	005b      	lsls	r3, r3, #1
 80060ee:	440b      	add	r3, r1
 80060f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80060f4:	3301      	adds	r3, #1
 80060f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060fe:	e00f      	b.n	8006120 <HAL_I2C_Init+0x1a4>
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	1e58      	subs	r0, r3, #1
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6859      	ldr	r1, [r3, #4]
 8006108:	460b      	mov	r3, r1
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	440b      	add	r3, r1
 800610e:	0099      	lsls	r1, r3, #2
 8006110:	440b      	add	r3, r1
 8006112:	fbb0 f3f3 	udiv	r3, r0, r3
 8006116:	3301      	adds	r3, #1
 8006118:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800611c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006120:	6879      	ldr	r1, [r7, #4]
 8006122:	6809      	ldr	r1, [r1, #0]
 8006124:	4313      	orrs	r3, r2
 8006126:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	69da      	ldr	r2, [r3, #28]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a1b      	ldr	r3, [r3, #32]
 800613a:	431a      	orrs	r2, r3
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	430a      	orrs	r2, r1
 8006142:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800614e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	6911      	ldr	r1, [r2, #16]
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	68d2      	ldr	r2, [r2, #12]
 800615a:	4311      	orrs	r1, r2
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	6812      	ldr	r2, [r2, #0]
 8006160:	430b      	orrs	r3, r1
 8006162:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	695a      	ldr	r2, [r3, #20]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	699b      	ldr	r3, [r3, #24]
 8006176:	431a      	orrs	r2, r3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	430a      	orrs	r2, r1
 800617e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f042 0201 	orr.w	r2, r2, #1
 800618e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2220      	movs	r2, #32
 800619a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80061ac:	2300      	movs	r3, #0
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3710      	adds	r7, #16
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	000186a0 	.word	0x000186a0
 80061bc:	001e847f 	.word	0x001e847f
 80061c0:	003d08ff 	.word	0x003d08ff
 80061c4:	431bde83 	.word	0x431bde83
 80061c8:	10624dd3 	.word	0x10624dd3

080061cc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b082      	sub	sp, #8
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d101      	bne.n	80061de <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	e021      	b.n	8006222 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2224      	movs	r2, #36	; 0x24
 80061e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f022 0201 	bic.w	r2, r2, #1
 80061f4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f7fe fc8c 	bl	8004b14 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006220:	2300      	movs	r3, #0
}
 8006222:	4618      	mov	r0, r3
 8006224:	3708      	adds	r7, #8
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
	...

0800622c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b088      	sub	sp, #32
 8006230:	af02      	add	r7, sp, #8
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	607a      	str	r2, [r7, #4]
 8006236:	461a      	mov	r2, r3
 8006238:	460b      	mov	r3, r1
 800623a:	817b      	strh	r3, [r7, #10]
 800623c:	4613      	mov	r3, r2
 800623e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006240:	f7fe fec8 	bl	8004fd4 <HAL_GetTick>
 8006244:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800624c:	b2db      	uxtb	r3, r3
 800624e:	2b20      	cmp	r3, #32
 8006250:	f040 80e0 	bne.w	8006414 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	9300      	str	r3, [sp, #0]
 8006258:	2319      	movs	r3, #25
 800625a:	2201      	movs	r2, #1
 800625c:	4970      	ldr	r1, [pc, #448]	; (8006420 <HAL_I2C_Master_Transmit+0x1f4>)
 800625e:	68f8      	ldr	r0, [r7, #12]
 8006260:	f000 fd5e 	bl	8006d20 <I2C_WaitOnFlagUntilTimeout>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d001      	beq.n	800626e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800626a:	2302      	movs	r3, #2
 800626c:	e0d3      	b.n	8006416 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006274:	2b01      	cmp	r3, #1
 8006276:	d101      	bne.n	800627c <HAL_I2C_Master_Transmit+0x50>
 8006278:	2302      	movs	r3, #2
 800627a:	e0cc      	b.n	8006416 <HAL_I2C_Master_Transmit+0x1ea>
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f003 0301 	and.w	r3, r3, #1
 800628e:	2b01      	cmp	r3, #1
 8006290:	d007      	beq.n	80062a2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f042 0201 	orr.w	r2, r2, #1
 80062a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2221      	movs	r2, #33	; 0x21
 80062b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2210      	movs	r2, #16
 80062be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2200      	movs	r2, #0
 80062c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	893a      	ldrh	r2, [r7, #8]
 80062d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062d8:	b29a      	uxth	r2, r3
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	4a50      	ldr	r2, [pc, #320]	; (8006424 <HAL_I2C_Master_Transmit+0x1f8>)
 80062e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80062e4:	8979      	ldrh	r1, [r7, #10]
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	6a3a      	ldr	r2, [r7, #32]
 80062ea:	68f8      	ldr	r0, [r7, #12]
 80062ec:	f000 fbec 	bl	8006ac8 <I2C_MasterRequestWrite>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d001      	beq.n	80062fa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e08d      	b.n	8006416 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062fa:	2300      	movs	r3, #0
 80062fc:	613b      	str	r3, [r7, #16]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	695b      	ldr	r3, [r3, #20]
 8006304:	613b      	str	r3, [r7, #16]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	699b      	ldr	r3, [r3, #24]
 800630c:	613b      	str	r3, [r7, #16]
 800630e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006310:	e066      	b.n	80063e0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006312:	697a      	ldr	r2, [r7, #20]
 8006314:	6a39      	ldr	r1, [r7, #32]
 8006316:	68f8      	ldr	r0, [r7, #12]
 8006318:	f000 fdd8 	bl	8006ecc <I2C_WaitOnTXEFlagUntilTimeout>
 800631c:	4603      	mov	r3, r0
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00d      	beq.n	800633e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006326:	2b04      	cmp	r3, #4
 8006328:	d107      	bne.n	800633a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006338:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	e06b      	b.n	8006416 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006342:	781a      	ldrb	r2, [r3, #0]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634e:	1c5a      	adds	r2, r3, #1
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006358:	b29b      	uxth	r3, r3
 800635a:	3b01      	subs	r3, #1
 800635c:	b29a      	uxth	r2, r3
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006366:	3b01      	subs	r3, #1
 8006368:	b29a      	uxth	r2, r3
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	695b      	ldr	r3, [r3, #20]
 8006374:	f003 0304 	and.w	r3, r3, #4
 8006378:	2b04      	cmp	r3, #4
 800637a:	d11b      	bne.n	80063b4 <HAL_I2C_Master_Transmit+0x188>
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006380:	2b00      	cmp	r3, #0
 8006382:	d017      	beq.n	80063b4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006388:	781a      	ldrb	r2, [r3, #0]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006394:	1c5a      	adds	r2, r3, #1
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800639e:	b29b      	uxth	r3, r3
 80063a0:	3b01      	subs	r3, #1
 80063a2:	b29a      	uxth	r2, r3
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063ac:	3b01      	subs	r3, #1
 80063ae:	b29a      	uxth	r2, r3
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063b4:	697a      	ldr	r2, [r7, #20]
 80063b6:	6a39      	ldr	r1, [r7, #32]
 80063b8:	68f8      	ldr	r0, [r7, #12]
 80063ba:	f000 fdc8 	bl	8006f4e <I2C_WaitOnBTFFlagUntilTimeout>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d00d      	beq.n	80063e0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c8:	2b04      	cmp	r3, #4
 80063ca:	d107      	bne.n	80063dc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063da:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	e01a      	b.n	8006416 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d194      	bne.n	8006312 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2220      	movs	r2, #32
 80063fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2200      	movs	r2, #0
 8006404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2200      	movs	r2, #0
 800640c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006410:	2300      	movs	r3, #0
 8006412:	e000      	b.n	8006416 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006414:	2302      	movs	r3, #2
  }
}
 8006416:	4618      	mov	r0, r3
 8006418:	3718      	adds	r7, #24
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	00100002 	.word	0x00100002
 8006424:	ffff0000 	.word	0xffff0000

08006428 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b08c      	sub	sp, #48	; 0x30
 800642c:	af02      	add	r7, sp, #8
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	607a      	str	r2, [r7, #4]
 8006432:	461a      	mov	r2, r3
 8006434:	460b      	mov	r3, r1
 8006436:	817b      	strh	r3, [r7, #10]
 8006438:	4613      	mov	r3, r2
 800643a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800643c:	f7fe fdca 	bl	8004fd4 <HAL_GetTick>
 8006440:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006448:	b2db      	uxtb	r3, r3
 800644a:	2b20      	cmp	r3, #32
 800644c:	f040 8213 	bne.w	8006876 <HAL_I2C_Master_Receive+0x44e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006452:	9300      	str	r3, [sp, #0]
 8006454:	2319      	movs	r3, #25
 8006456:	2201      	movs	r2, #1
 8006458:	497e      	ldr	r1, [pc, #504]	; (8006654 <HAL_I2C_Master_Receive+0x22c>)
 800645a:	68f8      	ldr	r0, [r7, #12]
 800645c:	f000 fc60 	bl	8006d20 <I2C_WaitOnFlagUntilTimeout>
 8006460:	4603      	mov	r3, r0
 8006462:	2b00      	cmp	r3, #0
 8006464:	d001      	beq.n	800646a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8006466:	2302      	movs	r3, #2
 8006468:	e206      	b.n	8006878 <HAL_I2C_Master_Receive+0x450>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006470:	2b01      	cmp	r3, #1
 8006472:	d101      	bne.n	8006478 <HAL_I2C_Master_Receive+0x50>
 8006474:	2302      	movs	r3, #2
 8006476:	e1ff      	b.n	8006878 <HAL_I2C_Master_Receive+0x450>
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f003 0301 	and.w	r3, r3, #1
 800648a:	2b01      	cmp	r3, #1
 800648c:	d007      	beq.n	800649e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f042 0201 	orr.w	r2, r2, #1
 800649c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80064ac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2222      	movs	r2, #34	; 0x22
 80064b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2210      	movs	r2, #16
 80064ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2200      	movs	r2, #0
 80064c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	893a      	ldrh	r2, [r7, #8]
 80064ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064d4:	b29a      	uxth	r2, r3
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	4a5e      	ldr	r2, [pc, #376]	; (8006658 <HAL_I2C_Master_Receive+0x230>)
 80064de:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80064e0:	8979      	ldrh	r1, [r7, #10]
 80064e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064e6:	68f8      	ldr	r0, [r7, #12]
 80064e8:	f000 fb64 	bl	8006bb4 <I2C_MasterRequestRead>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d001      	beq.n	80064f6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e1c0      	b.n	8006878 <HAL_I2C_Master_Receive+0x450>
    }

    if (hi2c->XferSize == 0U)
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d113      	bne.n	8006526 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064fe:	2300      	movs	r3, #0
 8006500:	623b      	str	r3, [r7, #32]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	695b      	ldr	r3, [r3, #20]
 8006508:	623b      	str	r3, [r7, #32]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	699b      	ldr	r3, [r3, #24]
 8006510:	623b      	str	r3, [r7, #32]
 8006512:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006522:	601a      	str	r2, [r3, #0]
 8006524:	e194      	b.n	8006850 <HAL_I2C_Master_Receive+0x428>
    }
    else if (hi2c->XferSize == 1U)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800652a:	2b01      	cmp	r3, #1
 800652c:	d11d      	bne.n	800656a <HAL_I2C_Master_Receive+0x142>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800653c:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800653e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006540:	2300      	movs	r3, #0
 8006542:	61fb      	str	r3, [r7, #28]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	695b      	ldr	r3, [r3, #20]
 800654a:	61fb      	str	r3, [r7, #28]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	699b      	ldr	r3, [r3, #24]
 8006552:	61fb      	str	r3, [r7, #28]
 8006554:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006564:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006566:	b662      	cpsie	i
 8006568:	e172      	b.n	8006850 <HAL_I2C_Master_Receive+0x428>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800656e:	2b02      	cmp	r3, #2
 8006570:	d11d      	bne.n	80065ae <HAL_I2C_Master_Receive+0x186>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006580:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006582:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006584:	2300      	movs	r3, #0
 8006586:	61bb      	str	r3, [r7, #24]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	695b      	ldr	r3, [r3, #20]
 800658e:	61bb      	str	r3, [r7, #24]
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	699b      	ldr	r3, [r3, #24]
 8006596:	61bb      	str	r3, [r7, #24]
 8006598:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065a8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80065aa:	b662      	cpsie	i
 80065ac:	e150      	b.n	8006850 <HAL_I2C_Master_Receive+0x428>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80065bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065be:	2300      	movs	r3, #0
 80065c0:	617b      	str	r3, [r7, #20]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	695b      	ldr	r3, [r3, #20]
 80065c8:	617b      	str	r3, [r7, #20]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	699b      	ldr	r3, [r3, #24]
 80065d0:	617b      	str	r3, [r7, #20]
 80065d2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80065d4:	e13c      	b.n	8006850 <HAL_I2C_Master_Receive+0x428>
    {
      if (hi2c->XferSize <= 3U)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065da:	2b03      	cmp	r3, #3
 80065dc:	f200 80f5 	bhi.w	80067ca <HAL_I2C_Master_Receive+0x3a2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d123      	bne.n	8006630 <HAL_I2C_Master_Receive+0x208>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80065ec:	68f8      	ldr	r0, [r7, #12]
 80065ee:	f000 fcef 	bl	8006fd0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80065f2:	4603      	mov	r3, r0
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d001      	beq.n	80065fc <HAL_I2C_Master_Receive+0x1d4>
          {
            return HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	e13d      	b.n	8006878 <HAL_I2C_Master_Receive+0x450>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	691a      	ldr	r2, [r3, #16]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006606:	b2d2      	uxtb	r2, r2
 8006608:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660e:	1c5a      	adds	r2, r3, #1
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006618:	3b01      	subs	r3, #1
 800661a:	b29a      	uxth	r2, r3
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006624:	b29b      	uxth	r3, r3
 8006626:	3b01      	subs	r3, #1
 8006628:	b29a      	uxth	r2, r3
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800662e:	e10f      	b.n	8006850 <HAL_I2C_Master_Receive+0x428>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006634:	2b02      	cmp	r3, #2
 8006636:	d150      	bne.n	80066da <HAL_I2C_Master_Receive+0x2b2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663a:	9300      	str	r3, [sp, #0]
 800663c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663e:	2200      	movs	r2, #0
 8006640:	4906      	ldr	r1, [pc, #24]	; (800665c <HAL_I2C_Master_Receive+0x234>)
 8006642:	68f8      	ldr	r0, [r7, #12]
 8006644:	f000 fb6c 	bl	8006d20 <I2C_WaitOnFlagUntilTimeout>
 8006648:	4603      	mov	r3, r0
 800664a:	2b00      	cmp	r3, #0
 800664c:	d008      	beq.n	8006660 <HAL_I2C_Master_Receive+0x238>
          {
            return HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	e112      	b.n	8006878 <HAL_I2C_Master_Receive+0x450>
 8006652:	bf00      	nop
 8006654:	00100002 	.word	0x00100002
 8006658:	ffff0000 	.word	0xffff0000
 800665c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8006660:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006670:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	691a      	ldr	r2, [r3, #16]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667c:	b2d2      	uxtb	r2, r2
 800667e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006684:	1c5a      	adds	r2, r3, #1
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800668e:	3b01      	subs	r3, #1
 8006690:	b29a      	uxth	r2, r3
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800669a:	b29b      	uxth	r3, r3
 800669c:	3b01      	subs	r3, #1
 800669e:	b29a      	uxth	r2, r3
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80066a4:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	691a      	ldr	r2, [r3, #16]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b0:	b2d2      	uxtb	r2, r2
 80066b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b8:	1c5a      	adds	r2, r3, #1
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066c2:	3b01      	subs	r3, #1
 80066c4:	b29a      	uxth	r2, r3
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	3b01      	subs	r3, #1
 80066d2:	b29a      	uxth	r2, r3
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80066d8:	e0ba      	b.n	8006850 <HAL_I2C_Master_Receive+0x428>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80066da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066dc:	9300      	str	r3, [sp, #0]
 80066de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e0:	2200      	movs	r2, #0
 80066e2:	4967      	ldr	r1, [pc, #412]	; (8006880 <HAL_I2C_Master_Receive+0x458>)
 80066e4:	68f8      	ldr	r0, [r7, #12]
 80066e6:	f000 fb1b 	bl	8006d20 <I2C_WaitOnFlagUntilTimeout>
 80066ea:	4603      	mov	r3, r0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d001      	beq.n	80066f4 <HAL_I2C_Master_Receive+0x2cc>
          {
            return HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	e0c1      	b.n	8006878 <HAL_I2C_Master_Receive+0x450>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006702:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006704:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	691a      	ldr	r2, [r3, #16]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006710:	b2d2      	uxtb	r2, r2
 8006712:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006718:	1c5a      	adds	r2, r3, #1
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006722:	3b01      	subs	r3, #1
 8006724:	b29a      	uxth	r2, r3
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800672e:	b29b      	uxth	r3, r3
 8006730:	3b01      	subs	r3, #1
 8006732:	b29a      	uxth	r2, r3
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673a:	9300      	str	r3, [sp, #0]
 800673c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800673e:	2200      	movs	r2, #0
 8006740:	494f      	ldr	r1, [pc, #316]	; (8006880 <HAL_I2C_Master_Receive+0x458>)
 8006742:	68f8      	ldr	r0, [r7, #12]
 8006744:	f000 faec 	bl	8006d20 <I2C_WaitOnFlagUntilTimeout>
 8006748:	4603      	mov	r3, r0
 800674a:	2b00      	cmp	r3, #0
 800674c:	d001      	beq.n	8006752 <HAL_I2C_Master_Receive+0x32a>
          {
            return HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	e092      	b.n	8006878 <HAL_I2C_Master_Receive+0x450>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006760:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	691a      	ldr	r2, [r3, #16]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676c:	b2d2      	uxtb	r2, r2
 800676e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006774:	1c5a      	adds	r2, r3, #1
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800677e:	3b01      	subs	r3, #1
 8006780:	b29a      	uxth	r2, r3
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800678a:	b29b      	uxth	r3, r3
 800678c:	3b01      	subs	r3, #1
 800678e:	b29a      	uxth	r2, r3
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006794:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	691a      	ldr	r2, [r3, #16]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a0:	b2d2      	uxtb	r2, r2
 80067a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a8:	1c5a      	adds	r2, r3, #1
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067b2:	3b01      	subs	r3, #1
 80067b4:	b29a      	uxth	r2, r3
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067be:	b29b      	uxth	r3, r3
 80067c0:	3b01      	subs	r3, #1
 80067c2:	b29a      	uxth	r2, r3
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80067c8:	e042      	b.n	8006850 <HAL_I2C_Master_Receive+0x428>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80067ce:	68f8      	ldr	r0, [r7, #12]
 80067d0:	f000 fbfe 	bl	8006fd0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80067d4:	4603      	mov	r3, r0
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d001      	beq.n	80067de <HAL_I2C_Master_Receive+0x3b6>
        {
          return HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	e04c      	b.n	8006878 <HAL_I2C_Master_Receive+0x450>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	691a      	ldr	r2, [r3, #16]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e8:	b2d2      	uxtb	r2, r2
 80067ea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f0:	1c5a      	adds	r2, r3, #1
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067fa:	3b01      	subs	r3, #1
 80067fc:	b29a      	uxth	r2, r3
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006806:	b29b      	uxth	r3, r3
 8006808:	3b01      	subs	r3, #1
 800680a:	b29a      	uxth	r2, r3
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	695b      	ldr	r3, [r3, #20]
 8006816:	f003 0304 	and.w	r3, r3, #4
 800681a:	2b04      	cmp	r3, #4
 800681c:	d118      	bne.n	8006850 <HAL_I2C_Master_Receive+0x428>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	691a      	ldr	r2, [r3, #16]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006828:	b2d2      	uxtb	r2, r2
 800682a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006830:	1c5a      	adds	r2, r3, #1
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800683a:	3b01      	subs	r3, #1
 800683c:	b29a      	uxth	r2, r3
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006846:	b29b      	uxth	r3, r3
 8006848:	3b01      	subs	r3, #1
 800684a:	b29a      	uxth	r2, r3
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006854:	2b00      	cmp	r3, #0
 8006856:	f47f aebe 	bne.w	80065d6 <HAL_I2C_Master_Receive+0x1ae>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2220      	movs	r2, #32
 800685e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2200      	movs	r2, #0
 8006866:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2200      	movs	r2, #0
 800686e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006872:	2300      	movs	r3, #0
 8006874:	e000      	b.n	8006878 <HAL_I2C_Master_Receive+0x450>
  }
  else
  {
    return HAL_BUSY;
 8006876:	2302      	movs	r3, #2
  }
}
 8006878:	4618      	mov	r0, r3
 800687a:	3728      	adds	r7, #40	; 0x28
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}
 8006880:	00010004 	.word	0x00010004

08006884 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b08a      	sub	sp, #40	; 0x28
 8006888:	af02      	add	r7, sp, #8
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	607a      	str	r2, [r7, #4]
 800688e:	603b      	str	r3, [r7, #0]
 8006890:	460b      	mov	r3, r1
 8006892:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8006894:	f7fe fb9e 	bl	8004fd4 <HAL_GetTick>
 8006898:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800689a:	2301      	movs	r3, #1
 800689c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	2b20      	cmp	r3, #32
 80068a8:	f040 8105 	bne.w	8006ab6 <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	9300      	str	r3, [sp, #0]
 80068b0:	2319      	movs	r3, #25
 80068b2:	2201      	movs	r2, #1
 80068b4:	4982      	ldr	r1, [pc, #520]	; (8006ac0 <HAL_I2C_IsDeviceReady+0x23c>)
 80068b6:	68f8      	ldr	r0, [r7, #12]
 80068b8:	f000 fa32 	bl	8006d20 <I2C_WaitOnFlagUntilTimeout>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d001      	beq.n	80068c6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80068c2:	2302      	movs	r3, #2
 80068c4:	e0f8      	b.n	8006ab8 <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d101      	bne.n	80068d4 <HAL_I2C_IsDeviceReady+0x50>
 80068d0:	2302      	movs	r3, #2
 80068d2:	e0f1      	b.n	8006ab8 <HAL_I2C_IsDeviceReady+0x234>
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f003 0301 	and.w	r3, r3, #1
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d007      	beq.n	80068fa <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f042 0201 	orr.w	r2, r2, #1
 80068f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006908:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2224      	movs	r2, #36	; 0x24
 800690e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2200      	movs	r2, #0
 8006916:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	4a6a      	ldr	r2, [pc, #424]	; (8006ac4 <HAL_I2C_IsDeviceReady+0x240>)
 800691c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800692c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800692e:	69fb      	ldr	r3, [r7, #28]
 8006930:	9300      	str	r3, [sp, #0]
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	2200      	movs	r2, #0
 8006936:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800693a:	68f8      	ldr	r0, [r7, #12]
 800693c:	f000 f9f0 	bl	8006d20 <I2C_WaitOnFlagUntilTimeout>
 8006940:	4603      	mov	r3, r0
 8006942:	2b00      	cmp	r3, #0
 8006944:	d001      	beq.n	800694a <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	e0b6      	b.n	8006ab8 <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800694a:	897b      	ldrh	r3, [r7, #10]
 800694c:	b2db      	uxtb	r3, r3
 800694e:	461a      	mov	r2, r3
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006958:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800695a:	f7fe fb3b 	bl	8004fd4 <HAL_GetTick>
 800695e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	695b      	ldr	r3, [r3, #20]
 8006966:	f003 0302 	and.w	r3, r3, #2
 800696a:	2b02      	cmp	r3, #2
 800696c:	bf0c      	ite	eq
 800696e:	2301      	moveq	r3, #1
 8006970:	2300      	movne	r3, #0
 8006972:	b2db      	uxtb	r3, r3
 8006974:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	695b      	ldr	r3, [r3, #20]
 800697c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006980:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006984:	bf0c      	ite	eq
 8006986:	2301      	moveq	r3, #1
 8006988:	2300      	movne	r3, #0
 800698a:	b2db      	uxtb	r3, r3
 800698c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800698e:	e025      	b.n	80069dc <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006990:	f7fe fb20 	bl	8004fd4 <HAL_GetTick>
 8006994:	4602      	mov	r2, r0
 8006996:	69fb      	ldr	r3, [r7, #28]
 8006998:	1ad3      	subs	r3, r2, r3
 800699a:	683a      	ldr	r2, [r7, #0]
 800699c:	429a      	cmp	r2, r3
 800699e:	d302      	bcc.n	80069a6 <HAL_I2C_IsDeviceReady+0x122>
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d103      	bne.n	80069ae <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	22a0      	movs	r2, #160	; 0xa0
 80069aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	695b      	ldr	r3, [r3, #20]
 80069b4:	f003 0302 	and.w	r3, r3, #2
 80069b8:	2b02      	cmp	r3, #2
 80069ba:	bf0c      	ite	eq
 80069bc:	2301      	moveq	r3, #1
 80069be:	2300      	movne	r3, #0
 80069c0:	b2db      	uxtb	r3, r3
 80069c2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	695b      	ldr	r3, [r3, #20]
 80069ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069d2:	bf0c      	ite	eq
 80069d4:	2301      	moveq	r3, #1
 80069d6:	2300      	movne	r3, #0
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	2ba0      	cmp	r3, #160	; 0xa0
 80069e6:	d005      	beq.n	80069f4 <HAL_I2C_IsDeviceReady+0x170>
 80069e8:	7dfb      	ldrb	r3, [r7, #23]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d102      	bne.n	80069f4 <HAL_I2C_IsDeviceReady+0x170>
 80069ee:	7dbb      	ldrb	r3, [r7, #22]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d0cd      	beq.n	8006990 <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2220      	movs	r2, #32
 80069f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	695b      	ldr	r3, [r3, #20]
 8006a02:	f003 0302 	and.w	r3, r3, #2
 8006a06:	2b02      	cmp	r3, #2
 8006a08:	d129      	bne.n	8006a5e <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a18:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	613b      	str	r3, [r7, #16]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	695b      	ldr	r3, [r3, #20]
 8006a24:	613b      	str	r3, [r7, #16]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	699b      	ldr	r3, [r3, #24]
 8006a2c:	613b      	str	r3, [r7, #16]
 8006a2e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006a30:	69fb      	ldr	r3, [r7, #28]
 8006a32:	9300      	str	r3, [sp, #0]
 8006a34:	2319      	movs	r3, #25
 8006a36:	2201      	movs	r2, #1
 8006a38:	4921      	ldr	r1, [pc, #132]	; (8006ac0 <HAL_I2C_IsDeviceReady+0x23c>)
 8006a3a:	68f8      	ldr	r0, [r7, #12]
 8006a3c:	f000 f970 	bl	8006d20 <I2C_WaitOnFlagUntilTimeout>
 8006a40:	4603      	mov	r3, r0
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d001      	beq.n	8006a4a <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 8006a46:	2301      	movs	r3, #1
 8006a48:	e036      	b.n	8006ab8 <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2220      	movs	r2, #32
 8006a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2200      	movs	r2, #0
 8006a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	e02c      	b.n	8006ab8 <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a6c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006a76:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	9300      	str	r3, [sp, #0]
 8006a7c:	2319      	movs	r3, #25
 8006a7e:	2201      	movs	r2, #1
 8006a80:	490f      	ldr	r1, [pc, #60]	; (8006ac0 <HAL_I2C_IsDeviceReady+0x23c>)
 8006a82:	68f8      	ldr	r0, [r7, #12]
 8006a84:	f000 f94c 	bl	8006d20 <I2C_WaitOnFlagUntilTimeout>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d001      	beq.n	8006a92 <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e012      	b.n	8006ab8 <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	3301      	adds	r3, #1
 8006a96:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8006a98:	69ba      	ldr	r2, [r7, #24]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	f4ff af3e 	bcc.w	800691e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2220      	movs	r2, #32
 8006aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e000      	b.n	8006ab8 <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 8006ab6:	2302      	movs	r3, #2
  }
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3720      	adds	r7, #32
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}
 8006ac0:	00100002 	.word	0x00100002
 8006ac4:	ffff0000 	.word	0xffff0000

08006ac8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b088      	sub	sp, #32
 8006acc:	af02      	add	r7, sp, #8
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	607a      	str	r2, [r7, #4]
 8006ad2:	603b      	str	r3, [r7, #0]
 8006ad4:	460b      	mov	r3, r1
 8006ad6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006adc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	2b08      	cmp	r3, #8
 8006ae2:	d006      	beq.n	8006af2 <I2C_MasterRequestWrite+0x2a>
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d003      	beq.n	8006af2 <I2C_MasterRequestWrite+0x2a>
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006af0:	d108      	bne.n	8006b04 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b00:	601a      	str	r2, [r3, #0]
 8006b02:	e00b      	b.n	8006b1c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b08:	2b12      	cmp	r3, #18
 8006b0a:	d107      	bne.n	8006b1c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b1a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	9300      	str	r3, [sp, #0]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006b28:	68f8      	ldr	r0, [r7, #12]
 8006b2a:	f000 f8f9 	bl	8006d20 <I2C_WaitOnFlagUntilTimeout>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d001      	beq.n	8006b38 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	e035      	b.n	8006ba4 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	691b      	ldr	r3, [r3, #16]
 8006b3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b40:	d108      	bne.n	8006b54 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006b42:	897b      	ldrh	r3, [r7, #10]
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	461a      	mov	r2, r3
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006b50:	611a      	str	r2, [r3, #16]
 8006b52:	e01b      	b.n	8006b8c <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006b54:	897b      	ldrh	r3, [r7, #10]
 8006b56:	11db      	asrs	r3, r3, #7
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	f003 0306 	and.w	r3, r3, #6
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	f063 030f 	orn	r3, r3, #15
 8006b64:	b2da      	uxtb	r2, r3
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	490e      	ldr	r1, [pc, #56]	; (8006bac <I2C_MasterRequestWrite+0xe4>)
 8006b72:	68f8      	ldr	r0, [r7, #12]
 8006b74:	f000 f92b 	bl	8006dce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d001      	beq.n	8006b82 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e010      	b.n	8006ba4 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006b82:	897b      	ldrh	r3, [r7, #10]
 8006b84:	b2da      	uxtb	r2, r3
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	4907      	ldr	r1, [pc, #28]	; (8006bb0 <I2C_MasterRequestWrite+0xe8>)
 8006b92:	68f8      	ldr	r0, [r7, #12]
 8006b94:	f000 f91b 	bl	8006dce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d001      	beq.n	8006ba2 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e000      	b.n	8006ba4 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8006ba2:	2300      	movs	r3, #0
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3718      	adds	r7, #24
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}
 8006bac:	00010008 	.word	0x00010008
 8006bb0:	00010002 	.word	0x00010002

08006bb4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b088      	sub	sp, #32
 8006bb8:	af02      	add	r7, sp, #8
 8006bba:	60f8      	str	r0, [r7, #12]
 8006bbc:	607a      	str	r2, [r7, #4]
 8006bbe:	603b      	str	r3, [r7, #0]
 8006bc0:	460b      	mov	r3, r1
 8006bc2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006bd8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	2b08      	cmp	r3, #8
 8006bde:	d006      	beq.n	8006bee <I2C_MasterRequestRead+0x3a>
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d003      	beq.n	8006bee <I2C_MasterRequestRead+0x3a>
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006bec:	d108      	bne.n	8006c00 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006bfc:	601a      	str	r2, [r3, #0]
 8006bfe:	e00b      	b.n	8006c18 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c04:	2b11      	cmp	r3, #17
 8006c06:	d107      	bne.n	8006c18 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c16:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	9300      	str	r3, [sp, #0]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006c24:	68f8      	ldr	r0, [r7, #12]
 8006c26:	f000 f87b 	bl	8006d20 <I2C_WaitOnFlagUntilTimeout>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d001      	beq.n	8006c34 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	e06d      	b.n	8006d10 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	691b      	ldr	r3, [r3, #16]
 8006c38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c3c:	d108      	bne.n	8006c50 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006c3e:	897b      	ldrh	r3, [r7, #10]
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	f043 0301 	orr.w	r3, r3, #1
 8006c46:	b2da      	uxtb	r2, r3
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	611a      	str	r2, [r3, #16]
 8006c4e:	e053      	b.n	8006cf8 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006c50:	897b      	ldrh	r3, [r7, #10]
 8006c52:	11db      	asrs	r3, r3, #7
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	f003 0306 	and.w	r3, r3, #6
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	f063 030f 	orn	r3, r3, #15
 8006c60:	b2da      	uxtb	r2, r3
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	492a      	ldr	r1, [pc, #168]	; (8006d18 <I2C_MasterRequestRead+0x164>)
 8006c6e:	68f8      	ldr	r0, [r7, #12]
 8006c70:	f000 f8ad 	bl	8006dce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c74:	4603      	mov	r3, r0
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d001      	beq.n	8006c7e <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	e048      	b.n	8006d10 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006c7e:	897b      	ldrh	r3, [r7, #10]
 8006c80:	b2da      	uxtb	r2, r3
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	4923      	ldr	r1, [pc, #140]	; (8006d1c <I2C_MasterRequestRead+0x168>)
 8006c8e:	68f8      	ldr	r0, [r7, #12]
 8006c90:	f000 f89d 	bl	8006dce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c94:	4603      	mov	r3, r0
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d001      	beq.n	8006c9e <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e038      	b.n	8006d10 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	613b      	str	r3, [r7, #16]
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	695b      	ldr	r3, [r3, #20]
 8006ca8:	613b      	str	r3, [r7, #16]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	699b      	ldr	r3, [r3, #24]
 8006cb0:	613b      	str	r3, [r7, #16]
 8006cb2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006cc2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	9300      	str	r3, [sp, #0]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006cd0:	68f8      	ldr	r0, [r7, #12]
 8006cd2:	f000 f825 	bl	8006d20 <I2C_WaitOnFlagUntilTimeout>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d001      	beq.n	8006ce0 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	e017      	b.n	8006d10 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006ce0:	897b      	ldrh	r3, [r7, #10]
 8006ce2:	11db      	asrs	r3, r3, #7
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	f003 0306 	and.w	r3, r3, #6
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	f063 030e 	orn	r3, r3, #14
 8006cf0:	b2da      	uxtb	r2, r3
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	687a      	ldr	r2, [r7, #4]
 8006cfc:	4907      	ldr	r1, [pc, #28]	; (8006d1c <I2C_MasterRequestRead+0x168>)
 8006cfe:	68f8      	ldr	r0, [r7, #12]
 8006d00:	f000 f865 	bl	8006dce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d001      	beq.n	8006d0e <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e000      	b.n	8006d10 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 8006d0e:	2300      	movs	r3, #0
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3718      	adds	r7, #24
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	00010008 	.word	0x00010008
 8006d1c:	00010002 	.word	0x00010002

08006d20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b084      	sub	sp, #16
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	60b9      	str	r1, [r7, #8]
 8006d2a:	603b      	str	r3, [r7, #0]
 8006d2c:	4613      	mov	r3, r2
 8006d2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d30:	e025      	b.n	8006d7e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d38:	d021      	beq.n	8006d7e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d3a:	f7fe f94b 	bl	8004fd4 <HAL_GetTick>
 8006d3e:	4602      	mov	r2, r0
 8006d40:	69bb      	ldr	r3, [r7, #24]
 8006d42:	1ad3      	subs	r3, r2, r3
 8006d44:	683a      	ldr	r2, [r7, #0]
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d302      	bcc.n	8006d50 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d116      	bne.n	8006d7e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2200      	movs	r2, #0
 8006d54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2220      	movs	r2, #32
 8006d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2200      	movs	r2, #0
 8006d62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d6a:	f043 0220 	orr.w	r2, r3, #32
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2200      	movs	r2, #0
 8006d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e023      	b.n	8006dc6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	0c1b      	lsrs	r3, r3, #16
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d10d      	bne.n	8006da4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	695b      	ldr	r3, [r3, #20]
 8006d8e:	43da      	mvns	r2, r3
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	4013      	ands	r3, r2
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	bf0c      	ite	eq
 8006d9a:	2301      	moveq	r3, #1
 8006d9c:	2300      	movne	r3, #0
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	461a      	mov	r2, r3
 8006da2:	e00c      	b.n	8006dbe <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	699b      	ldr	r3, [r3, #24]
 8006daa:	43da      	mvns	r2, r3
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	4013      	ands	r3, r2
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	bf0c      	ite	eq
 8006db6:	2301      	moveq	r3, #1
 8006db8:	2300      	movne	r3, #0
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	79fb      	ldrb	r3, [r7, #7]
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d0b6      	beq.n	8006d32 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006dc4:	2300      	movs	r3, #0
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3710      	adds	r7, #16
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}

08006dce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006dce:	b580      	push	{r7, lr}
 8006dd0:	b084      	sub	sp, #16
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	60f8      	str	r0, [r7, #12]
 8006dd6:	60b9      	str	r1, [r7, #8]
 8006dd8:	607a      	str	r2, [r7, #4]
 8006dda:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006ddc:	e051      	b.n	8006e82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	695b      	ldr	r3, [r3, #20]
 8006de4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006de8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dec:	d123      	bne.n	8006e36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006dfc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006e06:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2220      	movs	r2, #32
 8006e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e22:	f043 0204 	orr.w	r2, r3, #4
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	e046      	b.n	8006ec4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e3c:	d021      	beq.n	8006e82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e3e:	f7fe f8c9 	bl	8004fd4 <HAL_GetTick>
 8006e42:	4602      	mov	r2, r0
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	1ad3      	subs	r3, r2, r3
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d302      	bcc.n	8006e54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d116      	bne.n	8006e82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2200      	movs	r2, #0
 8006e58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2220      	movs	r2, #32
 8006e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2200      	movs	r2, #0
 8006e66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e6e:	f043 0220 	orr.w	r2, r3, #32
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e020      	b.n	8006ec4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	0c1b      	lsrs	r3, r3, #16
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d10c      	bne.n	8006ea6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	695b      	ldr	r3, [r3, #20]
 8006e92:	43da      	mvns	r2, r3
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	4013      	ands	r3, r2
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	bf14      	ite	ne
 8006e9e:	2301      	movne	r3, #1
 8006ea0:	2300      	moveq	r3, #0
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	e00b      	b.n	8006ebe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	699b      	ldr	r3, [r3, #24]
 8006eac:	43da      	mvns	r2, r3
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	4013      	ands	r3, r2
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	bf14      	ite	ne
 8006eb8:	2301      	movne	r3, #1
 8006eba:	2300      	moveq	r3, #0
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d18d      	bne.n	8006dde <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006ec2:	2300      	movs	r3, #0
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3710      	adds	r7, #16
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	60f8      	str	r0, [r7, #12]
 8006ed4:	60b9      	str	r1, [r7, #8]
 8006ed6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006ed8:	e02d      	b.n	8006f36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006eda:	68f8      	ldr	r0, [r7, #12]
 8006edc:	f000 f8ce 	bl	800707c <I2C_IsAcknowledgeFailed>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d001      	beq.n	8006eea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e02d      	b.n	8006f46 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ef0:	d021      	beq.n	8006f36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ef2:	f7fe f86f 	bl	8004fd4 <HAL_GetTick>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	1ad3      	subs	r3, r2, r3
 8006efc:	68ba      	ldr	r2, [r7, #8]
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d302      	bcc.n	8006f08 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d116      	bne.n	8006f36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2220      	movs	r2, #32
 8006f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f22:	f043 0220 	orr.w	r2, r3, #32
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
 8006f34:	e007      	b.n	8006f46 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	695b      	ldr	r3, [r3, #20]
 8006f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f40:	2b80      	cmp	r3, #128	; 0x80
 8006f42:	d1ca      	bne.n	8006eda <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006f44:	2300      	movs	r3, #0
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3710      	adds	r7, #16
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}

08006f4e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f4e:	b580      	push	{r7, lr}
 8006f50:	b084      	sub	sp, #16
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	60f8      	str	r0, [r7, #12]
 8006f56:	60b9      	str	r1, [r7, #8]
 8006f58:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006f5a:	e02d      	b.n	8006fb8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006f5c:	68f8      	ldr	r0, [r7, #12]
 8006f5e:	f000 f88d 	bl	800707c <I2C_IsAcknowledgeFailed>
 8006f62:	4603      	mov	r3, r0
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d001      	beq.n	8006f6c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	e02d      	b.n	8006fc8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f72:	d021      	beq.n	8006fb8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f74:	f7fe f82e 	bl	8004fd4 <HAL_GetTick>
 8006f78:	4602      	mov	r2, r0
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	1ad3      	subs	r3, r2, r3
 8006f7e:	68ba      	ldr	r2, [r7, #8]
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d302      	bcc.n	8006f8a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d116      	bne.n	8006fb8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2220      	movs	r2, #32
 8006f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa4:	f043 0220 	orr.w	r2, r3, #32
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e007      	b.n	8006fc8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	695b      	ldr	r3, [r3, #20]
 8006fbe:	f003 0304 	and.w	r3, r3, #4
 8006fc2:	2b04      	cmp	r3, #4
 8006fc4:	d1ca      	bne.n	8006f5c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006fc6:	2300      	movs	r3, #0
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3710      	adds	r7, #16
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b084      	sub	sp, #16
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	60b9      	str	r1, [r7, #8]
 8006fda:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006fdc:	e042      	b.n	8007064 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	695b      	ldr	r3, [r3, #20]
 8006fe4:	f003 0310 	and.w	r3, r3, #16
 8006fe8:	2b10      	cmp	r3, #16
 8006fea:	d119      	bne.n	8007020 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f06f 0210 	mvn.w	r2, #16
 8006ff4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2220      	movs	r2, #32
 8007000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2200      	movs	r2, #0
 8007008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2200      	movs	r2, #0
 8007018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800701c:	2301      	movs	r3, #1
 800701e:	e029      	b.n	8007074 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007020:	f7fd ffd8 	bl	8004fd4 <HAL_GetTick>
 8007024:	4602      	mov	r2, r0
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	1ad3      	subs	r3, r2, r3
 800702a:	68ba      	ldr	r2, [r7, #8]
 800702c:	429a      	cmp	r2, r3
 800702e:	d302      	bcc.n	8007036 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d116      	bne.n	8007064 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2200      	movs	r2, #0
 800703a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2220      	movs	r2, #32
 8007040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2200      	movs	r2, #0
 8007048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007050:	f043 0220 	orr.w	r2, r3, #32
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2200      	movs	r2, #0
 800705c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	e007      	b.n	8007074 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	695b      	ldr	r3, [r3, #20]
 800706a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800706e:	2b40      	cmp	r3, #64	; 0x40
 8007070:	d1b5      	bne.n	8006fde <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007072:	2300      	movs	r3, #0
}
 8007074:	4618      	mov	r0, r3
 8007076:	3710      	adds	r7, #16
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	695b      	ldr	r3, [r3, #20]
 800708a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800708e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007092:	d11b      	bne.n	80070cc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800709c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2200      	movs	r2, #0
 80070a2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2220      	movs	r2, #32
 80070a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2200      	movs	r2, #0
 80070b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b8:	f043 0204 	orr.w	r2, r3, #4
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80070c8:	2301      	movs	r3, #1
 80070ca:	e000      	b.n	80070ce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80070cc:	2300      	movs	r3, #0
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	370c      	adds	r7, #12
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bc80      	pop	{r7}
 80070d6:	4770      	bx	lr

080070d8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80070d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070da:	b08b      	sub	sp, #44	; 0x2c
 80070dc:	af06      	add	r7, sp, #24
 80070de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d101      	bne.n	80070ea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	e0d3      	b.n	8007292 <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d106      	bne.n	8007104 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2200      	movs	r2, #0
 80070fa:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f005 fdae 	bl	800cc60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2203      	movs	r2, #3
 8007108:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4618      	mov	r0, r3
 8007112:	f002 febc 	bl	8009e8e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	603b      	str	r3, [r7, #0]
 800711c:	687e      	ldr	r6, [r7, #4]
 800711e:	466d      	mov	r5, sp
 8007120:	f106 0410 	add.w	r4, r6, #16
 8007124:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007126:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007128:	6823      	ldr	r3, [r4, #0]
 800712a:	602b      	str	r3, [r5, #0]
 800712c:	1d33      	adds	r3, r6, #4
 800712e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007130:	6838      	ldr	r0, [r7, #0]
 8007132:	f002 fe85 	bl	8009e40 <USB_CoreInit>
 8007136:	4603      	mov	r3, r0
 8007138:	2b00      	cmp	r3, #0
 800713a:	d005      	beq.n	8007148 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2202      	movs	r2, #2
 8007140:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8007144:	2301      	movs	r3, #1
 8007146:	e0a4      	b.n	8007292 <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	2100      	movs	r1, #0
 800714e:	4618      	mov	r0, r3
 8007150:	f002 feb9 	bl	8009ec6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007154:	2300      	movs	r3, #0
 8007156:	73fb      	strb	r3, [r7, #15]
 8007158:	e035      	b.n	80071c6 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800715a:	7bfb      	ldrb	r3, [r7, #15]
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	015b      	lsls	r3, r3, #5
 8007160:	4413      	add	r3, r2
 8007162:	3329      	adds	r3, #41	; 0x29
 8007164:	2201      	movs	r2, #1
 8007166:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007168:	7bfb      	ldrb	r3, [r7, #15]
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	015b      	lsls	r3, r3, #5
 800716e:	4413      	add	r3, r2
 8007170:	3328      	adds	r3, #40	; 0x28
 8007172:	7bfa      	ldrb	r2, [r7, #15]
 8007174:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007176:	7bfb      	ldrb	r3, [r7, #15]
 8007178:	7bfa      	ldrb	r2, [r7, #15]
 800717a:	b291      	uxth	r1, r2
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	015b      	lsls	r3, r3, #5
 8007180:	4413      	add	r3, r2
 8007182:	3336      	adds	r3, #54	; 0x36
 8007184:	460a      	mov	r2, r1
 8007186:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007188:	7bfb      	ldrb	r3, [r7, #15]
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	015b      	lsls	r3, r3, #5
 800718e:	4413      	add	r3, r2
 8007190:	332b      	adds	r3, #43	; 0x2b
 8007192:	2200      	movs	r2, #0
 8007194:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007196:	7bfb      	ldrb	r3, [r7, #15]
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	015b      	lsls	r3, r3, #5
 800719c:	4413      	add	r3, r2
 800719e:	3338      	adds	r3, #56	; 0x38
 80071a0:	2200      	movs	r2, #0
 80071a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80071a4:	7bfb      	ldrb	r3, [r7, #15]
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	015b      	lsls	r3, r3, #5
 80071aa:	4413      	add	r3, r2
 80071ac:	333c      	adds	r3, #60	; 0x3c
 80071ae:	2200      	movs	r2, #0
 80071b0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80071b2:	7bfb      	ldrb	r3, [r7, #15]
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	3302      	adds	r3, #2
 80071b8:	015b      	lsls	r3, r3, #5
 80071ba:	4413      	add	r3, r2
 80071bc:	2200      	movs	r2, #0
 80071be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80071c0:	7bfb      	ldrb	r3, [r7, #15]
 80071c2:	3301      	adds	r3, #1
 80071c4:	73fb      	strb	r3, [r7, #15]
 80071c6:	7bfa      	ldrb	r2, [r7, #15]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d3c4      	bcc.n	800715a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80071d0:	2300      	movs	r3, #0
 80071d2:	73fb      	strb	r3, [r7, #15]
 80071d4:	e031      	b.n	800723a <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80071d6:	7bfb      	ldrb	r3, [r7, #15]
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	015b      	lsls	r3, r3, #5
 80071dc:	4413      	add	r3, r2
 80071de:	f203 1329 	addw	r3, r3, #297	; 0x129
 80071e2:	2200      	movs	r2, #0
 80071e4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80071e6:	7bfb      	ldrb	r3, [r7, #15]
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	015b      	lsls	r3, r3, #5
 80071ec:	4413      	add	r3, r2
 80071ee:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80071f2:	7bfa      	ldrb	r2, [r7, #15]
 80071f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80071f6:	7bfb      	ldrb	r3, [r7, #15]
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	015b      	lsls	r3, r3, #5
 80071fc:	4413      	add	r3, r2
 80071fe:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8007202:	2200      	movs	r2, #0
 8007204:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007206:	7bfb      	ldrb	r3, [r7, #15]
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	015b      	lsls	r3, r3, #5
 800720c:	4413      	add	r3, r2
 800720e:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8007212:	2200      	movs	r2, #0
 8007214:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007216:	7bfb      	ldrb	r3, [r7, #15]
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	015b      	lsls	r3, r3, #5
 800721c:	4413      	add	r3, r2
 800721e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8007222:	2200      	movs	r2, #0
 8007224:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007226:	7bfb      	ldrb	r3, [r7, #15]
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	330a      	adds	r3, #10
 800722c:	015b      	lsls	r3, r3, #5
 800722e:	4413      	add	r3, r2
 8007230:	2200      	movs	r2, #0
 8007232:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007234:	7bfb      	ldrb	r3, [r7, #15]
 8007236:	3301      	adds	r3, #1
 8007238:	73fb      	strb	r3, [r7, #15]
 800723a:	7bfa      	ldrb	r2, [r7, #15]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	429a      	cmp	r2, r3
 8007242:	d3c8      	bcc.n	80071d6 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	603b      	str	r3, [r7, #0]
 800724a:	687e      	ldr	r6, [r7, #4]
 800724c:	466d      	mov	r5, sp
 800724e:	f106 0410 	add.w	r4, r6, #16
 8007252:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007254:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007256:	6823      	ldr	r3, [r4, #0]
 8007258:	602b      	str	r3, [r5, #0]
 800725a:	1d33      	adds	r3, r6, #4
 800725c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800725e:	6838      	ldr	r0, [r7, #0]
 8007260:	f002 fe3d 	bl	8009ede <USB_DevInit>
 8007264:	4603      	mov	r3, r0
 8007266:	2b00      	cmp	r3, #0
 8007268:	d005      	beq.n	8007276 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2202      	movs	r2, #2
 800726e:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8007272:	2301      	movs	r3, #1
 8007274:	e00d      	b.n	8007292 <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2201      	movs	r2, #1
 8007282:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4618      	mov	r0, r3
 800728c:	f003 fe7b 	bl	800af86 <USB_DevDisconnect>

  return HAL_OK;
 8007290:	2300      	movs	r3, #0
}
 8007292:	4618      	mov	r0, r3
 8007294:	3714      	adds	r7, #20
 8007296:	46bd      	mov	sp, r7
 8007298:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800729a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800729a:	b580      	push	{r7, lr}
 800729c:	b082      	sub	sp, #8
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d101      	bne.n	80072b0 <HAL_PCD_Start+0x16>
 80072ac:	2302      	movs	r3, #2
 80072ae:	e016      	b.n	80072de <HAL_PCD_Start+0x44>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2201      	movs	r2, #1
 80072b4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80072b8:	2101      	movs	r1, #1
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f005 ff37 	bl	800d12e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4618      	mov	r0, r3
 80072c6:	f003 fe54 	bl	800af72 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4618      	mov	r0, r3
 80072d0:	f002 fdc6 	bl	8009e60 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80072dc:	2300      	movs	r3, #0
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3708      	adds	r7, #8
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}

080072e6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80072e6:	b580      	push	{r7, lr}
 80072e8:	b082      	sub	sp, #8
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4618      	mov	r0, r3
 80072f4:	f003 fe51 	bl	800af9a <USB_ReadInterrupts>
 80072f8:	4603      	mov	r3, r0
 80072fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80072fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007302:	d102      	bne.n	800730a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 faf3 	bl	80078f0 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4618      	mov	r0, r3
 8007310:	f003 fe43 	bl	800af9a <USB_ReadInterrupts>
 8007314:	4603      	mov	r3, r0
 8007316:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800731a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800731e:	d112      	bne.n	8007346 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007328:	b29a      	uxth	r2, r3
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007332:	b292      	uxth	r2, r2
 8007334:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f005 fd06 	bl	800cd4a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800733e:	2100      	movs	r1, #0
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 f8de 	bl	8007502 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4618      	mov	r0, r3
 800734c:	f003 fe25 	bl	800af9a <USB_ReadInterrupts>
 8007350:	4603      	mov	r3, r0
 8007352:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007356:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800735a:	d10b      	bne.n	8007374 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007364:	b29a      	uxth	r2, r3
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800736e:	b292      	uxth	r2, r2
 8007370:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4618      	mov	r0, r3
 800737a:	f003 fe0e 	bl	800af9a <USB_ReadInterrupts>
 800737e:	4603      	mov	r3, r0
 8007380:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007384:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007388:	d10b      	bne.n	80073a2 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007392:	b29a      	uxth	r2, r3
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800739c:	b292      	uxth	r2, r2
 800739e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4618      	mov	r0, r3
 80073a8:	f003 fdf7 	bl	800af9a <USB_ReadInterrupts>
 80073ac:	4603      	mov	r3, r0
 80073ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80073b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073b6:	d126      	bne.n	8007406 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80073c0:	b29a      	uxth	r2, r3
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f022 0204 	bic.w	r2, r2, #4
 80073ca:	b292      	uxth	r2, r2
 80073cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80073d8:	b29a      	uxth	r2, r3
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f022 0208 	bic.w	r2, r2, #8
 80073e2:	b292      	uxth	r2, r2
 80073e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f005 fce7 	bl	800cdbc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80073f6:	b29a      	uxth	r2, r3
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007400:	b292      	uxth	r2, r2
 8007402:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4618      	mov	r0, r3
 800740c:	f003 fdc5 	bl	800af9a <USB_ReadInterrupts>
 8007410:	4603      	mov	r3, r0
 8007412:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007416:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800741a:	d13d      	bne.n	8007498 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007424:	b29a      	uxth	r2, r3
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f042 0208 	orr.w	r2, r2, #8
 800742e:	b292      	uxth	r2, r2
 8007430:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800743c:	b29a      	uxth	r2, r3
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007446:	b292      	uxth	r2, r2
 8007448:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007454:	b29a      	uxth	r2, r3
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f042 0204 	orr.w	r2, r2, #4
 800745e:	b292      	uxth	r2, r2
 8007460:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4618      	mov	r0, r3
 800746a:	f003 fd96 	bl	800af9a <USB_ReadInterrupts>
 800746e:	4603      	mov	r3, r0
 8007470:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007474:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007478:	d10b      	bne.n	8007492 <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007482:	b29a      	uxth	r2, r3
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800748c:	b292      	uxth	r2, r2
 800748e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f005 fc78 	bl	800cd88 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4618      	mov	r0, r3
 800749e:	f003 fd7c 	bl	800af9a <USB_ReadInterrupts>
 80074a2:	4603      	mov	r3, r0
 80074a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074ac:	d10e      	bne.n	80074cc <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80074b6:	b29a      	uxth	r2, r3
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80074c0:	b292      	uxth	r2, r2
 80074c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f005 fc31 	bl	800cd2e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4618      	mov	r0, r3
 80074d2:	f003 fd62 	bl	800af9a <USB_ReadInterrupts>
 80074d6:	4603      	mov	r3, r0
 80074d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074e0:	d10b      	bne.n	80074fa <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80074ea:	b29a      	uxth	r2, r3
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80074f4:	b292      	uxth	r2, r2
 80074f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80074fa:	bf00      	nop
 80074fc:	3708      	adds	r7, #8
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}

08007502 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007502:	b580      	push	{r7, lr}
 8007504:	b082      	sub	sp, #8
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
 800750a:	460b      	mov	r3, r1
 800750c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8007514:	2b01      	cmp	r3, #1
 8007516:	d101      	bne.n	800751c <HAL_PCD_SetAddress+0x1a>
 8007518:	2302      	movs	r3, #2
 800751a:	e013      	b.n	8007544 <HAL_PCD_SetAddress+0x42>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2201      	movs	r2, #1
 8007520:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	78fa      	ldrb	r2, [r7, #3]
 8007528:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	78fa      	ldrb	r2, [r7, #3]
 8007532:	4611      	mov	r1, r2
 8007534:	4618      	mov	r0, r3
 8007536:	f003 fd09 	bl	800af4c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2200      	movs	r2, #0
 800753e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8007542:	2300      	movs	r3, #0
}
 8007544:	4618      	mov	r0, r3
 8007546:	3708      	adds	r7, #8
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	4608      	mov	r0, r1
 8007556:	4611      	mov	r1, r2
 8007558:	461a      	mov	r2, r3
 800755a:	4603      	mov	r3, r0
 800755c:	70fb      	strb	r3, [r7, #3]
 800755e:	460b      	mov	r3, r1
 8007560:	803b      	strh	r3, [r7, #0]
 8007562:	4613      	mov	r3, r2
 8007564:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007566:	2300      	movs	r3, #0
 8007568:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800756a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800756e:	2b00      	cmp	r3, #0
 8007570:	da0b      	bge.n	800758a <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007572:	78fb      	ldrb	r3, [r7, #3]
 8007574:	f003 0307 	and.w	r3, r3, #7
 8007578:	015b      	lsls	r3, r3, #5
 800757a:	3328      	adds	r3, #40	; 0x28
 800757c:	687a      	ldr	r2, [r7, #4]
 800757e:	4413      	add	r3, r2
 8007580:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2201      	movs	r2, #1
 8007586:	705a      	strb	r2, [r3, #1]
 8007588:	e00b      	b.n	80075a2 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800758a:	78fb      	ldrb	r3, [r7, #3]
 800758c:	f003 0307 	and.w	r3, r3, #7
 8007590:	015b      	lsls	r3, r3, #5
 8007592:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	4413      	add	r3, r2
 800759a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2200      	movs	r2, #0
 80075a0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80075a2:	78fb      	ldrb	r3, [r7, #3]
 80075a4:	f003 0307 	and.w	r3, r3, #7
 80075a8:	b2da      	uxtb	r2, r3
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80075ae:	883a      	ldrh	r2, [r7, #0]
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	78ba      	ldrb	r2, [r7, #2]
 80075b8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	785b      	ldrb	r3, [r3, #1]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d004      	beq.n	80075cc <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	b29a      	uxth	r2, r3
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80075cc:	78bb      	ldrb	r3, [r7, #2]
 80075ce:	2b02      	cmp	r3, #2
 80075d0:	d102      	bne.n	80075d8 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2200      	movs	r2, #0
 80075d6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80075de:	2b01      	cmp	r3, #1
 80075e0:	d101      	bne.n	80075e6 <HAL_PCD_EP_Open+0x9a>
 80075e2:	2302      	movs	r3, #2
 80075e4:	e00e      	b.n	8007604 <HAL_PCD_EP_Open+0xb8>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2201      	movs	r2, #1
 80075ea:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	68f9      	ldr	r1, [r7, #12]
 80075f4:	4618      	mov	r0, r3
 80075f6:	f002 fc97 	bl	8009f28 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2200      	movs	r2, #0
 80075fe:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8007602:	7afb      	ldrb	r3, [r7, #11]
}
 8007604:	4618      	mov	r0, r3
 8007606:	3710      	adds	r7, #16
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}

0800760c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b084      	sub	sp, #16
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	460b      	mov	r3, r1
 8007616:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007618:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800761c:	2b00      	cmp	r3, #0
 800761e:	da0b      	bge.n	8007638 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007620:	78fb      	ldrb	r3, [r7, #3]
 8007622:	f003 0307 	and.w	r3, r3, #7
 8007626:	015b      	lsls	r3, r3, #5
 8007628:	3328      	adds	r3, #40	; 0x28
 800762a:	687a      	ldr	r2, [r7, #4]
 800762c:	4413      	add	r3, r2
 800762e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2201      	movs	r2, #1
 8007634:	705a      	strb	r2, [r3, #1]
 8007636:	e00b      	b.n	8007650 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007638:	78fb      	ldrb	r3, [r7, #3]
 800763a:	f003 0307 	and.w	r3, r3, #7
 800763e:	015b      	lsls	r3, r3, #5
 8007640:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	4413      	add	r3, r2
 8007648:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2200      	movs	r2, #0
 800764e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007650:	78fb      	ldrb	r3, [r7, #3]
 8007652:	f003 0307 	and.w	r3, r3, #7
 8007656:	b2da      	uxtb	r2, r3
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8007662:	2b01      	cmp	r3, #1
 8007664:	d101      	bne.n	800766a <HAL_PCD_EP_Close+0x5e>
 8007666:	2302      	movs	r3, #2
 8007668:	e00e      	b.n	8007688 <HAL_PCD_EP_Close+0x7c>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2201      	movs	r2, #1
 800766e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	68f9      	ldr	r1, [r7, #12]
 8007678:	4618      	mov	r0, r3
 800767a:	f002 ff43 	bl	800a504 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2200      	movs	r2, #0
 8007682:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8007686:	2300      	movs	r3, #0
}
 8007688:	4618      	mov	r0, r3
 800768a:	3710      	adds	r7, #16
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}

08007690 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b086      	sub	sp, #24
 8007694:	af00      	add	r7, sp, #0
 8007696:	60f8      	str	r0, [r7, #12]
 8007698:	607a      	str	r2, [r7, #4]
 800769a:	603b      	str	r3, [r7, #0]
 800769c:	460b      	mov	r3, r1
 800769e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80076a0:	7afb      	ldrb	r3, [r7, #11]
 80076a2:	f003 0307 	and.w	r3, r3, #7
 80076a6:	015b      	lsls	r3, r3, #5
 80076a8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80076ac:	68fa      	ldr	r2, [r7, #12]
 80076ae:	4413      	add	r3, r2
 80076b0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	683a      	ldr	r2, [r7, #0]
 80076bc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	2200      	movs	r2, #0
 80076c2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	2200      	movs	r2, #0
 80076c8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80076ca:	7afb      	ldrb	r3, [r7, #11]
 80076cc:	f003 0307 	and.w	r3, r3, #7
 80076d0:	b2da      	uxtb	r2, r3
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80076d6:	7afb      	ldrb	r3, [r7, #11]
 80076d8:	f003 0307 	and.w	r3, r3, #7
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d106      	bne.n	80076ee <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	6979      	ldr	r1, [r7, #20]
 80076e6:	4618      	mov	r0, r3
 80076e8:	f003 f8a2 	bl	800a830 <USB_EPStartXfer>
 80076ec:	e005      	b.n	80076fa <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	6979      	ldr	r1, [r7, #20]
 80076f4:	4618      	mov	r0, r3
 80076f6:	f003 f89b 	bl	800a830 <USB_EPStartXfer>
  }

  return HAL_OK;
 80076fa:	2300      	movs	r3, #0
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3718      	adds	r7, #24
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}

08007704 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007704:	b480      	push	{r7}
 8007706:	b083      	sub	sp, #12
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	460b      	mov	r3, r1
 800770e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007710:	78fb      	ldrb	r3, [r7, #3]
 8007712:	f003 0307 	and.w	r3, r3, #7
 8007716:	687a      	ldr	r2, [r7, #4]
 8007718:	330a      	adds	r3, #10
 800771a:	015b      	lsls	r3, r3, #5
 800771c:	4413      	add	r3, r2
 800771e:	3304      	adds	r3, #4
 8007720:	681b      	ldr	r3, [r3, #0]
}
 8007722:	4618      	mov	r0, r3
 8007724:	370c      	adds	r7, #12
 8007726:	46bd      	mov	sp, r7
 8007728:	bc80      	pop	{r7}
 800772a:	4770      	bx	lr

0800772c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b086      	sub	sp, #24
 8007730:	af00      	add	r7, sp, #0
 8007732:	60f8      	str	r0, [r7, #12]
 8007734:	607a      	str	r2, [r7, #4]
 8007736:	603b      	str	r3, [r7, #0]
 8007738:	460b      	mov	r3, r1
 800773a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800773c:	7afb      	ldrb	r3, [r7, #11]
 800773e:	f003 0307 	and.w	r3, r3, #7
 8007742:	015b      	lsls	r3, r3, #5
 8007744:	3328      	adds	r3, #40	; 0x28
 8007746:	68fa      	ldr	r2, [r7, #12]
 8007748:	4413      	add	r3, r2
 800774a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	687a      	ldr	r2, [r7, #4]
 8007750:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	683a      	ldr	r2, [r7, #0]
 8007756:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	2200      	movs	r2, #0
 800775c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	2201      	movs	r2, #1
 8007762:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007764:	7afb      	ldrb	r3, [r7, #11]
 8007766:	f003 0307 	and.w	r3, r3, #7
 800776a:	b2da      	uxtb	r2, r3
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007770:	7afb      	ldrb	r3, [r7, #11]
 8007772:	f003 0307 	and.w	r3, r3, #7
 8007776:	2b00      	cmp	r3, #0
 8007778:	d106      	bne.n	8007788 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	6979      	ldr	r1, [r7, #20]
 8007780:	4618      	mov	r0, r3
 8007782:	f003 f855 	bl	800a830 <USB_EPStartXfer>
 8007786:	e005      	b.n	8007794 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	6979      	ldr	r1, [r7, #20]
 800778e:	4618      	mov	r0, r3
 8007790:	f003 f84e 	bl	800a830 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007794:	2300      	movs	r3, #0
}
 8007796:	4618      	mov	r0, r3
 8007798:	3718      	adds	r7, #24
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}

0800779e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800779e:	b580      	push	{r7, lr}
 80077a0:	b084      	sub	sp, #16
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
 80077a6:	460b      	mov	r3, r1
 80077a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80077aa:	78fb      	ldrb	r3, [r7, #3]
 80077ac:	f003 0207 	and.w	r2, r3, #7
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d901      	bls.n	80077bc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80077b8:	2301      	movs	r3, #1
 80077ba:	e046      	b.n	800784a <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80077bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	da0b      	bge.n	80077dc <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80077c4:	78fb      	ldrb	r3, [r7, #3]
 80077c6:	f003 0307 	and.w	r3, r3, #7
 80077ca:	015b      	lsls	r3, r3, #5
 80077cc:	3328      	adds	r3, #40	; 0x28
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	4413      	add	r3, r2
 80077d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2201      	movs	r2, #1
 80077d8:	705a      	strb	r2, [r3, #1]
 80077da:	e009      	b.n	80077f0 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80077dc:	78fb      	ldrb	r3, [r7, #3]
 80077de:	015b      	lsls	r3, r3, #5
 80077e0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	4413      	add	r3, r2
 80077e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2200      	movs	r2, #0
 80077ee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2201      	movs	r2, #1
 80077f4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80077f6:	78fb      	ldrb	r3, [r7, #3]
 80077f8:	f003 0307 	and.w	r3, r3, #7
 80077fc:	b2da      	uxtb	r2, r3
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8007808:	2b01      	cmp	r3, #1
 800780a:	d101      	bne.n	8007810 <HAL_PCD_EP_SetStall+0x72>
 800780c:	2302      	movs	r3, #2
 800780e:	e01c      	b.n	800784a <HAL_PCD_EP_SetStall+0xac>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2201      	movs	r2, #1
 8007814:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	68f9      	ldr	r1, [r7, #12]
 800781e:	4618      	mov	r0, r3
 8007820:	f003 fabe 	bl	800ada0 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007824:	78fb      	ldrb	r3, [r7, #3]
 8007826:	f003 0307 	and.w	r3, r3, #7
 800782a:	2b00      	cmp	r3, #0
 800782c:	d108      	bne.n	8007840 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681a      	ldr	r2, [r3, #0]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007838:	4619      	mov	r1, r3
 800783a:	4610      	mov	r0, r2
 800783c:	f003 fbbc 	bl	800afb8 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2200      	movs	r2, #0
 8007844:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8007848:	2300      	movs	r3, #0
}
 800784a:	4618      	mov	r0, r3
 800784c:	3710      	adds	r7, #16
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}

08007852 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007852:	b580      	push	{r7, lr}
 8007854:	b084      	sub	sp, #16
 8007856:	af00      	add	r7, sp, #0
 8007858:	6078      	str	r0, [r7, #4]
 800785a:	460b      	mov	r3, r1
 800785c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800785e:	78fb      	ldrb	r3, [r7, #3]
 8007860:	f003 020f 	and.w	r2, r3, #15
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	429a      	cmp	r2, r3
 800786a:	d901      	bls.n	8007870 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800786c:	2301      	movs	r3, #1
 800786e:	e03a      	b.n	80078e6 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007870:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007874:	2b00      	cmp	r3, #0
 8007876:	da0b      	bge.n	8007890 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007878:	78fb      	ldrb	r3, [r7, #3]
 800787a:	f003 0307 	and.w	r3, r3, #7
 800787e:	015b      	lsls	r3, r3, #5
 8007880:	3328      	adds	r3, #40	; 0x28
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	4413      	add	r3, r2
 8007886:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2201      	movs	r2, #1
 800788c:	705a      	strb	r2, [r3, #1]
 800788e:	e00b      	b.n	80078a8 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007890:	78fb      	ldrb	r3, [r7, #3]
 8007892:	f003 0307 	and.w	r3, r3, #7
 8007896:	015b      	lsls	r3, r3, #5
 8007898:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800789c:	687a      	ldr	r2, [r7, #4]
 800789e:	4413      	add	r3, r2
 80078a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2200      	movs	r2, #0
 80078a6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2200      	movs	r2, #0
 80078ac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80078ae:	78fb      	ldrb	r3, [r7, #3]
 80078b0:	f003 0307 	and.w	r3, r3, #7
 80078b4:	b2da      	uxtb	r2, r3
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d101      	bne.n	80078c8 <HAL_PCD_EP_ClrStall+0x76>
 80078c4:	2302      	movs	r3, #2
 80078c6:	e00e      	b.n	80078e6 <HAL_PCD_EP_ClrStall+0x94>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2201      	movs	r2, #1
 80078cc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	68f9      	ldr	r1, [r7, #12]
 80078d6:	4618      	mov	r0, r3
 80078d8:	f003 faa4 	bl	800ae24 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2200      	movs	r2, #0
 80078e0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80078e4:	2300      	movs	r3, #0
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3710      	adds	r7, #16
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
	...

080078f0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80078f0:	b590      	push	{r4, r7, lr}
 80078f2:	b089      	sub	sp, #36	; 0x24
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80078f8:	e282      	b.n	8007e00 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007902:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8007904:	8afb      	ldrh	r3, [r7, #22]
 8007906:	b2db      	uxtb	r3, r3
 8007908:	f003 030f 	and.w	r3, r3, #15
 800790c:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 800790e:	7d7b      	ldrb	r3, [r7, #21]
 8007910:	2b00      	cmp	r3, #0
 8007912:	f040 8142 	bne.w	8007b9a <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8007916:	8afb      	ldrh	r3, [r7, #22]
 8007918:	f003 0310 	and.w	r3, r3, #16
 800791c:	2b00      	cmp	r3, #0
 800791e:	d151      	bne.n	80079c4 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	881b      	ldrh	r3, [r3, #0]
 8007926:	b29b      	uxth	r3, r3
 8007928:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800792c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007930:	b29c      	uxth	r4, r3
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800793a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800793e:	b29b      	uxth	r3, r3
 8007940:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	3328      	adds	r3, #40	; 0x28
 8007946:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007950:	b29b      	uxth	r3, r3
 8007952:	461a      	mov	r2, r3
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	00db      	lsls	r3, r3, #3
 800795a:	4413      	add	r3, r2
 800795c:	3302      	adds	r3, #2
 800795e:	005b      	lsls	r3, r3, #1
 8007960:	687a      	ldr	r2, [r7, #4]
 8007962:	6812      	ldr	r2, [r2, #0]
 8007964:	4413      	add	r3, r2
 8007966:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800796a:	881b      	ldrh	r3, [r3, #0]
 800796c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	695a      	ldr	r2, [r3, #20]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	69db      	ldr	r3, [r3, #28]
 800797c:	441a      	add	r2, r3
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8007982:	2100      	movs	r1, #0
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f005 f9bb 	bl	800cd00 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007990:	b2db      	uxtb	r3, r3
 8007992:	2b00      	cmp	r3, #0
 8007994:	f000 8234 	beq.w	8007e00 <PCD_EP_ISR_Handler+0x510>
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	699b      	ldr	r3, [r3, #24]
 800799c:	2b00      	cmp	r3, #0
 800799e:	f040 822f 	bne.w	8007e00 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80079ae:	b2da      	uxtb	r2, r3
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	b292      	uxth	r2, r2
 80079b6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2200      	movs	r2, #0
 80079be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80079c2:	e21d      	b.n	8007e00 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80079ca:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	881b      	ldrh	r3, [r3, #0]
 80079d2:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80079d4:	8a7b      	ldrh	r3, [r7, #18]
 80079d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d033      	beq.n	8007a46 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079e6:	b29b      	uxth	r3, r3
 80079e8:	461a      	mov	r2, r3
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	00db      	lsls	r3, r3, #3
 80079f0:	4413      	add	r3, r2
 80079f2:	3306      	adds	r3, #6
 80079f4:	005b      	lsls	r3, r3, #1
 80079f6:	687a      	ldr	r2, [r7, #4]
 80079f8:	6812      	ldr	r2, [r2, #0]
 80079fa:	4413      	add	r3, r2
 80079fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a00:	881b      	ldrh	r3, [r3, #0]
 8007a02:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6818      	ldr	r0, [r3, #0]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	f003 fb1a 	bl	800b056 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	881b      	ldrh	r3, [r3, #0]
 8007a28:	b29a      	uxth	r2, r3
 8007a2a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8007a2e:	4013      	ands	r3, r2
 8007a30:	b29c      	uxth	r4, r3
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8007a3a:	b292      	uxth	r2, r2
 8007a3c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f005 f934 	bl	800ccac <HAL_PCD_SetupStageCallback>
 8007a44:	e1dc      	b.n	8007e00 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007a46:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	f280 81d8 	bge.w	8007e00 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	881b      	ldrh	r3, [r3, #0]
 8007a56:	b29a      	uxth	r2, r3
 8007a58:	f640 738f 	movw	r3, #3983	; 0xf8f
 8007a5c:	4013      	ands	r3, r2
 8007a5e:	b29c      	uxth	r4, r3
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8007a68:	b292      	uxth	r2, r2
 8007a6a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	461a      	mov	r2, r3
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	781b      	ldrb	r3, [r3, #0]
 8007a7c:	00db      	lsls	r3, r3, #3
 8007a7e:	4413      	add	r3, r2
 8007a80:	3306      	adds	r3, #6
 8007a82:	005b      	lsls	r3, r3, #1
 8007a84:	687a      	ldr	r2, [r7, #4]
 8007a86:	6812      	ldr	r2, [r2, #0]
 8007a88:	4413      	add	r3, r2
 8007a8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a8e:	881b      	ldrh	r3, [r3, #0]
 8007a90:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	69db      	ldr	r3, [r3, #28]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d019      	beq.n	8007ad4 <PCD_EP_ISR_Handler+0x1e4>
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	695b      	ldr	r3, [r3, #20]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d015      	beq.n	8007ad4 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6818      	ldr	r0, [r3, #0]
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	6959      	ldr	r1, [r3, #20]
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	f003 facc 	bl	800b056 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	695a      	ldr	r2, [r3, #20]
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	69db      	ldr	r3, [r3, #28]
 8007ac6:	441a      	add	r2, r3
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8007acc:	2100      	movs	r1, #0
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f005 f8fe 	bl	800ccd0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	461c      	mov	r4, r3
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	441c      	add	r4, r3
 8007ae6:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 8007aea:	461c      	mov	r4, r3
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	691b      	ldr	r3, [r3, #16]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d10e      	bne.n	8007b12 <PCD_EP_ISR_Handler+0x222>
 8007af4:	8823      	ldrh	r3, [r4, #0]
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	8023      	strh	r3, [r4, #0]
 8007b00:	8823      	ldrh	r3, [r4, #0]
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	8023      	strh	r3, [r4, #0]
 8007b10:	e02d      	b.n	8007b6e <PCD_EP_ISR_Handler+0x27e>
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	691b      	ldr	r3, [r3, #16]
 8007b16:	2b3e      	cmp	r3, #62	; 0x3e
 8007b18:	d812      	bhi.n	8007b40 <PCD_EP_ISR_Handler+0x250>
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	691b      	ldr	r3, [r3, #16]
 8007b1e:	085b      	lsrs	r3, r3, #1
 8007b20:	61bb      	str	r3, [r7, #24]
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	691b      	ldr	r3, [r3, #16]
 8007b26:	f003 0301 	and.w	r3, r3, #1
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d002      	beq.n	8007b34 <PCD_EP_ISR_Handler+0x244>
 8007b2e:	69bb      	ldr	r3, [r7, #24]
 8007b30:	3301      	adds	r3, #1
 8007b32:	61bb      	str	r3, [r7, #24]
 8007b34:	69bb      	ldr	r3, [r7, #24]
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	029b      	lsls	r3, r3, #10
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	8023      	strh	r3, [r4, #0]
 8007b3e:	e016      	b.n	8007b6e <PCD_EP_ISR_Handler+0x27e>
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	691b      	ldr	r3, [r3, #16]
 8007b44:	095b      	lsrs	r3, r3, #5
 8007b46:	61bb      	str	r3, [r7, #24]
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	691b      	ldr	r3, [r3, #16]
 8007b4c:	f003 031f 	and.w	r3, r3, #31
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d102      	bne.n	8007b5a <PCD_EP_ISR_Handler+0x26a>
 8007b54:	69bb      	ldr	r3, [r7, #24]
 8007b56:	3b01      	subs	r3, #1
 8007b58:	61bb      	str	r3, [r7, #24]
 8007b5a:	69bb      	ldr	r3, [r7, #24]
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	029b      	lsls	r3, r3, #10
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	881b      	ldrh	r3, [r3, #0]
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b7e:	b29c      	uxth	r4, r3
 8007b80:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007b84:	b29c      	uxth	r4, r3
 8007b86:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8007b8a:	b29c      	uxth	r4, r3
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681a      	ldr	r2, [r3, #0]
 8007b90:	4ba2      	ldr	r3, [pc, #648]	; (8007e1c <PCD_EP_ISR_Handler+0x52c>)
 8007b92:	4323      	orrs	r3, r4
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	8013      	strh	r3, [r2, #0]
 8007b98:	e132      	b.n	8007e00 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	7d7b      	ldrb	r3, [r7, #21]
 8007ba2:	009b      	lsls	r3, r3, #2
 8007ba4:	4413      	add	r3, r2
 8007ba6:	881b      	ldrh	r3, [r3, #0]
 8007ba8:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007baa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	f280 80d1 	bge.w	8007d56 <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	461a      	mov	r2, r3
 8007bba:	7d7b      	ldrb	r3, [r7, #21]
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	4413      	add	r3, r2
 8007bc0:	881b      	ldrh	r3, [r3, #0]
 8007bc2:	b29a      	uxth	r2, r3
 8007bc4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8007bc8:	4013      	ands	r3, r2
 8007bca:	b29c      	uxth	r4, r3
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	7d7b      	ldrb	r3, [r7, #21]
 8007bd4:	009b      	lsls	r3, r3, #2
 8007bd6:	4413      	add	r3, r2
 8007bd8:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8007bdc:	b292      	uxth	r2, r2
 8007bde:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8007be0:	7d7b      	ldrb	r3, [r7, #21]
 8007be2:	015b      	lsls	r3, r3, #5
 8007be4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007be8:	687a      	ldr	r2, [r7, #4]
 8007bea:	4413      	add	r3, r2
 8007bec:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	7b1b      	ldrb	r3, [r3, #12]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d121      	bne.n	8007c3a <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	461a      	mov	r2, r3
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	00db      	lsls	r3, r3, #3
 8007c08:	4413      	add	r3, r2
 8007c0a:	3306      	adds	r3, #6
 8007c0c:	005b      	lsls	r3, r3, #1
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	6812      	ldr	r2, [r2, #0]
 8007c12:	4413      	add	r3, r2
 8007c14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c18:	881b      	ldrh	r3, [r3, #0]
 8007c1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c1e:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8007c20:	8bfb      	ldrh	r3, [r7, #30]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d072      	beq.n	8007d0c <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6818      	ldr	r0, [r3, #0]
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	6959      	ldr	r1, [r3, #20]
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	88da      	ldrh	r2, [r3, #6]
 8007c32:	8bfb      	ldrh	r3, [r7, #30]
 8007c34:	f003 fa0f 	bl	800b056 <USB_ReadPMA>
 8007c38:	e068      	b.n	8007d0c <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	461a      	mov	r2, r3
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	009b      	lsls	r3, r3, #2
 8007c46:	4413      	add	r3, r2
 8007c48:	881b      	ldrh	r3, [r3, #0]
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d021      	beq.n	8007c98 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	461a      	mov	r2, r3
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	00db      	lsls	r3, r3, #3
 8007c66:	4413      	add	r3, r2
 8007c68:	3302      	adds	r3, #2
 8007c6a:	005b      	lsls	r3, r3, #1
 8007c6c:	687a      	ldr	r2, [r7, #4]
 8007c6e:	6812      	ldr	r2, [r2, #0]
 8007c70:	4413      	add	r3, r2
 8007c72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c76:	881b      	ldrh	r3, [r3, #0]
 8007c78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c7c:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8007c7e:	8bfb      	ldrh	r3, [r7, #30]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d02a      	beq.n	8007cda <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6818      	ldr	r0, [r3, #0]
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	6959      	ldr	r1, [r3, #20]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	891a      	ldrh	r2, [r3, #8]
 8007c90:	8bfb      	ldrh	r3, [r7, #30]
 8007c92:	f003 f9e0 	bl	800b056 <USB_ReadPMA>
 8007c96:	e020      	b.n	8007cda <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	781b      	ldrb	r3, [r3, #0]
 8007ca8:	00db      	lsls	r3, r3, #3
 8007caa:	4413      	add	r3, r2
 8007cac:	3306      	adds	r3, #6
 8007cae:	005b      	lsls	r3, r3, #1
 8007cb0:	687a      	ldr	r2, [r7, #4]
 8007cb2:	6812      	ldr	r2, [r2, #0]
 8007cb4:	4413      	add	r3, r2
 8007cb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007cba:	881b      	ldrh	r3, [r3, #0]
 8007cbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007cc0:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8007cc2:	8bfb      	ldrh	r3, [r7, #30]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d008      	beq.n	8007cda <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6818      	ldr	r0, [r3, #0]
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	6959      	ldr	r1, [r3, #20]
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	895a      	ldrh	r2, [r3, #10]
 8007cd4:	8bfb      	ldrh	r3, [r7, #30]
 8007cd6:	f003 f9be 	bl	800b056 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	461a      	mov	r2, r3
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	009b      	lsls	r3, r3, #2
 8007ce6:	4413      	add	r3, r2
 8007ce8:	881b      	ldrh	r3, [r3, #0]
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cf4:	b29c      	uxth	r4, r3
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	441a      	add	r2, r3
 8007d04:	4b46      	ldr	r3, [pc, #280]	; (8007e20 <PCD_EP_ISR_Handler+0x530>)
 8007d06:	4323      	orrs	r3, r4
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	69da      	ldr	r2, [r3, #28]
 8007d10:	8bfb      	ldrh	r3, [r7, #30]
 8007d12:	441a      	add	r2, r3
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	695a      	ldr	r2, [r3, #20]
 8007d1c:	8bfb      	ldrh	r3, [r7, #30]
 8007d1e:	441a      	add	r2, r3
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	699b      	ldr	r3, [r3, #24]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d004      	beq.n	8007d36 <PCD_EP_ISR_Handler+0x446>
 8007d2c:	8bfa      	ldrh	r2, [r7, #30]
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	691b      	ldr	r3, [r3, #16]
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d206      	bcs.n	8007d44 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	781b      	ldrb	r3, [r3, #0]
 8007d3a:	4619      	mov	r1, r3
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f004 ffc7 	bl	800ccd0 <HAL_PCD_DataOutStageCallback>
 8007d42:	e008      	b.n	8007d56 <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	7819      	ldrb	r1, [r3, #0]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	695a      	ldr	r2, [r3, #20]
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	699b      	ldr	r3, [r3, #24]
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f7ff fc9d 	bl	8007690 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8007d56:	8a7b      	ldrh	r3, [r7, #18]
 8007d58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d04f      	beq.n	8007e00 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 8007d60:	7d7b      	ldrb	r3, [r7, #21]
 8007d62:	015b      	lsls	r3, r3, #5
 8007d64:	3328      	adds	r3, #40	; 0x28
 8007d66:	687a      	ldr	r2, [r7, #4]
 8007d68:	4413      	add	r3, r2
 8007d6a:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	461a      	mov	r2, r3
 8007d72:	7d7b      	ldrb	r3, [r7, #21]
 8007d74:	009b      	lsls	r3, r3, #2
 8007d76:	4413      	add	r3, r2
 8007d78:	881b      	ldrh	r3, [r3, #0]
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8007d80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d84:	b29c      	uxth	r4, r3
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	7d7b      	ldrb	r3, [r7, #21]
 8007d8e:	009b      	lsls	r3, r3, #2
 8007d90:	441a      	add	r2, r3
 8007d92:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8007d96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	461a      	mov	r2, r3
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	781b      	ldrb	r3, [r3, #0]
 8007dae:	00db      	lsls	r3, r3, #3
 8007db0:	4413      	add	r3, r2
 8007db2:	3302      	adds	r3, #2
 8007db4:	005b      	lsls	r3, r3, #1
 8007db6:	687a      	ldr	r2, [r7, #4]
 8007db8:	6812      	ldr	r2, [r2, #0]
 8007dba:	4413      	add	r3, r2
 8007dbc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007dc0:	881b      	ldrh	r3, [r3, #0]
 8007dc2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	695a      	ldr	r2, [r3, #20]
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	69db      	ldr	r3, [r3, #28]
 8007dd2:	441a      	add	r2, r3
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	699b      	ldr	r3, [r3, #24]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d106      	bne.n	8007dee <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	4619      	mov	r1, r3
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f004 ff8a 	bl	800cd00 <HAL_PCD_DataInStageCallback>
 8007dec:	e008      	b.n	8007e00 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	7819      	ldrb	r1, [r3, #0]
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	695a      	ldr	r2, [r3, #20]
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	699b      	ldr	r3, [r3, #24]
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f7ff fc96 	bl	800772c <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007e08:	b29b      	uxth	r3, r3
 8007e0a:	b21b      	sxth	r3, r3
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	f6ff ad74 	blt.w	80078fa <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8007e12:	2300      	movs	r3, #0
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3724      	adds	r7, #36	; 0x24
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd90      	pop	{r4, r7, pc}
 8007e1c:	ffff8080 	.word	0xffff8080
 8007e20:	ffff80c0 	.word	0xffff80c0

08007e24 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b087      	sub	sp, #28
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	60f8      	str	r0, [r7, #12]
 8007e2c:	607b      	str	r3, [r7, #4]
 8007e2e:	460b      	mov	r3, r1
 8007e30:	817b      	strh	r3, [r7, #10]
 8007e32:	4613      	mov	r3, r2
 8007e34:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8007e36:	897b      	ldrh	r3, [r7, #10]
 8007e38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d008      	beq.n	8007e54 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007e42:	897b      	ldrh	r3, [r7, #10]
 8007e44:	f003 0307 	and.w	r3, r3, #7
 8007e48:	015b      	lsls	r3, r3, #5
 8007e4a:	3328      	adds	r3, #40	; 0x28
 8007e4c:	68fa      	ldr	r2, [r7, #12]
 8007e4e:	4413      	add	r3, r2
 8007e50:	617b      	str	r3, [r7, #20]
 8007e52:	e006      	b.n	8007e62 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007e54:	897b      	ldrh	r3, [r7, #10]
 8007e56:	015b      	lsls	r3, r3, #5
 8007e58:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007e5c:	68fa      	ldr	r2, [r7, #12]
 8007e5e:	4413      	add	r3, r2
 8007e60:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8007e62:	893b      	ldrh	r3, [r7, #8]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d107      	bne.n	8007e78 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	b29a      	uxth	r2, r3
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	80da      	strh	r2, [r3, #6]
 8007e76:	e00b      	b.n	8007e90 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	b29a      	uxth	r2, r3
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	0c1b      	lsrs	r3, r3, #16
 8007e8a:	b29a      	uxth	r2, r3
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8007e90:	2300      	movs	r3, #0
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	371c      	adds	r7, #28
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bc80      	pop	{r7}
 8007e9a:	4770      	bx	lr

08007e9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b086      	sub	sp, #24
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d101      	bne.n	8007eae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	e26c      	b.n	8008388 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f003 0301 	and.w	r3, r3, #1
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	f000 8087 	beq.w	8007fca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007ebc:	4b92      	ldr	r3, [pc, #584]	; (8008108 <HAL_RCC_OscConfig+0x26c>)
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	f003 030c 	and.w	r3, r3, #12
 8007ec4:	2b04      	cmp	r3, #4
 8007ec6:	d00c      	beq.n	8007ee2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007ec8:	4b8f      	ldr	r3, [pc, #572]	; (8008108 <HAL_RCC_OscConfig+0x26c>)
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	f003 030c 	and.w	r3, r3, #12
 8007ed0:	2b08      	cmp	r3, #8
 8007ed2:	d112      	bne.n	8007efa <HAL_RCC_OscConfig+0x5e>
 8007ed4:	4b8c      	ldr	r3, [pc, #560]	; (8008108 <HAL_RCC_OscConfig+0x26c>)
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ee0:	d10b      	bne.n	8007efa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ee2:	4b89      	ldr	r3, [pc, #548]	; (8008108 <HAL_RCC_OscConfig+0x26c>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d06c      	beq.n	8007fc8 <HAL_RCC_OscConfig+0x12c>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d168      	bne.n	8007fc8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	e246      	b.n	8008388 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f02:	d106      	bne.n	8007f12 <HAL_RCC_OscConfig+0x76>
 8007f04:	4b80      	ldr	r3, [pc, #512]	; (8008108 <HAL_RCC_OscConfig+0x26c>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a7f      	ldr	r2, [pc, #508]	; (8008108 <HAL_RCC_OscConfig+0x26c>)
 8007f0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f0e:	6013      	str	r3, [r2, #0]
 8007f10:	e02e      	b.n	8007f70 <HAL_RCC_OscConfig+0xd4>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d10c      	bne.n	8007f34 <HAL_RCC_OscConfig+0x98>
 8007f1a:	4b7b      	ldr	r3, [pc, #492]	; (8008108 <HAL_RCC_OscConfig+0x26c>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a7a      	ldr	r2, [pc, #488]	; (8008108 <HAL_RCC_OscConfig+0x26c>)
 8007f20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f24:	6013      	str	r3, [r2, #0]
 8007f26:	4b78      	ldr	r3, [pc, #480]	; (8008108 <HAL_RCC_OscConfig+0x26c>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a77      	ldr	r2, [pc, #476]	; (8008108 <HAL_RCC_OscConfig+0x26c>)
 8007f2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f30:	6013      	str	r3, [r2, #0]
 8007f32:	e01d      	b.n	8007f70 <HAL_RCC_OscConfig+0xd4>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007f3c:	d10c      	bne.n	8007f58 <HAL_RCC_OscConfig+0xbc>
 8007f3e:	4b72      	ldr	r3, [pc, #456]	; (8008108 <HAL_RCC_OscConfig+0x26c>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a71      	ldr	r2, [pc, #452]	; (8008108 <HAL_RCC_OscConfig+0x26c>)
 8007f44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007f48:	6013      	str	r3, [r2, #0]
 8007f4a:	4b6f      	ldr	r3, [pc, #444]	; (8008108 <HAL_RCC_OscConfig+0x26c>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a6e      	ldr	r2, [pc, #440]	; (8008108 <HAL_RCC_OscConfig+0x26c>)
 8007f50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f54:	6013      	str	r3, [r2, #0]
 8007f56:	e00b      	b.n	8007f70 <HAL_RCC_OscConfig+0xd4>
 8007f58:	4b6b      	ldr	r3, [pc, #428]	; (8008108 <HAL_RCC_OscConfig+0x26c>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a6a      	ldr	r2, [pc, #424]	; (8008108 <HAL_RCC_OscConfig+0x26c>)
 8007f5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f62:	6013      	str	r3, [r2, #0]
 8007f64:	4b68      	ldr	r3, [pc, #416]	; (8008108 <HAL_RCC_OscConfig+0x26c>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a67      	ldr	r2, [pc, #412]	; (8008108 <HAL_RCC_OscConfig+0x26c>)
 8007f6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f6e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d013      	beq.n	8007fa0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f78:	f7fd f82c 	bl	8004fd4 <HAL_GetTick>
 8007f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f7e:	e008      	b.n	8007f92 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f80:	f7fd f828 	bl	8004fd4 <HAL_GetTick>
 8007f84:	4602      	mov	r2, r0
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	1ad3      	subs	r3, r2, r3
 8007f8a:	2b64      	cmp	r3, #100	; 0x64
 8007f8c:	d901      	bls.n	8007f92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007f8e:	2303      	movs	r3, #3
 8007f90:	e1fa      	b.n	8008388 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f92:	4b5d      	ldr	r3, [pc, #372]	; (8008108 <HAL_RCC_OscConfig+0x26c>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d0f0      	beq.n	8007f80 <HAL_RCC_OscConfig+0xe4>
 8007f9e:	e014      	b.n	8007fca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fa0:	f7fd f818 	bl	8004fd4 <HAL_GetTick>
 8007fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007fa6:	e008      	b.n	8007fba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007fa8:	f7fd f814 	bl	8004fd4 <HAL_GetTick>
 8007fac:	4602      	mov	r2, r0
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	1ad3      	subs	r3, r2, r3
 8007fb2:	2b64      	cmp	r3, #100	; 0x64
 8007fb4:	d901      	bls.n	8007fba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007fb6:	2303      	movs	r3, #3
 8007fb8:	e1e6      	b.n	8008388 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007fba:	4b53      	ldr	r3, [pc, #332]	; (8008108 <HAL_RCC_OscConfig+0x26c>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d1f0      	bne.n	8007fa8 <HAL_RCC_OscConfig+0x10c>
 8007fc6:	e000      	b.n	8007fca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007fc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f003 0302 	and.w	r3, r3, #2
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d063      	beq.n	800809e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007fd6:	4b4c      	ldr	r3, [pc, #304]	; (8008108 <HAL_RCC_OscConfig+0x26c>)
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	f003 030c 	and.w	r3, r3, #12
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d00b      	beq.n	8007ffa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007fe2:	4b49      	ldr	r3, [pc, #292]	; (8008108 <HAL_RCC_OscConfig+0x26c>)
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	f003 030c 	and.w	r3, r3, #12
 8007fea:	2b08      	cmp	r3, #8
 8007fec:	d11c      	bne.n	8008028 <HAL_RCC_OscConfig+0x18c>
 8007fee:	4b46      	ldr	r3, [pc, #280]	; (8008108 <HAL_RCC_OscConfig+0x26c>)
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d116      	bne.n	8008028 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007ffa:	4b43      	ldr	r3, [pc, #268]	; (8008108 <HAL_RCC_OscConfig+0x26c>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f003 0302 	and.w	r3, r3, #2
 8008002:	2b00      	cmp	r3, #0
 8008004:	d005      	beq.n	8008012 <HAL_RCC_OscConfig+0x176>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	691b      	ldr	r3, [r3, #16]
 800800a:	2b01      	cmp	r3, #1
 800800c:	d001      	beq.n	8008012 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	e1ba      	b.n	8008388 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008012:	4b3d      	ldr	r3, [pc, #244]	; (8008108 <HAL_RCC_OscConfig+0x26c>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	695b      	ldr	r3, [r3, #20]
 800801e:	00db      	lsls	r3, r3, #3
 8008020:	4939      	ldr	r1, [pc, #228]	; (8008108 <HAL_RCC_OscConfig+0x26c>)
 8008022:	4313      	orrs	r3, r2
 8008024:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008026:	e03a      	b.n	800809e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	691b      	ldr	r3, [r3, #16]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d020      	beq.n	8008072 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008030:	4b36      	ldr	r3, [pc, #216]	; (800810c <HAL_RCC_OscConfig+0x270>)
 8008032:	2201      	movs	r2, #1
 8008034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008036:	f7fc ffcd 	bl	8004fd4 <HAL_GetTick>
 800803a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800803c:	e008      	b.n	8008050 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800803e:	f7fc ffc9 	bl	8004fd4 <HAL_GetTick>
 8008042:	4602      	mov	r2, r0
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	1ad3      	subs	r3, r2, r3
 8008048:	2b02      	cmp	r3, #2
 800804a:	d901      	bls.n	8008050 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800804c:	2303      	movs	r3, #3
 800804e:	e19b      	b.n	8008388 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008050:	4b2d      	ldr	r3, [pc, #180]	; (8008108 <HAL_RCC_OscConfig+0x26c>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f003 0302 	and.w	r3, r3, #2
 8008058:	2b00      	cmp	r3, #0
 800805a:	d0f0      	beq.n	800803e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800805c:	4b2a      	ldr	r3, [pc, #168]	; (8008108 <HAL_RCC_OscConfig+0x26c>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	695b      	ldr	r3, [r3, #20]
 8008068:	00db      	lsls	r3, r3, #3
 800806a:	4927      	ldr	r1, [pc, #156]	; (8008108 <HAL_RCC_OscConfig+0x26c>)
 800806c:	4313      	orrs	r3, r2
 800806e:	600b      	str	r3, [r1, #0]
 8008070:	e015      	b.n	800809e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008072:	4b26      	ldr	r3, [pc, #152]	; (800810c <HAL_RCC_OscConfig+0x270>)
 8008074:	2200      	movs	r2, #0
 8008076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008078:	f7fc ffac 	bl	8004fd4 <HAL_GetTick>
 800807c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800807e:	e008      	b.n	8008092 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008080:	f7fc ffa8 	bl	8004fd4 <HAL_GetTick>
 8008084:	4602      	mov	r2, r0
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	1ad3      	subs	r3, r2, r3
 800808a:	2b02      	cmp	r3, #2
 800808c:	d901      	bls.n	8008092 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800808e:	2303      	movs	r3, #3
 8008090:	e17a      	b.n	8008388 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008092:	4b1d      	ldr	r3, [pc, #116]	; (8008108 <HAL_RCC_OscConfig+0x26c>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f003 0302 	and.w	r3, r3, #2
 800809a:	2b00      	cmp	r3, #0
 800809c:	d1f0      	bne.n	8008080 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f003 0308 	and.w	r3, r3, #8
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d03a      	beq.n	8008120 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	699b      	ldr	r3, [r3, #24]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d019      	beq.n	80080e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80080b2:	4b17      	ldr	r3, [pc, #92]	; (8008110 <HAL_RCC_OscConfig+0x274>)
 80080b4:	2201      	movs	r2, #1
 80080b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80080b8:	f7fc ff8c 	bl	8004fd4 <HAL_GetTick>
 80080bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80080be:	e008      	b.n	80080d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80080c0:	f7fc ff88 	bl	8004fd4 <HAL_GetTick>
 80080c4:	4602      	mov	r2, r0
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	1ad3      	subs	r3, r2, r3
 80080ca:	2b02      	cmp	r3, #2
 80080cc:	d901      	bls.n	80080d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80080ce:	2303      	movs	r3, #3
 80080d0:	e15a      	b.n	8008388 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80080d2:	4b0d      	ldr	r3, [pc, #52]	; (8008108 <HAL_RCC_OscConfig+0x26c>)
 80080d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d6:	f003 0302 	and.w	r3, r3, #2
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d0f0      	beq.n	80080c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80080de:	2001      	movs	r0, #1
 80080e0:	f000 fada 	bl	8008698 <RCC_Delay>
 80080e4:	e01c      	b.n	8008120 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80080e6:	4b0a      	ldr	r3, [pc, #40]	; (8008110 <HAL_RCC_OscConfig+0x274>)
 80080e8:	2200      	movs	r2, #0
 80080ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80080ec:	f7fc ff72 	bl	8004fd4 <HAL_GetTick>
 80080f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80080f2:	e00f      	b.n	8008114 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80080f4:	f7fc ff6e 	bl	8004fd4 <HAL_GetTick>
 80080f8:	4602      	mov	r2, r0
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	1ad3      	subs	r3, r2, r3
 80080fe:	2b02      	cmp	r3, #2
 8008100:	d908      	bls.n	8008114 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8008102:	2303      	movs	r3, #3
 8008104:	e140      	b.n	8008388 <HAL_RCC_OscConfig+0x4ec>
 8008106:	bf00      	nop
 8008108:	40021000 	.word	0x40021000
 800810c:	42420000 	.word	0x42420000
 8008110:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008114:	4b9e      	ldr	r3, [pc, #632]	; (8008390 <HAL_RCC_OscConfig+0x4f4>)
 8008116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008118:	f003 0302 	and.w	r3, r3, #2
 800811c:	2b00      	cmp	r3, #0
 800811e:	d1e9      	bne.n	80080f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f003 0304 	and.w	r3, r3, #4
 8008128:	2b00      	cmp	r3, #0
 800812a:	f000 80a6 	beq.w	800827a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800812e:	2300      	movs	r3, #0
 8008130:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008132:	4b97      	ldr	r3, [pc, #604]	; (8008390 <HAL_RCC_OscConfig+0x4f4>)
 8008134:	69db      	ldr	r3, [r3, #28]
 8008136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800813a:	2b00      	cmp	r3, #0
 800813c:	d10d      	bne.n	800815a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800813e:	4b94      	ldr	r3, [pc, #592]	; (8008390 <HAL_RCC_OscConfig+0x4f4>)
 8008140:	69db      	ldr	r3, [r3, #28]
 8008142:	4a93      	ldr	r2, [pc, #588]	; (8008390 <HAL_RCC_OscConfig+0x4f4>)
 8008144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008148:	61d3      	str	r3, [r2, #28]
 800814a:	4b91      	ldr	r3, [pc, #580]	; (8008390 <HAL_RCC_OscConfig+0x4f4>)
 800814c:	69db      	ldr	r3, [r3, #28]
 800814e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008152:	60bb      	str	r3, [r7, #8]
 8008154:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008156:	2301      	movs	r3, #1
 8008158:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800815a:	4b8e      	ldr	r3, [pc, #568]	; (8008394 <HAL_RCC_OscConfig+0x4f8>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008162:	2b00      	cmp	r3, #0
 8008164:	d118      	bne.n	8008198 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008166:	4b8b      	ldr	r3, [pc, #556]	; (8008394 <HAL_RCC_OscConfig+0x4f8>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a8a      	ldr	r2, [pc, #552]	; (8008394 <HAL_RCC_OscConfig+0x4f8>)
 800816c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008170:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008172:	f7fc ff2f 	bl	8004fd4 <HAL_GetTick>
 8008176:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008178:	e008      	b.n	800818c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800817a:	f7fc ff2b 	bl	8004fd4 <HAL_GetTick>
 800817e:	4602      	mov	r2, r0
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	1ad3      	subs	r3, r2, r3
 8008184:	2b64      	cmp	r3, #100	; 0x64
 8008186:	d901      	bls.n	800818c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8008188:	2303      	movs	r3, #3
 800818a:	e0fd      	b.n	8008388 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800818c:	4b81      	ldr	r3, [pc, #516]	; (8008394 <HAL_RCC_OscConfig+0x4f8>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008194:	2b00      	cmp	r3, #0
 8008196:	d0f0      	beq.n	800817a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	68db      	ldr	r3, [r3, #12]
 800819c:	2b01      	cmp	r3, #1
 800819e:	d106      	bne.n	80081ae <HAL_RCC_OscConfig+0x312>
 80081a0:	4b7b      	ldr	r3, [pc, #492]	; (8008390 <HAL_RCC_OscConfig+0x4f4>)
 80081a2:	6a1b      	ldr	r3, [r3, #32]
 80081a4:	4a7a      	ldr	r2, [pc, #488]	; (8008390 <HAL_RCC_OscConfig+0x4f4>)
 80081a6:	f043 0301 	orr.w	r3, r3, #1
 80081aa:	6213      	str	r3, [r2, #32]
 80081ac:	e02d      	b.n	800820a <HAL_RCC_OscConfig+0x36e>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	68db      	ldr	r3, [r3, #12]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d10c      	bne.n	80081d0 <HAL_RCC_OscConfig+0x334>
 80081b6:	4b76      	ldr	r3, [pc, #472]	; (8008390 <HAL_RCC_OscConfig+0x4f4>)
 80081b8:	6a1b      	ldr	r3, [r3, #32]
 80081ba:	4a75      	ldr	r2, [pc, #468]	; (8008390 <HAL_RCC_OscConfig+0x4f4>)
 80081bc:	f023 0301 	bic.w	r3, r3, #1
 80081c0:	6213      	str	r3, [r2, #32]
 80081c2:	4b73      	ldr	r3, [pc, #460]	; (8008390 <HAL_RCC_OscConfig+0x4f4>)
 80081c4:	6a1b      	ldr	r3, [r3, #32]
 80081c6:	4a72      	ldr	r2, [pc, #456]	; (8008390 <HAL_RCC_OscConfig+0x4f4>)
 80081c8:	f023 0304 	bic.w	r3, r3, #4
 80081cc:	6213      	str	r3, [r2, #32]
 80081ce:	e01c      	b.n	800820a <HAL_RCC_OscConfig+0x36e>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	68db      	ldr	r3, [r3, #12]
 80081d4:	2b05      	cmp	r3, #5
 80081d6:	d10c      	bne.n	80081f2 <HAL_RCC_OscConfig+0x356>
 80081d8:	4b6d      	ldr	r3, [pc, #436]	; (8008390 <HAL_RCC_OscConfig+0x4f4>)
 80081da:	6a1b      	ldr	r3, [r3, #32]
 80081dc:	4a6c      	ldr	r2, [pc, #432]	; (8008390 <HAL_RCC_OscConfig+0x4f4>)
 80081de:	f043 0304 	orr.w	r3, r3, #4
 80081e2:	6213      	str	r3, [r2, #32]
 80081e4:	4b6a      	ldr	r3, [pc, #424]	; (8008390 <HAL_RCC_OscConfig+0x4f4>)
 80081e6:	6a1b      	ldr	r3, [r3, #32]
 80081e8:	4a69      	ldr	r2, [pc, #420]	; (8008390 <HAL_RCC_OscConfig+0x4f4>)
 80081ea:	f043 0301 	orr.w	r3, r3, #1
 80081ee:	6213      	str	r3, [r2, #32]
 80081f0:	e00b      	b.n	800820a <HAL_RCC_OscConfig+0x36e>
 80081f2:	4b67      	ldr	r3, [pc, #412]	; (8008390 <HAL_RCC_OscConfig+0x4f4>)
 80081f4:	6a1b      	ldr	r3, [r3, #32]
 80081f6:	4a66      	ldr	r2, [pc, #408]	; (8008390 <HAL_RCC_OscConfig+0x4f4>)
 80081f8:	f023 0301 	bic.w	r3, r3, #1
 80081fc:	6213      	str	r3, [r2, #32]
 80081fe:	4b64      	ldr	r3, [pc, #400]	; (8008390 <HAL_RCC_OscConfig+0x4f4>)
 8008200:	6a1b      	ldr	r3, [r3, #32]
 8008202:	4a63      	ldr	r2, [pc, #396]	; (8008390 <HAL_RCC_OscConfig+0x4f4>)
 8008204:	f023 0304 	bic.w	r3, r3, #4
 8008208:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	68db      	ldr	r3, [r3, #12]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d015      	beq.n	800823e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008212:	f7fc fedf 	bl	8004fd4 <HAL_GetTick>
 8008216:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008218:	e00a      	b.n	8008230 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800821a:	f7fc fedb 	bl	8004fd4 <HAL_GetTick>
 800821e:	4602      	mov	r2, r0
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	1ad3      	subs	r3, r2, r3
 8008224:	f241 3288 	movw	r2, #5000	; 0x1388
 8008228:	4293      	cmp	r3, r2
 800822a:	d901      	bls.n	8008230 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800822c:	2303      	movs	r3, #3
 800822e:	e0ab      	b.n	8008388 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008230:	4b57      	ldr	r3, [pc, #348]	; (8008390 <HAL_RCC_OscConfig+0x4f4>)
 8008232:	6a1b      	ldr	r3, [r3, #32]
 8008234:	f003 0302 	and.w	r3, r3, #2
 8008238:	2b00      	cmp	r3, #0
 800823a:	d0ee      	beq.n	800821a <HAL_RCC_OscConfig+0x37e>
 800823c:	e014      	b.n	8008268 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800823e:	f7fc fec9 	bl	8004fd4 <HAL_GetTick>
 8008242:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008244:	e00a      	b.n	800825c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008246:	f7fc fec5 	bl	8004fd4 <HAL_GetTick>
 800824a:	4602      	mov	r2, r0
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	1ad3      	subs	r3, r2, r3
 8008250:	f241 3288 	movw	r2, #5000	; 0x1388
 8008254:	4293      	cmp	r3, r2
 8008256:	d901      	bls.n	800825c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8008258:	2303      	movs	r3, #3
 800825a:	e095      	b.n	8008388 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800825c:	4b4c      	ldr	r3, [pc, #304]	; (8008390 <HAL_RCC_OscConfig+0x4f4>)
 800825e:	6a1b      	ldr	r3, [r3, #32]
 8008260:	f003 0302 	and.w	r3, r3, #2
 8008264:	2b00      	cmp	r3, #0
 8008266:	d1ee      	bne.n	8008246 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008268:	7dfb      	ldrb	r3, [r7, #23]
 800826a:	2b01      	cmp	r3, #1
 800826c:	d105      	bne.n	800827a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800826e:	4b48      	ldr	r3, [pc, #288]	; (8008390 <HAL_RCC_OscConfig+0x4f4>)
 8008270:	69db      	ldr	r3, [r3, #28]
 8008272:	4a47      	ldr	r2, [pc, #284]	; (8008390 <HAL_RCC_OscConfig+0x4f4>)
 8008274:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008278:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	69db      	ldr	r3, [r3, #28]
 800827e:	2b00      	cmp	r3, #0
 8008280:	f000 8081 	beq.w	8008386 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008284:	4b42      	ldr	r3, [pc, #264]	; (8008390 <HAL_RCC_OscConfig+0x4f4>)
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	f003 030c 	and.w	r3, r3, #12
 800828c:	2b08      	cmp	r3, #8
 800828e:	d061      	beq.n	8008354 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	69db      	ldr	r3, [r3, #28]
 8008294:	2b02      	cmp	r3, #2
 8008296:	d146      	bne.n	8008326 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008298:	4b3f      	ldr	r3, [pc, #252]	; (8008398 <HAL_RCC_OscConfig+0x4fc>)
 800829a:	2200      	movs	r2, #0
 800829c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800829e:	f7fc fe99 	bl	8004fd4 <HAL_GetTick>
 80082a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80082a4:	e008      	b.n	80082b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80082a6:	f7fc fe95 	bl	8004fd4 <HAL_GetTick>
 80082aa:	4602      	mov	r2, r0
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	1ad3      	subs	r3, r2, r3
 80082b0:	2b02      	cmp	r3, #2
 80082b2:	d901      	bls.n	80082b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80082b4:	2303      	movs	r3, #3
 80082b6:	e067      	b.n	8008388 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80082b8:	4b35      	ldr	r3, [pc, #212]	; (8008390 <HAL_RCC_OscConfig+0x4f4>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d1f0      	bne.n	80082a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6a1b      	ldr	r3, [r3, #32]
 80082c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082cc:	d108      	bne.n	80082e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80082ce:	4b30      	ldr	r3, [pc, #192]	; (8008390 <HAL_RCC_OscConfig+0x4f4>)
 80082d0:	685b      	ldr	r3, [r3, #4]
 80082d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	689b      	ldr	r3, [r3, #8]
 80082da:	492d      	ldr	r1, [pc, #180]	; (8008390 <HAL_RCC_OscConfig+0x4f4>)
 80082dc:	4313      	orrs	r3, r2
 80082de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80082e0:	4b2b      	ldr	r3, [pc, #172]	; (8008390 <HAL_RCC_OscConfig+0x4f4>)
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6a19      	ldr	r1, [r3, #32]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f0:	430b      	orrs	r3, r1
 80082f2:	4927      	ldr	r1, [pc, #156]	; (8008390 <HAL_RCC_OscConfig+0x4f4>)
 80082f4:	4313      	orrs	r3, r2
 80082f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80082f8:	4b27      	ldr	r3, [pc, #156]	; (8008398 <HAL_RCC_OscConfig+0x4fc>)
 80082fa:	2201      	movs	r2, #1
 80082fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082fe:	f7fc fe69 	bl	8004fd4 <HAL_GetTick>
 8008302:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008304:	e008      	b.n	8008318 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008306:	f7fc fe65 	bl	8004fd4 <HAL_GetTick>
 800830a:	4602      	mov	r2, r0
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	1ad3      	subs	r3, r2, r3
 8008310:	2b02      	cmp	r3, #2
 8008312:	d901      	bls.n	8008318 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8008314:	2303      	movs	r3, #3
 8008316:	e037      	b.n	8008388 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008318:	4b1d      	ldr	r3, [pc, #116]	; (8008390 <HAL_RCC_OscConfig+0x4f4>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008320:	2b00      	cmp	r3, #0
 8008322:	d0f0      	beq.n	8008306 <HAL_RCC_OscConfig+0x46a>
 8008324:	e02f      	b.n	8008386 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008326:	4b1c      	ldr	r3, [pc, #112]	; (8008398 <HAL_RCC_OscConfig+0x4fc>)
 8008328:	2200      	movs	r2, #0
 800832a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800832c:	f7fc fe52 	bl	8004fd4 <HAL_GetTick>
 8008330:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008332:	e008      	b.n	8008346 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008334:	f7fc fe4e 	bl	8004fd4 <HAL_GetTick>
 8008338:	4602      	mov	r2, r0
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	1ad3      	subs	r3, r2, r3
 800833e:	2b02      	cmp	r3, #2
 8008340:	d901      	bls.n	8008346 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8008342:	2303      	movs	r3, #3
 8008344:	e020      	b.n	8008388 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008346:	4b12      	ldr	r3, [pc, #72]	; (8008390 <HAL_RCC_OscConfig+0x4f4>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800834e:	2b00      	cmp	r3, #0
 8008350:	d1f0      	bne.n	8008334 <HAL_RCC_OscConfig+0x498>
 8008352:	e018      	b.n	8008386 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	69db      	ldr	r3, [r3, #28]
 8008358:	2b01      	cmp	r3, #1
 800835a:	d101      	bne.n	8008360 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800835c:	2301      	movs	r3, #1
 800835e:	e013      	b.n	8008388 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008360:	4b0b      	ldr	r3, [pc, #44]	; (8008390 <HAL_RCC_OscConfig+0x4f4>)
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6a1b      	ldr	r3, [r3, #32]
 8008370:	429a      	cmp	r2, r3
 8008372:	d106      	bne.n	8008382 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800837e:	429a      	cmp	r2, r3
 8008380:	d001      	beq.n	8008386 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8008382:	2301      	movs	r3, #1
 8008384:	e000      	b.n	8008388 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8008386:	2300      	movs	r3, #0
}
 8008388:	4618      	mov	r0, r3
 800838a:	3718      	adds	r7, #24
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}
 8008390:	40021000 	.word	0x40021000
 8008394:	40007000 	.word	0x40007000
 8008398:	42420060 	.word	0x42420060

0800839c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b084      	sub	sp, #16
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
 80083a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d101      	bne.n	80083b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80083ac:	2301      	movs	r3, #1
 80083ae:	e0d0      	b.n	8008552 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80083b0:	4b6a      	ldr	r3, [pc, #424]	; (800855c <HAL_RCC_ClockConfig+0x1c0>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f003 0307 	and.w	r3, r3, #7
 80083b8:	683a      	ldr	r2, [r7, #0]
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d910      	bls.n	80083e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083be:	4b67      	ldr	r3, [pc, #412]	; (800855c <HAL_RCC_ClockConfig+0x1c0>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f023 0207 	bic.w	r2, r3, #7
 80083c6:	4965      	ldr	r1, [pc, #404]	; (800855c <HAL_RCC_ClockConfig+0x1c0>)
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	4313      	orrs	r3, r2
 80083cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80083ce:	4b63      	ldr	r3, [pc, #396]	; (800855c <HAL_RCC_ClockConfig+0x1c0>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f003 0307 	and.w	r3, r3, #7
 80083d6:	683a      	ldr	r2, [r7, #0]
 80083d8:	429a      	cmp	r2, r3
 80083da:	d001      	beq.n	80083e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80083dc:	2301      	movs	r3, #1
 80083de:	e0b8      	b.n	8008552 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f003 0302 	and.w	r3, r3, #2
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d020      	beq.n	800842e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f003 0304 	and.w	r3, r3, #4
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d005      	beq.n	8008404 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80083f8:	4b59      	ldr	r3, [pc, #356]	; (8008560 <HAL_RCC_ClockConfig+0x1c4>)
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	4a58      	ldr	r2, [pc, #352]	; (8008560 <HAL_RCC_ClockConfig+0x1c4>)
 80083fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008402:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f003 0308 	and.w	r3, r3, #8
 800840c:	2b00      	cmp	r3, #0
 800840e:	d005      	beq.n	800841c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008410:	4b53      	ldr	r3, [pc, #332]	; (8008560 <HAL_RCC_ClockConfig+0x1c4>)
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	4a52      	ldr	r2, [pc, #328]	; (8008560 <HAL_RCC_ClockConfig+0x1c4>)
 8008416:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800841a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800841c:	4b50      	ldr	r3, [pc, #320]	; (8008560 <HAL_RCC_ClockConfig+0x1c4>)
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	689b      	ldr	r3, [r3, #8]
 8008428:	494d      	ldr	r1, [pc, #308]	; (8008560 <HAL_RCC_ClockConfig+0x1c4>)
 800842a:	4313      	orrs	r3, r2
 800842c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f003 0301 	and.w	r3, r3, #1
 8008436:	2b00      	cmp	r3, #0
 8008438:	d040      	beq.n	80084bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	2b01      	cmp	r3, #1
 8008440:	d107      	bne.n	8008452 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008442:	4b47      	ldr	r3, [pc, #284]	; (8008560 <HAL_RCC_ClockConfig+0x1c4>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800844a:	2b00      	cmp	r3, #0
 800844c:	d115      	bne.n	800847a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800844e:	2301      	movs	r3, #1
 8008450:	e07f      	b.n	8008552 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	2b02      	cmp	r3, #2
 8008458:	d107      	bne.n	800846a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800845a:	4b41      	ldr	r3, [pc, #260]	; (8008560 <HAL_RCC_ClockConfig+0x1c4>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008462:	2b00      	cmp	r3, #0
 8008464:	d109      	bne.n	800847a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008466:	2301      	movs	r3, #1
 8008468:	e073      	b.n	8008552 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800846a:	4b3d      	ldr	r3, [pc, #244]	; (8008560 <HAL_RCC_ClockConfig+0x1c4>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f003 0302 	and.w	r3, r3, #2
 8008472:	2b00      	cmp	r3, #0
 8008474:	d101      	bne.n	800847a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008476:	2301      	movs	r3, #1
 8008478:	e06b      	b.n	8008552 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800847a:	4b39      	ldr	r3, [pc, #228]	; (8008560 <HAL_RCC_ClockConfig+0x1c4>)
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	f023 0203 	bic.w	r2, r3, #3
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	4936      	ldr	r1, [pc, #216]	; (8008560 <HAL_RCC_ClockConfig+0x1c4>)
 8008488:	4313      	orrs	r3, r2
 800848a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800848c:	f7fc fda2 	bl	8004fd4 <HAL_GetTick>
 8008490:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008492:	e00a      	b.n	80084aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008494:	f7fc fd9e 	bl	8004fd4 <HAL_GetTick>
 8008498:	4602      	mov	r2, r0
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	1ad3      	subs	r3, r2, r3
 800849e:	f241 3288 	movw	r2, #5000	; 0x1388
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d901      	bls.n	80084aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80084a6:	2303      	movs	r3, #3
 80084a8:	e053      	b.n	8008552 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80084aa:	4b2d      	ldr	r3, [pc, #180]	; (8008560 <HAL_RCC_ClockConfig+0x1c4>)
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	f003 020c 	and.w	r2, r3, #12
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	009b      	lsls	r3, r3, #2
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d1eb      	bne.n	8008494 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80084bc:	4b27      	ldr	r3, [pc, #156]	; (800855c <HAL_RCC_ClockConfig+0x1c0>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f003 0307 	and.w	r3, r3, #7
 80084c4:	683a      	ldr	r2, [r7, #0]
 80084c6:	429a      	cmp	r2, r3
 80084c8:	d210      	bcs.n	80084ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084ca:	4b24      	ldr	r3, [pc, #144]	; (800855c <HAL_RCC_ClockConfig+0x1c0>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f023 0207 	bic.w	r2, r3, #7
 80084d2:	4922      	ldr	r1, [pc, #136]	; (800855c <HAL_RCC_ClockConfig+0x1c0>)
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	4313      	orrs	r3, r2
 80084d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80084da:	4b20      	ldr	r3, [pc, #128]	; (800855c <HAL_RCC_ClockConfig+0x1c0>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f003 0307 	and.w	r3, r3, #7
 80084e2:	683a      	ldr	r2, [r7, #0]
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d001      	beq.n	80084ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80084e8:	2301      	movs	r3, #1
 80084ea:	e032      	b.n	8008552 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f003 0304 	and.w	r3, r3, #4
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d008      	beq.n	800850a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80084f8:	4b19      	ldr	r3, [pc, #100]	; (8008560 <HAL_RCC_ClockConfig+0x1c4>)
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	68db      	ldr	r3, [r3, #12]
 8008504:	4916      	ldr	r1, [pc, #88]	; (8008560 <HAL_RCC_ClockConfig+0x1c4>)
 8008506:	4313      	orrs	r3, r2
 8008508:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f003 0308 	and.w	r3, r3, #8
 8008512:	2b00      	cmp	r3, #0
 8008514:	d009      	beq.n	800852a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008516:	4b12      	ldr	r3, [pc, #72]	; (8008560 <HAL_RCC_ClockConfig+0x1c4>)
 8008518:	685b      	ldr	r3, [r3, #4]
 800851a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	691b      	ldr	r3, [r3, #16]
 8008522:	00db      	lsls	r3, r3, #3
 8008524:	490e      	ldr	r1, [pc, #56]	; (8008560 <HAL_RCC_ClockConfig+0x1c4>)
 8008526:	4313      	orrs	r3, r2
 8008528:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800852a:	f000 f821 	bl	8008570 <HAL_RCC_GetSysClockFreq>
 800852e:	4601      	mov	r1, r0
 8008530:	4b0b      	ldr	r3, [pc, #44]	; (8008560 <HAL_RCC_ClockConfig+0x1c4>)
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	091b      	lsrs	r3, r3, #4
 8008536:	f003 030f 	and.w	r3, r3, #15
 800853a:	4a0a      	ldr	r2, [pc, #40]	; (8008564 <HAL_RCC_ClockConfig+0x1c8>)
 800853c:	5cd3      	ldrb	r3, [r2, r3]
 800853e:	fa21 f303 	lsr.w	r3, r1, r3
 8008542:	4a09      	ldr	r2, [pc, #36]	; (8008568 <HAL_RCC_ClockConfig+0x1cc>)
 8008544:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008546:	4b09      	ldr	r3, [pc, #36]	; (800856c <HAL_RCC_ClockConfig+0x1d0>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4618      	mov	r0, r3
 800854c:	f7fc fd00 	bl	8004f50 <HAL_InitTick>

  return HAL_OK;
 8008550:	2300      	movs	r3, #0
}
 8008552:	4618      	mov	r0, r3
 8008554:	3710      	adds	r7, #16
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
 800855a:	bf00      	nop
 800855c:	40022000 	.word	0x40022000
 8008560:	40021000 	.word	0x40021000
 8008564:	08010d10 	.word	0x08010d10
 8008568:	2000024c 	.word	0x2000024c
 800856c:	20000250 	.word	0x20000250

08008570 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008570:	b490      	push	{r4, r7}
 8008572:	b08a      	sub	sp, #40	; 0x28
 8008574:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8008576:	4b2a      	ldr	r3, [pc, #168]	; (8008620 <HAL_RCC_GetSysClockFreq+0xb0>)
 8008578:	1d3c      	adds	r4, r7, #4
 800857a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800857c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8008580:	4b28      	ldr	r3, [pc, #160]	; (8008624 <HAL_RCC_GetSysClockFreq+0xb4>)
 8008582:	881b      	ldrh	r3, [r3, #0]
 8008584:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008586:	2300      	movs	r3, #0
 8008588:	61fb      	str	r3, [r7, #28]
 800858a:	2300      	movs	r3, #0
 800858c:	61bb      	str	r3, [r7, #24]
 800858e:	2300      	movs	r3, #0
 8008590:	627b      	str	r3, [r7, #36]	; 0x24
 8008592:	2300      	movs	r3, #0
 8008594:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8008596:	2300      	movs	r3, #0
 8008598:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800859a:	4b23      	ldr	r3, [pc, #140]	; (8008628 <HAL_RCC_GetSysClockFreq+0xb8>)
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80085a0:	69fb      	ldr	r3, [r7, #28]
 80085a2:	f003 030c 	and.w	r3, r3, #12
 80085a6:	2b04      	cmp	r3, #4
 80085a8:	d002      	beq.n	80085b0 <HAL_RCC_GetSysClockFreq+0x40>
 80085aa:	2b08      	cmp	r3, #8
 80085ac:	d003      	beq.n	80085b6 <HAL_RCC_GetSysClockFreq+0x46>
 80085ae:	e02d      	b.n	800860c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80085b0:	4b1e      	ldr	r3, [pc, #120]	; (800862c <HAL_RCC_GetSysClockFreq+0xbc>)
 80085b2:	623b      	str	r3, [r7, #32]
      break;
 80085b4:	e02d      	b.n	8008612 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80085b6:	69fb      	ldr	r3, [r7, #28]
 80085b8:	0c9b      	lsrs	r3, r3, #18
 80085ba:	f003 030f 	and.w	r3, r3, #15
 80085be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80085c2:	4413      	add	r3, r2
 80085c4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80085c8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80085ca:	69fb      	ldr	r3, [r7, #28]
 80085cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d013      	beq.n	80085fc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80085d4:	4b14      	ldr	r3, [pc, #80]	; (8008628 <HAL_RCC_GetSysClockFreq+0xb8>)
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	0c5b      	lsrs	r3, r3, #17
 80085da:	f003 0301 	and.w	r3, r3, #1
 80085de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80085e2:	4413      	add	r3, r2
 80085e4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80085e8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	4a0f      	ldr	r2, [pc, #60]	; (800862c <HAL_RCC_GetSysClockFreq+0xbc>)
 80085ee:	fb02 f203 	mul.w	r2, r2, r3
 80085f2:	69bb      	ldr	r3, [r7, #24]
 80085f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80085f8:	627b      	str	r3, [r7, #36]	; 0x24
 80085fa:	e004      	b.n	8008606 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	4a0c      	ldr	r2, [pc, #48]	; (8008630 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008600:	fb02 f303 	mul.w	r3, r2, r3
 8008604:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8008606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008608:	623b      	str	r3, [r7, #32]
      break;
 800860a:	e002      	b.n	8008612 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800860c:	4b07      	ldr	r3, [pc, #28]	; (800862c <HAL_RCC_GetSysClockFreq+0xbc>)
 800860e:	623b      	str	r3, [r7, #32]
      break;
 8008610:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008612:	6a3b      	ldr	r3, [r7, #32]
}
 8008614:	4618      	mov	r0, r3
 8008616:	3728      	adds	r7, #40	; 0x28
 8008618:	46bd      	mov	sp, r7
 800861a:	bc90      	pop	{r4, r7}
 800861c:	4770      	bx	lr
 800861e:	bf00      	nop
 8008620:	0800dfcc 	.word	0x0800dfcc
 8008624:	0800dfdc 	.word	0x0800dfdc
 8008628:	40021000 	.word	0x40021000
 800862c:	007a1200 	.word	0x007a1200
 8008630:	003d0900 	.word	0x003d0900

08008634 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008634:	b480      	push	{r7}
 8008636:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008638:	4b02      	ldr	r3, [pc, #8]	; (8008644 <HAL_RCC_GetHCLKFreq+0x10>)
 800863a:	681b      	ldr	r3, [r3, #0]
}
 800863c:	4618      	mov	r0, r3
 800863e:	46bd      	mov	sp, r7
 8008640:	bc80      	pop	{r7}
 8008642:	4770      	bx	lr
 8008644:	2000024c 	.word	0x2000024c

08008648 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800864c:	f7ff fff2 	bl	8008634 <HAL_RCC_GetHCLKFreq>
 8008650:	4601      	mov	r1, r0
 8008652:	4b05      	ldr	r3, [pc, #20]	; (8008668 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	0a1b      	lsrs	r3, r3, #8
 8008658:	f003 0307 	and.w	r3, r3, #7
 800865c:	4a03      	ldr	r2, [pc, #12]	; (800866c <HAL_RCC_GetPCLK1Freq+0x24>)
 800865e:	5cd3      	ldrb	r3, [r2, r3]
 8008660:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008664:	4618      	mov	r0, r3
 8008666:	bd80      	pop	{r7, pc}
 8008668:	40021000 	.word	0x40021000
 800866c:	08010d20 	.word	0x08010d20

08008670 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008674:	f7ff ffde 	bl	8008634 <HAL_RCC_GetHCLKFreq>
 8008678:	4601      	mov	r1, r0
 800867a:	4b05      	ldr	r3, [pc, #20]	; (8008690 <HAL_RCC_GetPCLK2Freq+0x20>)
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	0adb      	lsrs	r3, r3, #11
 8008680:	f003 0307 	and.w	r3, r3, #7
 8008684:	4a03      	ldr	r2, [pc, #12]	; (8008694 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008686:	5cd3      	ldrb	r3, [r2, r3]
 8008688:	fa21 f303 	lsr.w	r3, r1, r3
}
 800868c:	4618      	mov	r0, r3
 800868e:	bd80      	pop	{r7, pc}
 8008690:	40021000 	.word	0x40021000
 8008694:	08010d20 	.word	0x08010d20

08008698 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008698:	b480      	push	{r7}
 800869a:	b085      	sub	sp, #20
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80086a0:	4b0a      	ldr	r3, [pc, #40]	; (80086cc <RCC_Delay+0x34>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a0a      	ldr	r2, [pc, #40]	; (80086d0 <RCC_Delay+0x38>)
 80086a6:	fba2 2303 	umull	r2, r3, r2, r3
 80086aa:	0a5b      	lsrs	r3, r3, #9
 80086ac:	687a      	ldr	r2, [r7, #4]
 80086ae:	fb02 f303 	mul.w	r3, r2, r3
 80086b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80086b4:	bf00      	nop
  }
  while (Delay --);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	1e5a      	subs	r2, r3, #1
 80086ba:	60fa      	str	r2, [r7, #12]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d1f9      	bne.n	80086b4 <RCC_Delay+0x1c>
}
 80086c0:	bf00      	nop
 80086c2:	3714      	adds	r7, #20
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bc80      	pop	{r7}
 80086c8:	4770      	bx	lr
 80086ca:	bf00      	nop
 80086cc:	2000024c 	.word	0x2000024c
 80086d0:	10624dd3 	.word	0x10624dd3

080086d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b086      	sub	sp, #24
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80086dc:	2300      	movs	r3, #0
 80086de:	613b      	str	r3, [r7, #16]
 80086e0:	2300      	movs	r3, #0
 80086e2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f003 0301 	and.w	r3, r3, #1
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d07d      	beq.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80086f0:	2300      	movs	r3, #0
 80086f2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80086f4:	4b4f      	ldr	r3, [pc, #316]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80086f6:	69db      	ldr	r3, [r3, #28]
 80086f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d10d      	bne.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008700:	4b4c      	ldr	r3, [pc, #304]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008702:	69db      	ldr	r3, [r3, #28]
 8008704:	4a4b      	ldr	r2, [pc, #300]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800870a:	61d3      	str	r3, [r2, #28]
 800870c:	4b49      	ldr	r3, [pc, #292]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800870e:	69db      	ldr	r3, [r3, #28]
 8008710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008714:	60bb      	str	r3, [r7, #8]
 8008716:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008718:	2301      	movs	r3, #1
 800871a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800871c:	4b46      	ldr	r3, [pc, #280]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008724:	2b00      	cmp	r3, #0
 8008726:	d118      	bne.n	800875a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008728:	4b43      	ldr	r3, [pc, #268]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a42      	ldr	r2, [pc, #264]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800872e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008732:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008734:	f7fc fc4e 	bl	8004fd4 <HAL_GetTick>
 8008738:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800873a:	e008      	b.n	800874e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800873c:	f7fc fc4a 	bl	8004fd4 <HAL_GetTick>
 8008740:	4602      	mov	r2, r0
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	1ad3      	subs	r3, r2, r3
 8008746:	2b64      	cmp	r3, #100	; 0x64
 8008748:	d901      	bls.n	800874e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800874a:	2303      	movs	r3, #3
 800874c:	e06d      	b.n	800882a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800874e:	4b3a      	ldr	r3, [pc, #232]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008756:	2b00      	cmp	r3, #0
 8008758:	d0f0      	beq.n	800873c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800875a:	4b36      	ldr	r3, [pc, #216]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800875c:	6a1b      	ldr	r3, [r3, #32]
 800875e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008762:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d02e      	beq.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	685b      	ldr	r3, [r3, #4]
 800876e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008772:	68fa      	ldr	r2, [r7, #12]
 8008774:	429a      	cmp	r2, r3
 8008776:	d027      	beq.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008778:	4b2e      	ldr	r3, [pc, #184]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800877a:	6a1b      	ldr	r3, [r3, #32]
 800877c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008780:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008782:	4b2e      	ldr	r3, [pc, #184]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008784:	2201      	movs	r2, #1
 8008786:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008788:	4b2c      	ldr	r3, [pc, #176]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800878a:	2200      	movs	r2, #0
 800878c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800878e:	4a29      	ldr	r2, [pc, #164]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f003 0301 	and.w	r3, r3, #1
 800879a:	2b00      	cmp	r3, #0
 800879c:	d014      	beq.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800879e:	f7fc fc19 	bl	8004fd4 <HAL_GetTick>
 80087a2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80087a4:	e00a      	b.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087a6:	f7fc fc15 	bl	8004fd4 <HAL_GetTick>
 80087aa:	4602      	mov	r2, r0
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	1ad3      	subs	r3, r2, r3
 80087b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d901      	bls.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80087b8:	2303      	movs	r3, #3
 80087ba:	e036      	b.n	800882a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80087bc:	4b1d      	ldr	r3, [pc, #116]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80087be:	6a1b      	ldr	r3, [r3, #32]
 80087c0:	f003 0302 	and.w	r3, r3, #2
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d0ee      	beq.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80087c8:	4b1a      	ldr	r3, [pc, #104]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80087ca:	6a1b      	ldr	r3, [r3, #32]
 80087cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	4917      	ldr	r1, [pc, #92]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80087d6:	4313      	orrs	r3, r2
 80087d8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80087da:	7dfb      	ldrb	r3, [r7, #23]
 80087dc:	2b01      	cmp	r3, #1
 80087de:	d105      	bne.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80087e0:	4b14      	ldr	r3, [pc, #80]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80087e2:	69db      	ldr	r3, [r3, #28]
 80087e4:	4a13      	ldr	r2, [pc, #76]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80087e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80087ea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f003 0302 	and.w	r3, r3, #2
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d008      	beq.n	800880a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80087f8:	4b0e      	ldr	r3, [pc, #56]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	689b      	ldr	r3, [r3, #8]
 8008804:	490b      	ldr	r1, [pc, #44]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008806:	4313      	orrs	r3, r2
 8008808:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f003 0310 	and.w	r3, r3, #16
 8008812:	2b00      	cmp	r3, #0
 8008814:	d008      	beq.n	8008828 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008816:	4b07      	ldr	r3, [pc, #28]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008818:	685b      	ldr	r3, [r3, #4]
 800881a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	68db      	ldr	r3, [r3, #12]
 8008822:	4904      	ldr	r1, [pc, #16]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008824:	4313      	orrs	r3, r2
 8008826:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8008828:	2300      	movs	r3, #0
}
 800882a:	4618      	mov	r0, r3
 800882c:	3718      	adds	r7, #24
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}
 8008832:	bf00      	nop
 8008834:	40021000 	.word	0x40021000
 8008838:	40007000 	.word	0x40007000
 800883c:	42420440 	.word	0x42420440

08008840 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008840:	b590      	push	{r4, r7, lr}
 8008842:	b08d      	sub	sp, #52	; 0x34
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8008848:	4b55      	ldr	r3, [pc, #340]	; (80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800884a:	f107 040c 	add.w	r4, r7, #12
 800884e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008850:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8008854:	4b53      	ldr	r3, [pc, #332]	; (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8008856:	881b      	ldrh	r3, [r3, #0]
 8008858:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800885a:	2300      	movs	r3, #0
 800885c:	627b      	str	r3, [r7, #36]	; 0x24
 800885e:	2300      	movs	r3, #0
 8008860:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008862:	2300      	movs	r3, #0
 8008864:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8008866:	2300      	movs	r3, #0
 8008868:	61fb      	str	r3, [r7, #28]
 800886a:	2300      	movs	r3, #0
 800886c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2b02      	cmp	r3, #2
 8008872:	d07f      	beq.n	8008974 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8008874:	2b10      	cmp	r3, #16
 8008876:	d002      	beq.n	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8008878:	2b01      	cmp	r3, #1
 800887a:	d048      	beq.n	800890e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800887c:	e08b      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 800887e:	4b4a      	ldr	r3, [pc, #296]	; (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8008884:	4b48      	ldr	r3, [pc, #288]	; (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800888c:	2b00      	cmp	r3, #0
 800888e:	d07f      	beq.n	8008990 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008890:	69fb      	ldr	r3, [r7, #28]
 8008892:	0c9b      	lsrs	r3, r3, #18
 8008894:	f003 030f 	and.w	r3, r3, #15
 8008898:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800889c:	4413      	add	r3, r2
 800889e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80088a2:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80088a4:	69fb      	ldr	r3, [r7, #28]
 80088a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d018      	beq.n	80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80088ae:	4b3e      	ldr	r3, [pc, #248]	; (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80088b0:	685b      	ldr	r3, [r3, #4]
 80088b2:	0c5b      	lsrs	r3, r3, #17
 80088b4:	f003 0301 	and.w	r3, r3, #1
 80088b8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80088bc:	4413      	add	r3, r2
 80088be:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80088c2:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80088c4:	69fb      	ldr	r3, [r7, #28]
 80088c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d00d      	beq.n	80088ea <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80088ce:	4a37      	ldr	r2, [pc, #220]	; (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80088d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d2:	fbb2 f2f3 	udiv	r2, r2, r3
 80088d6:	6a3b      	ldr	r3, [r7, #32]
 80088d8:	fb02 f303 	mul.w	r3, r2, r3
 80088dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80088de:	e004      	b.n	80088ea <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80088e0:	6a3b      	ldr	r3, [r7, #32]
 80088e2:	4a33      	ldr	r2, [pc, #204]	; (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80088e4:	fb02 f303 	mul.w	r3, r2, r3
 80088e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80088ea:	4b2f      	ldr	r3, [pc, #188]	; (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80088f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80088f6:	d102      	bne.n	80088fe <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 80088f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088fa:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80088fc:	e048      	b.n	8008990 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 80088fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008900:	005b      	lsls	r3, r3, #1
 8008902:	4a2c      	ldr	r2, [pc, #176]	; (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8008904:	fba2 2303 	umull	r2, r3, r2, r3
 8008908:	085b      	lsrs	r3, r3, #1
 800890a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800890c:	e040      	b.n	8008990 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 800890e:	4b26      	ldr	r3, [pc, #152]	; (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8008910:	6a1b      	ldr	r3, [r3, #32]
 8008912:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8008914:	69fb      	ldr	r3, [r7, #28]
 8008916:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800891a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800891e:	d108      	bne.n	8008932 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8008920:	69fb      	ldr	r3, [r7, #28]
 8008922:	f003 0302 	and.w	r3, r3, #2
 8008926:	2b00      	cmp	r3, #0
 8008928:	d003      	beq.n	8008932 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 800892a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800892e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008930:	e01f      	b.n	8008972 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8008932:	69fb      	ldr	r3, [r7, #28]
 8008934:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008938:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800893c:	d109      	bne.n	8008952 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800893e:	4b1a      	ldr	r3, [pc, #104]	; (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8008940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008942:	f003 0302 	and.w	r3, r3, #2
 8008946:	2b00      	cmp	r3, #0
 8008948:	d003      	beq.n	8008952 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 800894a:	f649 4340 	movw	r3, #40000	; 0x9c40
 800894e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008950:	e00f      	b.n	8008972 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8008952:	69fb      	ldr	r3, [r7, #28]
 8008954:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008958:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800895c:	d11a      	bne.n	8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800895e:	4b12      	ldr	r3, [pc, #72]	; (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008966:	2b00      	cmp	r3, #0
 8008968:	d014      	beq.n	8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 800896a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800896e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8008970:	e010      	b.n	8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8008972:	e00f      	b.n	8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8008974:	f7ff fe7c 	bl	8008670 <HAL_RCC_GetPCLK2Freq>
 8008978:	4602      	mov	r2, r0
 800897a:	4b0b      	ldr	r3, [pc, #44]	; (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	0b9b      	lsrs	r3, r3, #14
 8008980:	f003 0303 	and.w	r3, r3, #3
 8008984:	3301      	adds	r3, #1
 8008986:	005b      	lsls	r3, r3, #1
 8008988:	fbb2 f3f3 	udiv	r3, r2, r3
 800898c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800898e:	e002      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8008990:	bf00      	nop
 8008992:	e000      	b.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8008994:	bf00      	nop
    }
  }
  return (frequency);
 8008996:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8008998:	4618      	mov	r0, r3
 800899a:	3734      	adds	r7, #52	; 0x34
 800899c:	46bd      	mov	sp, r7
 800899e:	bd90      	pop	{r4, r7, pc}
 80089a0:	0800dfe0 	.word	0x0800dfe0
 80089a4:	0800dff0 	.word	0x0800dff0
 80089a8:	40021000 	.word	0x40021000
 80089ac:	007a1200 	.word	0x007a1200
 80089b0:	003d0900 	.word	0x003d0900
 80089b4:	aaaaaaab 	.word	0xaaaaaaab

080089b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b082      	sub	sp, #8
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d101      	bne.n	80089ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80089c6:	2301      	movs	r3, #1
 80089c8:	e053      	b.n	8008a72 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2200      	movs	r2, #0
 80089ce:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80089d6:	b2db      	uxtb	r3, r3
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d106      	bne.n	80089ea <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2200      	movs	r2, #0
 80089e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f7fc f8c5 	bl	8004b74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2202      	movs	r2, #2
 80089ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	681a      	ldr	r2, [r3, #0]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a00:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	685a      	ldr	r2, [r3, #4]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	689b      	ldr	r3, [r3, #8]
 8008a0a:	431a      	orrs	r2, r3
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	68db      	ldr	r3, [r3, #12]
 8008a10:	431a      	orrs	r2, r3
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	691b      	ldr	r3, [r3, #16]
 8008a16:	431a      	orrs	r2, r3
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	695b      	ldr	r3, [r3, #20]
 8008a1c:	431a      	orrs	r2, r3
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	699b      	ldr	r3, [r3, #24]
 8008a22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a26:	431a      	orrs	r2, r3
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	69db      	ldr	r3, [r3, #28]
 8008a2c:	431a      	orrs	r2, r3
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6a1b      	ldr	r3, [r3, #32]
 8008a32:	ea42 0103 	orr.w	r1, r2, r3
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	430a      	orrs	r2, r1
 8008a40:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	699b      	ldr	r3, [r3, #24]
 8008a46:	0c1a      	lsrs	r2, r3, #16
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f002 0204 	and.w	r2, r2, #4
 8008a50:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	69da      	ldr	r2, [r3, #28]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008a60:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2200      	movs	r2, #0
 8008a66:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008a70:	2300      	movs	r3, #0
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3708      	adds	r7, #8
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}

08008a7a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a7a:	b580      	push	{r7, lr}
 8008a7c:	b088      	sub	sp, #32
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	60f8      	str	r0, [r7, #12]
 8008a82:	60b9      	str	r1, [r7, #8]
 8008a84:	603b      	str	r3, [r7, #0]
 8008a86:	4613      	mov	r3, r2
 8008a88:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008a94:	2b01      	cmp	r3, #1
 8008a96:	d101      	bne.n	8008a9c <HAL_SPI_Transmit+0x22>
 8008a98:	2302      	movs	r3, #2
 8008a9a:	e11e      	b.n	8008cda <HAL_SPI_Transmit+0x260>
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008aa4:	f7fc fa96 	bl	8004fd4 <HAL_GetTick>
 8008aa8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008aaa:	88fb      	ldrh	r3, [r7, #6]
 8008aac:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008ab4:	b2db      	uxtb	r3, r3
 8008ab6:	2b01      	cmp	r3, #1
 8008ab8:	d002      	beq.n	8008ac0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008aba:	2302      	movs	r3, #2
 8008abc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008abe:	e103      	b.n	8008cc8 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d002      	beq.n	8008acc <HAL_SPI_Transmit+0x52>
 8008ac6:	88fb      	ldrh	r3, [r7, #6]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d102      	bne.n	8008ad2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008acc:	2301      	movs	r3, #1
 8008ace:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008ad0:	e0fa      	b.n	8008cc8 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2203      	movs	r2, #3
 8008ad6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	2200      	movs	r2, #0
 8008ade:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	68ba      	ldr	r2, [r7, #8]
 8008ae4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	88fa      	ldrh	r2, [r7, #6]
 8008aea:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	88fa      	ldrh	r2, [r7, #6]
 8008af0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	2200      	movs	r2, #0
 8008af6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	2200      	movs	r2, #0
 8008afc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	2200      	movs	r2, #0
 8008b02:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2200      	movs	r2, #0
 8008b08:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	689b      	ldr	r3, [r3, #8]
 8008b14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b18:	d107      	bne.n	8008b2a <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	681a      	ldr	r2, [r3, #0]
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008b28:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b34:	2b40      	cmp	r3, #64	; 0x40
 8008b36:	d007      	beq.n	8008b48 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	681a      	ldr	r2, [r3, #0]
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	68db      	ldr	r3, [r3, #12]
 8008b4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b50:	d14b      	bne.n	8008bea <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d002      	beq.n	8008b60 <HAL_SPI_Transmit+0xe6>
 8008b5a:	8afb      	ldrh	r3, [r7, #22]
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	d13e      	bne.n	8008bde <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b64:	881a      	ldrh	r2, [r3, #0]
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b70:	1c9a      	adds	r2, r3, #2
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b7a:	b29b      	uxth	r3, r3
 8008b7c:	3b01      	subs	r3, #1
 8008b7e:	b29a      	uxth	r2, r3
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008b84:	e02b      	b.n	8008bde <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	689b      	ldr	r3, [r3, #8]
 8008b8c:	f003 0302 	and.w	r3, r3, #2
 8008b90:	2b02      	cmp	r3, #2
 8008b92:	d112      	bne.n	8008bba <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b98:	881a      	ldrh	r2, [r3, #0]
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ba4:	1c9a      	adds	r2, r3, #2
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008bae:	b29b      	uxth	r3, r3
 8008bb0:	3b01      	subs	r3, #1
 8008bb2:	b29a      	uxth	r2, r3
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	86da      	strh	r2, [r3, #54]	; 0x36
 8008bb8:	e011      	b.n	8008bde <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008bba:	f7fc fa0b 	bl	8004fd4 <HAL_GetTick>
 8008bbe:	4602      	mov	r2, r0
 8008bc0:	69bb      	ldr	r3, [r7, #24]
 8008bc2:	1ad3      	subs	r3, r2, r3
 8008bc4:	683a      	ldr	r2, [r7, #0]
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	d803      	bhi.n	8008bd2 <HAL_SPI_Transmit+0x158>
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bd0:	d102      	bne.n	8008bd8 <HAL_SPI_Transmit+0x15e>
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d102      	bne.n	8008bde <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8008bd8:	2303      	movs	r3, #3
 8008bda:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008bdc:	e074      	b.n	8008cc8 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008be2:	b29b      	uxth	r3, r3
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d1ce      	bne.n	8008b86 <HAL_SPI_Transmit+0x10c>
 8008be8:	e04c      	b.n	8008c84 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d002      	beq.n	8008bf8 <HAL_SPI_Transmit+0x17e>
 8008bf2:	8afb      	ldrh	r3, [r7, #22]
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	d140      	bne.n	8008c7a <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	330c      	adds	r3, #12
 8008c02:	7812      	ldrb	r2, [r2, #0]
 8008c04:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c0a:	1c5a      	adds	r2, r3, #1
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	3b01      	subs	r3, #1
 8008c18:	b29a      	uxth	r2, r3
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008c1e:	e02c      	b.n	8008c7a <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	689b      	ldr	r3, [r3, #8]
 8008c26:	f003 0302 	and.w	r3, r3, #2
 8008c2a:	2b02      	cmp	r3, #2
 8008c2c:	d113      	bne.n	8008c56 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	330c      	adds	r3, #12
 8008c38:	7812      	ldrb	r2, [r2, #0]
 8008c3a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c40:	1c5a      	adds	r2, r3, #1
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c4a:	b29b      	uxth	r3, r3
 8008c4c:	3b01      	subs	r3, #1
 8008c4e:	b29a      	uxth	r2, r3
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	86da      	strh	r2, [r3, #54]	; 0x36
 8008c54:	e011      	b.n	8008c7a <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c56:	f7fc f9bd 	bl	8004fd4 <HAL_GetTick>
 8008c5a:	4602      	mov	r2, r0
 8008c5c:	69bb      	ldr	r3, [r7, #24]
 8008c5e:	1ad3      	subs	r3, r2, r3
 8008c60:	683a      	ldr	r2, [r7, #0]
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d803      	bhi.n	8008c6e <HAL_SPI_Transmit+0x1f4>
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c6c:	d102      	bne.n	8008c74 <HAL_SPI_Transmit+0x1fa>
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d102      	bne.n	8008c7a <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8008c74:	2303      	movs	r3, #3
 8008c76:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008c78:	e026      	b.n	8008cc8 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c7e:	b29b      	uxth	r3, r3
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d1cd      	bne.n	8008c20 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008c84:	69ba      	ldr	r2, [r7, #24]
 8008c86:	6839      	ldr	r1, [r7, #0]
 8008c88:	68f8      	ldr	r0, [r7, #12]
 8008c8a:	f000 fb91 	bl	80093b0 <SPI_EndRxTxTransaction>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d002      	beq.n	8008c9a <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2220      	movs	r2, #32
 8008c98:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	689b      	ldr	r3, [r3, #8]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d10a      	bne.n	8008cb8 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	613b      	str	r3, [r7, #16]
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	68db      	ldr	r3, [r3, #12]
 8008cac:	613b      	str	r3, [r7, #16]
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	689b      	ldr	r3, [r3, #8]
 8008cb4:	613b      	str	r3, [r7, #16]
 8008cb6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d002      	beq.n	8008cc6 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	77fb      	strb	r3, [r7, #31]
 8008cc4:	e000      	b.n	8008cc8 <HAL_SPI_Transmit+0x24e>
  }

error:
 8008cc6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	2201      	movs	r2, #1
 8008ccc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008cd8:	7ffb      	ldrb	r3, [r7, #31]
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3720      	adds	r7, #32
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}

08008ce2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ce2:	b580      	push	{r7, lr}
 8008ce4:	b088      	sub	sp, #32
 8008ce6:	af02      	add	r7, sp, #8
 8008ce8:	60f8      	str	r0, [r7, #12]
 8008cea:	60b9      	str	r1, [r7, #8]
 8008cec:	603b      	str	r3, [r7, #0]
 8008cee:	4613      	mov	r3, r2
 8008cf0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	685b      	ldr	r3, [r3, #4]
 8008cfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008cfe:	d112      	bne.n	8008d26 <HAL_SPI_Receive+0x44>
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	689b      	ldr	r3, [r3, #8]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d10e      	bne.n	8008d26 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	2204      	movs	r2, #4
 8008d0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008d10:	88fa      	ldrh	r2, [r7, #6]
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	9300      	str	r3, [sp, #0]
 8008d16:	4613      	mov	r3, r2
 8008d18:	68ba      	ldr	r2, [r7, #8]
 8008d1a:	68b9      	ldr	r1, [r7, #8]
 8008d1c:	68f8      	ldr	r0, [r7, #12]
 8008d1e:	f000 f8e9 	bl	8008ef4 <HAL_SPI_TransmitReceive>
 8008d22:	4603      	mov	r3, r0
 8008d24:	e0e2      	b.n	8008eec <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d101      	bne.n	8008d34 <HAL_SPI_Receive+0x52>
 8008d30:	2302      	movs	r3, #2
 8008d32:	e0db      	b.n	8008eec <HAL_SPI_Receive+0x20a>
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2201      	movs	r2, #1
 8008d38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008d3c:	f7fc f94a 	bl	8004fd4 <HAL_GetTick>
 8008d40:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008d48:	b2db      	uxtb	r3, r3
 8008d4a:	2b01      	cmp	r3, #1
 8008d4c:	d002      	beq.n	8008d54 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008d4e:	2302      	movs	r3, #2
 8008d50:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008d52:	e0c2      	b.n	8008eda <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d002      	beq.n	8008d60 <HAL_SPI_Receive+0x7e>
 8008d5a:	88fb      	ldrh	r3, [r7, #6]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d102      	bne.n	8008d66 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008d60:	2301      	movs	r3, #1
 8008d62:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008d64:	e0b9      	b.n	8008eda <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	2204      	movs	r2, #4
 8008d6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	2200      	movs	r2, #0
 8008d72:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	68ba      	ldr	r2, [r7, #8]
 8008d78:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	88fa      	ldrh	r2, [r7, #6]
 8008d7e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	88fa      	ldrh	r2, [r7, #6]
 8008d84:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2200      	movs	r2, #0
 8008d96:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	2200      	movs	r2, #0
 8008da2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	689b      	ldr	r3, [r3, #8]
 8008da8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008dac:	d107      	bne.n	8008dbe <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	681a      	ldr	r2, [r3, #0]
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008dbc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dc8:	2b40      	cmp	r3, #64	; 0x40
 8008dca:	d007      	beq.n	8008ddc <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	681a      	ldr	r2, [r3, #0]
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008dda:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	68db      	ldr	r3, [r3, #12]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d162      	bne.n	8008eaa <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008de4:	e02e      	b.n	8008e44 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	689b      	ldr	r3, [r3, #8]
 8008dec:	f003 0301 	and.w	r3, r3, #1
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	d115      	bne.n	8008e20 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f103 020c 	add.w	r2, r3, #12
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e00:	7812      	ldrb	r2, [r2, #0]
 8008e02:	b2d2      	uxtb	r2, r2
 8008e04:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e0a:	1c5a      	adds	r2, r3, #1
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e14:	b29b      	uxth	r3, r3
 8008e16:	3b01      	subs	r3, #1
 8008e18:	b29a      	uxth	r2, r3
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008e1e:	e011      	b.n	8008e44 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008e20:	f7fc f8d8 	bl	8004fd4 <HAL_GetTick>
 8008e24:	4602      	mov	r2, r0
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	1ad3      	subs	r3, r2, r3
 8008e2a:	683a      	ldr	r2, [r7, #0]
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	d803      	bhi.n	8008e38 <HAL_SPI_Receive+0x156>
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e36:	d102      	bne.n	8008e3e <HAL_SPI_Receive+0x15c>
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d102      	bne.n	8008e44 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8008e3e:	2303      	movs	r3, #3
 8008e40:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008e42:	e04a      	b.n	8008eda <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e48:	b29b      	uxth	r3, r3
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d1cb      	bne.n	8008de6 <HAL_SPI_Receive+0x104>
 8008e4e:	e031      	b.n	8008eb4 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	689b      	ldr	r3, [r3, #8]
 8008e56:	f003 0301 	and.w	r3, r3, #1
 8008e5a:	2b01      	cmp	r3, #1
 8008e5c:	d113      	bne.n	8008e86 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	68da      	ldr	r2, [r3, #12]
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e68:	b292      	uxth	r2, r2
 8008e6a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e70:	1c9a      	adds	r2, r3, #2
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e7a:	b29b      	uxth	r3, r3
 8008e7c:	3b01      	subs	r3, #1
 8008e7e:	b29a      	uxth	r2, r3
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008e84:	e011      	b.n	8008eaa <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008e86:	f7fc f8a5 	bl	8004fd4 <HAL_GetTick>
 8008e8a:	4602      	mov	r2, r0
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	1ad3      	subs	r3, r2, r3
 8008e90:	683a      	ldr	r2, [r7, #0]
 8008e92:	429a      	cmp	r2, r3
 8008e94:	d803      	bhi.n	8008e9e <HAL_SPI_Receive+0x1bc>
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e9c:	d102      	bne.n	8008ea4 <HAL_SPI_Receive+0x1c2>
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d102      	bne.n	8008eaa <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8008ea4:	2303      	movs	r3, #3
 8008ea6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008ea8:	e017      	b.n	8008eda <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008eae:	b29b      	uxth	r3, r3
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d1cd      	bne.n	8008e50 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008eb4:	693a      	ldr	r2, [r7, #16]
 8008eb6:	6839      	ldr	r1, [r7, #0]
 8008eb8:	68f8      	ldr	r0, [r7, #12]
 8008eba:	f000 fa27 	bl	800930c <SPI_EndRxTransaction>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d002      	beq.n	8008eca <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	2220      	movs	r2, #32
 8008ec8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d002      	beq.n	8008ed8 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	75fb      	strb	r3, [r7, #23]
 8008ed6:	e000      	b.n	8008eda <HAL_SPI_Receive+0x1f8>
  }

error :
 8008ed8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2201      	movs	r2, #1
 8008ede:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008eea:	7dfb      	ldrb	r3, [r7, #23]
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3718      	adds	r7, #24
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}

08008ef4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b08c      	sub	sp, #48	; 0x30
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	60f8      	str	r0, [r7, #12]
 8008efc:	60b9      	str	r1, [r7, #8]
 8008efe:	607a      	str	r2, [r7, #4]
 8008f00:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008f02:	2301      	movs	r3, #1
 8008f04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008f06:	2300      	movs	r3, #0
 8008f08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008f12:	2b01      	cmp	r3, #1
 8008f14:	d101      	bne.n	8008f1a <HAL_SPI_TransmitReceive+0x26>
 8008f16:	2302      	movs	r3, #2
 8008f18:	e18a      	b.n	8009230 <HAL_SPI_TransmitReceive+0x33c>
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	2201      	movs	r2, #1
 8008f1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008f22:	f7fc f857 	bl	8004fd4 <HAL_GetTick>
 8008f26:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008f2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008f38:	887b      	ldrh	r3, [r7, #2]
 8008f3a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008f3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	d00f      	beq.n	8008f64 <HAL_SPI_TransmitReceive+0x70>
 8008f44:	69fb      	ldr	r3, [r7, #28]
 8008f46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f4a:	d107      	bne.n	8008f5c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	689b      	ldr	r3, [r3, #8]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d103      	bne.n	8008f5c <HAL_SPI_TransmitReceive+0x68>
 8008f54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008f58:	2b04      	cmp	r3, #4
 8008f5a:	d003      	beq.n	8008f64 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008f5c:	2302      	movs	r3, #2
 8008f5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008f62:	e15b      	b.n	800921c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d005      	beq.n	8008f76 <HAL_SPI_TransmitReceive+0x82>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d002      	beq.n	8008f76 <HAL_SPI_TransmitReceive+0x82>
 8008f70:	887b      	ldrh	r3, [r7, #2]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d103      	bne.n	8008f7e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008f76:	2301      	movs	r3, #1
 8008f78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008f7c:	e14e      	b.n	800921c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008f84:	b2db      	uxtb	r3, r3
 8008f86:	2b04      	cmp	r3, #4
 8008f88:	d003      	beq.n	8008f92 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	2205      	movs	r2, #5
 8008f8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2200      	movs	r2, #0
 8008f96:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	687a      	ldr	r2, [r7, #4]
 8008f9c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	887a      	ldrh	r2, [r7, #2]
 8008fa2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	887a      	ldrh	r2, [r7, #2]
 8008fa8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	68ba      	ldr	r2, [r7, #8]
 8008fae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	887a      	ldrh	r2, [r7, #2]
 8008fb4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	887a      	ldrh	r2, [r7, #2]
 8008fba:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fd2:	2b40      	cmp	r3, #64	; 0x40
 8008fd4:	d007      	beq.n	8008fe6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	681a      	ldr	r2, [r3, #0]
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008fe4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	68db      	ldr	r3, [r3, #12]
 8008fea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008fee:	d178      	bne.n	80090e2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d002      	beq.n	8008ffe <HAL_SPI_TransmitReceive+0x10a>
 8008ff8:	8b7b      	ldrh	r3, [r7, #26]
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d166      	bne.n	80090cc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009002:	881a      	ldrh	r2, [r3, #0]
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800900e:	1c9a      	adds	r2, r3, #2
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009018:	b29b      	uxth	r3, r3
 800901a:	3b01      	subs	r3, #1
 800901c:	b29a      	uxth	r2, r3
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009022:	e053      	b.n	80090cc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	689b      	ldr	r3, [r3, #8]
 800902a:	f003 0302 	and.w	r3, r3, #2
 800902e:	2b02      	cmp	r3, #2
 8009030:	d11b      	bne.n	800906a <HAL_SPI_TransmitReceive+0x176>
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009036:	b29b      	uxth	r3, r3
 8009038:	2b00      	cmp	r3, #0
 800903a:	d016      	beq.n	800906a <HAL_SPI_TransmitReceive+0x176>
 800903c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800903e:	2b01      	cmp	r3, #1
 8009040:	d113      	bne.n	800906a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009046:	881a      	ldrh	r2, [r3, #0]
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009052:	1c9a      	adds	r2, r3, #2
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800905c:	b29b      	uxth	r3, r3
 800905e:	3b01      	subs	r3, #1
 8009060:	b29a      	uxth	r2, r3
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009066:	2300      	movs	r3, #0
 8009068:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	689b      	ldr	r3, [r3, #8]
 8009070:	f003 0301 	and.w	r3, r3, #1
 8009074:	2b01      	cmp	r3, #1
 8009076:	d119      	bne.n	80090ac <HAL_SPI_TransmitReceive+0x1b8>
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800907c:	b29b      	uxth	r3, r3
 800907e:	2b00      	cmp	r3, #0
 8009080:	d014      	beq.n	80090ac <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	68da      	ldr	r2, [r3, #12]
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800908c:	b292      	uxth	r2, r2
 800908e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009094:	1c9a      	adds	r2, r3, #2
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800909e:	b29b      	uxth	r3, r3
 80090a0:	3b01      	subs	r3, #1
 80090a2:	b29a      	uxth	r2, r3
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80090a8:	2301      	movs	r3, #1
 80090aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80090ac:	f7fb ff92 	bl	8004fd4 <HAL_GetTick>
 80090b0:	4602      	mov	r2, r0
 80090b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b4:	1ad3      	subs	r3, r2, r3
 80090b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80090b8:	429a      	cmp	r2, r3
 80090ba:	d807      	bhi.n	80090cc <HAL_SPI_TransmitReceive+0x1d8>
 80090bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090c2:	d003      	beq.n	80090cc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80090c4:	2303      	movs	r3, #3
 80090c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80090ca:	e0a7      	b.n	800921c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80090d0:	b29b      	uxth	r3, r3
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d1a6      	bne.n	8009024 <HAL_SPI_TransmitReceive+0x130>
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090da:	b29b      	uxth	r3, r3
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d1a1      	bne.n	8009024 <HAL_SPI_TransmitReceive+0x130>
 80090e0:	e07c      	b.n	80091dc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d002      	beq.n	80090f0 <HAL_SPI_TransmitReceive+0x1fc>
 80090ea:	8b7b      	ldrh	r3, [r7, #26]
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d16b      	bne.n	80091c8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	330c      	adds	r3, #12
 80090fa:	7812      	ldrb	r2, [r2, #0]
 80090fc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009102:	1c5a      	adds	r2, r3, #1
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800910c:	b29b      	uxth	r3, r3
 800910e:	3b01      	subs	r3, #1
 8009110:	b29a      	uxth	r2, r3
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009116:	e057      	b.n	80091c8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	689b      	ldr	r3, [r3, #8]
 800911e:	f003 0302 	and.w	r3, r3, #2
 8009122:	2b02      	cmp	r3, #2
 8009124:	d11c      	bne.n	8009160 <HAL_SPI_TransmitReceive+0x26c>
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800912a:	b29b      	uxth	r3, r3
 800912c:	2b00      	cmp	r3, #0
 800912e:	d017      	beq.n	8009160 <HAL_SPI_TransmitReceive+0x26c>
 8009130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009132:	2b01      	cmp	r3, #1
 8009134:	d114      	bne.n	8009160 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	330c      	adds	r3, #12
 8009140:	7812      	ldrb	r2, [r2, #0]
 8009142:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009148:	1c5a      	adds	r2, r3, #1
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009152:	b29b      	uxth	r3, r3
 8009154:	3b01      	subs	r3, #1
 8009156:	b29a      	uxth	r2, r3
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800915c:	2300      	movs	r3, #0
 800915e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	689b      	ldr	r3, [r3, #8]
 8009166:	f003 0301 	and.w	r3, r3, #1
 800916a:	2b01      	cmp	r3, #1
 800916c:	d119      	bne.n	80091a2 <HAL_SPI_TransmitReceive+0x2ae>
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009172:	b29b      	uxth	r3, r3
 8009174:	2b00      	cmp	r3, #0
 8009176:	d014      	beq.n	80091a2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	68da      	ldr	r2, [r3, #12]
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009182:	b2d2      	uxtb	r2, r2
 8009184:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800918a:	1c5a      	adds	r2, r3, #1
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009194:	b29b      	uxth	r3, r3
 8009196:	3b01      	subs	r3, #1
 8009198:	b29a      	uxth	r2, r3
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800919e:	2301      	movs	r3, #1
 80091a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80091a2:	f7fb ff17 	bl	8004fd4 <HAL_GetTick>
 80091a6:	4602      	mov	r2, r0
 80091a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091aa:	1ad3      	subs	r3, r2, r3
 80091ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80091ae:	429a      	cmp	r2, r3
 80091b0:	d803      	bhi.n	80091ba <HAL_SPI_TransmitReceive+0x2c6>
 80091b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091b8:	d102      	bne.n	80091c0 <HAL_SPI_TransmitReceive+0x2cc>
 80091ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d103      	bne.n	80091c8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80091c0:	2303      	movs	r3, #3
 80091c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80091c6:	e029      	b.n	800921c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80091cc:	b29b      	uxth	r3, r3
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d1a2      	bne.n	8009118 <HAL_SPI_TransmitReceive+0x224>
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091d6:	b29b      	uxth	r3, r3
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d19d      	bne.n	8009118 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80091dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80091e0:	68f8      	ldr	r0, [r7, #12]
 80091e2:	f000 f8e5 	bl	80093b0 <SPI_EndRxTxTransaction>
 80091e6:	4603      	mov	r3, r0
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d006      	beq.n	80091fa <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80091ec:	2301      	movs	r3, #1
 80091ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	2220      	movs	r2, #32
 80091f6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80091f8:	e010      	b.n	800921c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	689b      	ldr	r3, [r3, #8]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d10b      	bne.n	800921a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009202:	2300      	movs	r3, #0
 8009204:	617b      	str	r3, [r7, #20]
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	68db      	ldr	r3, [r3, #12]
 800920c:	617b      	str	r3, [r7, #20]
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	689b      	ldr	r3, [r3, #8]
 8009214:	617b      	str	r3, [r7, #20]
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	e000      	b.n	800921c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800921a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2201      	movs	r2, #1
 8009220:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2200      	movs	r2, #0
 8009228:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800922c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009230:	4618      	mov	r0, r3
 8009232:	3730      	adds	r7, #48	; 0x30
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}

08009238 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b084      	sub	sp, #16
 800923c:	af00      	add	r7, sp, #0
 800923e:	60f8      	str	r0, [r7, #12]
 8009240:	60b9      	str	r1, [r7, #8]
 8009242:	603b      	str	r3, [r7, #0]
 8009244:	4613      	mov	r3, r2
 8009246:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009248:	e04c      	b.n	80092e4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009250:	d048      	beq.n	80092e4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8009252:	f7fb febf 	bl	8004fd4 <HAL_GetTick>
 8009256:	4602      	mov	r2, r0
 8009258:	69bb      	ldr	r3, [r7, #24]
 800925a:	1ad3      	subs	r3, r2, r3
 800925c:	683a      	ldr	r2, [r7, #0]
 800925e:	429a      	cmp	r2, r3
 8009260:	d902      	bls.n	8009268 <SPI_WaitFlagStateUntilTimeout+0x30>
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d13d      	bne.n	80092e4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	685a      	ldr	r2, [r3, #4]
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009276:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009280:	d111      	bne.n	80092a6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	689b      	ldr	r3, [r3, #8]
 8009286:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800928a:	d004      	beq.n	8009296 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	689b      	ldr	r3, [r3, #8]
 8009290:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009294:	d107      	bne.n	80092a6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	681a      	ldr	r2, [r3, #0]
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80092a4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092ae:	d10f      	bne.n	80092d0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80092be:	601a      	str	r2, [r3, #0]
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	681a      	ldr	r2, [r3, #0]
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80092ce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	2201      	movs	r2, #1
 80092d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	2200      	movs	r2, #0
 80092dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80092e0:	2303      	movs	r3, #3
 80092e2:	e00f      	b.n	8009304 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	689a      	ldr	r2, [r3, #8]
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	4013      	ands	r3, r2
 80092ee:	68ba      	ldr	r2, [r7, #8]
 80092f0:	429a      	cmp	r2, r3
 80092f2:	bf0c      	ite	eq
 80092f4:	2301      	moveq	r3, #1
 80092f6:	2300      	movne	r3, #0
 80092f8:	b2db      	uxtb	r3, r3
 80092fa:	461a      	mov	r2, r3
 80092fc:	79fb      	ldrb	r3, [r7, #7]
 80092fe:	429a      	cmp	r2, r3
 8009300:	d1a3      	bne.n	800924a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8009302:	2300      	movs	r3, #0
}
 8009304:	4618      	mov	r0, r3
 8009306:	3710      	adds	r7, #16
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}

0800930c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b086      	sub	sp, #24
 8009310:	af02      	add	r7, sp, #8
 8009312:	60f8      	str	r0, [r7, #12]
 8009314:	60b9      	str	r1, [r7, #8]
 8009316:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	685b      	ldr	r3, [r3, #4]
 800931c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009320:	d111      	bne.n	8009346 <SPI_EndRxTransaction+0x3a>
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	689b      	ldr	r3, [r3, #8]
 8009326:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800932a:	d004      	beq.n	8009336 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	689b      	ldr	r3, [r3, #8]
 8009330:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009334:	d107      	bne.n	8009346 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	681a      	ldr	r2, [r3, #0]
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009344:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	685b      	ldr	r3, [r3, #4]
 800934a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800934e:	d117      	bne.n	8009380 <SPI_EndRxTransaction+0x74>
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	689b      	ldr	r3, [r3, #8]
 8009354:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009358:	d112      	bne.n	8009380 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	9300      	str	r3, [sp, #0]
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	2200      	movs	r2, #0
 8009362:	2101      	movs	r1, #1
 8009364:	68f8      	ldr	r0, [r7, #12]
 8009366:	f7ff ff67 	bl	8009238 <SPI_WaitFlagStateUntilTimeout>
 800936a:	4603      	mov	r3, r0
 800936c:	2b00      	cmp	r3, #0
 800936e:	d01a      	beq.n	80093a6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009374:	f043 0220 	orr.w	r2, r3, #32
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800937c:	2303      	movs	r3, #3
 800937e:	e013      	b.n	80093a8 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	9300      	str	r3, [sp, #0]
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	2200      	movs	r2, #0
 8009388:	2180      	movs	r1, #128	; 0x80
 800938a:	68f8      	ldr	r0, [r7, #12]
 800938c:	f7ff ff54 	bl	8009238 <SPI_WaitFlagStateUntilTimeout>
 8009390:	4603      	mov	r3, r0
 8009392:	2b00      	cmp	r3, #0
 8009394:	d007      	beq.n	80093a6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800939a:	f043 0220 	orr.w	r2, r3, #32
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80093a2:	2303      	movs	r3, #3
 80093a4:	e000      	b.n	80093a8 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80093a6:	2300      	movs	r3, #0
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	3710      	adds	r7, #16
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}

080093b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b086      	sub	sp, #24
 80093b4:	af02      	add	r7, sp, #8
 80093b6:	60f8      	str	r0, [r7, #12]
 80093b8:	60b9      	str	r1, [r7, #8]
 80093ba:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	9300      	str	r3, [sp, #0]
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	2200      	movs	r2, #0
 80093c4:	2180      	movs	r1, #128	; 0x80
 80093c6:	68f8      	ldr	r0, [r7, #12]
 80093c8:	f7ff ff36 	bl	8009238 <SPI_WaitFlagStateUntilTimeout>
 80093cc:	4603      	mov	r3, r0
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d007      	beq.n	80093e2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093d6:	f043 0220 	orr.w	r2, r3, #32
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80093de:	2303      	movs	r3, #3
 80093e0:	e000      	b.n	80093e4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80093e2:	2300      	movs	r3, #0
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	3710      	adds	r7, #16
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}

080093ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b082      	sub	sp, #8
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d101      	bne.n	80093fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80093fa:	2301      	movs	r3, #1
 80093fc:	e01d      	b.n	800943a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009404:	b2db      	uxtb	r3, r3
 8009406:	2b00      	cmp	r3, #0
 8009408:	d106      	bne.n	8009418 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2200      	movs	r2, #0
 800940e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f7fb fbf8 	bl	8004c08 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2202      	movs	r2, #2
 800941c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681a      	ldr	r2, [r3, #0]
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	3304      	adds	r3, #4
 8009428:	4619      	mov	r1, r3
 800942a:	4610      	mov	r0, r2
 800942c:	f000 f8d0 	bl	80095d0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2201      	movs	r2, #1
 8009434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009438:	2300      	movs	r3, #0
}
 800943a:	4618      	mov	r0, r3
 800943c:	3708      	adds	r7, #8
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}
	...

08009444 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b084      	sub	sp, #16
 8009448:	af00      	add	r7, sp, #0
 800944a:	60f8      	str	r0, [r7, #12]
 800944c:	60b9      	str	r1, [r7, #8]
 800944e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009456:	2b01      	cmp	r3, #1
 8009458:	d101      	bne.n	800945e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800945a:	2302      	movs	r3, #2
 800945c:	e0b4      	b.n	80095c8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	2201      	movs	r2, #1
 8009462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	2202      	movs	r2, #2
 800946a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2b0c      	cmp	r3, #12
 8009472:	f200 809f 	bhi.w	80095b4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8009476:	a201      	add	r2, pc, #4	; (adr r2, 800947c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800947c:	080094b1 	.word	0x080094b1
 8009480:	080095b5 	.word	0x080095b5
 8009484:	080095b5 	.word	0x080095b5
 8009488:	080095b5 	.word	0x080095b5
 800948c:	080094f1 	.word	0x080094f1
 8009490:	080095b5 	.word	0x080095b5
 8009494:	080095b5 	.word	0x080095b5
 8009498:	080095b5 	.word	0x080095b5
 800949c:	08009533 	.word	0x08009533
 80094a0:	080095b5 	.word	0x080095b5
 80094a4:	080095b5 	.word	0x080095b5
 80094a8:	080095b5 	.word	0x080095b5
 80094ac:	08009573 	.word	0x08009573
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	68b9      	ldr	r1, [r7, #8]
 80094b6:	4618      	mov	r0, r3
 80094b8:	f000 f8ec 	bl	8009694 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	699a      	ldr	r2, [r3, #24]
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f042 0208 	orr.w	r2, r2, #8
 80094ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	699a      	ldr	r2, [r3, #24]
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f022 0204 	bic.w	r2, r2, #4
 80094da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	6999      	ldr	r1, [r3, #24]
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	691a      	ldr	r2, [r3, #16]
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	430a      	orrs	r2, r1
 80094ec:	619a      	str	r2, [r3, #24]
      break;
 80094ee:	e062      	b.n	80095b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	68b9      	ldr	r1, [r7, #8]
 80094f6:	4618      	mov	r0, r3
 80094f8:	f000 f932 	bl	8009760 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	699a      	ldr	r2, [r3, #24]
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800950a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	699a      	ldr	r2, [r3, #24]
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800951a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	6999      	ldr	r1, [r3, #24]
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	691b      	ldr	r3, [r3, #16]
 8009526:	021a      	lsls	r2, r3, #8
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	430a      	orrs	r2, r1
 800952e:	619a      	str	r2, [r3, #24]
      break;
 8009530:	e041      	b.n	80095b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	68b9      	ldr	r1, [r7, #8]
 8009538:	4618      	mov	r0, r3
 800953a:	f000 f97b 	bl	8009834 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	69da      	ldr	r2, [r3, #28]
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f042 0208 	orr.w	r2, r2, #8
 800954c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	69da      	ldr	r2, [r3, #28]
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f022 0204 	bic.w	r2, r2, #4
 800955c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	69d9      	ldr	r1, [r3, #28]
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	691a      	ldr	r2, [r3, #16]
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	430a      	orrs	r2, r1
 800956e:	61da      	str	r2, [r3, #28]
      break;
 8009570:	e021      	b.n	80095b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	68b9      	ldr	r1, [r7, #8]
 8009578:	4618      	mov	r0, r3
 800957a:	f000 f9c5 	bl	8009908 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	69da      	ldr	r2, [r3, #28]
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800958c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	69da      	ldr	r2, [r3, #28]
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800959c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	69d9      	ldr	r1, [r3, #28]
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	691b      	ldr	r3, [r3, #16]
 80095a8:	021a      	lsls	r2, r3, #8
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	430a      	orrs	r2, r1
 80095b0:	61da      	str	r2, [r3, #28]
      break;
 80095b2:	e000      	b.n	80095b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80095b4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	2201      	movs	r2, #1
 80095ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	2200      	movs	r2, #0
 80095c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80095c6:	2300      	movs	r3, #0
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3710      	adds	r7, #16
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}

080095d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b085      	sub	sp, #20
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	4a29      	ldr	r2, [pc, #164]	; (8009688 <TIM_Base_SetConfig+0xb8>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d00b      	beq.n	8009600 <TIM_Base_SetConfig+0x30>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095ee:	d007      	beq.n	8009600 <TIM_Base_SetConfig+0x30>
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	4a26      	ldr	r2, [pc, #152]	; (800968c <TIM_Base_SetConfig+0xbc>)
 80095f4:	4293      	cmp	r3, r2
 80095f6:	d003      	beq.n	8009600 <TIM_Base_SetConfig+0x30>
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	4a25      	ldr	r2, [pc, #148]	; (8009690 <TIM_Base_SetConfig+0xc0>)
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d108      	bne.n	8009612 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009606:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	68fa      	ldr	r2, [r7, #12]
 800960e:	4313      	orrs	r3, r2
 8009610:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	4a1c      	ldr	r2, [pc, #112]	; (8009688 <TIM_Base_SetConfig+0xb8>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d00b      	beq.n	8009632 <TIM_Base_SetConfig+0x62>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009620:	d007      	beq.n	8009632 <TIM_Base_SetConfig+0x62>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	4a19      	ldr	r2, [pc, #100]	; (800968c <TIM_Base_SetConfig+0xbc>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d003      	beq.n	8009632 <TIM_Base_SetConfig+0x62>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	4a18      	ldr	r2, [pc, #96]	; (8009690 <TIM_Base_SetConfig+0xc0>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d108      	bne.n	8009644 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009638:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	68db      	ldr	r3, [r3, #12]
 800963e:	68fa      	ldr	r2, [r7, #12]
 8009640:	4313      	orrs	r3, r2
 8009642:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	695b      	ldr	r3, [r3, #20]
 800964e:	4313      	orrs	r3, r2
 8009650:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	68fa      	ldr	r2, [r7, #12]
 8009656:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	689a      	ldr	r2, [r3, #8]
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	681a      	ldr	r2, [r3, #0]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	4a07      	ldr	r2, [pc, #28]	; (8009688 <TIM_Base_SetConfig+0xb8>)
 800966c:	4293      	cmp	r3, r2
 800966e:	d103      	bne.n	8009678 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	691a      	ldr	r2, [r3, #16]
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2201      	movs	r2, #1
 800967c:	615a      	str	r2, [r3, #20]
}
 800967e:	bf00      	nop
 8009680:	3714      	adds	r7, #20
 8009682:	46bd      	mov	sp, r7
 8009684:	bc80      	pop	{r7}
 8009686:	4770      	bx	lr
 8009688:	40012c00 	.word	0x40012c00
 800968c:	40000400 	.word	0x40000400
 8009690:	40000800 	.word	0x40000800

08009694 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009694:	b480      	push	{r7}
 8009696:	b087      	sub	sp, #28
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
 800969c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6a1b      	ldr	r3, [r3, #32]
 80096a2:	f023 0201 	bic.w	r2, r3, #1
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6a1b      	ldr	r3, [r3, #32]
 80096ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	685b      	ldr	r3, [r3, #4]
 80096b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	699b      	ldr	r3, [r3, #24]
 80096ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	f023 0303 	bic.w	r3, r3, #3
 80096ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	68fa      	ldr	r2, [r7, #12]
 80096d2:	4313      	orrs	r3, r2
 80096d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	f023 0302 	bic.w	r3, r3, #2
 80096dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	689b      	ldr	r3, [r3, #8]
 80096e2:	697a      	ldr	r2, [r7, #20]
 80096e4:	4313      	orrs	r3, r2
 80096e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	4a1c      	ldr	r2, [pc, #112]	; (800975c <TIM_OC1_SetConfig+0xc8>)
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d10c      	bne.n	800970a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80096f0:	697b      	ldr	r3, [r7, #20]
 80096f2:	f023 0308 	bic.w	r3, r3, #8
 80096f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	68db      	ldr	r3, [r3, #12]
 80096fc:	697a      	ldr	r2, [r7, #20]
 80096fe:	4313      	orrs	r3, r2
 8009700:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	f023 0304 	bic.w	r3, r3, #4
 8009708:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	4a13      	ldr	r2, [pc, #76]	; (800975c <TIM_OC1_SetConfig+0xc8>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d111      	bne.n	8009736 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009718:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800971a:	693b      	ldr	r3, [r7, #16]
 800971c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009720:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	695b      	ldr	r3, [r3, #20]
 8009726:	693a      	ldr	r2, [r7, #16]
 8009728:	4313      	orrs	r3, r2
 800972a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	699b      	ldr	r3, [r3, #24]
 8009730:	693a      	ldr	r2, [r7, #16]
 8009732:	4313      	orrs	r3, r2
 8009734:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	693a      	ldr	r2, [r7, #16]
 800973a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	68fa      	ldr	r2, [r7, #12]
 8009740:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	685a      	ldr	r2, [r3, #4]
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	697a      	ldr	r2, [r7, #20]
 800974e:	621a      	str	r2, [r3, #32]
}
 8009750:	bf00      	nop
 8009752:	371c      	adds	r7, #28
 8009754:	46bd      	mov	sp, r7
 8009756:	bc80      	pop	{r7}
 8009758:	4770      	bx	lr
 800975a:	bf00      	nop
 800975c:	40012c00 	.word	0x40012c00

08009760 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009760:	b480      	push	{r7}
 8009762:	b087      	sub	sp, #28
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
 8009768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6a1b      	ldr	r3, [r3, #32]
 800976e:	f023 0210 	bic.w	r2, r3, #16
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6a1b      	ldr	r3, [r3, #32]
 800977a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	685b      	ldr	r3, [r3, #4]
 8009780:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	699b      	ldr	r3, [r3, #24]
 8009786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800978e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009796:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	021b      	lsls	r3, r3, #8
 800979e:	68fa      	ldr	r2, [r7, #12]
 80097a0:	4313      	orrs	r3, r2
 80097a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	f023 0320 	bic.w	r3, r3, #32
 80097aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	689b      	ldr	r3, [r3, #8]
 80097b0:	011b      	lsls	r3, r3, #4
 80097b2:	697a      	ldr	r2, [r7, #20]
 80097b4:	4313      	orrs	r3, r2
 80097b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	4a1d      	ldr	r2, [pc, #116]	; (8009830 <TIM_OC2_SetConfig+0xd0>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	d10d      	bne.n	80097dc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80097c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	68db      	ldr	r3, [r3, #12]
 80097cc:	011b      	lsls	r3, r3, #4
 80097ce:	697a      	ldr	r2, [r7, #20]
 80097d0:	4313      	orrs	r3, r2
 80097d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80097d4:	697b      	ldr	r3, [r7, #20]
 80097d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	4a14      	ldr	r2, [pc, #80]	; (8009830 <TIM_OC2_SetConfig+0xd0>)
 80097e0:	4293      	cmp	r3, r2
 80097e2:	d113      	bne.n	800980c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80097e4:	693b      	ldr	r3, [r7, #16]
 80097e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80097ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80097ec:	693b      	ldr	r3, [r7, #16]
 80097ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80097f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	695b      	ldr	r3, [r3, #20]
 80097f8:	009b      	lsls	r3, r3, #2
 80097fa:	693a      	ldr	r2, [r7, #16]
 80097fc:	4313      	orrs	r3, r2
 80097fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	699b      	ldr	r3, [r3, #24]
 8009804:	009b      	lsls	r3, r3, #2
 8009806:	693a      	ldr	r2, [r7, #16]
 8009808:	4313      	orrs	r3, r2
 800980a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	693a      	ldr	r2, [r7, #16]
 8009810:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	68fa      	ldr	r2, [r7, #12]
 8009816:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	685a      	ldr	r2, [r3, #4]
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	697a      	ldr	r2, [r7, #20]
 8009824:	621a      	str	r2, [r3, #32]
}
 8009826:	bf00      	nop
 8009828:	371c      	adds	r7, #28
 800982a:	46bd      	mov	sp, r7
 800982c:	bc80      	pop	{r7}
 800982e:	4770      	bx	lr
 8009830:	40012c00 	.word	0x40012c00

08009834 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009834:	b480      	push	{r7}
 8009836:	b087      	sub	sp, #28
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6a1b      	ldr	r3, [r3, #32]
 8009842:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6a1b      	ldr	r3, [r3, #32]
 800984e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	685b      	ldr	r3, [r3, #4]
 8009854:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	69db      	ldr	r3, [r3, #28]
 800985a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	f023 0303 	bic.w	r3, r3, #3
 800986a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	68fa      	ldr	r2, [r7, #12]
 8009872:	4313      	orrs	r3, r2
 8009874:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800987c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	689b      	ldr	r3, [r3, #8]
 8009882:	021b      	lsls	r3, r3, #8
 8009884:	697a      	ldr	r2, [r7, #20]
 8009886:	4313      	orrs	r3, r2
 8009888:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	4a1d      	ldr	r2, [pc, #116]	; (8009904 <TIM_OC3_SetConfig+0xd0>)
 800988e:	4293      	cmp	r3, r2
 8009890:	d10d      	bne.n	80098ae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009898:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	68db      	ldr	r3, [r3, #12]
 800989e:	021b      	lsls	r3, r3, #8
 80098a0:	697a      	ldr	r2, [r7, #20]
 80098a2:	4313      	orrs	r3, r2
 80098a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80098ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	4a14      	ldr	r2, [pc, #80]	; (8009904 <TIM_OC3_SetConfig+0xd0>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d113      	bne.n	80098de <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80098b6:	693b      	ldr	r3, [r7, #16]
 80098b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80098bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80098be:	693b      	ldr	r3, [r7, #16]
 80098c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80098c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	695b      	ldr	r3, [r3, #20]
 80098ca:	011b      	lsls	r3, r3, #4
 80098cc:	693a      	ldr	r2, [r7, #16]
 80098ce:	4313      	orrs	r3, r2
 80098d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	699b      	ldr	r3, [r3, #24]
 80098d6:	011b      	lsls	r3, r3, #4
 80098d8:	693a      	ldr	r2, [r7, #16]
 80098da:	4313      	orrs	r3, r2
 80098dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	693a      	ldr	r2, [r7, #16]
 80098e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	68fa      	ldr	r2, [r7, #12]
 80098e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	685a      	ldr	r2, [r3, #4]
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	697a      	ldr	r2, [r7, #20]
 80098f6:	621a      	str	r2, [r3, #32]
}
 80098f8:	bf00      	nop
 80098fa:	371c      	adds	r7, #28
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bc80      	pop	{r7}
 8009900:	4770      	bx	lr
 8009902:	bf00      	nop
 8009904:	40012c00 	.word	0x40012c00

08009908 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009908:	b480      	push	{r7}
 800990a:	b087      	sub	sp, #28
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
 8009910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6a1b      	ldr	r3, [r3, #32]
 8009916:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6a1b      	ldr	r3, [r3, #32]
 8009922:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	685b      	ldr	r3, [r3, #4]
 8009928:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	69db      	ldr	r3, [r3, #28]
 800992e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800993e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	021b      	lsls	r3, r3, #8
 8009946:	68fa      	ldr	r2, [r7, #12]
 8009948:	4313      	orrs	r3, r2
 800994a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009952:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	689b      	ldr	r3, [r3, #8]
 8009958:	031b      	lsls	r3, r3, #12
 800995a:	693a      	ldr	r2, [r7, #16]
 800995c:	4313      	orrs	r3, r2
 800995e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	4a0f      	ldr	r2, [pc, #60]	; (80099a0 <TIM_OC4_SetConfig+0x98>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d109      	bne.n	800997c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009968:	697b      	ldr	r3, [r7, #20]
 800996a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800996e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	695b      	ldr	r3, [r3, #20]
 8009974:	019b      	lsls	r3, r3, #6
 8009976:	697a      	ldr	r2, [r7, #20]
 8009978:	4313      	orrs	r3, r2
 800997a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	697a      	ldr	r2, [r7, #20]
 8009980:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	68fa      	ldr	r2, [r7, #12]
 8009986:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	685a      	ldr	r2, [r3, #4]
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	693a      	ldr	r2, [r7, #16]
 8009994:	621a      	str	r2, [r3, #32]
}
 8009996:	bf00      	nop
 8009998:	371c      	adds	r7, #28
 800999a:	46bd      	mov	sp, r7
 800999c:	bc80      	pop	{r7}
 800999e:	4770      	bx	lr
 80099a0:	40012c00 	.word	0x40012c00

080099a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80099a4:	b480      	push	{r7}
 80099a6:	b085      	sub	sp, #20
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
 80099ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099b4:	2b01      	cmp	r3, #1
 80099b6:	d101      	bne.n	80099bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80099b8:	2302      	movs	r3, #2
 80099ba:	e032      	b.n	8009a22 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2201      	movs	r2, #1
 80099c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2202      	movs	r2, #2
 80099c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	685b      	ldr	r3, [r3, #4]
 80099d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	689b      	ldr	r3, [r3, #8]
 80099da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	68fa      	ldr	r2, [r7, #12]
 80099ea:	4313      	orrs	r3, r2
 80099ec:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80099f4:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	685b      	ldr	r3, [r3, #4]
 80099fa:	68ba      	ldr	r2, [r7, #8]
 80099fc:	4313      	orrs	r3, r2
 80099fe:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	68fa      	ldr	r2, [r7, #12]
 8009a06:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	68ba      	ldr	r2, [r7, #8]
 8009a0e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2201      	movs	r2, #1
 8009a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009a20:	2300      	movs	r3, #0
}
 8009a22:	4618      	mov	r0, r3
 8009a24:	3714      	adds	r7, #20
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bc80      	pop	{r7}
 8009a2a:	4770      	bx	lr

08009a2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b082      	sub	sp, #8
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d101      	bne.n	8009a3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	e03f      	b.n	8009abe <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009a44:	b2db      	uxtb	r3, r3
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d106      	bne.n	8009a58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f7fb f928 	bl	8004ca8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2224      	movs	r2, #36	; 0x24
 8009a5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	68da      	ldr	r2, [r3, #12]
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009a6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f000 f90b 	bl	8009c8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	691a      	ldr	r2, [r3, #16]
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009a84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	695a      	ldr	r2, [r3, #20]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009a94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	68da      	ldr	r2, [r3, #12]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009aa4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2220      	movs	r2, #32
 8009ab0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2220      	movs	r2, #32
 8009ab8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8009abc:	2300      	movs	r3, #0
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3708      	adds	r7, #8
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}

08009ac6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009ac6:	b580      	push	{r7, lr}
 8009ac8:	b088      	sub	sp, #32
 8009aca:	af02      	add	r7, sp, #8
 8009acc:	60f8      	str	r0, [r7, #12]
 8009ace:	60b9      	str	r1, [r7, #8]
 8009ad0:	603b      	str	r3, [r7, #0]
 8009ad2:	4613      	mov	r3, r2
 8009ad4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009ae0:	b2db      	uxtb	r3, r3
 8009ae2:	2b20      	cmp	r3, #32
 8009ae4:	f040 8083 	bne.w	8009bee <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d002      	beq.n	8009af4 <HAL_UART_Transmit+0x2e>
 8009aee:	88fb      	ldrh	r3, [r7, #6]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d101      	bne.n	8009af8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8009af4:	2301      	movs	r3, #1
 8009af6:	e07b      	b.n	8009bf0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009afe:	2b01      	cmp	r3, #1
 8009b00:	d101      	bne.n	8009b06 <HAL_UART_Transmit+0x40>
 8009b02:	2302      	movs	r3, #2
 8009b04:	e074      	b.n	8009bf0 <HAL_UART_Transmit+0x12a>
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	2201      	movs	r2, #1
 8009b0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	2200      	movs	r2, #0
 8009b12:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	2221      	movs	r2, #33	; 0x21
 8009b18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8009b1c:	f7fb fa5a 	bl	8004fd4 <HAL_GetTick>
 8009b20:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	88fa      	ldrh	r2, [r7, #6]
 8009b26:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	88fa      	ldrh	r2, [r7, #6]
 8009b2c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009b2e:	e042      	b.n	8009bb6 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009b34:	b29b      	uxth	r3, r3
 8009b36:	3b01      	subs	r3, #1
 8009b38:	b29a      	uxth	r2, r3
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	689b      	ldr	r3, [r3, #8]
 8009b42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b46:	d122      	bne.n	8009b8e <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	9300      	str	r3, [sp, #0]
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	2180      	movs	r1, #128	; 0x80
 8009b52:	68f8      	ldr	r0, [r7, #12]
 8009b54:	f000 f850 	bl	8009bf8 <UART_WaitOnFlagUntilTimeout>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d001      	beq.n	8009b62 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8009b5e:	2303      	movs	r3, #3
 8009b60:	e046      	b.n	8009bf0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8009b66:	693b      	ldr	r3, [r7, #16]
 8009b68:	881b      	ldrh	r3, [r3, #0]
 8009b6a:	461a      	mov	r2, r3
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009b74:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	691b      	ldr	r3, [r3, #16]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d103      	bne.n	8009b86 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	3302      	adds	r3, #2
 8009b82:	60bb      	str	r3, [r7, #8]
 8009b84:	e017      	b.n	8009bb6 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	3301      	adds	r3, #1
 8009b8a:	60bb      	str	r3, [r7, #8]
 8009b8c:	e013      	b.n	8009bb6 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	9300      	str	r3, [sp, #0]
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	2200      	movs	r2, #0
 8009b96:	2180      	movs	r1, #128	; 0x80
 8009b98:	68f8      	ldr	r0, [r7, #12]
 8009b9a:	f000 f82d 	bl	8009bf8 <UART_WaitOnFlagUntilTimeout>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d001      	beq.n	8009ba8 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8009ba4:	2303      	movs	r3, #3
 8009ba6:	e023      	b.n	8009bf0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	1c5a      	adds	r2, r3, #1
 8009bac:	60ba      	str	r2, [r7, #8]
 8009bae:	781a      	ldrb	r2, [r3, #0]
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009bba:	b29b      	uxth	r3, r3
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d1b7      	bne.n	8009b30 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	9300      	str	r3, [sp, #0]
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	2140      	movs	r1, #64	; 0x40
 8009bca:	68f8      	ldr	r0, [r7, #12]
 8009bcc:	f000 f814 	bl	8009bf8 <UART_WaitOnFlagUntilTimeout>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d001      	beq.n	8009bda <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8009bd6:	2303      	movs	r3, #3
 8009bd8:	e00a      	b.n	8009bf0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	2220      	movs	r2, #32
 8009bde:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	2200      	movs	r2, #0
 8009be6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8009bea:	2300      	movs	r3, #0
 8009bec:	e000      	b.n	8009bf0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8009bee:	2302      	movs	r3, #2
  }
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	3718      	adds	r7, #24
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}

08009bf8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b084      	sub	sp, #16
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	60f8      	str	r0, [r7, #12]
 8009c00:	60b9      	str	r1, [r7, #8]
 8009c02:	603b      	str	r3, [r7, #0]
 8009c04:	4613      	mov	r3, r2
 8009c06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c08:	e02c      	b.n	8009c64 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c0a:	69bb      	ldr	r3, [r7, #24]
 8009c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c10:	d028      	beq.n	8009c64 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009c12:	69bb      	ldr	r3, [r7, #24]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d007      	beq.n	8009c28 <UART_WaitOnFlagUntilTimeout+0x30>
 8009c18:	f7fb f9dc 	bl	8004fd4 <HAL_GetTick>
 8009c1c:	4602      	mov	r2, r0
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	1ad3      	subs	r3, r2, r3
 8009c22:	69ba      	ldr	r2, [r7, #24]
 8009c24:	429a      	cmp	r2, r3
 8009c26:	d21d      	bcs.n	8009c64 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	68da      	ldr	r2, [r3, #12]
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009c36:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	695a      	ldr	r2, [r3, #20]
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f022 0201 	bic.w	r2, r2, #1
 8009c46:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	2220      	movs	r2, #32
 8009c4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	2220      	movs	r2, #32
 8009c54:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8009c60:	2303      	movs	r3, #3
 8009c62:	e00f      	b.n	8009c84 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	681a      	ldr	r2, [r3, #0]
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	4013      	ands	r3, r2
 8009c6e:	68ba      	ldr	r2, [r7, #8]
 8009c70:	429a      	cmp	r2, r3
 8009c72:	bf0c      	ite	eq
 8009c74:	2301      	moveq	r3, #1
 8009c76:	2300      	movne	r3, #0
 8009c78:	b2db      	uxtb	r3, r3
 8009c7a:	461a      	mov	r2, r3
 8009c7c:	79fb      	ldrb	r3, [r7, #7]
 8009c7e:	429a      	cmp	r2, r3
 8009c80:	d0c3      	beq.n	8009c0a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009c82:	2300      	movs	r3, #0
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	3710      	adds	r7, #16
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}

08009c8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b084      	sub	sp, #16
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	691b      	ldr	r3, [r3, #16]
 8009c9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	68da      	ldr	r2, [r3, #12]
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	430a      	orrs	r2, r1
 8009ca8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	689a      	ldr	r2, [r3, #8]
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	691b      	ldr	r3, [r3, #16]
 8009cb2:	431a      	orrs	r2, r3
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	695b      	ldr	r3, [r3, #20]
 8009cb8:	4313      	orrs	r3, r2
 8009cba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	68db      	ldr	r3, [r3, #12]
 8009cc2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8009cc6:	f023 030c 	bic.w	r3, r3, #12
 8009cca:	687a      	ldr	r2, [r7, #4]
 8009ccc:	6812      	ldr	r2, [r2, #0]
 8009cce:	68f9      	ldr	r1, [r7, #12]
 8009cd0:	430b      	orrs	r3, r1
 8009cd2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	695b      	ldr	r3, [r3, #20]
 8009cda:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	699a      	ldr	r2, [r3, #24]
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	430a      	orrs	r2, r1
 8009ce8:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	4a52      	ldr	r2, [pc, #328]	; (8009e38 <UART_SetConfig+0x1ac>)
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d14e      	bne.n	8009d92 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009cf4:	f7fe fcbc 	bl	8008670 <HAL_RCC_GetPCLK2Freq>
 8009cf8:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009cfa:	68ba      	ldr	r2, [r7, #8]
 8009cfc:	4613      	mov	r3, r2
 8009cfe:	009b      	lsls	r3, r3, #2
 8009d00:	4413      	add	r3, r2
 8009d02:	009a      	lsls	r2, r3, #2
 8009d04:	441a      	add	r2, r3
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	685b      	ldr	r3, [r3, #4]
 8009d0a:	009b      	lsls	r3, r3, #2
 8009d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d10:	4a4a      	ldr	r2, [pc, #296]	; (8009e3c <UART_SetConfig+0x1b0>)
 8009d12:	fba2 2303 	umull	r2, r3, r2, r3
 8009d16:	095b      	lsrs	r3, r3, #5
 8009d18:	0119      	lsls	r1, r3, #4
 8009d1a:	68ba      	ldr	r2, [r7, #8]
 8009d1c:	4613      	mov	r3, r2
 8009d1e:	009b      	lsls	r3, r3, #2
 8009d20:	4413      	add	r3, r2
 8009d22:	009a      	lsls	r2, r3, #2
 8009d24:	441a      	add	r2, r3
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	685b      	ldr	r3, [r3, #4]
 8009d2a:	009b      	lsls	r3, r3, #2
 8009d2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8009d30:	4b42      	ldr	r3, [pc, #264]	; (8009e3c <UART_SetConfig+0x1b0>)
 8009d32:	fba3 0302 	umull	r0, r3, r3, r2
 8009d36:	095b      	lsrs	r3, r3, #5
 8009d38:	2064      	movs	r0, #100	; 0x64
 8009d3a:	fb00 f303 	mul.w	r3, r0, r3
 8009d3e:	1ad3      	subs	r3, r2, r3
 8009d40:	011b      	lsls	r3, r3, #4
 8009d42:	3332      	adds	r3, #50	; 0x32
 8009d44:	4a3d      	ldr	r2, [pc, #244]	; (8009e3c <UART_SetConfig+0x1b0>)
 8009d46:	fba2 2303 	umull	r2, r3, r2, r3
 8009d4a:	095b      	lsrs	r3, r3, #5
 8009d4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009d50:	4419      	add	r1, r3
 8009d52:	68ba      	ldr	r2, [r7, #8]
 8009d54:	4613      	mov	r3, r2
 8009d56:	009b      	lsls	r3, r3, #2
 8009d58:	4413      	add	r3, r2
 8009d5a:	009a      	lsls	r2, r3, #2
 8009d5c:	441a      	add	r2, r3
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	685b      	ldr	r3, [r3, #4]
 8009d62:	009b      	lsls	r3, r3, #2
 8009d64:	fbb2 f2f3 	udiv	r2, r2, r3
 8009d68:	4b34      	ldr	r3, [pc, #208]	; (8009e3c <UART_SetConfig+0x1b0>)
 8009d6a:	fba3 0302 	umull	r0, r3, r3, r2
 8009d6e:	095b      	lsrs	r3, r3, #5
 8009d70:	2064      	movs	r0, #100	; 0x64
 8009d72:	fb00 f303 	mul.w	r3, r0, r3
 8009d76:	1ad3      	subs	r3, r2, r3
 8009d78:	011b      	lsls	r3, r3, #4
 8009d7a:	3332      	adds	r3, #50	; 0x32
 8009d7c:	4a2f      	ldr	r2, [pc, #188]	; (8009e3c <UART_SetConfig+0x1b0>)
 8009d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8009d82:	095b      	lsrs	r3, r3, #5
 8009d84:	f003 020f 	and.w	r2, r3, #15
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	440a      	add	r2, r1
 8009d8e:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8009d90:	e04d      	b.n	8009e2e <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8009d92:	f7fe fc59 	bl	8008648 <HAL_RCC_GetPCLK1Freq>
 8009d96:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009d98:	68ba      	ldr	r2, [r7, #8]
 8009d9a:	4613      	mov	r3, r2
 8009d9c:	009b      	lsls	r3, r3, #2
 8009d9e:	4413      	add	r3, r2
 8009da0:	009a      	lsls	r2, r3, #2
 8009da2:	441a      	add	r2, r3
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	685b      	ldr	r3, [r3, #4]
 8009da8:	009b      	lsls	r3, r3, #2
 8009daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dae:	4a23      	ldr	r2, [pc, #140]	; (8009e3c <UART_SetConfig+0x1b0>)
 8009db0:	fba2 2303 	umull	r2, r3, r2, r3
 8009db4:	095b      	lsrs	r3, r3, #5
 8009db6:	0119      	lsls	r1, r3, #4
 8009db8:	68ba      	ldr	r2, [r7, #8]
 8009dba:	4613      	mov	r3, r2
 8009dbc:	009b      	lsls	r3, r3, #2
 8009dbe:	4413      	add	r3, r2
 8009dc0:	009a      	lsls	r2, r3, #2
 8009dc2:	441a      	add	r2, r3
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	685b      	ldr	r3, [r3, #4]
 8009dc8:	009b      	lsls	r3, r3, #2
 8009dca:	fbb2 f2f3 	udiv	r2, r2, r3
 8009dce:	4b1b      	ldr	r3, [pc, #108]	; (8009e3c <UART_SetConfig+0x1b0>)
 8009dd0:	fba3 0302 	umull	r0, r3, r3, r2
 8009dd4:	095b      	lsrs	r3, r3, #5
 8009dd6:	2064      	movs	r0, #100	; 0x64
 8009dd8:	fb00 f303 	mul.w	r3, r0, r3
 8009ddc:	1ad3      	subs	r3, r2, r3
 8009dde:	011b      	lsls	r3, r3, #4
 8009de0:	3332      	adds	r3, #50	; 0x32
 8009de2:	4a16      	ldr	r2, [pc, #88]	; (8009e3c <UART_SetConfig+0x1b0>)
 8009de4:	fba2 2303 	umull	r2, r3, r2, r3
 8009de8:	095b      	lsrs	r3, r3, #5
 8009dea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009dee:	4419      	add	r1, r3
 8009df0:	68ba      	ldr	r2, [r7, #8]
 8009df2:	4613      	mov	r3, r2
 8009df4:	009b      	lsls	r3, r3, #2
 8009df6:	4413      	add	r3, r2
 8009df8:	009a      	lsls	r2, r3, #2
 8009dfa:	441a      	add	r2, r3
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	685b      	ldr	r3, [r3, #4]
 8009e00:	009b      	lsls	r3, r3, #2
 8009e02:	fbb2 f2f3 	udiv	r2, r2, r3
 8009e06:	4b0d      	ldr	r3, [pc, #52]	; (8009e3c <UART_SetConfig+0x1b0>)
 8009e08:	fba3 0302 	umull	r0, r3, r3, r2
 8009e0c:	095b      	lsrs	r3, r3, #5
 8009e0e:	2064      	movs	r0, #100	; 0x64
 8009e10:	fb00 f303 	mul.w	r3, r0, r3
 8009e14:	1ad3      	subs	r3, r2, r3
 8009e16:	011b      	lsls	r3, r3, #4
 8009e18:	3332      	adds	r3, #50	; 0x32
 8009e1a:	4a08      	ldr	r2, [pc, #32]	; (8009e3c <UART_SetConfig+0x1b0>)
 8009e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8009e20:	095b      	lsrs	r3, r3, #5
 8009e22:	f003 020f 	and.w	r2, r3, #15
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	440a      	add	r2, r1
 8009e2c:	609a      	str	r2, [r3, #8]
}
 8009e2e:	bf00      	nop
 8009e30:	3710      	adds	r7, #16
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}
 8009e36:	bf00      	nop
 8009e38:	40013800 	.word	0x40013800
 8009e3c:	51eb851f 	.word	0x51eb851f

08009e40 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009e40:	b084      	sub	sp, #16
 8009e42:	b480      	push	{r7}
 8009e44:	b083      	sub	sp, #12
 8009e46:	af00      	add	r7, sp, #0
 8009e48:	6078      	str	r0, [r7, #4]
 8009e4a:	f107 0014 	add.w	r0, r7, #20
 8009e4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009e52:	2300      	movs	r3, #0
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	370c      	adds	r7, #12
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bc80      	pop	{r7}
 8009e5c:	b004      	add	sp, #16
 8009e5e:	4770      	bx	lr

08009e60 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b085      	sub	sp, #20
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009e68:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8009e6c:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009e74:	b29a      	uxth	r2, r3
 8009e76:	89fb      	ldrh	r3, [r7, #14]
 8009e78:	4313      	orrs	r3, r2
 8009e7a:	b29a      	uxth	r2, r3
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009e82:	2300      	movs	r3, #0
}
 8009e84:	4618      	mov	r0, r3
 8009e86:	3714      	adds	r7, #20
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bc80      	pop	{r7}
 8009e8c:	4770      	bx	lr

08009e8e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009e8e:	b480      	push	{r7}
 8009e90:	b085      	sub	sp, #20
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009e96:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8009e9a:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009ea2:	b29b      	uxth	r3, r3
 8009ea4:	b21a      	sxth	r2, r3
 8009ea6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009eaa:	43db      	mvns	r3, r3
 8009eac:	b21b      	sxth	r3, r3
 8009eae:	4013      	ands	r3, r2
 8009eb0:	b21b      	sxth	r3, r3
 8009eb2:	b29a      	uxth	r2, r3
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009eba:	2300      	movs	r3, #0
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	3714      	adds	r7, #20
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bc80      	pop	{r7}
 8009ec4:	4770      	bx	lr

08009ec6 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8009ec6:	b480      	push	{r7}
 8009ec8:	b083      	sub	sp, #12
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	6078      	str	r0, [r7, #4]
 8009ece:	460b      	mov	r3, r1
 8009ed0:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009ed2:	2300      	movs	r3, #0
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	370c      	adds	r7, #12
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bc80      	pop	{r7}
 8009edc:	4770      	bx	lr

08009ede <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009ede:	b084      	sub	sp, #16
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b082      	sub	sp, #8
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
 8009ee8:	f107 0014 	add.w	r0, r7, #20
 8009eec:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2201      	movs	r2, #1
 8009ef4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2200      	movs	r2, #0
 8009efc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2200      	movs	r2, #0
 8009f04:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f7ff ffa5 	bl	8009e60 <USB_EnableGlobalInt>

  return HAL_OK;
 8009f16:	2300      	movs	r3, #0
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3708      	adds	r7, #8
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009f22:	b004      	add	sp, #16
 8009f24:	4770      	bx	lr
	...

08009f28 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009f28:	b490      	push	{r4, r7}
 8009f2a:	b084      	sub	sp, #16
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
 8009f30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8009f32:	2300      	movs	r3, #0
 8009f34:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009f36:	687a      	ldr	r2, [r7, #4]
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	781b      	ldrb	r3, [r3, #0]
 8009f3c:	009b      	lsls	r3, r3, #2
 8009f3e:	4413      	add	r3, r2
 8009f40:	881b      	ldrh	r3, [r3, #0]
 8009f42:	b29b      	uxth	r3, r3
 8009f44:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8009f48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f4c:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	78db      	ldrb	r3, [r3, #3]
 8009f52:	2b03      	cmp	r3, #3
 8009f54:	d819      	bhi.n	8009f8a <USB_ActivateEndpoint+0x62>
 8009f56:	a201      	add	r2, pc, #4	; (adr r2, 8009f5c <USB_ActivateEndpoint+0x34>)
 8009f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f5c:	08009f6d 	.word	0x08009f6d
 8009f60:	08009f81 	.word	0x08009f81
 8009f64:	08009f91 	.word	0x08009f91
 8009f68:	08009f77 	.word	0x08009f77
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8009f6c:	89bb      	ldrh	r3, [r7, #12]
 8009f6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009f72:	81bb      	strh	r3, [r7, #12]
      break;
 8009f74:	e00d      	b.n	8009f92 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8009f76:	89bb      	ldrh	r3, [r7, #12]
 8009f78:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8009f7c:	81bb      	strh	r3, [r7, #12]
      break;
 8009f7e:	e008      	b.n	8009f92 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8009f80:	89bb      	ldrh	r3, [r7, #12]
 8009f82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009f86:	81bb      	strh	r3, [r7, #12]
      break;
 8009f88:	e003      	b.n	8009f92 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	73fb      	strb	r3, [r7, #15]
      break;
 8009f8e:	e000      	b.n	8009f92 <USB_ActivateEndpoint+0x6a>
      break;
 8009f90:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8009f92:	687a      	ldr	r2, [r7, #4]
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	781b      	ldrb	r3, [r3, #0]
 8009f98:	009b      	lsls	r3, r3, #2
 8009f9a:	441a      	add	r2, r3
 8009f9c:	89bb      	ldrh	r3, [r7, #12]
 8009f9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009fa2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009fa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009faa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fae:	b29b      	uxth	r3, r3
 8009fb0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009fb2:	687a      	ldr	r2, [r7, #4]
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	781b      	ldrb	r3, [r3, #0]
 8009fb8:	009b      	lsls	r3, r3, #2
 8009fba:	4413      	add	r3, r2
 8009fbc:	881b      	ldrh	r3, [r3, #0]
 8009fbe:	b29b      	uxth	r3, r3
 8009fc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009fc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fc8:	b29a      	uxth	r2, r3
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	781b      	ldrb	r3, [r3, #0]
 8009fce:	b29b      	uxth	r3, r3
 8009fd0:	4313      	orrs	r3, r2
 8009fd2:	b29c      	uxth	r4, r3
 8009fd4:	687a      	ldr	r2, [r7, #4]
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	781b      	ldrb	r3, [r3, #0]
 8009fda:	009b      	lsls	r3, r3, #2
 8009fdc:	441a      	add	r2, r3
 8009fde:	4b8a      	ldr	r3, [pc, #552]	; (800a208 <USB_ActivateEndpoint+0x2e0>)
 8009fe0:	4323      	orrs	r3, r4
 8009fe2:	b29b      	uxth	r3, r3
 8009fe4:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	7b1b      	ldrb	r3, [r3, #12]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	f040 8112 	bne.w	800a214 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	785b      	ldrb	r3, [r3, #1]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d067      	beq.n	800a0c8 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009ff8:	687c      	ldr	r4, [r7, #4]
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a000:	b29b      	uxth	r3, r3
 800a002:	441c      	add	r4, r3
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	781b      	ldrb	r3, [r3, #0]
 800a008:	011b      	lsls	r3, r3, #4
 800a00a:	4423      	add	r3, r4
 800a00c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a010:	461c      	mov	r4, r3
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	88db      	ldrh	r3, [r3, #6]
 800a016:	085b      	lsrs	r3, r3, #1
 800a018:	b29b      	uxth	r3, r3
 800a01a:	005b      	lsls	r3, r3, #1
 800a01c:	b29b      	uxth	r3, r3
 800a01e:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a020:	687a      	ldr	r2, [r7, #4]
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	781b      	ldrb	r3, [r3, #0]
 800a026:	009b      	lsls	r3, r3, #2
 800a028:	4413      	add	r3, r2
 800a02a:	881b      	ldrh	r3, [r3, #0]
 800a02c:	b29c      	uxth	r4, r3
 800a02e:	4623      	mov	r3, r4
 800a030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a034:	2b00      	cmp	r3, #0
 800a036:	d014      	beq.n	800a062 <USB_ActivateEndpoint+0x13a>
 800a038:	687a      	ldr	r2, [r7, #4]
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	781b      	ldrb	r3, [r3, #0]
 800a03e:	009b      	lsls	r3, r3, #2
 800a040:	4413      	add	r3, r2
 800a042:	881b      	ldrh	r3, [r3, #0]
 800a044:	b29b      	uxth	r3, r3
 800a046:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a04a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a04e:	b29c      	uxth	r4, r3
 800a050:	687a      	ldr	r2, [r7, #4]
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	781b      	ldrb	r3, [r3, #0]
 800a056:	009b      	lsls	r3, r3, #2
 800a058:	441a      	add	r2, r3
 800a05a:	4b6c      	ldr	r3, [pc, #432]	; (800a20c <USB_ActivateEndpoint+0x2e4>)
 800a05c:	4323      	orrs	r3, r4
 800a05e:	b29b      	uxth	r3, r3
 800a060:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	78db      	ldrb	r3, [r3, #3]
 800a066:	2b01      	cmp	r3, #1
 800a068:	d018      	beq.n	800a09c <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a06a:	687a      	ldr	r2, [r7, #4]
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	781b      	ldrb	r3, [r3, #0]
 800a070:	009b      	lsls	r3, r3, #2
 800a072:	4413      	add	r3, r2
 800a074:	881b      	ldrh	r3, [r3, #0]
 800a076:	b29b      	uxth	r3, r3
 800a078:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a07c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a080:	b29c      	uxth	r4, r3
 800a082:	f084 0320 	eor.w	r3, r4, #32
 800a086:	b29c      	uxth	r4, r3
 800a088:	687a      	ldr	r2, [r7, #4]
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	781b      	ldrb	r3, [r3, #0]
 800a08e:	009b      	lsls	r3, r3, #2
 800a090:	441a      	add	r2, r3
 800a092:	4b5d      	ldr	r3, [pc, #372]	; (800a208 <USB_ActivateEndpoint+0x2e0>)
 800a094:	4323      	orrs	r3, r4
 800a096:	b29b      	uxth	r3, r3
 800a098:	8013      	strh	r3, [r2, #0]
 800a09a:	e22b      	b.n	800a4f4 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a09c:	687a      	ldr	r2, [r7, #4]
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	781b      	ldrb	r3, [r3, #0]
 800a0a2:	009b      	lsls	r3, r3, #2
 800a0a4:	4413      	add	r3, r2
 800a0a6:	881b      	ldrh	r3, [r3, #0]
 800a0a8:	b29b      	uxth	r3, r3
 800a0aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0b2:	b29c      	uxth	r4, r3
 800a0b4:	687a      	ldr	r2, [r7, #4]
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	781b      	ldrb	r3, [r3, #0]
 800a0ba:	009b      	lsls	r3, r3, #2
 800a0bc:	441a      	add	r2, r3
 800a0be:	4b52      	ldr	r3, [pc, #328]	; (800a208 <USB_ActivateEndpoint+0x2e0>)
 800a0c0:	4323      	orrs	r3, r4
 800a0c2:	b29b      	uxth	r3, r3
 800a0c4:	8013      	strh	r3, [r2, #0]
 800a0c6:	e215      	b.n	800a4f4 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a0c8:	687c      	ldr	r4, [r7, #4]
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a0d0:	b29b      	uxth	r3, r3
 800a0d2:	441c      	add	r4, r3
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	781b      	ldrb	r3, [r3, #0]
 800a0d8:	011b      	lsls	r3, r3, #4
 800a0da:	4423      	add	r3, r4
 800a0dc:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800a0e0:	461c      	mov	r4, r3
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	88db      	ldrh	r3, [r3, #6]
 800a0e6:	085b      	lsrs	r3, r3, #1
 800a0e8:	b29b      	uxth	r3, r3
 800a0ea:	005b      	lsls	r3, r3, #1
 800a0ec:	b29b      	uxth	r3, r3
 800a0ee:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800a0f0:	687c      	ldr	r4, [r7, #4]
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a0f8:	b29b      	uxth	r3, r3
 800a0fa:	441c      	add	r4, r3
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	781b      	ldrb	r3, [r3, #0]
 800a100:	011b      	lsls	r3, r3, #4
 800a102:	4423      	add	r3, r4
 800a104:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a108:	461c      	mov	r4, r3
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	691b      	ldr	r3, [r3, #16]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d10e      	bne.n	800a130 <USB_ActivateEndpoint+0x208>
 800a112:	8823      	ldrh	r3, [r4, #0]
 800a114:	b29b      	uxth	r3, r3
 800a116:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a11a:	b29b      	uxth	r3, r3
 800a11c:	8023      	strh	r3, [r4, #0]
 800a11e:	8823      	ldrh	r3, [r4, #0]
 800a120:	b29b      	uxth	r3, r3
 800a122:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a126:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a12a:	b29b      	uxth	r3, r3
 800a12c:	8023      	strh	r3, [r4, #0]
 800a12e:	e02d      	b.n	800a18c <USB_ActivateEndpoint+0x264>
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	691b      	ldr	r3, [r3, #16]
 800a134:	2b3e      	cmp	r3, #62	; 0x3e
 800a136:	d812      	bhi.n	800a15e <USB_ActivateEndpoint+0x236>
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	691b      	ldr	r3, [r3, #16]
 800a13c:	085b      	lsrs	r3, r3, #1
 800a13e:	60bb      	str	r3, [r7, #8]
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	691b      	ldr	r3, [r3, #16]
 800a144:	f003 0301 	and.w	r3, r3, #1
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d002      	beq.n	800a152 <USB_ActivateEndpoint+0x22a>
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	3301      	adds	r3, #1
 800a150:	60bb      	str	r3, [r7, #8]
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	b29b      	uxth	r3, r3
 800a156:	029b      	lsls	r3, r3, #10
 800a158:	b29b      	uxth	r3, r3
 800a15a:	8023      	strh	r3, [r4, #0]
 800a15c:	e016      	b.n	800a18c <USB_ActivateEndpoint+0x264>
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	691b      	ldr	r3, [r3, #16]
 800a162:	095b      	lsrs	r3, r3, #5
 800a164:	60bb      	str	r3, [r7, #8]
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	691b      	ldr	r3, [r3, #16]
 800a16a:	f003 031f 	and.w	r3, r3, #31
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d102      	bne.n	800a178 <USB_ActivateEndpoint+0x250>
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	3b01      	subs	r3, #1
 800a176:	60bb      	str	r3, [r7, #8]
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	b29b      	uxth	r3, r3
 800a17c:	029b      	lsls	r3, r3, #10
 800a17e:	b29b      	uxth	r3, r3
 800a180:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a184:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a188:	b29b      	uxth	r3, r3
 800a18a:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a18c:	687a      	ldr	r2, [r7, #4]
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	781b      	ldrb	r3, [r3, #0]
 800a192:	009b      	lsls	r3, r3, #2
 800a194:	4413      	add	r3, r2
 800a196:	881b      	ldrh	r3, [r3, #0]
 800a198:	b29c      	uxth	r4, r3
 800a19a:	4623      	mov	r3, r4
 800a19c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d014      	beq.n	800a1ce <USB_ActivateEndpoint+0x2a6>
 800a1a4:	687a      	ldr	r2, [r7, #4]
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	781b      	ldrb	r3, [r3, #0]
 800a1aa:	009b      	lsls	r3, r3, #2
 800a1ac:	4413      	add	r3, r2
 800a1ae:	881b      	ldrh	r3, [r3, #0]
 800a1b0:	b29b      	uxth	r3, r3
 800a1b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1ba:	b29c      	uxth	r4, r3
 800a1bc:	687a      	ldr	r2, [r7, #4]
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	781b      	ldrb	r3, [r3, #0]
 800a1c2:	009b      	lsls	r3, r3, #2
 800a1c4:	441a      	add	r2, r3
 800a1c6:	4b12      	ldr	r3, [pc, #72]	; (800a210 <USB_ActivateEndpoint+0x2e8>)
 800a1c8:	4323      	orrs	r3, r4
 800a1ca:	b29b      	uxth	r3, r3
 800a1cc:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a1ce:	687a      	ldr	r2, [r7, #4]
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	781b      	ldrb	r3, [r3, #0]
 800a1d4:	009b      	lsls	r3, r3, #2
 800a1d6:	4413      	add	r3, r2
 800a1d8:	881b      	ldrh	r3, [r3, #0]
 800a1da:	b29b      	uxth	r3, r3
 800a1dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a1e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1e4:	b29c      	uxth	r4, r3
 800a1e6:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800a1ea:	b29c      	uxth	r4, r3
 800a1ec:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800a1f0:	b29c      	uxth	r4, r3
 800a1f2:	687a      	ldr	r2, [r7, #4]
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	781b      	ldrb	r3, [r3, #0]
 800a1f8:	009b      	lsls	r3, r3, #2
 800a1fa:	441a      	add	r2, r3
 800a1fc:	4b02      	ldr	r3, [pc, #8]	; (800a208 <USB_ActivateEndpoint+0x2e0>)
 800a1fe:	4323      	orrs	r3, r4
 800a200:	b29b      	uxth	r3, r3
 800a202:	8013      	strh	r3, [r2, #0]
 800a204:	e176      	b.n	800a4f4 <USB_ActivateEndpoint+0x5cc>
 800a206:	bf00      	nop
 800a208:	ffff8080 	.word	0xffff8080
 800a20c:	ffff80c0 	.word	0xffff80c0
 800a210:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800a214:	687a      	ldr	r2, [r7, #4]
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	781b      	ldrb	r3, [r3, #0]
 800a21a:	009b      	lsls	r3, r3, #2
 800a21c:	4413      	add	r3, r2
 800a21e:	881b      	ldrh	r3, [r3, #0]
 800a220:	b29b      	uxth	r3, r3
 800a222:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a22a:	b29c      	uxth	r4, r3
 800a22c:	687a      	ldr	r2, [r7, #4]
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	781b      	ldrb	r3, [r3, #0]
 800a232:	009b      	lsls	r3, r3, #2
 800a234:	441a      	add	r2, r3
 800a236:	4b96      	ldr	r3, [pc, #600]	; (800a490 <USB_ActivateEndpoint+0x568>)
 800a238:	4323      	orrs	r3, r4
 800a23a:	b29b      	uxth	r3, r3
 800a23c:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800a23e:	687c      	ldr	r4, [r7, #4]
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a246:	b29b      	uxth	r3, r3
 800a248:	441c      	add	r4, r3
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	781b      	ldrb	r3, [r3, #0]
 800a24e:	011b      	lsls	r3, r3, #4
 800a250:	4423      	add	r3, r4
 800a252:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a256:	461c      	mov	r4, r3
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	891b      	ldrh	r3, [r3, #8]
 800a25c:	085b      	lsrs	r3, r3, #1
 800a25e:	b29b      	uxth	r3, r3
 800a260:	005b      	lsls	r3, r3, #1
 800a262:	b29b      	uxth	r3, r3
 800a264:	8023      	strh	r3, [r4, #0]
 800a266:	687c      	ldr	r4, [r7, #4]
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a26e:	b29b      	uxth	r3, r3
 800a270:	441c      	add	r4, r3
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	781b      	ldrb	r3, [r3, #0]
 800a276:	011b      	lsls	r3, r3, #4
 800a278:	4423      	add	r3, r4
 800a27a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800a27e:	461c      	mov	r4, r3
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	895b      	ldrh	r3, [r3, #10]
 800a284:	085b      	lsrs	r3, r3, #1
 800a286:	b29b      	uxth	r3, r3
 800a288:	005b      	lsls	r3, r3, #1
 800a28a:	b29b      	uxth	r3, r3
 800a28c:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	785b      	ldrb	r3, [r3, #1]
 800a292:	2b00      	cmp	r3, #0
 800a294:	f040 8088 	bne.w	800a3a8 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a298:	687a      	ldr	r2, [r7, #4]
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	781b      	ldrb	r3, [r3, #0]
 800a29e:	009b      	lsls	r3, r3, #2
 800a2a0:	4413      	add	r3, r2
 800a2a2:	881b      	ldrh	r3, [r3, #0]
 800a2a4:	b29c      	uxth	r4, r3
 800a2a6:	4623      	mov	r3, r4
 800a2a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d014      	beq.n	800a2da <USB_ActivateEndpoint+0x3b2>
 800a2b0:	687a      	ldr	r2, [r7, #4]
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	781b      	ldrb	r3, [r3, #0]
 800a2b6:	009b      	lsls	r3, r3, #2
 800a2b8:	4413      	add	r3, r2
 800a2ba:	881b      	ldrh	r3, [r3, #0]
 800a2bc:	b29b      	uxth	r3, r3
 800a2be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2c6:	b29c      	uxth	r4, r3
 800a2c8:	687a      	ldr	r2, [r7, #4]
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	781b      	ldrb	r3, [r3, #0]
 800a2ce:	009b      	lsls	r3, r3, #2
 800a2d0:	441a      	add	r2, r3
 800a2d2:	4b70      	ldr	r3, [pc, #448]	; (800a494 <USB_ActivateEndpoint+0x56c>)
 800a2d4:	4323      	orrs	r3, r4
 800a2d6:	b29b      	uxth	r3, r3
 800a2d8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a2da:	687a      	ldr	r2, [r7, #4]
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	781b      	ldrb	r3, [r3, #0]
 800a2e0:	009b      	lsls	r3, r3, #2
 800a2e2:	4413      	add	r3, r2
 800a2e4:	881b      	ldrh	r3, [r3, #0]
 800a2e6:	b29c      	uxth	r4, r3
 800a2e8:	4623      	mov	r3, r4
 800a2ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d014      	beq.n	800a31c <USB_ActivateEndpoint+0x3f4>
 800a2f2:	687a      	ldr	r2, [r7, #4]
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	781b      	ldrb	r3, [r3, #0]
 800a2f8:	009b      	lsls	r3, r3, #2
 800a2fa:	4413      	add	r3, r2
 800a2fc:	881b      	ldrh	r3, [r3, #0]
 800a2fe:	b29b      	uxth	r3, r3
 800a300:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a304:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a308:	b29c      	uxth	r4, r3
 800a30a:	687a      	ldr	r2, [r7, #4]
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	781b      	ldrb	r3, [r3, #0]
 800a310:	009b      	lsls	r3, r3, #2
 800a312:	441a      	add	r2, r3
 800a314:	4b60      	ldr	r3, [pc, #384]	; (800a498 <USB_ActivateEndpoint+0x570>)
 800a316:	4323      	orrs	r3, r4
 800a318:	b29b      	uxth	r3, r3
 800a31a:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 800a31c:	687a      	ldr	r2, [r7, #4]
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	781b      	ldrb	r3, [r3, #0]
 800a322:	009b      	lsls	r3, r3, #2
 800a324:	4413      	add	r3, r2
 800a326:	881b      	ldrh	r3, [r3, #0]
 800a328:	b29b      	uxth	r3, r3
 800a32a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a32e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a332:	b29c      	uxth	r4, r3
 800a334:	687a      	ldr	r2, [r7, #4]
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	781b      	ldrb	r3, [r3, #0]
 800a33a:	009b      	lsls	r3, r3, #2
 800a33c:	441a      	add	r2, r3
 800a33e:	4b56      	ldr	r3, [pc, #344]	; (800a498 <USB_ActivateEndpoint+0x570>)
 800a340:	4323      	orrs	r3, r4
 800a342:	b29b      	uxth	r3, r3
 800a344:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a346:	687a      	ldr	r2, [r7, #4]
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	781b      	ldrb	r3, [r3, #0]
 800a34c:	009b      	lsls	r3, r3, #2
 800a34e:	4413      	add	r3, r2
 800a350:	881b      	ldrh	r3, [r3, #0]
 800a352:	b29b      	uxth	r3, r3
 800a354:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a358:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a35c:	b29c      	uxth	r4, r3
 800a35e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800a362:	b29c      	uxth	r4, r3
 800a364:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800a368:	b29c      	uxth	r4, r3
 800a36a:	687a      	ldr	r2, [r7, #4]
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	781b      	ldrb	r3, [r3, #0]
 800a370:	009b      	lsls	r3, r3, #2
 800a372:	441a      	add	r2, r3
 800a374:	4b49      	ldr	r3, [pc, #292]	; (800a49c <USB_ActivateEndpoint+0x574>)
 800a376:	4323      	orrs	r3, r4
 800a378:	b29b      	uxth	r3, r3
 800a37a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a37c:	687a      	ldr	r2, [r7, #4]
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	781b      	ldrb	r3, [r3, #0]
 800a382:	009b      	lsls	r3, r3, #2
 800a384:	4413      	add	r3, r2
 800a386:	881b      	ldrh	r3, [r3, #0]
 800a388:	b29b      	uxth	r3, r3
 800a38a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a38e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a392:	b29c      	uxth	r4, r3
 800a394:	687a      	ldr	r2, [r7, #4]
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	781b      	ldrb	r3, [r3, #0]
 800a39a:	009b      	lsls	r3, r3, #2
 800a39c:	441a      	add	r2, r3
 800a39e:	4b3f      	ldr	r3, [pc, #252]	; (800a49c <USB_ActivateEndpoint+0x574>)
 800a3a0:	4323      	orrs	r3, r4
 800a3a2:	b29b      	uxth	r3, r3
 800a3a4:	8013      	strh	r3, [r2, #0]
 800a3a6:	e0a5      	b.n	800a4f4 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a3a8:	687a      	ldr	r2, [r7, #4]
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	781b      	ldrb	r3, [r3, #0]
 800a3ae:	009b      	lsls	r3, r3, #2
 800a3b0:	4413      	add	r3, r2
 800a3b2:	881b      	ldrh	r3, [r3, #0]
 800a3b4:	b29c      	uxth	r4, r3
 800a3b6:	4623      	mov	r3, r4
 800a3b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d014      	beq.n	800a3ea <USB_ActivateEndpoint+0x4c2>
 800a3c0:	687a      	ldr	r2, [r7, #4]
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	781b      	ldrb	r3, [r3, #0]
 800a3c6:	009b      	lsls	r3, r3, #2
 800a3c8:	4413      	add	r3, r2
 800a3ca:	881b      	ldrh	r3, [r3, #0]
 800a3cc:	b29b      	uxth	r3, r3
 800a3ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a3d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3d6:	b29c      	uxth	r4, r3
 800a3d8:	687a      	ldr	r2, [r7, #4]
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	781b      	ldrb	r3, [r3, #0]
 800a3de:	009b      	lsls	r3, r3, #2
 800a3e0:	441a      	add	r2, r3
 800a3e2:	4b2c      	ldr	r3, [pc, #176]	; (800a494 <USB_ActivateEndpoint+0x56c>)
 800a3e4:	4323      	orrs	r3, r4
 800a3e6:	b29b      	uxth	r3, r3
 800a3e8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a3ea:	687a      	ldr	r2, [r7, #4]
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	781b      	ldrb	r3, [r3, #0]
 800a3f0:	009b      	lsls	r3, r3, #2
 800a3f2:	4413      	add	r3, r2
 800a3f4:	881b      	ldrh	r3, [r3, #0]
 800a3f6:	b29c      	uxth	r4, r3
 800a3f8:	4623      	mov	r3, r4
 800a3fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d014      	beq.n	800a42c <USB_ActivateEndpoint+0x504>
 800a402:	687a      	ldr	r2, [r7, #4]
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	781b      	ldrb	r3, [r3, #0]
 800a408:	009b      	lsls	r3, r3, #2
 800a40a:	4413      	add	r3, r2
 800a40c:	881b      	ldrh	r3, [r3, #0]
 800a40e:	b29b      	uxth	r3, r3
 800a410:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a414:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a418:	b29c      	uxth	r4, r3
 800a41a:	687a      	ldr	r2, [r7, #4]
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	781b      	ldrb	r3, [r3, #0]
 800a420:	009b      	lsls	r3, r3, #2
 800a422:	441a      	add	r2, r3
 800a424:	4b1c      	ldr	r3, [pc, #112]	; (800a498 <USB_ActivateEndpoint+0x570>)
 800a426:	4323      	orrs	r3, r4
 800a428:	b29b      	uxth	r3, r3
 800a42a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a42c:	687a      	ldr	r2, [r7, #4]
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	781b      	ldrb	r3, [r3, #0]
 800a432:	009b      	lsls	r3, r3, #2
 800a434:	4413      	add	r3, r2
 800a436:	881b      	ldrh	r3, [r3, #0]
 800a438:	b29b      	uxth	r3, r3
 800a43a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a43e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a442:	b29c      	uxth	r4, r3
 800a444:	687a      	ldr	r2, [r7, #4]
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	781b      	ldrb	r3, [r3, #0]
 800a44a:	009b      	lsls	r3, r3, #2
 800a44c:	441a      	add	r2, r3
 800a44e:	4b11      	ldr	r3, [pc, #68]	; (800a494 <USB_ActivateEndpoint+0x56c>)
 800a450:	4323      	orrs	r3, r4
 800a452:	b29b      	uxth	r3, r3
 800a454:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	78db      	ldrb	r3, [r3, #3]
 800a45a:	2b01      	cmp	r3, #1
 800a45c:	d020      	beq.n	800a4a0 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a45e:	687a      	ldr	r2, [r7, #4]
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	781b      	ldrb	r3, [r3, #0]
 800a464:	009b      	lsls	r3, r3, #2
 800a466:	4413      	add	r3, r2
 800a468:	881b      	ldrh	r3, [r3, #0]
 800a46a:	b29b      	uxth	r3, r3
 800a46c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a470:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a474:	b29c      	uxth	r4, r3
 800a476:	f084 0320 	eor.w	r3, r4, #32
 800a47a:	b29c      	uxth	r4, r3
 800a47c:	687a      	ldr	r2, [r7, #4]
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	781b      	ldrb	r3, [r3, #0]
 800a482:	009b      	lsls	r3, r3, #2
 800a484:	441a      	add	r2, r3
 800a486:	4b05      	ldr	r3, [pc, #20]	; (800a49c <USB_ActivateEndpoint+0x574>)
 800a488:	4323      	orrs	r3, r4
 800a48a:	b29b      	uxth	r3, r3
 800a48c:	8013      	strh	r3, [r2, #0]
 800a48e:	e01c      	b.n	800a4ca <USB_ActivateEndpoint+0x5a2>
 800a490:	ffff8180 	.word	0xffff8180
 800a494:	ffffc080 	.word	0xffffc080
 800a498:	ffff80c0 	.word	0xffff80c0
 800a49c:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a4a0:	687a      	ldr	r2, [r7, #4]
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	781b      	ldrb	r3, [r3, #0]
 800a4a6:	009b      	lsls	r3, r3, #2
 800a4a8:	4413      	add	r3, r2
 800a4aa:	881b      	ldrh	r3, [r3, #0]
 800a4ac:	b29b      	uxth	r3, r3
 800a4ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a4b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a4b6:	b29c      	uxth	r4, r3
 800a4b8:	687a      	ldr	r2, [r7, #4]
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	781b      	ldrb	r3, [r3, #0]
 800a4be:	009b      	lsls	r3, r3, #2
 800a4c0:	441a      	add	r2, r3
 800a4c2:	4b0f      	ldr	r3, [pc, #60]	; (800a500 <USB_ActivateEndpoint+0x5d8>)
 800a4c4:	4323      	orrs	r3, r4
 800a4c6:	b29b      	uxth	r3, r3
 800a4c8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a4ca:	687a      	ldr	r2, [r7, #4]
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	781b      	ldrb	r3, [r3, #0]
 800a4d0:	009b      	lsls	r3, r3, #2
 800a4d2:	4413      	add	r3, r2
 800a4d4:	881b      	ldrh	r3, [r3, #0]
 800a4d6:	b29b      	uxth	r3, r3
 800a4d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a4dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4e0:	b29c      	uxth	r4, r3
 800a4e2:	687a      	ldr	r2, [r7, #4]
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	781b      	ldrb	r3, [r3, #0]
 800a4e8:	009b      	lsls	r3, r3, #2
 800a4ea:	441a      	add	r2, r3
 800a4ec:	4b04      	ldr	r3, [pc, #16]	; (800a500 <USB_ActivateEndpoint+0x5d8>)
 800a4ee:	4323      	orrs	r3, r4
 800a4f0:	b29b      	uxth	r3, r3
 800a4f2:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800a4f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3710      	adds	r7, #16
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bc90      	pop	{r4, r7}
 800a4fe:	4770      	bx	lr
 800a500:	ffff8080 	.word	0xffff8080

0800a504 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a504:	b490      	push	{r4, r7}
 800a506:	b082      	sub	sp, #8
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
 800a50c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	7b1b      	ldrb	r3, [r3, #12]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d171      	bne.n	800a5fa <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	785b      	ldrb	r3, [r3, #1]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d036      	beq.n	800a58c <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a51e:	687a      	ldr	r2, [r7, #4]
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	781b      	ldrb	r3, [r3, #0]
 800a524:	009b      	lsls	r3, r3, #2
 800a526:	4413      	add	r3, r2
 800a528:	881b      	ldrh	r3, [r3, #0]
 800a52a:	b29c      	uxth	r4, r3
 800a52c:	4623      	mov	r3, r4
 800a52e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a532:	2b00      	cmp	r3, #0
 800a534:	d014      	beq.n	800a560 <USB_DeactivateEndpoint+0x5c>
 800a536:	687a      	ldr	r2, [r7, #4]
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	781b      	ldrb	r3, [r3, #0]
 800a53c:	009b      	lsls	r3, r3, #2
 800a53e:	4413      	add	r3, r2
 800a540:	881b      	ldrh	r3, [r3, #0]
 800a542:	b29b      	uxth	r3, r3
 800a544:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a548:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a54c:	b29c      	uxth	r4, r3
 800a54e:	687a      	ldr	r2, [r7, #4]
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	781b      	ldrb	r3, [r3, #0]
 800a554:	009b      	lsls	r3, r3, #2
 800a556:	441a      	add	r2, r3
 800a558:	4b6b      	ldr	r3, [pc, #428]	; (800a708 <USB_DeactivateEndpoint+0x204>)
 800a55a:	4323      	orrs	r3, r4
 800a55c:	b29b      	uxth	r3, r3
 800a55e:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a560:	687a      	ldr	r2, [r7, #4]
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	781b      	ldrb	r3, [r3, #0]
 800a566:	009b      	lsls	r3, r3, #2
 800a568:	4413      	add	r3, r2
 800a56a:	881b      	ldrh	r3, [r3, #0]
 800a56c:	b29b      	uxth	r3, r3
 800a56e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a572:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a576:	b29c      	uxth	r4, r3
 800a578:	687a      	ldr	r2, [r7, #4]
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	781b      	ldrb	r3, [r3, #0]
 800a57e:	009b      	lsls	r3, r3, #2
 800a580:	441a      	add	r2, r3
 800a582:	4b62      	ldr	r3, [pc, #392]	; (800a70c <USB_DeactivateEndpoint+0x208>)
 800a584:	4323      	orrs	r3, r4
 800a586:	b29b      	uxth	r3, r3
 800a588:	8013      	strh	r3, [r2, #0]
 800a58a:	e144      	b.n	800a816 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a58c:	687a      	ldr	r2, [r7, #4]
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	781b      	ldrb	r3, [r3, #0]
 800a592:	009b      	lsls	r3, r3, #2
 800a594:	4413      	add	r3, r2
 800a596:	881b      	ldrh	r3, [r3, #0]
 800a598:	b29c      	uxth	r4, r3
 800a59a:	4623      	mov	r3, r4
 800a59c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d014      	beq.n	800a5ce <USB_DeactivateEndpoint+0xca>
 800a5a4:	687a      	ldr	r2, [r7, #4]
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	781b      	ldrb	r3, [r3, #0]
 800a5aa:	009b      	lsls	r3, r3, #2
 800a5ac:	4413      	add	r3, r2
 800a5ae:	881b      	ldrh	r3, [r3, #0]
 800a5b0:	b29b      	uxth	r3, r3
 800a5b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a5b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5ba:	b29c      	uxth	r4, r3
 800a5bc:	687a      	ldr	r2, [r7, #4]
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	781b      	ldrb	r3, [r3, #0]
 800a5c2:	009b      	lsls	r3, r3, #2
 800a5c4:	441a      	add	r2, r3
 800a5c6:	4b52      	ldr	r3, [pc, #328]	; (800a710 <USB_DeactivateEndpoint+0x20c>)
 800a5c8:	4323      	orrs	r3, r4
 800a5ca:	b29b      	uxth	r3, r3
 800a5cc:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a5ce:	687a      	ldr	r2, [r7, #4]
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	781b      	ldrb	r3, [r3, #0]
 800a5d4:	009b      	lsls	r3, r3, #2
 800a5d6:	4413      	add	r3, r2
 800a5d8:	881b      	ldrh	r3, [r3, #0]
 800a5da:	b29b      	uxth	r3, r3
 800a5dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a5e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5e4:	b29c      	uxth	r4, r3
 800a5e6:	687a      	ldr	r2, [r7, #4]
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	781b      	ldrb	r3, [r3, #0]
 800a5ec:	009b      	lsls	r3, r3, #2
 800a5ee:	441a      	add	r2, r3
 800a5f0:	4b46      	ldr	r3, [pc, #280]	; (800a70c <USB_DeactivateEndpoint+0x208>)
 800a5f2:	4323      	orrs	r3, r4
 800a5f4:	b29b      	uxth	r3, r3
 800a5f6:	8013      	strh	r3, [r2, #0]
 800a5f8:	e10d      	b.n	800a816 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	785b      	ldrb	r3, [r3, #1]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	f040 8088 	bne.w	800a714 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a604:	687a      	ldr	r2, [r7, #4]
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	781b      	ldrb	r3, [r3, #0]
 800a60a:	009b      	lsls	r3, r3, #2
 800a60c:	4413      	add	r3, r2
 800a60e:	881b      	ldrh	r3, [r3, #0]
 800a610:	b29c      	uxth	r4, r3
 800a612:	4623      	mov	r3, r4
 800a614:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d014      	beq.n	800a646 <USB_DeactivateEndpoint+0x142>
 800a61c:	687a      	ldr	r2, [r7, #4]
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	781b      	ldrb	r3, [r3, #0]
 800a622:	009b      	lsls	r3, r3, #2
 800a624:	4413      	add	r3, r2
 800a626:	881b      	ldrh	r3, [r3, #0]
 800a628:	b29b      	uxth	r3, r3
 800a62a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a62e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a632:	b29c      	uxth	r4, r3
 800a634:	687a      	ldr	r2, [r7, #4]
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	781b      	ldrb	r3, [r3, #0]
 800a63a:	009b      	lsls	r3, r3, #2
 800a63c:	441a      	add	r2, r3
 800a63e:	4b34      	ldr	r3, [pc, #208]	; (800a710 <USB_DeactivateEndpoint+0x20c>)
 800a640:	4323      	orrs	r3, r4
 800a642:	b29b      	uxth	r3, r3
 800a644:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a646:	687a      	ldr	r2, [r7, #4]
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	781b      	ldrb	r3, [r3, #0]
 800a64c:	009b      	lsls	r3, r3, #2
 800a64e:	4413      	add	r3, r2
 800a650:	881b      	ldrh	r3, [r3, #0]
 800a652:	b29c      	uxth	r4, r3
 800a654:	4623      	mov	r3, r4
 800a656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d014      	beq.n	800a688 <USB_DeactivateEndpoint+0x184>
 800a65e:	687a      	ldr	r2, [r7, #4]
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	781b      	ldrb	r3, [r3, #0]
 800a664:	009b      	lsls	r3, r3, #2
 800a666:	4413      	add	r3, r2
 800a668:	881b      	ldrh	r3, [r3, #0]
 800a66a:	b29b      	uxth	r3, r3
 800a66c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a670:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a674:	b29c      	uxth	r4, r3
 800a676:	687a      	ldr	r2, [r7, #4]
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	781b      	ldrb	r3, [r3, #0]
 800a67c:	009b      	lsls	r3, r3, #2
 800a67e:	441a      	add	r2, r3
 800a680:	4b21      	ldr	r3, [pc, #132]	; (800a708 <USB_DeactivateEndpoint+0x204>)
 800a682:	4323      	orrs	r3, r4
 800a684:	b29b      	uxth	r3, r3
 800a686:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800a688:	687a      	ldr	r2, [r7, #4]
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	781b      	ldrb	r3, [r3, #0]
 800a68e:	009b      	lsls	r3, r3, #2
 800a690:	4413      	add	r3, r2
 800a692:	881b      	ldrh	r3, [r3, #0]
 800a694:	b29b      	uxth	r3, r3
 800a696:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a69a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a69e:	b29c      	uxth	r4, r3
 800a6a0:	687a      	ldr	r2, [r7, #4]
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	781b      	ldrb	r3, [r3, #0]
 800a6a6:	009b      	lsls	r3, r3, #2
 800a6a8:	441a      	add	r2, r3
 800a6aa:	4b17      	ldr	r3, [pc, #92]	; (800a708 <USB_DeactivateEndpoint+0x204>)
 800a6ac:	4323      	orrs	r3, r4
 800a6ae:	b29b      	uxth	r3, r3
 800a6b0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a6b2:	687a      	ldr	r2, [r7, #4]
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	781b      	ldrb	r3, [r3, #0]
 800a6b8:	009b      	lsls	r3, r3, #2
 800a6ba:	4413      	add	r3, r2
 800a6bc:	881b      	ldrh	r3, [r3, #0]
 800a6be:	b29b      	uxth	r3, r3
 800a6c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a6c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6c8:	b29c      	uxth	r4, r3
 800a6ca:	687a      	ldr	r2, [r7, #4]
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	781b      	ldrb	r3, [r3, #0]
 800a6d0:	009b      	lsls	r3, r3, #2
 800a6d2:	441a      	add	r2, r3
 800a6d4:	4b0d      	ldr	r3, [pc, #52]	; (800a70c <USB_DeactivateEndpoint+0x208>)
 800a6d6:	4323      	orrs	r3, r4
 800a6d8:	b29b      	uxth	r3, r3
 800a6da:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a6dc:	687a      	ldr	r2, [r7, #4]
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	781b      	ldrb	r3, [r3, #0]
 800a6e2:	009b      	lsls	r3, r3, #2
 800a6e4:	4413      	add	r3, r2
 800a6e6:	881b      	ldrh	r3, [r3, #0]
 800a6e8:	b29b      	uxth	r3, r3
 800a6ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a6ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a6f2:	b29c      	uxth	r4, r3
 800a6f4:	687a      	ldr	r2, [r7, #4]
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	781b      	ldrb	r3, [r3, #0]
 800a6fa:	009b      	lsls	r3, r3, #2
 800a6fc:	441a      	add	r2, r3
 800a6fe:	4b03      	ldr	r3, [pc, #12]	; (800a70c <USB_DeactivateEndpoint+0x208>)
 800a700:	4323      	orrs	r3, r4
 800a702:	b29b      	uxth	r3, r3
 800a704:	8013      	strh	r3, [r2, #0]
 800a706:	e086      	b.n	800a816 <USB_DeactivateEndpoint+0x312>
 800a708:	ffff80c0 	.word	0xffff80c0
 800a70c:	ffff8080 	.word	0xffff8080
 800a710:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a714:	687a      	ldr	r2, [r7, #4]
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	781b      	ldrb	r3, [r3, #0]
 800a71a:	009b      	lsls	r3, r3, #2
 800a71c:	4413      	add	r3, r2
 800a71e:	881b      	ldrh	r3, [r3, #0]
 800a720:	b29c      	uxth	r4, r3
 800a722:	4623      	mov	r3, r4
 800a724:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d014      	beq.n	800a756 <USB_DeactivateEndpoint+0x252>
 800a72c:	687a      	ldr	r2, [r7, #4]
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	781b      	ldrb	r3, [r3, #0]
 800a732:	009b      	lsls	r3, r3, #2
 800a734:	4413      	add	r3, r2
 800a736:	881b      	ldrh	r3, [r3, #0]
 800a738:	b29b      	uxth	r3, r3
 800a73a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a73e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a742:	b29c      	uxth	r4, r3
 800a744:	687a      	ldr	r2, [r7, #4]
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	781b      	ldrb	r3, [r3, #0]
 800a74a:	009b      	lsls	r3, r3, #2
 800a74c:	441a      	add	r2, r3
 800a74e:	4b35      	ldr	r3, [pc, #212]	; (800a824 <USB_DeactivateEndpoint+0x320>)
 800a750:	4323      	orrs	r3, r4
 800a752:	b29b      	uxth	r3, r3
 800a754:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a756:	687a      	ldr	r2, [r7, #4]
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	781b      	ldrb	r3, [r3, #0]
 800a75c:	009b      	lsls	r3, r3, #2
 800a75e:	4413      	add	r3, r2
 800a760:	881b      	ldrh	r3, [r3, #0]
 800a762:	b29c      	uxth	r4, r3
 800a764:	4623      	mov	r3, r4
 800a766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d014      	beq.n	800a798 <USB_DeactivateEndpoint+0x294>
 800a76e:	687a      	ldr	r2, [r7, #4]
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	781b      	ldrb	r3, [r3, #0]
 800a774:	009b      	lsls	r3, r3, #2
 800a776:	4413      	add	r3, r2
 800a778:	881b      	ldrh	r3, [r3, #0]
 800a77a:	b29b      	uxth	r3, r3
 800a77c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a780:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a784:	b29c      	uxth	r4, r3
 800a786:	687a      	ldr	r2, [r7, #4]
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	781b      	ldrb	r3, [r3, #0]
 800a78c:	009b      	lsls	r3, r3, #2
 800a78e:	441a      	add	r2, r3
 800a790:	4b25      	ldr	r3, [pc, #148]	; (800a828 <USB_DeactivateEndpoint+0x324>)
 800a792:	4323      	orrs	r3, r4
 800a794:	b29b      	uxth	r3, r3
 800a796:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a798:	687a      	ldr	r2, [r7, #4]
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	781b      	ldrb	r3, [r3, #0]
 800a79e:	009b      	lsls	r3, r3, #2
 800a7a0:	4413      	add	r3, r2
 800a7a2:	881b      	ldrh	r3, [r3, #0]
 800a7a4:	b29b      	uxth	r3, r3
 800a7a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a7aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7ae:	b29c      	uxth	r4, r3
 800a7b0:	687a      	ldr	r2, [r7, #4]
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	781b      	ldrb	r3, [r3, #0]
 800a7b6:	009b      	lsls	r3, r3, #2
 800a7b8:	441a      	add	r2, r3
 800a7ba:	4b1a      	ldr	r3, [pc, #104]	; (800a824 <USB_DeactivateEndpoint+0x320>)
 800a7bc:	4323      	orrs	r3, r4
 800a7be:	b29b      	uxth	r3, r3
 800a7c0:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a7c2:	687a      	ldr	r2, [r7, #4]
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	781b      	ldrb	r3, [r3, #0]
 800a7c8:	009b      	lsls	r3, r3, #2
 800a7ca:	4413      	add	r3, r2
 800a7cc:	881b      	ldrh	r3, [r3, #0]
 800a7ce:	b29b      	uxth	r3, r3
 800a7d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a7d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7d8:	b29c      	uxth	r4, r3
 800a7da:	687a      	ldr	r2, [r7, #4]
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	781b      	ldrb	r3, [r3, #0]
 800a7e0:	009b      	lsls	r3, r3, #2
 800a7e2:	441a      	add	r2, r3
 800a7e4:	4b11      	ldr	r3, [pc, #68]	; (800a82c <USB_DeactivateEndpoint+0x328>)
 800a7e6:	4323      	orrs	r3, r4
 800a7e8:	b29b      	uxth	r3, r3
 800a7ea:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a7ec:	687a      	ldr	r2, [r7, #4]
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	781b      	ldrb	r3, [r3, #0]
 800a7f2:	009b      	lsls	r3, r3, #2
 800a7f4:	4413      	add	r3, r2
 800a7f6:	881b      	ldrh	r3, [r3, #0]
 800a7f8:	b29b      	uxth	r3, r3
 800a7fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a7fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a802:	b29c      	uxth	r4, r3
 800a804:	687a      	ldr	r2, [r7, #4]
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	781b      	ldrb	r3, [r3, #0]
 800a80a:	009b      	lsls	r3, r3, #2
 800a80c:	441a      	add	r2, r3
 800a80e:	4b07      	ldr	r3, [pc, #28]	; (800a82c <USB_DeactivateEndpoint+0x328>)
 800a810:	4323      	orrs	r3, r4
 800a812:	b29b      	uxth	r3, r3
 800a814:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a816:	2300      	movs	r3, #0
}
 800a818:	4618      	mov	r0, r3
 800a81a:	3708      	adds	r7, #8
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bc90      	pop	{r4, r7}
 800a820:	4770      	bx	lr
 800a822:	bf00      	nop
 800a824:	ffffc080 	.word	0xffffc080
 800a828:	ffff80c0 	.word	0xffff80c0
 800a82c:	ffff8080 	.word	0xffff8080

0800a830 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a830:	b590      	push	{r4, r7, lr}
 800a832:	b08d      	sub	sp, #52	; 0x34
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
 800a838:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	785b      	ldrb	r3, [r3, #1]
 800a83e:	2b01      	cmp	r3, #1
 800a840:	f040 8160 	bne.w	800ab04 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	699a      	ldr	r2, [r3, #24]
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	691b      	ldr	r3, [r3, #16]
 800a84c:	429a      	cmp	r2, r3
 800a84e:	d909      	bls.n	800a864 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	691b      	ldr	r3, [r3, #16]
 800a854:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	699a      	ldr	r2, [r3, #24]
 800a85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a85c:	1ad2      	subs	r2, r2, r3
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	619a      	str	r2, [r3, #24]
 800a862:	e005      	b.n	800a870 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	699b      	ldr	r3, [r3, #24]
 800a868:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	2200      	movs	r2, #0
 800a86e:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	7b1b      	ldrb	r3, [r3, #12]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d119      	bne.n	800a8ac <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	6959      	ldr	r1, [r3, #20]
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	88da      	ldrh	r2, [r3, #6]
 800a880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a882:	b29b      	uxth	r3, r3
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f000 fba2 	bl	800afce <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a88a:	687c      	ldr	r4, [r7, #4]
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a892:	b29b      	uxth	r3, r3
 800a894:	441c      	add	r4, r3
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	781b      	ldrb	r3, [r3, #0]
 800a89a:	011b      	lsls	r3, r3, #4
 800a89c:	4423      	add	r3, r4
 800a89e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a8a2:	461c      	mov	r4, r3
 800a8a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8a6:	b29b      	uxth	r3, r3
 800a8a8:	8023      	strh	r3, [r4, #0]
 800a8aa:	e10f      	b.n	800aacc <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a8ac:	687a      	ldr	r2, [r7, #4]
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	781b      	ldrb	r3, [r3, #0]
 800a8b2:	009b      	lsls	r3, r3, #2
 800a8b4:	4413      	add	r3, r2
 800a8b6:	881b      	ldrh	r3, [r3, #0]
 800a8b8:	b29b      	uxth	r3, r3
 800a8ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d065      	beq.n	800a98e <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a8c2:	687c      	ldr	r4, [r7, #4]
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	785b      	ldrb	r3, [r3, #1]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d148      	bne.n	800a95e <USB_EPStartXfer+0x12e>
 800a8cc:	687c      	ldr	r4, [r7, #4]
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a8d4:	b29b      	uxth	r3, r3
 800a8d6:	441c      	add	r4, r3
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	781b      	ldrb	r3, [r3, #0]
 800a8dc:	011b      	lsls	r3, r3, #4
 800a8de:	4423      	add	r3, r4
 800a8e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a8e4:	461c      	mov	r4, r3
 800a8e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d10e      	bne.n	800a90a <USB_EPStartXfer+0xda>
 800a8ec:	8823      	ldrh	r3, [r4, #0]
 800a8ee:	b29b      	uxth	r3, r3
 800a8f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a8f4:	b29b      	uxth	r3, r3
 800a8f6:	8023      	strh	r3, [r4, #0]
 800a8f8:	8823      	ldrh	r3, [r4, #0]
 800a8fa:	b29b      	uxth	r3, r3
 800a8fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a900:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a904:	b29b      	uxth	r3, r3
 800a906:	8023      	strh	r3, [r4, #0]
 800a908:	e03d      	b.n	800a986 <USB_EPStartXfer+0x156>
 800a90a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a90c:	2b3e      	cmp	r3, #62	; 0x3e
 800a90e:	d810      	bhi.n	800a932 <USB_EPStartXfer+0x102>
 800a910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a912:	085b      	lsrs	r3, r3, #1
 800a914:	627b      	str	r3, [r7, #36]	; 0x24
 800a916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a918:	f003 0301 	and.w	r3, r3, #1
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d002      	beq.n	800a926 <USB_EPStartXfer+0xf6>
 800a920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a922:	3301      	adds	r3, #1
 800a924:	627b      	str	r3, [r7, #36]	; 0x24
 800a926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a928:	b29b      	uxth	r3, r3
 800a92a:	029b      	lsls	r3, r3, #10
 800a92c:	b29b      	uxth	r3, r3
 800a92e:	8023      	strh	r3, [r4, #0]
 800a930:	e029      	b.n	800a986 <USB_EPStartXfer+0x156>
 800a932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a934:	095b      	lsrs	r3, r3, #5
 800a936:	627b      	str	r3, [r7, #36]	; 0x24
 800a938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a93a:	f003 031f 	and.w	r3, r3, #31
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d102      	bne.n	800a948 <USB_EPStartXfer+0x118>
 800a942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a944:	3b01      	subs	r3, #1
 800a946:	627b      	str	r3, [r7, #36]	; 0x24
 800a948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a94a:	b29b      	uxth	r3, r3
 800a94c:	029b      	lsls	r3, r3, #10
 800a94e:	b29b      	uxth	r3, r3
 800a950:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a954:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a958:	b29b      	uxth	r3, r3
 800a95a:	8023      	strh	r3, [r4, #0]
 800a95c:	e013      	b.n	800a986 <USB_EPStartXfer+0x156>
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	785b      	ldrb	r3, [r3, #1]
 800a962:	2b01      	cmp	r3, #1
 800a964:	d10f      	bne.n	800a986 <USB_EPStartXfer+0x156>
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a96c:	b29b      	uxth	r3, r3
 800a96e:	441c      	add	r4, r3
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	781b      	ldrb	r3, [r3, #0]
 800a974:	011b      	lsls	r3, r3, #4
 800a976:	4423      	add	r3, r4
 800a978:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a97c:	60fb      	str	r3, [r7, #12]
 800a97e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a980:	b29a      	uxth	r2, r3
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	895b      	ldrh	r3, [r3, #10]
 800a98a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a98c:	e063      	b.n	800aa56 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	785b      	ldrb	r3, [r3, #1]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d148      	bne.n	800aa28 <USB_EPStartXfer+0x1f8>
 800a996:	687c      	ldr	r4, [r7, #4]
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a99e:	b29b      	uxth	r3, r3
 800a9a0:	441c      	add	r4, r3
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	781b      	ldrb	r3, [r3, #0]
 800a9a6:	011b      	lsls	r3, r3, #4
 800a9a8:	4423      	add	r3, r4
 800a9aa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a9ae:	461c      	mov	r4, r3
 800a9b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d10e      	bne.n	800a9d4 <USB_EPStartXfer+0x1a4>
 800a9b6:	8823      	ldrh	r3, [r4, #0]
 800a9b8:	b29b      	uxth	r3, r3
 800a9ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a9be:	b29b      	uxth	r3, r3
 800a9c0:	8023      	strh	r3, [r4, #0]
 800a9c2:	8823      	ldrh	r3, [r4, #0]
 800a9c4:	b29b      	uxth	r3, r3
 800a9c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9ce:	b29b      	uxth	r3, r3
 800a9d0:	8023      	strh	r3, [r4, #0]
 800a9d2:	e03d      	b.n	800aa50 <USB_EPStartXfer+0x220>
 800a9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9d6:	2b3e      	cmp	r3, #62	; 0x3e
 800a9d8:	d810      	bhi.n	800a9fc <USB_EPStartXfer+0x1cc>
 800a9da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9dc:	085b      	lsrs	r3, r3, #1
 800a9de:	623b      	str	r3, [r7, #32]
 800a9e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9e2:	f003 0301 	and.w	r3, r3, #1
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d002      	beq.n	800a9f0 <USB_EPStartXfer+0x1c0>
 800a9ea:	6a3b      	ldr	r3, [r7, #32]
 800a9ec:	3301      	adds	r3, #1
 800a9ee:	623b      	str	r3, [r7, #32]
 800a9f0:	6a3b      	ldr	r3, [r7, #32]
 800a9f2:	b29b      	uxth	r3, r3
 800a9f4:	029b      	lsls	r3, r3, #10
 800a9f6:	b29b      	uxth	r3, r3
 800a9f8:	8023      	strh	r3, [r4, #0]
 800a9fa:	e029      	b.n	800aa50 <USB_EPStartXfer+0x220>
 800a9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9fe:	095b      	lsrs	r3, r3, #5
 800aa00:	623b      	str	r3, [r7, #32]
 800aa02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa04:	f003 031f 	and.w	r3, r3, #31
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d102      	bne.n	800aa12 <USB_EPStartXfer+0x1e2>
 800aa0c:	6a3b      	ldr	r3, [r7, #32]
 800aa0e:	3b01      	subs	r3, #1
 800aa10:	623b      	str	r3, [r7, #32]
 800aa12:	6a3b      	ldr	r3, [r7, #32]
 800aa14:	b29b      	uxth	r3, r3
 800aa16:	029b      	lsls	r3, r3, #10
 800aa18:	b29b      	uxth	r3, r3
 800aa1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa22:	b29b      	uxth	r3, r3
 800aa24:	8023      	strh	r3, [r4, #0]
 800aa26:	e013      	b.n	800aa50 <USB_EPStartXfer+0x220>
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	785b      	ldrb	r3, [r3, #1]
 800aa2c:	2b01      	cmp	r3, #1
 800aa2e:	d10f      	bne.n	800aa50 <USB_EPStartXfer+0x220>
 800aa30:	687c      	ldr	r4, [r7, #4]
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa38:	b29b      	uxth	r3, r3
 800aa3a:	441c      	add	r4, r3
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	781b      	ldrb	r3, [r3, #0]
 800aa40:	011b      	lsls	r3, r3, #4
 800aa42:	4423      	add	r3, r4
 800aa44:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800aa48:	461c      	mov	r4, r3
 800aa4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa4c:	b29b      	uxth	r3, r3
 800aa4e:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	891b      	ldrh	r3, [r3, #8]
 800aa54:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	6959      	ldr	r1, [r3, #20]
 800aa5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa5c:	b29b      	uxth	r3, r3
 800aa5e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	f000 fab4 	bl	800afce <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	785b      	ldrb	r3, [r3, #1]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d115      	bne.n	800aa9a <USB_EPStartXfer+0x26a>
 800aa6e:	687a      	ldr	r2, [r7, #4]
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	781b      	ldrb	r3, [r3, #0]
 800aa74:	009b      	lsls	r3, r3, #2
 800aa76:	4413      	add	r3, r2
 800aa78:	881b      	ldrh	r3, [r3, #0]
 800aa7a:	b29b      	uxth	r3, r3
 800aa7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa84:	b29c      	uxth	r4, r3
 800aa86:	687a      	ldr	r2, [r7, #4]
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	781b      	ldrb	r3, [r3, #0]
 800aa8c:	009b      	lsls	r3, r3, #2
 800aa8e:	441a      	add	r2, r3
 800aa90:	4b9a      	ldr	r3, [pc, #616]	; (800acfc <USB_EPStartXfer+0x4cc>)
 800aa92:	4323      	orrs	r3, r4
 800aa94:	b29b      	uxth	r3, r3
 800aa96:	8013      	strh	r3, [r2, #0]
 800aa98:	e018      	b.n	800aacc <USB_EPStartXfer+0x29c>
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	785b      	ldrb	r3, [r3, #1]
 800aa9e:	2b01      	cmp	r3, #1
 800aaa0:	d114      	bne.n	800aacc <USB_EPStartXfer+0x29c>
 800aaa2:	687a      	ldr	r2, [r7, #4]
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	781b      	ldrb	r3, [r3, #0]
 800aaa8:	009b      	lsls	r3, r3, #2
 800aaaa:	4413      	add	r3, r2
 800aaac:	881b      	ldrh	r3, [r3, #0]
 800aaae:	b29b      	uxth	r3, r3
 800aab0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aab8:	b29c      	uxth	r4, r3
 800aaba:	687a      	ldr	r2, [r7, #4]
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	781b      	ldrb	r3, [r3, #0]
 800aac0:	009b      	lsls	r3, r3, #2
 800aac2:	441a      	add	r2, r3
 800aac4:	4b8e      	ldr	r3, [pc, #568]	; (800ad00 <USB_EPStartXfer+0x4d0>)
 800aac6:	4323      	orrs	r3, r4
 800aac8:	b29b      	uxth	r3, r3
 800aaca:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800aacc:	687a      	ldr	r2, [r7, #4]
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	781b      	ldrb	r3, [r3, #0]
 800aad2:	009b      	lsls	r3, r3, #2
 800aad4:	4413      	add	r3, r2
 800aad6:	881b      	ldrh	r3, [r3, #0]
 800aad8:	b29b      	uxth	r3, r3
 800aada:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aade:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aae2:	b29c      	uxth	r4, r3
 800aae4:	f084 0310 	eor.w	r3, r4, #16
 800aae8:	b29c      	uxth	r4, r3
 800aaea:	f084 0320 	eor.w	r3, r4, #32
 800aaee:	b29c      	uxth	r4, r3
 800aaf0:	687a      	ldr	r2, [r7, #4]
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	781b      	ldrb	r3, [r3, #0]
 800aaf6:	009b      	lsls	r3, r3, #2
 800aaf8:	441a      	add	r2, r3
 800aafa:	4b82      	ldr	r3, [pc, #520]	; (800ad04 <USB_EPStartXfer+0x4d4>)
 800aafc:	4323      	orrs	r3, r4
 800aafe:	b29b      	uxth	r3, r3
 800ab00:	8013      	strh	r3, [r2, #0]
 800ab02:	e146      	b.n	800ad92 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	699a      	ldr	r2, [r3, #24]
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	691b      	ldr	r3, [r3, #16]
 800ab0c:	429a      	cmp	r2, r3
 800ab0e:	d909      	bls.n	800ab24 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	691b      	ldr	r3, [r3, #16]
 800ab14:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	699a      	ldr	r2, [r3, #24]
 800ab1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab1c:	1ad2      	subs	r2, r2, r3
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	619a      	str	r2, [r3, #24]
 800ab22:	e005      	b.n	800ab30 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	699b      	ldr	r3, [r3, #24]
 800ab28:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	7b1b      	ldrb	r3, [r3, #12]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d148      	bne.n	800abca <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800ab38:	687c      	ldr	r4, [r7, #4]
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab40:	b29b      	uxth	r3, r3
 800ab42:	441c      	add	r4, r3
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	781b      	ldrb	r3, [r3, #0]
 800ab48:	011b      	lsls	r3, r3, #4
 800ab4a:	4423      	add	r3, r4
 800ab4c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ab50:	461c      	mov	r4, r3
 800ab52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d10e      	bne.n	800ab76 <USB_EPStartXfer+0x346>
 800ab58:	8823      	ldrh	r3, [r4, #0]
 800ab5a:	b29b      	uxth	r3, r3
 800ab5c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ab60:	b29b      	uxth	r3, r3
 800ab62:	8023      	strh	r3, [r4, #0]
 800ab64:	8823      	ldrh	r3, [r4, #0]
 800ab66:	b29b      	uxth	r3, r3
 800ab68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab70:	b29b      	uxth	r3, r3
 800ab72:	8023      	strh	r3, [r4, #0]
 800ab74:	e0f2      	b.n	800ad5c <USB_EPStartXfer+0x52c>
 800ab76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab78:	2b3e      	cmp	r3, #62	; 0x3e
 800ab7a:	d810      	bhi.n	800ab9e <USB_EPStartXfer+0x36e>
 800ab7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab7e:	085b      	lsrs	r3, r3, #1
 800ab80:	61fb      	str	r3, [r7, #28]
 800ab82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab84:	f003 0301 	and.w	r3, r3, #1
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d002      	beq.n	800ab92 <USB_EPStartXfer+0x362>
 800ab8c:	69fb      	ldr	r3, [r7, #28]
 800ab8e:	3301      	adds	r3, #1
 800ab90:	61fb      	str	r3, [r7, #28]
 800ab92:	69fb      	ldr	r3, [r7, #28]
 800ab94:	b29b      	uxth	r3, r3
 800ab96:	029b      	lsls	r3, r3, #10
 800ab98:	b29b      	uxth	r3, r3
 800ab9a:	8023      	strh	r3, [r4, #0]
 800ab9c:	e0de      	b.n	800ad5c <USB_EPStartXfer+0x52c>
 800ab9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aba0:	095b      	lsrs	r3, r3, #5
 800aba2:	61fb      	str	r3, [r7, #28]
 800aba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aba6:	f003 031f 	and.w	r3, r3, #31
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d102      	bne.n	800abb4 <USB_EPStartXfer+0x384>
 800abae:	69fb      	ldr	r3, [r7, #28]
 800abb0:	3b01      	subs	r3, #1
 800abb2:	61fb      	str	r3, [r7, #28]
 800abb4:	69fb      	ldr	r3, [r7, #28]
 800abb6:	b29b      	uxth	r3, r3
 800abb8:	029b      	lsls	r3, r3, #10
 800abba:	b29b      	uxth	r3, r3
 800abbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800abc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800abc4:	b29b      	uxth	r3, r3
 800abc6:	8023      	strh	r3, [r4, #0]
 800abc8:	e0c8      	b.n	800ad5c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	785b      	ldrb	r3, [r3, #1]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d148      	bne.n	800ac64 <USB_EPStartXfer+0x434>
 800abd2:	687c      	ldr	r4, [r7, #4]
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800abda:	b29b      	uxth	r3, r3
 800abdc:	441c      	add	r4, r3
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	781b      	ldrb	r3, [r3, #0]
 800abe2:	011b      	lsls	r3, r3, #4
 800abe4:	4423      	add	r3, r4
 800abe6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800abea:	461c      	mov	r4, r3
 800abec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d10e      	bne.n	800ac10 <USB_EPStartXfer+0x3e0>
 800abf2:	8823      	ldrh	r3, [r4, #0]
 800abf4:	b29b      	uxth	r3, r3
 800abf6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800abfa:	b29b      	uxth	r3, r3
 800abfc:	8023      	strh	r3, [r4, #0]
 800abfe:	8823      	ldrh	r3, [r4, #0]
 800ac00:	b29b      	uxth	r3, r3
 800ac02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac0a:	b29b      	uxth	r3, r3
 800ac0c:	8023      	strh	r3, [r4, #0]
 800ac0e:	e03d      	b.n	800ac8c <USB_EPStartXfer+0x45c>
 800ac10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac12:	2b3e      	cmp	r3, #62	; 0x3e
 800ac14:	d810      	bhi.n	800ac38 <USB_EPStartXfer+0x408>
 800ac16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac18:	085b      	lsrs	r3, r3, #1
 800ac1a:	61bb      	str	r3, [r7, #24]
 800ac1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac1e:	f003 0301 	and.w	r3, r3, #1
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d002      	beq.n	800ac2c <USB_EPStartXfer+0x3fc>
 800ac26:	69bb      	ldr	r3, [r7, #24]
 800ac28:	3301      	adds	r3, #1
 800ac2a:	61bb      	str	r3, [r7, #24]
 800ac2c:	69bb      	ldr	r3, [r7, #24]
 800ac2e:	b29b      	uxth	r3, r3
 800ac30:	029b      	lsls	r3, r3, #10
 800ac32:	b29b      	uxth	r3, r3
 800ac34:	8023      	strh	r3, [r4, #0]
 800ac36:	e029      	b.n	800ac8c <USB_EPStartXfer+0x45c>
 800ac38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac3a:	095b      	lsrs	r3, r3, #5
 800ac3c:	61bb      	str	r3, [r7, #24]
 800ac3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac40:	f003 031f 	and.w	r3, r3, #31
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d102      	bne.n	800ac4e <USB_EPStartXfer+0x41e>
 800ac48:	69bb      	ldr	r3, [r7, #24]
 800ac4a:	3b01      	subs	r3, #1
 800ac4c:	61bb      	str	r3, [r7, #24]
 800ac4e:	69bb      	ldr	r3, [r7, #24]
 800ac50:	b29b      	uxth	r3, r3
 800ac52:	029b      	lsls	r3, r3, #10
 800ac54:	b29b      	uxth	r3, r3
 800ac56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac5e:	b29b      	uxth	r3, r3
 800ac60:	8023      	strh	r3, [r4, #0]
 800ac62:	e013      	b.n	800ac8c <USB_EPStartXfer+0x45c>
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	785b      	ldrb	r3, [r3, #1]
 800ac68:	2b01      	cmp	r3, #1
 800ac6a:	d10f      	bne.n	800ac8c <USB_EPStartXfer+0x45c>
 800ac6c:	687c      	ldr	r4, [r7, #4]
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac74:	b29b      	uxth	r3, r3
 800ac76:	441c      	add	r4, r3
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	781b      	ldrb	r3, [r3, #0]
 800ac7c:	011b      	lsls	r3, r3, #4
 800ac7e:	4423      	add	r3, r4
 800ac80:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ac84:	461c      	mov	r4, r3
 800ac86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac88:	b29b      	uxth	r3, r3
 800ac8a:	8023      	strh	r3, [r4, #0]
 800ac8c:	687c      	ldr	r4, [r7, #4]
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	785b      	ldrb	r3, [r3, #1]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d14e      	bne.n	800ad34 <USB_EPStartXfer+0x504>
 800ac96:	687c      	ldr	r4, [r7, #4]
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac9e:	b29b      	uxth	r3, r3
 800aca0:	441c      	add	r4, r3
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	781b      	ldrb	r3, [r3, #0]
 800aca6:	011b      	lsls	r3, r3, #4
 800aca8:	4423      	add	r3, r4
 800acaa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800acae:	461c      	mov	r4, r3
 800acb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d10e      	bne.n	800acd4 <USB_EPStartXfer+0x4a4>
 800acb6:	8823      	ldrh	r3, [r4, #0]
 800acb8:	b29b      	uxth	r3, r3
 800acba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800acbe:	b29b      	uxth	r3, r3
 800acc0:	8023      	strh	r3, [r4, #0]
 800acc2:	8823      	ldrh	r3, [r4, #0]
 800acc4:	b29b      	uxth	r3, r3
 800acc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800acca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800acce:	b29b      	uxth	r3, r3
 800acd0:	8023      	strh	r3, [r4, #0]
 800acd2:	e043      	b.n	800ad5c <USB_EPStartXfer+0x52c>
 800acd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acd6:	2b3e      	cmp	r3, #62	; 0x3e
 800acd8:	d816      	bhi.n	800ad08 <USB_EPStartXfer+0x4d8>
 800acda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acdc:	085b      	lsrs	r3, r3, #1
 800acde:	617b      	str	r3, [r7, #20]
 800ace0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ace2:	f003 0301 	and.w	r3, r3, #1
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d002      	beq.n	800acf0 <USB_EPStartXfer+0x4c0>
 800acea:	697b      	ldr	r3, [r7, #20]
 800acec:	3301      	adds	r3, #1
 800acee:	617b      	str	r3, [r7, #20]
 800acf0:	697b      	ldr	r3, [r7, #20]
 800acf2:	b29b      	uxth	r3, r3
 800acf4:	029b      	lsls	r3, r3, #10
 800acf6:	b29b      	uxth	r3, r3
 800acf8:	8023      	strh	r3, [r4, #0]
 800acfa:	e02f      	b.n	800ad5c <USB_EPStartXfer+0x52c>
 800acfc:	ffff80c0 	.word	0xffff80c0
 800ad00:	ffffc080 	.word	0xffffc080
 800ad04:	ffff8080 	.word	0xffff8080
 800ad08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad0a:	095b      	lsrs	r3, r3, #5
 800ad0c:	617b      	str	r3, [r7, #20]
 800ad0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad10:	f003 031f 	and.w	r3, r3, #31
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d102      	bne.n	800ad1e <USB_EPStartXfer+0x4ee>
 800ad18:	697b      	ldr	r3, [r7, #20]
 800ad1a:	3b01      	subs	r3, #1
 800ad1c:	617b      	str	r3, [r7, #20]
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	b29b      	uxth	r3, r3
 800ad22:	029b      	lsls	r3, r3, #10
 800ad24:	b29b      	uxth	r3, r3
 800ad26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad2e:	b29b      	uxth	r3, r3
 800ad30:	8023      	strh	r3, [r4, #0]
 800ad32:	e013      	b.n	800ad5c <USB_EPStartXfer+0x52c>
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	785b      	ldrb	r3, [r3, #1]
 800ad38:	2b01      	cmp	r3, #1
 800ad3a:	d10f      	bne.n	800ad5c <USB_EPStartXfer+0x52c>
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad42:	b29b      	uxth	r3, r3
 800ad44:	441c      	add	r4, r3
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	781b      	ldrb	r3, [r3, #0]
 800ad4a:	011b      	lsls	r3, r3, #4
 800ad4c:	4423      	add	r3, r4
 800ad4e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ad52:	613b      	str	r3, [r7, #16]
 800ad54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad56:	b29a      	uxth	r2, r3
 800ad58:	693b      	ldr	r3, [r7, #16]
 800ad5a:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ad5c:	687a      	ldr	r2, [r7, #4]
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	781b      	ldrb	r3, [r3, #0]
 800ad62:	009b      	lsls	r3, r3, #2
 800ad64:	4413      	add	r3, r2
 800ad66:	881b      	ldrh	r3, [r3, #0]
 800ad68:	b29b      	uxth	r3, r3
 800ad6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ad6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad72:	b29c      	uxth	r4, r3
 800ad74:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800ad78:	b29c      	uxth	r4, r3
 800ad7a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800ad7e:	b29c      	uxth	r4, r3
 800ad80:	687a      	ldr	r2, [r7, #4]
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	781b      	ldrb	r3, [r3, #0]
 800ad86:	009b      	lsls	r3, r3, #2
 800ad88:	441a      	add	r2, r3
 800ad8a:	4b04      	ldr	r3, [pc, #16]	; (800ad9c <USB_EPStartXfer+0x56c>)
 800ad8c:	4323      	orrs	r3, r4
 800ad8e:	b29b      	uxth	r3, r3
 800ad90:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ad92:	2300      	movs	r3, #0
}
 800ad94:	4618      	mov	r0, r3
 800ad96:	3734      	adds	r7, #52	; 0x34
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd90      	pop	{r4, r7, pc}
 800ad9c:	ffff8080 	.word	0xffff8080

0800ada0 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ada0:	b490      	push	{r4, r7}
 800ada2:	b082      	sub	sp, #8
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
 800ada8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	785b      	ldrb	r3, [r3, #1]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d018      	beq.n	800ade4 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800adb2:	687a      	ldr	r2, [r7, #4]
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	781b      	ldrb	r3, [r3, #0]
 800adb8:	009b      	lsls	r3, r3, #2
 800adba:	4413      	add	r3, r2
 800adbc:	881b      	ldrh	r3, [r3, #0]
 800adbe:	b29b      	uxth	r3, r3
 800adc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800adc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800adc8:	b29c      	uxth	r4, r3
 800adca:	f084 0310 	eor.w	r3, r4, #16
 800adce:	b29c      	uxth	r4, r3
 800add0:	687a      	ldr	r2, [r7, #4]
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	781b      	ldrb	r3, [r3, #0]
 800add6:	009b      	lsls	r3, r3, #2
 800add8:	441a      	add	r2, r3
 800adda:	4b11      	ldr	r3, [pc, #68]	; (800ae20 <USB_EPSetStall+0x80>)
 800addc:	4323      	orrs	r3, r4
 800adde:	b29b      	uxth	r3, r3
 800ade0:	8013      	strh	r3, [r2, #0]
 800ade2:	e017      	b.n	800ae14 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800ade4:	687a      	ldr	r2, [r7, #4]
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	781b      	ldrb	r3, [r3, #0]
 800adea:	009b      	lsls	r3, r3, #2
 800adec:	4413      	add	r3, r2
 800adee:	881b      	ldrh	r3, [r3, #0]
 800adf0:	b29b      	uxth	r3, r3
 800adf2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800adf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800adfa:	b29c      	uxth	r4, r3
 800adfc:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800ae00:	b29c      	uxth	r4, r3
 800ae02:	687a      	ldr	r2, [r7, #4]
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	781b      	ldrb	r3, [r3, #0]
 800ae08:	009b      	lsls	r3, r3, #2
 800ae0a:	441a      	add	r2, r3
 800ae0c:	4b04      	ldr	r3, [pc, #16]	; (800ae20 <USB_EPSetStall+0x80>)
 800ae0e:	4323      	orrs	r3, r4
 800ae10:	b29b      	uxth	r3, r3
 800ae12:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ae14:	2300      	movs	r3, #0
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	3708      	adds	r7, #8
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bc90      	pop	{r4, r7}
 800ae1e:	4770      	bx	lr
 800ae20:	ffff8080 	.word	0xffff8080

0800ae24 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ae24:	b490      	push	{r4, r7}
 800ae26:	b082      	sub	sp, #8
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
 800ae2c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	7b1b      	ldrb	r3, [r3, #12]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d17d      	bne.n	800af32 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	785b      	ldrb	r3, [r3, #1]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d03d      	beq.n	800aeba <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ae3e:	687a      	ldr	r2, [r7, #4]
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	781b      	ldrb	r3, [r3, #0]
 800ae44:	009b      	lsls	r3, r3, #2
 800ae46:	4413      	add	r3, r2
 800ae48:	881b      	ldrh	r3, [r3, #0]
 800ae4a:	b29c      	uxth	r4, r3
 800ae4c:	4623      	mov	r3, r4
 800ae4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d014      	beq.n	800ae80 <USB_EPClearStall+0x5c>
 800ae56:	687a      	ldr	r2, [r7, #4]
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	781b      	ldrb	r3, [r3, #0]
 800ae5c:	009b      	lsls	r3, r3, #2
 800ae5e:	4413      	add	r3, r2
 800ae60:	881b      	ldrh	r3, [r3, #0]
 800ae62:	b29b      	uxth	r3, r3
 800ae64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae6c:	b29c      	uxth	r4, r3
 800ae6e:	687a      	ldr	r2, [r7, #4]
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	781b      	ldrb	r3, [r3, #0]
 800ae74:	009b      	lsls	r3, r3, #2
 800ae76:	441a      	add	r2, r3
 800ae78:	4b31      	ldr	r3, [pc, #196]	; (800af40 <USB_EPClearStall+0x11c>)
 800ae7a:	4323      	orrs	r3, r4
 800ae7c:	b29b      	uxth	r3, r3
 800ae7e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	78db      	ldrb	r3, [r3, #3]
 800ae84:	2b01      	cmp	r3, #1
 800ae86:	d054      	beq.n	800af32 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ae88:	687a      	ldr	r2, [r7, #4]
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	781b      	ldrb	r3, [r3, #0]
 800ae8e:	009b      	lsls	r3, r3, #2
 800ae90:	4413      	add	r3, r2
 800ae92:	881b      	ldrh	r3, [r3, #0]
 800ae94:	b29b      	uxth	r3, r3
 800ae96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae9e:	b29c      	uxth	r4, r3
 800aea0:	f084 0320 	eor.w	r3, r4, #32
 800aea4:	b29c      	uxth	r4, r3
 800aea6:	687a      	ldr	r2, [r7, #4]
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	781b      	ldrb	r3, [r3, #0]
 800aeac:	009b      	lsls	r3, r3, #2
 800aeae:	441a      	add	r2, r3
 800aeb0:	4b24      	ldr	r3, [pc, #144]	; (800af44 <USB_EPClearStall+0x120>)
 800aeb2:	4323      	orrs	r3, r4
 800aeb4:	b29b      	uxth	r3, r3
 800aeb6:	8013      	strh	r3, [r2, #0]
 800aeb8:	e03b      	b.n	800af32 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aeba:	687a      	ldr	r2, [r7, #4]
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	781b      	ldrb	r3, [r3, #0]
 800aec0:	009b      	lsls	r3, r3, #2
 800aec2:	4413      	add	r3, r2
 800aec4:	881b      	ldrh	r3, [r3, #0]
 800aec6:	b29c      	uxth	r4, r3
 800aec8:	4623      	mov	r3, r4
 800aeca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d014      	beq.n	800aefc <USB_EPClearStall+0xd8>
 800aed2:	687a      	ldr	r2, [r7, #4]
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	781b      	ldrb	r3, [r3, #0]
 800aed8:	009b      	lsls	r3, r3, #2
 800aeda:	4413      	add	r3, r2
 800aedc:	881b      	ldrh	r3, [r3, #0]
 800aede:	b29b      	uxth	r3, r3
 800aee0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aee4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aee8:	b29c      	uxth	r4, r3
 800aeea:	687a      	ldr	r2, [r7, #4]
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	781b      	ldrb	r3, [r3, #0]
 800aef0:	009b      	lsls	r3, r3, #2
 800aef2:	441a      	add	r2, r3
 800aef4:	4b14      	ldr	r3, [pc, #80]	; (800af48 <USB_EPClearStall+0x124>)
 800aef6:	4323      	orrs	r3, r4
 800aef8:	b29b      	uxth	r3, r3
 800aefa:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800aefc:	687a      	ldr	r2, [r7, #4]
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	781b      	ldrb	r3, [r3, #0]
 800af02:	009b      	lsls	r3, r3, #2
 800af04:	4413      	add	r3, r2
 800af06:	881b      	ldrh	r3, [r3, #0]
 800af08:	b29b      	uxth	r3, r3
 800af0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800af0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af12:	b29c      	uxth	r4, r3
 800af14:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800af18:	b29c      	uxth	r4, r3
 800af1a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800af1e:	b29c      	uxth	r4, r3
 800af20:	687a      	ldr	r2, [r7, #4]
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	781b      	ldrb	r3, [r3, #0]
 800af26:	009b      	lsls	r3, r3, #2
 800af28:	441a      	add	r2, r3
 800af2a:	4b06      	ldr	r3, [pc, #24]	; (800af44 <USB_EPClearStall+0x120>)
 800af2c:	4323      	orrs	r3, r4
 800af2e:	b29b      	uxth	r3, r3
 800af30:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800af32:	2300      	movs	r3, #0
}
 800af34:	4618      	mov	r0, r3
 800af36:	3708      	adds	r7, #8
 800af38:	46bd      	mov	sp, r7
 800af3a:	bc90      	pop	{r4, r7}
 800af3c:	4770      	bx	lr
 800af3e:	bf00      	nop
 800af40:	ffff80c0 	.word	0xffff80c0
 800af44:	ffff8080 	.word	0xffff8080
 800af48:	ffffc080 	.word	0xffffc080

0800af4c <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800af4c:	b480      	push	{r7}
 800af4e:	b083      	sub	sp, #12
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
 800af54:	460b      	mov	r3, r1
 800af56:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800af58:	78fb      	ldrb	r3, [r7, #3]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d103      	bne.n	800af66 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2280      	movs	r2, #128	; 0x80
 800af62:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800af66:	2300      	movs	r3, #0
}
 800af68:	4618      	mov	r0, r3
 800af6a:	370c      	adds	r7, #12
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bc80      	pop	{r7}
 800af70:	4770      	bx	lr

0800af72 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800af72:	b480      	push	{r7}
 800af74:	b083      	sub	sp, #12
 800af76:	af00      	add	r7, sp, #0
 800af78:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800af7a:	2300      	movs	r3, #0
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	370c      	adds	r7, #12
 800af80:	46bd      	mov	sp, r7
 800af82:	bc80      	pop	{r7}
 800af84:	4770      	bx	lr

0800af86 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800af86:	b480      	push	{r7}
 800af88:	b083      	sub	sp, #12
 800af8a:	af00      	add	r7, sp, #0
 800af8c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800af8e:	2300      	movs	r3, #0
}
 800af90:	4618      	mov	r0, r3
 800af92:	370c      	adds	r7, #12
 800af94:	46bd      	mov	sp, r7
 800af96:	bc80      	pop	{r7}
 800af98:	4770      	bx	lr

0800af9a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800af9a:	b480      	push	{r7}
 800af9c:	b085      	sub	sp, #20
 800af9e:	af00      	add	r7, sp, #0
 800afa0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800afa8:	b29b      	uxth	r3, r3
 800afaa:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800afac:	68fb      	ldr	r3, [r7, #12]
}
 800afae:	4618      	mov	r0, r3
 800afb0:	3714      	adds	r7, #20
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bc80      	pop	{r7}
 800afb6:	4770      	bx	lr

0800afb8 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800afb8:	b480      	push	{r7}
 800afba:	b083      	sub	sp, #12
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
 800afc0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800afc2:	2300      	movs	r3, #0
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	370c      	adds	r7, #12
 800afc8:	46bd      	mov	sp, r7
 800afca:	bc80      	pop	{r7}
 800afcc:	4770      	bx	lr

0800afce <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800afce:	b480      	push	{r7}
 800afd0:	b08d      	sub	sp, #52	; 0x34
 800afd2:	af00      	add	r7, sp, #0
 800afd4:	60f8      	str	r0, [r7, #12]
 800afd6:	60b9      	str	r1, [r7, #8]
 800afd8:	4611      	mov	r1, r2
 800afda:	461a      	mov	r2, r3
 800afdc:	460b      	mov	r3, r1
 800afde:	80fb      	strh	r3, [r7, #6]
 800afe0:	4613      	mov	r3, r2
 800afe2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800afe4:	88bb      	ldrh	r3, [r7, #4]
 800afe6:	3301      	adds	r3, #1
 800afe8:	085b      	lsrs	r3, r3, #1
 800afea:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800aff4:	88fb      	ldrh	r3, [r7, #6]
 800aff6:	005a      	lsls	r2, r3, #1
 800aff8:	69fb      	ldr	r3, [r7, #28]
 800affa:	4413      	add	r3, r2
 800affc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b000:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800b002:	6a3b      	ldr	r3, [r7, #32]
 800b004:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b006:	e01e      	b.n	800b046 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800b008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b00a:	781b      	ldrb	r3, [r3, #0]
 800b00c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800b00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b010:	3301      	adds	r3, #1
 800b012:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800b014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b016:	781b      	ldrb	r3, [r3, #0]
 800b018:	b29b      	uxth	r3, r3
 800b01a:	021b      	lsls	r3, r3, #8
 800b01c:	b29b      	uxth	r3, r3
 800b01e:	461a      	mov	r2, r3
 800b020:	69bb      	ldr	r3, [r7, #24]
 800b022:	4313      	orrs	r3, r2
 800b024:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800b026:	697b      	ldr	r3, [r7, #20]
 800b028:	b29a      	uxth	r2, r3
 800b02a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b02c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800b02e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b030:	3302      	adds	r3, #2
 800b032:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800b034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b036:	3302      	adds	r3, #2
 800b038:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800b03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b03c:	3301      	adds	r3, #1
 800b03e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800b040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b042:	3b01      	subs	r3, #1
 800b044:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d1dd      	bne.n	800b008 <USB_WritePMA+0x3a>
  }
}
 800b04c:	bf00      	nop
 800b04e:	3734      	adds	r7, #52	; 0x34
 800b050:	46bd      	mov	sp, r7
 800b052:	bc80      	pop	{r7}
 800b054:	4770      	bx	lr

0800b056 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b056:	b480      	push	{r7}
 800b058:	b08b      	sub	sp, #44	; 0x2c
 800b05a:	af00      	add	r7, sp, #0
 800b05c:	60f8      	str	r0, [r7, #12]
 800b05e:	60b9      	str	r1, [r7, #8]
 800b060:	4611      	mov	r1, r2
 800b062:	461a      	mov	r2, r3
 800b064:	460b      	mov	r3, r1
 800b066:	80fb      	strh	r3, [r7, #6]
 800b068:	4613      	mov	r3, r2
 800b06a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800b06c:	88bb      	ldrh	r3, [r7, #4]
 800b06e:	085b      	lsrs	r3, r3, #1
 800b070:	b29b      	uxth	r3, r3
 800b072:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b07c:	88fb      	ldrh	r3, [r7, #6]
 800b07e:	005a      	lsls	r2, r3, #1
 800b080:	697b      	ldr	r3, [r7, #20]
 800b082:	4413      	add	r3, r2
 800b084:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b088:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800b08a:	69bb      	ldr	r3, [r7, #24]
 800b08c:	627b      	str	r3, [r7, #36]	; 0x24
 800b08e:	e01b      	b.n	800b0c8 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800b090:	6a3b      	ldr	r3, [r7, #32]
 800b092:	881b      	ldrh	r3, [r3, #0]
 800b094:	b29b      	uxth	r3, r3
 800b096:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800b098:	6a3b      	ldr	r3, [r7, #32]
 800b09a:	3302      	adds	r3, #2
 800b09c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800b09e:	693b      	ldr	r3, [r7, #16]
 800b0a0:	b2da      	uxtb	r2, r3
 800b0a2:	69fb      	ldr	r3, [r7, #28]
 800b0a4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b0a6:	69fb      	ldr	r3, [r7, #28]
 800b0a8:	3301      	adds	r3, #1
 800b0aa:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800b0ac:	693b      	ldr	r3, [r7, #16]
 800b0ae:	0a1b      	lsrs	r3, r3, #8
 800b0b0:	b2da      	uxtb	r2, r3
 800b0b2:	69fb      	ldr	r3, [r7, #28]
 800b0b4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b0b6:	69fb      	ldr	r3, [r7, #28]
 800b0b8:	3301      	adds	r3, #1
 800b0ba:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800b0bc:	6a3b      	ldr	r3, [r7, #32]
 800b0be:	3302      	adds	r3, #2
 800b0c0:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800b0c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0c4:	3b01      	subs	r3, #1
 800b0c6:	627b      	str	r3, [r7, #36]	; 0x24
 800b0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d1e0      	bne.n	800b090 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800b0ce:	88bb      	ldrh	r3, [r7, #4]
 800b0d0:	f003 0301 	and.w	r3, r3, #1
 800b0d4:	b29b      	uxth	r3, r3
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d007      	beq.n	800b0ea <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800b0da:	6a3b      	ldr	r3, [r7, #32]
 800b0dc:	881b      	ldrh	r3, [r3, #0]
 800b0de:	b29b      	uxth	r3, r3
 800b0e0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800b0e2:	693b      	ldr	r3, [r7, #16]
 800b0e4:	b2da      	uxtb	r2, r3
 800b0e6:	69fb      	ldr	r3, [r7, #28]
 800b0e8:	701a      	strb	r2, [r3, #0]
  }
}
 800b0ea:	bf00      	nop
 800b0ec:	372c      	adds	r7, #44	; 0x2c
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bc80      	pop	{r7}
 800b0f2:	4770      	bx	lr

0800b0f4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b084      	sub	sp, #16
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
 800b0fc:	460b      	mov	r3, r1
 800b0fe:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b100:	2300      	movs	r3, #0
 800b102:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	7c1b      	ldrb	r3, [r3, #16]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d115      	bne.n	800b138 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b10c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b110:	2202      	movs	r2, #2
 800b112:	2181      	movs	r1, #129	; 0x81
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	f001 fed4 	bl	800cec2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2201      	movs	r2, #1
 800b11e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b120:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b124:	2202      	movs	r2, #2
 800b126:	2101      	movs	r1, #1
 800b128:	6878      	ldr	r0, [r7, #4]
 800b12a:	f001 feca 	bl	800cec2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2201      	movs	r2, #1
 800b132:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800b136:	e012      	b.n	800b15e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b138:	2340      	movs	r3, #64	; 0x40
 800b13a:	2202      	movs	r2, #2
 800b13c:	2181      	movs	r1, #129	; 0x81
 800b13e:	6878      	ldr	r0, [r7, #4]
 800b140:	f001 febf 	bl	800cec2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2201      	movs	r2, #1
 800b148:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b14a:	2340      	movs	r3, #64	; 0x40
 800b14c:	2202      	movs	r2, #2
 800b14e:	2101      	movs	r1, #1
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	f001 feb6 	bl	800cec2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	2201      	movs	r2, #1
 800b15a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b15e:	2308      	movs	r3, #8
 800b160:	2203      	movs	r2, #3
 800b162:	2182      	movs	r1, #130	; 0x82
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f001 feac 	bl	800cec2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2201      	movs	r2, #1
 800b16e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b170:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b174:	f001 ffc6 	bl	800d104 <USBD_static_malloc>
 800b178:	4602      	mov	r2, r0
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b186:	2b00      	cmp	r3, #0
 800b188:	d102      	bne.n	800b190 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800b18a:	2301      	movs	r3, #1
 800b18c:	73fb      	strb	r3, [r7, #15]
 800b18e:	e026      	b.n	800b1de <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b196:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800b1aa:	68bb      	ldr	r3, [r7, #8]
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	7c1b      	ldrb	r3, [r3, #16]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d109      	bne.n	800b1ce <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b1ba:	68bb      	ldr	r3, [r7, #8]
 800b1bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b1c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b1c4:	2101      	movs	r1, #1
 800b1c6:	6878      	ldr	r0, [r7, #4]
 800b1c8:	f001 ff65 	bl	800d096 <USBD_LL_PrepareReceive>
 800b1cc:	e007      	b.n	800b1de <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b1d4:	2340      	movs	r3, #64	; 0x40
 800b1d6:	2101      	movs	r1, #1
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f001 ff5c 	bl	800d096 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800b1de:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	3710      	adds	r7, #16
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	bd80      	pop	{r7, pc}

0800b1e8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b084      	sub	sp, #16
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
 800b1f0:	460b      	mov	r3, r1
 800b1f2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b1f8:	2181      	movs	r1, #129	; 0x81
 800b1fa:	6878      	ldr	r0, [r7, #4]
 800b1fc:	f001 fe87 	bl	800cf0e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2200      	movs	r2, #0
 800b204:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b206:	2101      	movs	r1, #1
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	f001 fe80 	bl	800cf0e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2200      	movs	r2, #0
 800b212:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b216:	2182      	movs	r1, #130	; 0x82
 800b218:	6878      	ldr	r0, [r7, #4]
 800b21a:	f001 fe78 	bl	800cf0e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2200      	movs	r2, #0
 800b222:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d00e      	beq.n	800b24c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b234:	685b      	ldr	r3, [r3, #4]
 800b236:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b23e:	4618      	mov	r0, r3
 800b240:	f001 ff6c 	bl	800d11c <USBD_static_free>
    pdev->pClassData = NULL;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2200      	movs	r2, #0
 800b248:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800b24c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b24e:	4618      	mov	r0, r3
 800b250:	3710      	adds	r7, #16
 800b252:	46bd      	mov	sp, r7
 800b254:	bd80      	pop	{r7, pc}

0800b256 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b256:	b580      	push	{r7, lr}
 800b258:	b086      	sub	sp, #24
 800b25a:	af00      	add	r7, sp, #0
 800b25c:	6078      	str	r0, [r7, #4]
 800b25e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b266:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800b268:	2300      	movs	r3, #0
 800b26a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800b26c:	2300      	movs	r3, #0
 800b26e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800b270:	2300      	movs	r3, #0
 800b272:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	781b      	ldrb	r3, [r3, #0]
 800b278:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d039      	beq.n	800b2f4 <USBD_CDC_Setup+0x9e>
 800b280:	2b20      	cmp	r3, #32
 800b282:	d17c      	bne.n	800b37e <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	88db      	ldrh	r3, [r3, #6]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d029      	beq.n	800b2e0 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	781b      	ldrb	r3, [r3, #0]
 800b290:	b25b      	sxtb	r3, r3
 800b292:	2b00      	cmp	r3, #0
 800b294:	da11      	bge.n	800b2ba <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b29c:	689b      	ldr	r3, [r3, #8]
 800b29e:	683a      	ldr	r2, [r7, #0]
 800b2a0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800b2a2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b2a4:	683a      	ldr	r2, [r7, #0]
 800b2a6:	88d2      	ldrh	r2, [r2, #6]
 800b2a8:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b2aa:	6939      	ldr	r1, [r7, #16]
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	88db      	ldrh	r3, [r3, #6]
 800b2b0:	461a      	mov	r2, r3
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	f001 f9f6 	bl	800c6a4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800b2b8:	e068      	b.n	800b38c <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	785a      	ldrb	r2, [r3, #1]
 800b2be:	693b      	ldr	r3, [r7, #16]
 800b2c0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	88db      	ldrh	r3, [r3, #6]
 800b2c8:	b2da      	uxtb	r2, r3
 800b2ca:	693b      	ldr	r3, [r7, #16]
 800b2cc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b2d0:	6939      	ldr	r1, [r7, #16]
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	88db      	ldrh	r3, [r3, #6]
 800b2d6:	461a      	mov	r2, r3
 800b2d8:	6878      	ldr	r0, [r7, #4]
 800b2da:	f001 fa11 	bl	800c700 <USBD_CtlPrepareRx>
      break;
 800b2de:	e055      	b.n	800b38c <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b2e6:	689b      	ldr	r3, [r3, #8]
 800b2e8:	683a      	ldr	r2, [r7, #0]
 800b2ea:	7850      	ldrb	r0, [r2, #1]
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	6839      	ldr	r1, [r7, #0]
 800b2f0:	4798      	blx	r3
      break;
 800b2f2:	e04b      	b.n	800b38c <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	785b      	ldrb	r3, [r3, #1]
 800b2f8:	2b0a      	cmp	r3, #10
 800b2fa:	d017      	beq.n	800b32c <USBD_CDC_Setup+0xd6>
 800b2fc:	2b0b      	cmp	r3, #11
 800b2fe:	d029      	beq.n	800b354 <USBD_CDC_Setup+0xfe>
 800b300:	2b00      	cmp	r3, #0
 800b302:	d133      	bne.n	800b36c <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b30a:	2b03      	cmp	r3, #3
 800b30c:	d107      	bne.n	800b31e <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800b30e:	f107 030c 	add.w	r3, r7, #12
 800b312:	2202      	movs	r2, #2
 800b314:	4619      	mov	r1, r3
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f001 f9c4 	bl	800c6a4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b31c:	e02e      	b.n	800b37c <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800b31e:	6839      	ldr	r1, [r7, #0]
 800b320:	6878      	ldr	r0, [r7, #4]
 800b322:	f001 f955 	bl	800c5d0 <USBD_CtlError>
            ret = USBD_FAIL;
 800b326:	2302      	movs	r3, #2
 800b328:	75fb      	strb	r3, [r7, #23]
          break;
 800b32a:	e027      	b.n	800b37c <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b332:	2b03      	cmp	r3, #3
 800b334:	d107      	bne.n	800b346 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800b336:	f107 030f 	add.w	r3, r7, #15
 800b33a:	2201      	movs	r2, #1
 800b33c:	4619      	mov	r1, r3
 800b33e:	6878      	ldr	r0, [r7, #4]
 800b340:	f001 f9b0 	bl	800c6a4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b344:	e01a      	b.n	800b37c <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800b346:	6839      	ldr	r1, [r7, #0]
 800b348:	6878      	ldr	r0, [r7, #4]
 800b34a:	f001 f941 	bl	800c5d0 <USBD_CtlError>
            ret = USBD_FAIL;
 800b34e:	2302      	movs	r3, #2
 800b350:	75fb      	strb	r3, [r7, #23]
          break;
 800b352:	e013      	b.n	800b37c <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b35a:	2b03      	cmp	r3, #3
 800b35c:	d00d      	beq.n	800b37a <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 800b35e:	6839      	ldr	r1, [r7, #0]
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f001 f935 	bl	800c5d0 <USBD_CtlError>
            ret = USBD_FAIL;
 800b366:	2302      	movs	r3, #2
 800b368:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b36a:	e006      	b.n	800b37a <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 800b36c:	6839      	ldr	r1, [r7, #0]
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	f001 f92e 	bl	800c5d0 <USBD_CtlError>
          ret = USBD_FAIL;
 800b374:	2302      	movs	r3, #2
 800b376:	75fb      	strb	r3, [r7, #23]
          break;
 800b378:	e000      	b.n	800b37c <USBD_CDC_Setup+0x126>
          break;
 800b37a:	bf00      	nop
      }
      break;
 800b37c:	e006      	b.n	800b38c <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 800b37e:	6839      	ldr	r1, [r7, #0]
 800b380:	6878      	ldr	r0, [r7, #4]
 800b382:	f001 f925 	bl	800c5d0 <USBD_CtlError>
      ret = USBD_FAIL;
 800b386:	2302      	movs	r3, #2
 800b388:	75fb      	strb	r3, [r7, #23]
      break;
 800b38a:	bf00      	nop
  }

  return ret;
 800b38c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b38e:	4618      	mov	r0, r3
 800b390:	3718      	adds	r7, #24
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}

0800b396 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b396:	b580      	push	{r7, lr}
 800b398:	b084      	sub	sp, #16
 800b39a:	af00      	add	r7, sp, #0
 800b39c:	6078      	str	r0, [r7, #4]
 800b39e:	460b      	mov	r3, r1
 800b3a0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3a8:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b3b0:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d037      	beq.n	800b42c <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b3bc:	78fa      	ldrb	r2, [r7, #3]
 800b3be:	6879      	ldr	r1, [r7, #4]
 800b3c0:	4613      	mov	r3, r2
 800b3c2:	009b      	lsls	r3, r3, #2
 800b3c4:	4413      	add	r3, r2
 800b3c6:	009b      	lsls	r3, r3, #2
 800b3c8:	440b      	add	r3, r1
 800b3ca:	331c      	adds	r3, #28
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d026      	beq.n	800b420 <USBD_CDC_DataIn+0x8a>
 800b3d2:	78fa      	ldrb	r2, [r7, #3]
 800b3d4:	6879      	ldr	r1, [r7, #4]
 800b3d6:	4613      	mov	r3, r2
 800b3d8:	009b      	lsls	r3, r3, #2
 800b3da:	4413      	add	r3, r2
 800b3dc:	009b      	lsls	r3, r3, #2
 800b3de:	440b      	add	r3, r1
 800b3e0:	331c      	adds	r3, #28
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	78fa      	ldrb	r2, [r7, #3]
 800b3e6:	68b9      	ldr	r1, [r7, #8]
 800b3e8:	0152      	lsls	r2, r2, #5
 800b3ea:	440a      	add	r2, r1
 800b3ec:	3238      	adds	r2, #56	; 0x38
 800b3ee:	6812      	ldr	r2, [r2, #0]
 800b3f0:	fbb3 f1f2 	udiv	r1, r3, r2
 800b3f4:	fb02 f201 	mul.w	r2, r2, r1
 800b3f8:	1a9b      	subs	r3, r3, r2
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d110      	bne.n	800b420 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800b3fe:	78fa      	ldrb	r2, [r7, #3]
 800b400:	6879      	ldr	r1, [r7, #4]
 800b402:	4613      	mov	r3, r2
 800b404:	009b      	lsls	r3, r3, #2
 800b406:	4413      	add	r3, r2
 800b408:	009b      	lsls	r3, r3, #2
 800b40a:	440b      	add	r3, r1
 800b40c:	331c      	adds	r3, #28
 800b40e:	2200      	movs	r2, #0
 800b410:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b412:	78f9      	ldrb	r1, [r7, #3]
 800b414:	2300      	movs	r3, #0
 800b416:	2200      	movs	r2, #0
 800b418:	6878      	ldr	r0, [r7, #4]
 800b41a:	f001 fe19 	bl	800d050 <USBD_LL_Transmit>
 800b41e:	e003      	b.n	800b428 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	2200      	movs	r2, #0
 800b424:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800b428:	2300      	movs	r3, #0
 800b42a:	e000      	b.n	800b42e <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 800b42c:	2302      	movs	r3, #2
  }
}
 800b42e:	4618      	mov	r0, r3
 800b430:	3710      	adds	r7, #16
 800b432:	46bd      	mov	sp, r7
 800b434:	bd80      	pop	{r7, pc}

0800b436 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b436:	b580      	push	{r7, lr}
 800b438:	b084      	sub	sp, #16
 800b43a:	af00      	add	r7, sp, #0
 800b43c:	6078      	str	r0, [r7, #4]
 800b43e:	460b      	mov	r3, r1
 800b440:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b448:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b44a:	78fb      	ldrb	r3, [r7, #3]
 800b44c:	4619      	mov	r1, r3
 800b44e:	6878      	ldr	r0, [r7, #4]
 800b450:	f001 fe44 	bl	800d0dc <USBD_LL_GetRxDataSize>
 800b454:	4602      	mov	r2, r0
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b462:	2b00      	cmp	r3, #0
 800b464:	d00d      	beq.n	800b482 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b46c:	68db      	ldr	r3, [r3, #12]
 800b46e:	68fa      	ldr	r2, [r7, #12]
 800b470:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b474:	68fa      	ldr	r2, [r7, #12]
 800b476:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b47a:	4611      	mov	r1, r2
 800b47c:	4798      	blx	r3

    return USBD_OK;
 800b47e:	2300      	movs	r3, #0
 800b480:	e000      	b.n	800b484 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800b482:	2302      	movs	r3, #2
  }
}
 800b484:	4618      	mov	r0, r3
 800b486:	3710      	adds	r7, #16
 800b488:	46bd      	mov	sp, r7
 800b48a:	bd80      	pop	{r7, pc}

0800b48c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b084      	sub	sp, #16
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b49a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d015      	beq.n	800b4d2 <USBD_CDC_EP0_RxReady+0x46>
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b4ac:	2bff      	cmp	r3, #255	; 0xff
 800b4ae:	d010      	beq.n	800b4d2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b4b6:	689b      	ldr	r3, [r3, #8]
 800b4b8:	68fa      	ldr	r2, [r7, #12]
 800b4ba:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800b4be:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b4c0:	68fa      	ldr	r2, [r7, #12]
 800b4c2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b4c6:	b292      	uxth	r2, r2
 800b4c8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	22ff      	movs	r2, #255	; 0xff
 800b4ce:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800b4d2:	2300      	movs	r3, #0
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	3710      	adds	r7, #16
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bd80      	pop	{r7, pc}

0800b4dc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b4dc:	b480      	push	{r7}
 800b4de:	b083      	sub	sp, #12
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2243      	movs	r2, #67	; 0x43
 800b4e8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800b4ea:	4b03      	ldr	r3, [pc, #12]	; (800b4f8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	370c      	adds	r7, #12
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bc80      	pop	{r7}
 800b4f4:	4770      	bx	lr
 800b4f6:	bf00      	nop
 800b4f8:	200002e0 	.word	0x200002e0

0800b4fc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b4fc:	b480      	push	{r7}
 800b4fe:	b083      	sub	sp, #12
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2243      	movs	r2, #67	; 0x43
 800b508:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800b50a:	4b03      	ldr	r3, [pc, #12]	; (800b518 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b50c:	4618      	mov	r0, r3
 800b50e:	370c      	adds	r7, #12
 800b510:	46bd      	mov	sp, r7
 800b512:	bc80      	pop	{r7}
 800b514:	4770      	bx	lr
 800b516:	bf00      	nop
 800b518:	2000029c 	.word	0x2000029c

0800b51c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b51c:	b480      	push	{r7}
 800b51e:	b083      	sub	sp, #12
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2243      	movs	r2, #67	; 0x43
 800b528:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800b52a:	4b03      	ldr	r3, [pc, #12]	; (800b538 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b52c:	4618      	mov	r0, r3
 800b52e:	370c      	adds	r7, #12
 800b530:	46bd      	mov	sp, r7
 800b532:	bc80      	pop	{r7}
 800b534:	4770      	bx	lr
 800b536:	bf00      	nop
 800b538:	20000324 	.word	0x20000324

0800b53c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b53c:	b480      	push	{r7}
 800b53e:	b083      	sub	sp, #12
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	220a      	movs	r2, #10
 800b548:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800b54a:	4b03      	ldr	r3, [pc, #12]	; (800b558 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b54c:	4618      	mov	r0, r3
 800b54e:	370c      	adds	r7, #12
 800b550:	46bd      	mov	sp, r7
 800b552:	bc80      	pop	{r7}
 800b554:	4770      	bx	lr
 800b556:	bf00      	nop
 800b558:	20000258 	.word	0x20000258

0800b55c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800b55c:	b480      	push	{r7}
 800b55e:	b085      	sub	sp, #20
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
 800b564:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800b566:	2302      	movs	r3, #2
 800b568:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d005      	beq.n	800b57c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	683a      	ldr	r2, [r7, #0]
 800b574:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800b578:	2300      	movs	r3, #0
 800b57a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b57c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b57e:	4618      	mov	r0, r3
 800b580:	3714      	adds	r7, #20
 800b582:	46bd      	mov	sp, r7
 800b584:	bc80      	pop	{r7}
 800b586:	4770      	bx	lr

0800b588 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800b588:	b480      	push	{r7}
 800b58a:	b087      	sub	sp, #28
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	60f8      	str	r0, [r7, #12]
 800b590:	60b9      	str	r1, [r7, #8]
 800b592:	4613      	mov	r3, r2
 800b594:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b59c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b59e:	697b      	ldr	r3, [r7, #20]
 800b5a0:	68ba      	ldr	r2, [r7, #8]
 800b5a2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b5a6:	88fa      	ldrh	r2, [r7, #6]
 800b5a8:	697b      	ldr	r3, [r7, #20]
 800b5aa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800b5ae:	2300      	movs	r3, #0
}
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	371c      	adds	r7, #28
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	bc80      	pop	{r7}
 800b5b8:	4770      	bx	lr

0800b5ba <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800b5ba:	b480      	push	{r7}
 800b5bc:	b085      	sub	sp, #20
 800b5be:	af00      	add	r7, sp, #0
 800b5c0:	6078      	str	r0, [r7, #4]
 800b5c2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5ca:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	683a      	ldr	r2, [r7, #0]
 800b5d0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800b5d4:	2300      	movs	r3, #0
}
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	3714      	adds	r7, #20
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bc80      	pop	{r7}
 800b5de:	4770      	bx	lr

0800b5e0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b084      	sub	sp, #16
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5ee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d01c      	beq.n	800b634 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b600:	2b00      	cmp	r3, #0
 800b602:	d115      	bne.n	800b630 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	2201      	movs	r2, #1
 800b608:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b622:	b29b      	uxth	r3, r3
 800b624:	2181      	movs	r1, #129	; 0x81
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f001 fd12 	bl	800d050 <USBD_LL_Transmit>

      return USBD_OK;
 800b62c:	2300      	movs	r3, #0
 800b62e:	e002      	b.n	800b636 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800b630:	2301      	movs	r3, #1
 800b632:	e000      	b.n	800b636 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800b634:	2302      	movs	r3, #2
  }
}
 800b636:	4618      	mov	r0, r3
 800b638:	3710      	adds	r7, #16
 800b63a:	46bd      	mov	sp, r7
 800b63c:	bd80      	pop	{r7, pc}

0800b63e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b63e:	b580      	push	{r7, lr}
 800b640:	b084      	sub	sp, #16
 800b642:	af00      	add	r7, sp, #0
 800b644:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b64c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b654:	2b00      	cmp	r3, #0
 800b656:	d017      	beq.n	800b688 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	7c1b      	ldrb	r3, [r3, #16]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d109      	bne.n	800b674 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b666:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b66a:	2101      	movs	r1, #1
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	f001 fd12 	bl	800d096 <USBD_LL_PrepareReceive>
 800b672:	e007      	b.n	800b684 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b67a:	2340      	movs	r3, #64	; 0x40
 800b67c:	2101      	movs	r1, #1
 800b67e:	6878      	ldr	r0, [r7, #4]
 800b680:	f001 fd09 	bl	800d096 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800b684:	2300      	movs	r3, #0
 800b686:	e000      	b.n	800b68a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800b688:	2302      	movs	r3, #2
  }
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	3710      	adds	r7, #16
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}

0800b692 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b692:	b580      	push	{r7, lr}
 800b694:	b084      	sub	sp, #16
 800b696:	af00      	add	r7, sp, #0
 800b698:	60f8      	str	r0, [r7, #12]
 800b69a:	60b9      	str	r1, [r7, #8]
 800b69c:	4613      	mov	r3, r2
 800b69e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d101      	bne.n	800b6aa <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b6a6:	2302      	movs	r3, #2
 800b6a8:	e01a      	b.n	800b6e0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d003      	beq.n	800b6bc <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b6bc:	68bb      	ldr	r3, [r7, #8]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d003      	beq.n	800b6ca <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	68ba      	ldr	r2, [r7, #8]
 800b6c6:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	2201      	movs	r2, #1
 800b6ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	79fa      	ldrb	r2, [r7, #7]
 800b6d6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b6d8:	68f8      	ldr	r0, [r7, #12]
 800b6da:	f001 fb7d 	bl	800cdd8 <USBD_LL_Init>

  return USBD_OK;
 800b6de:	2300      	movs	r3, #0
}
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	3710      	adds	r7, #16
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}

0800b6e8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	b085      	sub	sp, #20
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
 800b6f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d006      	beq.n	800b70a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	683a      	ldr	r2, [r7, #0]
 800b700:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800b704:	2300      	movs	r3, #0
 800b706:	73fb      	strb	r3, [r7, #15]
 800b708:	e001      	b.n	800b70e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800b70a:	2302      	movs	r3, #2
 800b70c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b70e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b710:	4618      	mov	r0, r3
 800b712:	3714      	adds	r7, #20
 800b714:	46bd      	mov	sp, r7
 800b716:	bc80      	pop	{r7}
 800b718:	4770      	bx	lr

0800b71a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b71a:	b580      	push	{r7, lr}
 800b71c:	b082      	sub	sp, #8
 800b71e:	af00      	add	r7, sp, #0
 800b720:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800b722:	6878      	ldr	r0, [r7, #4]
 800b724:	f001 fbb2 	bl	800ce8c <USBD_LL_Start>

  return USBD_OK;
 800b728:	2300      	movs	r3, #0
}
 800b72a:	4618      	mov	r0, r3
 800b72c:	3708      	adds	r7, #8
 800b72e:	46bd      	mov	sp, r7
 800b730:	bd80      	pop	{r7, pc}

0800b732 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b732:	b480      	push	{r7}
 800b734:	b083      	sub	sp, #12
 800b736:	af00      	add	r7, sp, #0
 800b738:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b73a:	2300      	movs	r3, #0
}
 800b73c:	4618      	mov	r0, r3
 800b73e:	370c      	adds	r7, #12
 800b740:	46bd      	mov	sp, r7
 800b742:	bc80      	pop	{r7}
 800b744:	4770      	bx	lr

0800b746 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b746:	b580      	push	{r7, lr}
 800b748:	b084      	sub	sp, #16
 800b74a:	af00      	add	r7, sp, #0
 800b74c:	6078      	str	r0, [r7, #4]
 800b74e:	460b      	mov	r3, r1
 800b750:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b752:	2302      	movs	r3, #2
 800b754:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d00c      	beq.n	800b77a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	78fa      	ldrb	r2, [r7, #3]
 800b76a:	4611      	mov	r1, r2
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	4798      	blx	r3
 800b770:	4603      	mov	r3, r0
 800b772:	2b00      	cmp	r3, #0
 800b774:	d101      	bne.n	800b77a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800b776:	2300      	movs	r3, #0
 800b778:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800b77a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b77c:	4618      	mov	r0, r3
 800b77e:	3710      	adds	r7, #16
 800b780:	46bd      	mov	sp, r7
 800b782:	bd80      	pop	{r7, pc}

0800b784 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b082      	sub	sp, #8
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
 800b78c:	460b      	mov	r3, r1
 800b78e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b796:	685b      	ldr	r3, [r3, #4]
 800b798:	78fa      	ldrb	r2, [r7, #3]
 800b79a:	4611      	mov	r1, r2
 800b79c:	6878      	ldr	r0, [r7, #4]
 800b79e:	4798      	blx	r3

  return USBD_OK;
 800b7a0:	2300      	movs	r3, #0
}
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	3708      	adds	r7, #8
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}

0800b7aa <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b7aa:	b580      	push	{r7, lr}
 800b7ac:	b082      	sub	sp, #8
 800b7ae:	af00      	add	r7, sp, #0
 800b7b0:	6078      	str	r0, [r7, #4]
 800b7b2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b7ba:	6839      	ldr	r1, [r7, #0]
 800b7bc:	4618      	mov	r0, r3
 800b7be:	f000 fecb 	bl	800c558 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2201      	movs	r2, #1
 800b7c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b7d0:	461a      	mov	r2, r3
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b7de:	f003 031f 	and.w	r3, r3, #31
 800b7e2:	2b01      	cmp	r3, #1
 800b7e4:	d00c      	beq.n	800b800 <USBD_LL_SetupStage+0x56>
 800b7e6:	2b01      	cmp	r3, #1
 800b7e8:	d302      	bcc.n	800b7f0 <USBD_LL_SetupStage+0x46>
 800b7ea:	2b02      	cmp	r3, #2
 800b7ec:	d010      	beq.n	800b810 <USBD_LL_SetupStage+0x66>
 800b7ee:	e017      	b.n	800b820 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b7f6:	4619      	mov	r1, r3
 800b7f8:	6878      	ldr	r0, [r7, #4]
 800b7fa:	f000 f9cb 	bl	800bb94 <USBD_StdDevReq>
      break;
 800b7fe:	e01a      	b.n	800b836 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b806:	4619      	mov	r1, r3
 800b808:	6878      	ldr	r0, [r7, #4]
 800b80a:	f000 fa2d 	bl	800bc68 <USBD_StdItfReq>
      break;
 800b80e:	e012      	b.n	800b836 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b816:	4619      	mov	r1, r3
 800b818:	6878      	ldr	r0, [r7, #4]
 800b81a:	f000 fa6b 	bl	800bcf4 <USBD_StdEPReq>
      break;
 800b81e:	e00a      	b.n	800b836 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b826:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b82a:	b2db      	uxtb	r3, r3
 800b82c:	4619      	mov	r1, r3
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f001 fb8c 	bl	800cf4c <USBD_LL_StallEP>
      break;
 800b834:	bf00      	nop
  }

  return USBD_OK;
 800b836:	2300      	movs	r3, #0
}
 800b838:	4618      	mov	r0, r3
 800b83a:	3708      	adds	r7, #8
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd80      	pop	{r7, pc}

0800b840 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b086      	sub	sp, #24
 800b844:	af00      	add	r7, sp, #0
 800b846:	60f8      	str	r0, [r7, #12]
 800b848:	460b      	mov	r3, r1
 800b84a:	607a      	str	r2, [r7, #4]
 800b84c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b84e:	7afb      	ldrb	r3, [r7, #11]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d14b      	bne.n	800b8ec <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b85a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b862:	2b03      	cmp	r3, #3
 800b864:	d134      	bne.n	800b8d0 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800b866:	697b      	ldr	r3, [r7, #20]
 800b868:	68da      	ldr	r2, [r3, #12]
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	691b      	ldr	r3, [r3, #16]
 800b86e:	429a      	cmp	r2, r3
 800b870:	d919      	bls.n	800b8a6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800b872:	697b      	ldr	r3, [r7, #20]
 800b874:	68da      	ldr	r2, [r3, #12]
 800b876:	697b      	ldr	r3, [r7, #20]
 800b878:	691b      	ldr	r3, [r3, #16]
 800b87a:	1ad2      	subs	r2, r2, r3
 800b87c:	697b      	ldr	r3, [r7, #20]
 800b87e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b880:	697b      	ldr	r3, [r7, #20]
 800b882:	68da      	ldr	r2, [r3, #12]
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b888:	429a      	cmp	r2, r3
 800b88a:	d203      	bcs.n	800b894 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b88c:	697b      	ldr	r3, [r7, #20]
 800b88e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800b890:	b29b      	uxth	r3, r3
 800b892:	e002      	b.n	800b89a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b894:	697b      	ldr	r3, [r7, #20]
 800b896:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b898:	b29b      	uxth	r3, r3
 800b89a:	461a      	mov	r2, r3
 800b89c:	6879      	ldr	r1, [r7, #4]
 800b89e:	68f8      	ldr	r0, [r7, #12]
 800b8a0:	f000 ff4c 	bl	800c73c <USBD_CtlContinueRx>
 800b8a4:	e038      	b.n	800b918 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8ac:	691b      	ldr	r3, [r3, #16]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d00a      	beq.n	800b8c8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b8b8:	2b03      	cmp	r3, #3
 800b8ba:	d105      	bne.n	800b8c8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8c2:	691b      	ldr	r3, [r3, #16]
 800b8c4:	68f8      	ldr	r0, [r7, #12]
 800b8c6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800b8c8:	68f8      	ldr	r0, [r7, #12]
 800b8ca:	f000 ff49 	bl	800c760 <USBD_CtlSendStatus>
 800b8ce:	e023      	b.n	800b918 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b8d6:	2b05      	cmp	r3, #5
 800b8d8:	d11e      	bne.n	800b918 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	2200      	movs	r2, #0
 800b8de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800b8e2:	2100      	movs	r1, #0
 800b8e4:	68f8      	ldr	r0, [r7, #12]
 800b8e6:	f001 fb31 	bl	800cf4c <USBD_LL_StallEP>
 800b8ea:	e015      	b.n	800b918 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8f2:	699b      	ldr	r3, [r3, #24]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d00d      	beq.n	800b914 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800b8fe:	2b03      	cmp	r3, #3
 800b900:	d108      	bne.n	800b914 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b908:	699b      	ldr	r3, [r3, #24]
 800b90a:	7afa      	ldrb	r2, [r7, #11]
 800b90c:	4611      	mov	r1, r2
 800b90e:	68f8      	ldr	r0, [r7, #12]
 800b910:	4798      	blx	r3
 800b912:	e001      	b.n	800b918 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b914:	2302      	movs	r3, #2
 800b916:	e000      	b.n	800b91a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800b918:	2300      	movs	r3, #0
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	3718      	adds	r7, #24
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}

0800b922 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b922:	b580      	push	{r7, lr}
 800b924:	b086      	sub	sp, #24
 800b926:	af00      	add	r7, sp, #0
 800b928:	60f8      	str	r0, [r7, #12]
 800b92a:	460b      	mov	r3, r1
 800b92c:	607a      	str	r2, [r7, #4]
 800b92e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b930:	7afb      	ldrb	r3, [r7, #11]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d17f      	bne.n	800ba36 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	3314      	adds	r3, #20
 800b93a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b942:	2b02      	cmp	r3, #2
 800b944:	d15c      	bne.n	800ba00 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800b946:	697b      	ldr	r3, [r7, #20]
 800b948:	68da      	ldr	r2, [r3, #12]
 800b94a:	697b      	ldr	r3, [r7, #20]
 800b94c:	691b      	ldr	r3, [r3, #16]
 800b94e:	429a      	cmp	r2, r3
 800b950:	d915      	bls.n	800b97e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800b952:	697b      	ldr	r3, [r7, #20]
 800b954:	68da      	ldr	r2, [r3, #12]
 800b956:	697b      	ldr	r3, [r7, #20]
 800b958:	691b      	ldr	r3, [r3, #16]
 800b95a:	1ad2      	subs	r2, r2, r3
 800b95c:	697b      	ldr	r3, [r7, #20]
 800b95e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800b960:	697b      	ldr	r3, [r7, #20]
 800b962:	68db      	ldr	r3, [r3, #12]
 800b964:	b29b      	uxth	r3, r3
 800b966:	461a      	mov	r2, r3
 800b968:	6879      	ldr	r1, [r7, #4]
 800b96a:	68f8      	ldr	r0, [r7, #12]
 800b96c:	f000 feb6 	bl	800c6dc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b970:	2300      	movs	r3, #0
 800b972:	2200      	movs	r2, #0
 800b974:	2100      	movs	r1, #0
 800b976:	68f8      	ldr	r0, [r7, #12]
 800b978:	f001 fb8d 	bl	800d096 <USBD_LL_PrepareReceive>
 800b97c:	e04e      	b.n	800ba1c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b97e:	697b      	ldr	r3, [r7, #20]
 800b980:	689b      	ldr	r3, [r3, #8]
 800b982:	697a      	ldr	r2, [r7, #20]
 800b984:	6912      	ldr	r2, [r2, #16]
 800b986:	fbb3 f1f2 	udiv	r1, r3, r2
 800b98a:	fb02 f201 	mul.w	r2, r2, r1
 800b98e:	1a9b      	subs	r3, r3, r2
 800b990:	2b00      	cmp	r3, #0
 800b992:	d11c      	bne.n	800b9ce <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800b994:	697b      	ldr	r3, [r7, #20]
 800b996:	689a      	ldr	r2, [r3, #8]
 800b998:	697b      	ldr	r3, [r7, #20]
 800b99a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b99c:	429a      	cmp	r2, r3
 800b99e:	d316      	bcc.n	800b9ce <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800b9a0:	697b      	ldr	r3, [r7, #20]
 800b9a2:	689a      	ldr	r2, [r3, #8]
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b9aa:	429a      	cmp	r2, r3
 800b9ac:	d20f      	bcs.n	800b9ce <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	2100      	movs	r1, #0
 800b9b2:	68f8      	ldr	r0, [r7, #12]
 800b9b4:	f000 fe92 	bl	800c6dc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	2100      	movs	r1, #0
 800b9c6:	68f8      	ldr	r0, [r7, #12]
 800b9c8:	f001 fb65 	bl	800d096 <USBD_LL_PrepareReceive>
 800b9cc:	e026      	b.n	800ba1c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b9d4:	68db      	ldr	r3, [r3, #12]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d00a      	beq.n	800b9f0 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b9e0:	2b03      	cmp	r3, #3
 800b9e2:	d105      	bne.n	800b9f0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b9ea:	68db      	ldr	r3, [r3, #12]
 800b9ec:	68f8      	ldr	r0, [r7, #12]
 800b9ee:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800b9f0:	2180      	movs	r1, #128	; 0x80
 800b9f2:	68f8      	ldr	r0, [r7, #12]
 800b9f4:	f001 faaa 	bl	800cf4c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800b9f8:	68f8      	ldr	r0, [r7, #12]
 800b9fa:	f000 fec4 	bl	800c786 <USBD_CtlReceiveStatus>
 800b9fe:	e00d      	b.n	800ba1c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ba06:	2b04      	cmp	r3, #4
 800ba08:	d004      	beq.n	800ba14 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d103      	bne.n	800ba1c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800ba14:	2180      	movs	r1, #128	; 0x80
 800ba16:	68f8      	ldr	r0, [r7, #12]
 800ba18:	f001 fa98 	bl	800cf4c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ba22:	2b01      	cmp	r3, #1
 800ba24:	d11d      	bne.n	800ba62 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800ba26:	68f8      	ldr	r0, [r7, #12]
 800ba28:	f7ff fe83 	bl	800b732 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	2200      	movs	r2, #0
 800ba30:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ba34:	e015      	b.n	800ba62 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba3c:	695b      	ldr	r3, [r3, #20]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d00d      	beq.n	800ba5e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800ba48:	2b03      	cmp	r3, #3
 800ba4a:	d108      	bne.n	800ba5e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba52:	695b      	ldr	r3, [r3, #20]
 800ba54:	7afa      	ldrb	r2, [r7, #11]
 800ba56:	4611      	mov	r1, r2
 800ba58:	68f8      	ldr	r0, [r7, #12]
 800ba5a:	4798      	blx	r3
 800ba5c:	e001      	b.n	800ba62 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ba5e:	2302      	movs	r3, #2
 800ba60:	e000      	b.n	800ba64 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800ba62:	2300      	movs	r3, #0
}
 800ba64:	4618      	mov	r0, r3
 800ba66:	3718      	adds	r7, #24
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bd80      	pop	{r7, pc}

0800ba6c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b082      	sub	sp, #8
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ba74:	2340      	movs	r3, #64	; 0x40
 800ba76:	2200      	movs	r2, #0
 800ba78:	2100      	movs	r1, #0
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	f001 fa21 	bl	800cec2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2201      	movs	r2, #1
 800ba84:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2240      	movs	r2, #64	; 0x40
 800ba8c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ba90:	2340      	movs	r3, #64	; 0x40
 800ba92:	2200      	movs	r2, #0
 800ba94:	2180      	movs	r1, #128	; 0x80
 800ba96:	6878      	ldr	r0, [r7, #4]
 800ba98:	f001 fa13 	bl	800cec2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2201      	movs	r2, #1
 800baa0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	2240      	movs	r2, #64	; 0x40
 800baa6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2201      	movs	r2, #1
 800baac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2200      	movs	r2, #0
 800bab4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	2200      	movs	r2, #0
 800babc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	2200      	movs	r2, #0
 800bac2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d009      	beq.n	800bae4 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bad6:	685b      	ldr	r3, [r3, #4]
 800bad8:	687a      	ldr	r2, [r7, #4]
 800bada:	6852      	ldr	r2, [r2, #4]
 800badc:	b2d2      	uxtb	r2, r2
 800bade:	4611      	mov	r1, r2
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	4798      	blx	r3
  }

  return USBD_OK;
 800bae4:	2300      	movs	r3, #0
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	3708      	adds	r7, #8
 800baea:	46bd      	mov	sp, r7
 800baec:	bd80      	pop	{r7, pc}

0800baee <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800baee:	b480      	push	{r7}
 800baf0:	b083      	sub	sp, #12
 800baf2:	af00      	add	r7, sp, #0
 800baf4:	6078      	str	r0, [r7, #4]
 800baf6:	460b      	mov	r3, r1
 800baf8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	78fa      	ldrb	r2, [r7, #3]
 800bafe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bb00:	2300      	movs	r3, #0
}
 800bb02:	4618      	mov	r0, r3
 800bb04:	370c      	adds	r7, #12
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bc80      	pop	{r7}
 800bb0a:	4770      	bx	lr

0800bb0c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bb0c:	b480      	push	{r7}
 800bb0e:	b083      	sub	sp, #12
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2204      	movs	r2, #4
 800bb24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800bb28:	2300      	movs	r3, #0
}
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	370c      	adds	r7, #12
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bc80      	pop	{r7}
 800bb32:	4770      	bx	lr

0800bb34 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bb34:	b480      	push	{r7}
 800bb36:	b083      	sub	sp, #12
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb42:	2b04      	cmp	r3, #4
 800bb44:	d105      	bne.n	800bb52 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bb52:	2300      	movs	r3, #0
}
 800bb54:	4618      	mov	r0, r3
 800bb56:	370c      	adds	r7, #12
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	bc80      	pop	{r7}
 800bb5c:	4770      	bx	lr

0800bb5e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bb5e:	b580      	push	{r7, lr}
 800bb60:	b082      	sub	sp, #8
 800bb62:	af00      	add	r7, sp, #0
 800bb64:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb6c:	2b03      	cmp	r3, #3
 800bb6e:	d10b      	bne.n	800bb88 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb76:	69db      	ldr	r3, [r3, #28]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d005      	beq.n	800bb88 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb82:	69db      	ldr	r3, [r3, #28]
 800bb84:	6878      	ldr	r0, [r7, #4]
 800bb86:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bb88:	2300      	movs	r3, #0
}
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	3708      	adds	r7, #8
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	bd80      	pop	{r7, pc}
	...

0800bb94 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b084      	sub	sp, #16
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
 800bb9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb9e:	2300      	movs	r3, #0
 800bba0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bba2:	683b      	ldr	r3, [r7, #0]
 800bba4:	781b      	ldrb	r3, [r3, #0]
 800bba6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bbaa:	2b20      	cmp	r3, #32
 800bbac:	d004      	beq.n	800bbb8 <USBD_StdDevReq+0x24>
 800bbae:	2b40      	cmp	r3, #64	; 0x40
 800bbb0:	d002      	beq.n	800bbb8 <USBD_StdDevReq+0x24>
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d008      	beq.n	800bbc8 <USBD_StdDevReq+0x34>
 800bbb6:	e04c      	b.n	800bc52 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbbe:	689b      	ldr	r3, [r3, #8]
 800bbc0:	6839      	ldr	r1, [r7, #0]
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	4798      	blx	r3
      break;
 800bbc6:	e049      	b.n	800bc5c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	785b      	ldrb	r3, [r3, #1]
 800bbcc:	2b09      	cmp	r3, #9
 800bbce:	d83a      	bhi.n	800bc46 <USBD_StdDevReq+0xb2>
 800bbd0:	a201      	add	r2, pc, #4	; (adr r2, 800bbd8 <USBD_StdDevReq+0x44>)
 800bbd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbd6:	bf00      	nop
 800bbd8:	0800bc29 	.word	0x0800bc29
 800bbdc:	0800bc3d 	.word	0x0800bc3d
 800bbe0:	0800bc47 	.word	0x0800bc47
 800bbe4:	0800bc33 	.word	0x0800bc33
 800bbe8:	0800bc47 	.word	0x0800bc47
 800bbec:	0800bc0b 	.word	0x0800bc0b
 800bbf0:	0800bc01 	.word	0x0800bc01
 800bbf4:	0800bc47 	.word	0x0800bc47
 800bbf8:	0800bc1f 	.word	0x0800bc1f
 800bbfc:	0800bc15 	.word	0x0800bc15
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bc00:	6839      	ldr	r1, [r7, #0]
 800bc02:	6878      	ldr	r0, [r7, #4]
 800bc04:	f000 f9d4 	bl	800bfb0 <USBD_GetDescriptor>
          break;
 800bc08:	e022      	b.n	800bc50 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bc0a:	6839      	ldr	r1, [r7, #0]
 800bc0c:	6878      	ldr	r0, [r7, #4]
 800bc0e:	f000 fb37 	bl	800c280 <USBD_SetAddress>
          break;
 800bc12:	e01d      	b.n	800bc50 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800bc14:	6839      	ldr	r1, [r7, #0]
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	f000 fb74 	bl	800c304 <USBD_SetConfig>
          break;
 800bc1c:	e018      	b.n	800bc50 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bc1e:	6839      	ldr	r1, [r7, #0]
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	f000 fbfd 	bl	800c420 <USBD_GetConfig>
          break;
 800bc26:	e013      	b.n	800bc50 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bc28:	6839      	ldr	r1, [r7, #0]
 800bc2a:	6878      	ldr	r0, [r7, #4]
 800bc2c:	f000 fc2c 	bl	800c488 <USBD_GetStatus>
          break;
 800bc30:	e00e      	b.n	800bc50 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bc32:	6839      	ldr	r1, [r7, #0]
 800bc34:	6878      	ldr	r0, [r7, #4]
 800bc36:	f000 fc5a 	bl	800c4ee <USBD_SetFeature>
          break;
 800bc3a:	e009      	b.n	800bc50 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bc3c:	6839      	ldr	r1, [r7, #0]
 800bc3e:	6878      	ldr	r0, [r7, #4]
 800bc40:	f000 fc69 	bl	800c516 <USBD_ClrFeature>
          break;
 800bc44:	e004      	b.n	800bc50 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800bc46:	6839      	ldr	r1, [r7, #0]
 800bc48:	6878      	ldr	r0, [r7, #4]
 800bc4a:	f000 fcc1 	bl	800c5d0 <USBD_CtlError>
          break;
 800bc4e:	bf00      	nop
      }
      break;
 800bc50:	e004      	b.n	800bc5c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800bc52:	6839      	ldr	r1, [r7, #0]
 800bc54:	6878      	ldr	r0, [r7, #4]
 800bc56:	f000 fcbb 	bl	800c5d0 <USBD_CtlError>
      break;
 800bc5a:	bf00      	nop
  }

  return ret;
 800bc5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc5e:	4618      	mov	r0, r3
 800bc60:	3710      	adds	r7, #16
 800bc62:	46bd      	mov	sp, r7
 800bc64:	bd80      	pop	{r7, pc}
 800bc66:	bf00      	nop

0800bc68 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b084      	sub	sp, #16
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
 800bc70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bc72:	2300      	movs	r3, #0
 800bc74:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bc76:	683b      	ldr	r3, [r7, #0]
 800bc78:	781b      	ldrb	r3, [r3, #0]
 800bc7a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bc7e:	2b20      	cmp	r3, #32
 800bc80:	d003      	beq.n	800bc8a <USBD_StdItfReq+0x22>
 800bc82:	2b40      	cmp	r3, #64	; 0x40
 800bc84:	d001      	beq.n	800bc8a <USBD_StdItfReq+0x22>
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d12a      	bne.n	800bce0 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc90:	3b01      	subs	r3, #1
 800bc92:	2b02      	cmp	r3, #2
 800bc94:	d81d      	bhi.n	800bcd2 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	889b      	ldrh	r3, [r3, #4]
 800bc9a:	b2db      	uxtb	r3, r3
 800bc9c:	2b01      	cmp	r3, #1
 800bc9e:	d813      	bhi.n	800bcc8 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bca6:	689b      	ldr	r3, [r3, #8]
 800bca8:	6839      	ldr	r1, [r7, #0]
 800bcaa:	6878      	ldr	r0, [r7, #4]
 800bcac:	4798      	blx	r3
 800bcae:	4603      	mov	r3, r0
 800bcb0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	88db      	ldrh	r3, [r3, #6]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d110      	bne.n	800bcdc <USBD_StdItfReq+0x74>
 800bcba:	7bfb      	ldrb	r3, [r7, #15]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d10d      	bne.n	800bcdc <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 800bcc0:	6878      	ldr	r0, [r7, #4]
 800bcc2:	f000 fd4d 	bl	800c760 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bcc6:	e009      	b.n	800bcdc <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 800bcc8:	6839      	ldr	r1, [r7, #0]
 800bcca:	6878      	ldr	r0, [r7, #4]
 800bccc:	f000 fc80 	bl	800c5d0 <USBD_CtlError>
          break;
 800bcd0:	e004      	b.n	800bcdc <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800bcd2:	6839      	ldr	r1, [r7, #0]
 800bcd4:	6878      	ldr	r0, [r7, #4]
 800bcd6:	f000 fc7b 	bl	800c5d0 <USBD_CtlError>
          break;
 800bcda:	e000      	b.n	800bcde <USBD_StdItfReq+0x76>
          break;
 800bcdc:	bf00      	nop
      }
      break;
 800bcde:	e004      	b.n	800bcea <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 800bce0:	6839      	ldr	r1, [r7, #0]
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	f000 fc74 	bl	800c5d0 <USBD_CtlError>
      break;
 800bce8:	bf00      	nop
  }

  return USBD_OK;
 800bcea:	2300      	movs	r3, #0
}
 800bcec:	4618      	mov	r0, r3
 800bcee:	3710      	adds	r7, #16
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	bd80      	pop	{r7, pc}

0800bcf4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b084      	sub	sp, #16
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
 800bcfc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800bcfe:	2300      	movs	r3, #0
 800bd00:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	889b      	ldrh	r3, [r3, #4]
 800bd06:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	781b      	ldrb	r3, [r3, #0]
 800bd0c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bd10:	2b20      	cmp	r3, #32
 800bd12:	d004      	beq.n	800bd1e <USBD_StdEPReq+0x2a>
 800bd14:	2b40      	cmp	r3, #64	; 0x40
 800bd16:	d002      	beq.n	800bd1e <USBD_StdEPReq+0x2a>
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d008      	beq.n	800bd2e <USBD_StdEPReq+0x3a>
 800bd1c:	e13d      	b.n	800bf9a <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd24:	689b      	ldr	r3, [r3, #8]
 800bd26:	6839      	ldr	r1, [r7, #0]
 800bd28:	6878      	ldr	r0, [r7, #4]
 800bd2a:	4798      	blx	r3
      break;
 800bd2c:	e13a      	b.n	800bfa4 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	781b      	ldrb	r3, [r3, #0]
 800bd32:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bd36:	2b20      	cmp	r3, #32
 800bd38:	d10a      	bne.n	800bd50 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd40:	689b      	ldr	r3, [r3, #8]
 800bd42:	6839      	ldr	r1, [r7, #0]
 800bd44:	6878      	ldr	r0, [r7, #4]
 800bd46:	4798      	blx	r3
 800bd48:	4603      	mov	r3, r0
 800bd4a:	73fb      	strb	r3, [r7, #15]

        return ret;
 800bd4c:	7bfb      	ldrb	r3, [r7, #15]
 800bd4e:	e12a      	b.n	800bfa6 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	785b      	ldrb	r3, [r3, #1]
 800bd54:	2b01      	cmp	r3, #1
 800bd56:	d03e      	beq.n	800bdd6 <USBD_StdEPReq+0xe2>
 800bd58:	2b03      	cmp	r3, #3
 800bd5a:	d002      	beq.n	800bd62 <USBD_StdEPReq+0x6e>
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d070      	beq.n	800be42 <USBD_StdEPReq+0x14e>
 800bd60:	e115      	b.n	800bf8e <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd68:	2b02      	cmp	r3, #2
 800bd6a:	d002      	beq.n	800bd72 <USBD_StdEPReq+0x7e>
 800bd6c:	2b03      	cmp	r3, #3
 800bd6e:	d015      	beq.n	800bd9c <USBD_StdEPReq+0xa8>
 800bd70:	e02b      	b.n	800bdca <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bd72:	7bbb      	ldrb	r3, [r7, #14]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d00c      	beq.n	800bd92 <USBD_StdEPReq+0x9e>
 800bd78:	7bbb      	ldrb	r3, [r7, #14]
 800bd7a:	2b80      	cmp	r3, #128	; 0x80
 800bd7c:	d009      	beq.n	800bd92 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800bd7e:	7bbb      	ldrb	r3, [r7, #14]
 800bd80:	4619      	mov	r1, r3
 800bd82:	6878      	ldr	r0, [r7, #4]
 800bd84:	f001 f8e2 	bl	800cf4c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800bd88:	2180      	movs	r1, #128	; 0x80
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	f001 f8de 	bl	800cf4c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bd90:	e020      	b.n	800bdd4 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800bd92:	6839      	ldr	r1, [r7, #0]
 800bd94:	6878      	ldr	r0, [r7, #4]
 800bd96:	f000 fc1b 	bl	800c5d0 <USBD_CtlError>
              break;
 800bd9a:	e01b      	b.n	800bdd4 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bd9c:	683b      	ldr	r3, [r7, #0]
 800bd9e:	885b      	ldrh	r3, [r3, #2]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d10e      	bne.n	800bdc2 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 800bda4:	7bbb      	ldrb	r3, [r7, #14]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d00b      	beq.n	800bdc2 <USBD_StdEPReq+0xce>
 800bdaa:	7bbb      	ldrb	r3, [r7, #14]
 800bdac:	2b80      	cmp	r3, #128	; 0x80
 800bdae:	d008      	beq.n	800bdc2 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	88db      	ldrh	r3, [r3, #6]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d104      	bne.n	800bdc2 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800bdb8:	7bbb      	ldrb	r3, [r7, #14]
 800bdba:	4619      	mov	r1, r3
 800bdbc:	6878      	ldr	r0, [r7, #4]
 800bdbe:	f001 f8c5 	bl	800cf4c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800bdc2:	6878      	ldr	r0, [r7, #4]
 800bdc4:	f000 fccc 	bl	800c760 <USBD_CtlSendStatus>

              break;
 800bdc8:	e004      	b.n	800bdd4 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800bdca:	6839      	ldr	r1, [r7, #0]
 800bdcc:	6878      	ldr	r0, [r7, #4]
 800bdce:	f000 fbff 	bl	800c5d0 <USBD_CtlError>
              break;
 800bdd2:	bf00      	nop
          }
          break;
 800bdd4:	e0e0      	b.n	800bf98 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bddc:	2b02      	cmp	r3, #2
 800bdde:	d002      	beq.n	800bde6 <USBD_StdEPReq+0xf2>
 800bde0:	2b03      	cmp	r3, #3
 800bde2:	d015      	beq.n	800be10 <USBD_StdEPReq+0x11c>
 800bde4:	e026      	b.n	800be34 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bde6:	7bbb      	ldrb	r3, [r7, #14]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d00c      	beq.n	800be06 <USBD_StdEPReq+0x112>
 800bdec:	7bbb      	ldrb	r3, [r7, #14]
 800bdee:	2b80      	cmp	r3, #128	; 0x80
 800bdf0:	d009      	beq.n	800be06 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800bdf2:	7bbb      	ldrb	r3, [r7, #14]
 800bdf4:	4619      	mov	r1, r3
 800bdf6:	6878      	ldr	r0, [r7, #4]
 800bdf8:	f001 f8a8 	bl	800cf4c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800bdfc:	2180      	movs	r1, #128	; 0x80
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	f001 f8a4 	bl	800cf4c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800be04:	e01c      	b.n	800be40 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800be06:	6839      	ldr	r1, [r7, #0]
 800be08:	6878      	ldr	r0, [r7, #4]
 800be0a:	f000 fbe1 	bl	800c5d0 <USBD_CtlError>
              break;
 800be0e:	e017      	b.n	800be40 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800be10:	683b      	ldr	r3, [r7, #0]
 800be12:	885b      	ldrh	r3, [r3, #2]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d112      	bne.n	800be3e <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800be18:	7bbb      	ldrb	r3, [r7, #14]
 800be1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d004      	beq.n	800be2c <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800be22:	7bbb      	ldrb	r3, [r7, #14]
 800be24:	4619      	mov	r1, r3
 800be26:	6878      	ldr	r0, [r7, #4]
 800be28:	f001 f8af 	bl	800cf8a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800be2c:	6878      	ldr	r0, [r7, #4]
 800be2e:	f000 fc97 	bl	800c760 <USBD_CtlSendStatus>
              }
              break;
 800be32:	e004      	b.n	800be3e <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 800be34:	6839      	ldr	r1, [r7, #0]
 800be36:	6878      	ldr	r0, [r7, #4]
 800be38:	f000 fbca 	bl	800c5d0 <USBD_CtlError>
              break;
 800be3c:	e000      	b.n	800be40 <USBD_StdEPReq+0x14c>
              break;
 800be3e:	bf00      	nop
          }
          break;
 800be40:	e0aa      	b.n	800bf98 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be48:	2b02      	cmp	r3, #2
 800be4a:	d002      	beq.n	800be52 <USBD_StdEPReq+0x15e>
 800be4c:	2b03      	cmp	r3, #3
 800be4e:	d032      	beq.n	800beb6 <USBD_StdEPReq+0x1c2>
 800be50:	e097      	b.n	800bf82 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800be52:	7bbb      	ldrb	r3, [r7, #14]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d007      	beq.n	800be68 <USBD_StdEPReq+0x174>
 800be58:	7bbb      	ldrb	r3, [r7, #14]
 800be5a:	2b80      	cmp	r3, #128	; 0x80
 800be5c:	d004      	beq.n	800be68 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800be5e:	6839      	ldr	r1, [r7, #0]
 800be60:	6878      	ldr	r0, [r7, #4]
 800be62:	f000 fbb5 	bl	800c5d0 <USBD_CtlError>
                break;
 800be66:	e091      	b.n	800bf8c <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800be68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	da0b      	bge.n	800be88 <USBD_StdEPReq+0x194>
 800be70:	7bbb      	ldrb	r3, [r7, #14]
 800be72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800be76:	4613      	mov	r3, r2
 800be78:	009b      	lsls	r3, r3, #2
 800be7a:	4413      	add	r3, r2
 800be7c:	009b      	lsls	r3, r3, #2
 800be7e:	3310      	adds	r3, #16
 800be80:	687a      	ldr	r2, [r7, #4]
 800be82:	4413      	add	r3, r2
 800be84:	3304      	adds	r3, #4
 800be86:	e00b      	b.n	800bea0 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800be88:	7bbb      	ldrb	r3, [r7, #14]
 800be8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800be8e:	4613      	mov	r3, r2
 800be90:	009b      	lsls	r3, r3, #2
 800be92:	4413      	add	r3, r2
 800be94:	009b      	lsls	r3, r3, #2
 800be96:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800be9a:	687a      	ldr	r2, [r7, #4]
 800be9c:	4413      	add	r3, r2
 800be9e:	3304      	adds	r3, #4
 800bea0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bea2:	68bb      	ldr	r3, [r7, #8]
 800bea4:	2200      	movs	r2, #0
 800bea6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	2202      	movs	r2, #2
 800beac:	4619      	mov	r1, r3
 800beae:	6878      	ldr	r0, [r7, #4]
 800beb0:	f000 fbf8 	bl	800c6a4 <USBD_CtlSendData>
              break;
 800beb4:	e06a      	b.n	800bf8c <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800beb6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	da11      	bge.n	800bee2 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bebe:	7bbb      	ldrb	r3, [r7, #14]
 800bec0:	f003 020f 	and.w	r2, r3, #15
 800bec4:	6879      	ldr	r1, [r7, #4]
 800bec6:	4613      	mov	r3, r2
 800bec8:	009b      	lsls	r3, r3, #2
 800beca:	4413      	add	r3, r2
 800becc:	009b      	lsls	r3, r3, #2
 800bece:	440b      	add	r3, r1
 800bed0:	3318      	adds	r3, #24
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d117      	bne.n	800bf08 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800bed8:	6839      	ldr	r1, [r7, #0]
 800beda:	6878      	ldr	r0, [r7, #4]
 800bedc:	f000 fb78 	bl	800c5d0 <USBD_CtlError>
                  break;
 800bee0:	e054      	b.n	800bf8c <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bee2:	7bbb      	ldrb	r3, [r7, #14]
 800bee4:	f003 020f 	and.w	r2, r3, #15
 800bee8:	6879      	ldr	r1, [r7, #4]
 800beea:	4613      	mov	r3, r2
 800beec:	009b      	lsls	r3, r3, #2
 800beee:	4413      	add	r3, r2
 800bef0:	009b      	lsls	r3, r3, #2
 800bef2:	440b      	add	r3, r1
 800bef4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d104      	bne.n	800bf08 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800befe:	6839      	ldr	r1, [r7, #0]
 800bf00:	6878      	ldr	r0, [r7, #4]
 800bf02:	f000 fb65 	bl	800c5d0 <USBD_CtlError>
                  break;
 800bf06:	e041      	b.n	800bf8c <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bf08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	da0b      	bge.n	800bf28 <USBD_StdEPReq+0x234>
 800bf10:	7bbb      	ldrb	r3, [r7, #14]
 800bf12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bf16:	4613      	mov	r3, r2
 800bf18:	009b      	lsls	r3, r3, #2
 800bf1a:	4413      	add	r3, r2
 800bf1c:	009b      	lsls	r3, r3, #2
 800bf1e:	3310      	adds	r3, #16
 800bf20:	687a      	ldr	r2, [r7, #4]
 800bf22:	4413      	add	r3, r2
 800bf24:	3304      	adds	r3, #4
 800bf26:	e00b      	b.n	800bf40 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bf28:	7bbb      	ldrb	r3, [r7, #14]
 800bf2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bf2e:	4613      	mov	r3, r2
 800bf30:	009b      	lsls	r3, r3, #2
 800bf32:	4413      	add	r3, r2
 800bf34:	009b      	lsls	r3, r3, #2
 800bf36:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bf3a:	687a      	ldr	r2, [r7, #4]
 800bf3c:	4413      	add	r3, r2
 800bf3e:	3304      	adds	r3, #4
 800bf40:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bf42:	7bbb      	ldrb	r3, [r7, #14]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d002      	beq.n	800bf4e <USBD_StdEPReq+0x25a>
 800bf48:	7bbb      	ldrb	r3, [r7, #14]
 800bf4a:	2b80      	cmp	r3, #128	; 0x80
 800bf4c:	d103      	bne.n	800bf56 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800bf4e:	68bb      	ldr	r3, [r7, #8]
 800bf50:	2200      	movs	r2, #0
 800bf52:	601a      	str	r2, [r3, #0]
 800bf54:	e00e      	b.n	800bf74 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800bf56:	7bbb      	ldrb	r3, [r7, #14]
 800bf58:	4619      	mov	r1, r3
 800bf5a:	6878      	ldr	r0, [r7, #4]
 800bf5c:	f001 f834 	bl	800cfc8 <USBD_LL_IsStallEP>
 800bf60:	4603      	mov	r3, r0
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d003      	beq.n	800bf6e <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	2201      	movs	r2, #1
 800bf6a:	601a      	str	r2, [r3, #0]
 800bf6c:	e002      	b.n	800bf74 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 800bf6e:	68bb      	ldr	r3, [r7, #8]
 800bf70:	2200      	movs	r2, #0
 800bf72:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800bf74:	68bb      	ldr	r3, [r7, #8]
 800bf76:	2202      	movs	r2, #2
 800bf78:	4619      	mov	r1, r3
 800bf7a:	6878      	ldr	r0, [r7, #4]
 800bf7c:	f000 fb92 	bl	800c6a4 <USBD_CtlSendData>
              break;
 800bf80:	e004      	b.n	800bf8c <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800bf82:	6839      	ldr	r1, [r7, #0]
 800bf84:	6878      	ldr	r0, [r7, #4]
 800bf86:	f000 fb23 	bl	800c5d0 <USBD_CtlError>
              break;
 800bf8a:	bf00      	nop
          }
          break;
 800bf8c:	e004      	b.n	800bf98 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800bf8e:	6839      	ldr	r1, [r7, #0]
 800bf90:	6878      	ldr	r0, [r7, #4]
 800bf92:	f000 fb1d 	bl	800c5d0 <USBD_CtlError>
          break;
 800bf96:	bf00      	nop
      }
      break;
 800bf98:	e004      	b.n	800bfa4 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800bf9a:	6839      	ldr	r1, [r7, #0]
 800bf9c:	6878      	ldr	r0, [r7, #4]
 800bf9e:	f000 fb17 	bl	800c5d0 <USBD_CtlError>
      break;
 800bfa2:	bf00      	nop
  }

  return ret;
 800bfa4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	3710      	adds	r7, #16
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	bd80      	pop	{r7, pc}
	...

0800bfb0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b084      	sub	sp, #16
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
 800bfb8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bfba:	2300      	movs	r3, #0
 800bfbc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	885b      	ldrh	r3, [r3, #2]
 800bfca:	0a1b      	lsrs	r3, r3, #8
 800bfcc:	b29b      	uxth	r3, r3
 800bfce:	3b01      	subs	r3, #1
 800bfd0:	2b06      	cmp	r3, #6
 800bfd2:	f200 8128 	bhi.w	800c226 <USBD_GetDescriptor+0x276>
 800bfd6:	a201      	add	r2, pc, #4	; (adr r2, 800bfdc <USBD_GetDescriptor+0x2c>)
 800bfd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfdc:	0800bff9 	.word	0x0800bff9
 800bfe0:	0800c011 	.word	0x0800c011
 800bfe4:	0800c051 	.word	0x0800c051
 800bfe8:	0800c227 	.word	0x0800c227
 800bfec:	0800c227 	.word	0x0800c227
 800bff0:	0800c1c7 	.word	0x0800c1c7
 800bff4:	0800c1f3 	.word	0x0800c1f3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	687a      	ldr	r2, [r7, #4]
 800c002:	7c12      	ldrb	r2, [r2, #16]
 800c004:	f107 0108 	add.w	r1, r7, #8
 800c008:	4610      	mov	r0, r2
 800c00a:	4798      	blx	r3
 800c00c:	60f8      	str	r0, [r7, #12]
      break;
 800c00e:	e112      	b.n	800c236 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	7c1b      	ldrb	r3, [r3, #16]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d10d      	bne.n	800c034 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c01e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c020:	f107 0208 	add.w	r2, r7, #8
 800c024:	4610      	mov	r0, r2
 800c026:	4798      	blx	r3
 800c028:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	3301      	adds	r3, #1
 800c02e:	2202      	movs	r2, #2
 800c030:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c032:	e100      	b.n	800c236 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c03a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c03c:	f107 0208 	add.w	r2, r7, #8
 800c040:	4610      	mov	r0, r2
 800c042:	4798      	blx	r3
 800c044:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	3301      	adds	r3, #1
 800c04a:	2202      	movs	r2, #2
 800c04c:	701a      	strb	r2, [r3, #0]
      break;
 800c04e:	e0f2      	b.n	800c236 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	885b      	ldrh	r3, [r3, #2]
 800c054:	b2db      	uxtb	r3, r3
 800c056:	2b05      	cmp	r3, #5
 800c058:	f200 80ac 	bhi.w	800c1b4 <USBD_GetDescriptor+0x204>
 800c05c:	a201      	add	r2, pc, #4	; (adr r2, 800c064 <USBD_GetDescriptor+0xb4>)
 800c05e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c062:	bf00      	nop
 800c064:	0800c07d 	.word	0x0800c07d
 800c068:	0800c0b1 	.word	0x0800c0b1
 800c06c:	0800c0e5 	.word	0x0800c0e5
 800c070:	0800c119 	.word	0x0800c119
 800c074:	0800c14d 	.word	0x0800c14d
 800c078:	0800c181 	.word	0x0800c181
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c082:	685b      	ldr	r3, [r3, #4]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d00b      	beq.n	800c0a0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c08e:	685b      	ldr	r3, [r3, #4]
 800c090:	687a      	ldr	r2, [r7, #4]
 800c092:	7c12      	ldrb	r2, [r2, #16]
 800c094:	f107 0108 	add.w	r1, r7, #8
 800c098:	4610      	mov	r0, r2
 800c09a:	4798      	blx	r3
 800c09c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c09e:	e091      	b.n	800c1c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c0a0:	6839      	ldr	r1, [r7, #0]
 800c0a2:	6878      	ldr	r0, [r7, #4]
 800c0a4:	f000 fa94 	bl	800c5d0 <USBD_CtlError>
            err++;
 800c0a8:	7afb      	ldrb	r3, [r7, #11]
 800c0aa:	3301      	adds	r3, #1
 800c0ac:	72fb      	strb	r3, [r7, #11]
          break;
 800c0ae:	e089      	b.n	800c1c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c0b6:	689b      	ldr	r3, [r3, #8]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d00b      	beq.n	800c0d4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c0c2:	689b      	ldr	r3, [r3, #8]
 800c0c4:	687a      	ldr	r2, [r7, #4]
 800c0c6:	7c12      	ldrb	r2, [r2, #16]
 800c0c8:	f107 0108 	add.w	r1, r7, #8
 800c0cc:	4610      	mov	r0, r2
 800c0ce:	4798      	blx	r3
 800c0d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c0d2:	e077      	b.n	800c1c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c0d4:	6839      	ldr	r1, [r7, #0]
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f000 fa7a 	bl	800c5d0 <USBD_CtlError>
            err++;
 800c0dc:	7afb      	ldrb	r3, [r7, #11]
 800c0de:	3301      	adds	r3, #1
 800c0e0:	72fb      	strb	r3, [r7, #11]
          break;
 800c0e2:	e06f      	b.n	800c1c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c0ea:	68db      	ldr	r3, [r3, #12]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d00b      	beq.n	800c108 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c0f6:	68db      	ldr	r3, [r3, #12]
 800c0f8:	687a      	ldr	r2, [r7, #4]
 800c0fa:	7c12      	ldrb	r2, [r2, #16]
 800c0fc:	f107 0108 	add.w	r1, r7, #8
 800c100:	4610      	mov	r0, r2
 800c102:	4798      	blx	r3
 800c104:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c106:	e05d      	b.n	800c1c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c108:	6839      	ldr	r1, [r7, #0]
 800c10a:	6878      	ldr	r0, [r7, #4]
 800c10c:	f000 fa60 	bl	800c5d0 <USBD_CtlError>
            err++;
 800c110:	7afb      	ldrb	r3, [r7, #11]
 800c112:	3301      	adds	r3, #1
 800c114:	72fb      	strb	r3, [r7, #11]
          break;
 800c116:	e055      	b.n	800c1c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c11e:	691b      	ldr	r3, [r3, #16]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d00b      	beq.n	800c13c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c12a:	691b      	ldr	r3, [r3, #16]
 800c12c:	687a      	ldr	r2, [r7, #4]
 800c12e:	7c12      	ldrb	r2, [r2, #16]
 800c130:	f107 0108 	add.w	r1, r7, #8
 800c134:	4610      	mov	r0, r2
 800c136:	4798      	blx	r3
 800c138:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c13a:	e043      	b.n	800c1c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c13c:	6839      	ldr	r1, [r7, #0]
 800c13e:	6878      	ldr	r0, [r7, #4]
 800c140:	f000 fa46 	bl	800c5d0 <USBD_CtlError>
            err++;
 800c144:	7afb      	ldrb	r3, [r7, #11]
 800c146:	3301      	adds	r3, #1
 800c148:	72fb      	strb	r3, [r7, #11]
          break;
 800c14a:	e03b      	b.n	800c1c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c152:	695b      	ldr	r3, [r3, #20]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d00b      	beq.n	800c170 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c15e:	695b      	ldr	r3, [r3, #20]
 800c160:	687a      	ldr	r2, [r7, #4]
 800c162:	7c12      	ldrb	r2, [r2, #16]
 800c164:	f107 0108 	add.w	r1, r7, #8
 800c168:	4610      	mov	r0, r2
 800c16a:	4798      	blx	r3
 800c16c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c16e:	e029      	b.n	800c1c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c170:	6839      	ldr	r1, [r7, #0]
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	f000 fa2c 	bl	800c5d0 <USBD_CtlError>
            err++;
 800c178:	7afb      	ldrb	r3, [r7, #11]
 800c17a:	3301      	adds	r3, #1
 800c17c:	72fb      	strb	r3, [r7, #11]
          break;
 800c17e:	e021      	b.n	800c1c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c186:	699b      	ldr	r3, [r3, #24]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d00b      	beq.n	800c1a4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c192:	699b      	ldr	r3, [r3, #24]
 800c194:	687a      	ldr	r2, [r7, #4]
 800c196:	7c12      	ldrb	r2, [r2, #16]
 800c198:	f107 0108 	add.w	r1, r7, #8
 800c19c:	4610      	mov	r0, r2
 800c19e:	4798      	blx	r3
 800c1a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c1a2:	e00f      	b.n	800c1c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c1a4:	6839      	ldr	r1, [r7, #0]
 800c1a6:	6878      	ldr	r0, [r7, #4]
 800c1a8:	f000 fa12 	bl	800c5d0 <USBD_CtlError>
            err++;
 800c1ac:	7afb      	ldrb	r3, [r7, #11]
 800c1ae:	3301      	adds	r3, #1
 800c1b0:	72fb      	strb	r3, [r7, #11]
          break;
 800c1b2:	e007      	b.n	800c1c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800c1b4:	6839      	ldr	r1, [r7, #0]
 800c1b6:	6878      	ldr	r0, [r7, #4]
 800c1b8:	f000 fa0a 	bl	800c5d0 <USBD_CtlError>
          err++;
 800c1bc:	7afb      	ldrb	r3, [r7, #11]
 800c1be:	3301      	adds	r3, #1
 800c1c0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800c1c2:	e038      	b.n	800c236 <USBD_GetDescriptor+0x286>
 800c1c4:	e037      	b.n	800c236 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	7c1b      	ldrb	r3, [r3, #16]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d109      	bne.n	800c1e2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1d6:	f107 0208 	add.w	r2, r7, #8
 800c1da:	4610      	mov	r0, r2
 800c1dc:	4798      	blx	r3
 800c1de:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c1e0:	e029      	b.n	800c236 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c1e2:	6839      	ldr	r1, [r7, #0]
 800c1e4:	6878      	ldr	r0, [r7, #4]
 800c1e6:	f000 f9f3 	bl	800c5d0 <USBD_CtlError>
        err++;
 800c1ea:	7afb      	ldrb	r3, [r7, #11]
 800c1ec:	3301      	adds	r3, #1
 800c1ee:	72fb      	strb	r3, [r7, #11]
      break;
 800c1f0:	e021      	b.n	800c236 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	7c1b      	ldrb	r3, [r3, #16]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d10d      	bne.n	800c216 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c202:	f107 0208 	add.w	r2, r7, #8
 800c206:	4610      	mov	r0, r2
 800c208:	4798      	blx	r3
 800c20a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	3301      	adds	r3, #1
 800c210:	2207      	movs	r2, #7
 800c212:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c214:	e00f      	b.n	800c236 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c216:	6839      	ldr	r1, [r7, #0]
 800c218:	6878      	ldr	r0, [r7, #4]
 800c21a:	f000 f9d9 	bl	800c5d0 <USBD_CtlError>
        err++;
 800c21e:	7afb      	ldrb	r3, [r7, #11]
 800c220:	3301      	adds	r3, #1
 800c222:	72fb      	strb	r3, [r7, #11]
      break;
 800c224:	e007      	b.n	800c236 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c226:	6839      	ldr	r1, [r7, #0]
 800c228:	6878      	ldr	r0, [r7, #4]
 800c22a:	f000 f9d1 	bl	800c5d0 <USBD_CtlError>
      err++;
 800c22e:	7afb      	ldrb	r3, [r7, #11]
 800c230:	3301      	adds	r3, #1
 800c232:	72fb      	strb	r3, [r7, #11]
      break;
 800c234:	bf00      	nop
  }

  if (err != 0U)
 800c236:	7afb      	ldrb	r3, [r7, #11]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d11c      	bne.n	800c276 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800c23c:	893b      	ldrh	r3, [r7, #8]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d011      	beq.n	800c266 <USBD_GetDescriptor+0x2b6>
 800c242:	683b      	ldr	r3, [r7, #0]
 800c244:	88db      	ldrh	r3, [r3, #6]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d00d      	beq.n	800c266 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800c24a:	683b      	ldr	r3, [r7, #0]
 800c24c:	88da      	ldrh	r2, [r3, #6]
 800c24e:	893b      	ldrh	r3, [r7, #8]
 800c250:	4293      	cmp	r3, r2
 800c252:	bf28      	it	cs
 800c254:	4613      	movcs	r3, r2
 800c256:	b29b      	uxth	r3, r3
 800c258:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c25a:	893b      	ldrh	r3, [r7, #8]
 800c25c:	461a      	mov	r2, r3
 800c25e:	68f9      	ldr	r1, [r7, #12]
 800c260:	6878      	ldr	r0, [r7, #4]
 800c262:	f000 fa1f 	bl	800c6a4 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	88db      	ldrh	r3, [r3, #6]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d104      	bne.n	800c278 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800c26e:	6878      	ldr	r0, [r7, #4]
 800c270:	f000 fa76 	bl	800c760 <USBD_CtlSendStatus>
 800c274:	e000      	b.n	800c278 <USBD_GetDescriptor+0x2c8>
    return;
 800c276:	bf00      	nop
    }
  }
}
 800c278:	3710      	adds	r7, #16
 800c27a:	46bd      	mov	sp, r7
 800c27c:	bd80      	pop	{r7, pc}
 800c27e:	bf00      	nop

0800c280 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b084      	sub	sp, #16
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
 800c288:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c28a:	683b      	ldr	r3, [r7, #0]
 800c28c:	889b      	ldrh	r3, [r3, #4]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d130      	bne.n	800c2f4 <USBD_SetAddress+0x74>
 800c292:	683b      	ldr	r3, [r7, #0]
 800c294:	88db      	ldrh	r3, [r3, #6]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d12c      	bne.n	800c2f4 <USBD_SetAddress+0x74>
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	885b      	ldrh	r3, [r3, #2]
 800c29e:	2b7f      	cmp	r3, #127	; 0x7f
 800c2a0:	d828      	bhi.n	800c2f4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	885b      	ldrh	r3, [r3, #2]
 800c2a6:	b2db      	uxtb	r3, r3
 800c2a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2ac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2b4:	2b03      	cmp	r3, #3
 800c2b6:	d104      	bne.n	800c2c2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800c2b8:	6839      	ldr	r1, [r7, #0]
 800c2ba:	6878      	ldr	r0, [r7, #4]
 800c2bc:	f000 f988 	bl	800c5d0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2c0:	e01c      	b.n	800c2fc <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	7bfa      	ldrb	r2, [r7, #15]
 800c2c6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c2ca:	7bfb      	ldrb	r3, [r7, #15]
 800c2cc:	4619      	mov	r1, r3
 800c2ce:	6878      	ldr	r0, [r7, #4]
 800c2d0:	f000 fe9f 	bl	800d012 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800c2d4:	6878      	ldr	r0, [r7, #4]
 800c2d6:	f000 fa43 	bl	800c760 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c2da:	7bfb      	ldrb	r3, [r7, #15]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d004      	beq.n	800c2ea <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2202      	movs	r2, #2
 800c2e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2e8:	e008      	b.n	800c2fc <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	2201      	movs	r2, #1
 800c2ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2f2:	e003      	b.n	800c2fc <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c2f4:	6839      	ldr	r1, [r7, #0]
 800c2f6:	6878      	ldr	r0, [r7, #4]
 800c2f8:	f000 f96a 	bl	800c5d0 <USBD_CtlError>
  }
}
 800c2fc:	bf00      	nop
 800c2fe:	3710      	adds	r7, #16
 800c300:	46bd      	mov	sp, r7
 800c302:	bd80      	pop	{r7, pc}

0800c304 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b082      	sub	sp, #8
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
 800c30c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	885b      	ldrh	r3, [r3, #2]
 800c312:	b2da      	uxtb	r2, r3
 800c314:	4b41      	ldr	r3, [pc, #260]	; (800c41c <USBD_SetConfig+0x118>)
 800c316:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c318:	4b40      	ldr	r3, [pc, #256]	; (800c41c <USBD_SetConfig+0x118>)
 800c31a:	781b      	ldrb	r3, [r3, #0]
 800c31c:	2b01      	cmp	r3, #1
 800c31e:	d904      	bls.n	800c32a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800c320:	6839      	ldr	r1, [r7, #0]
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f000 f954 	bl	800c5d0 <USBD_CtlError>
 800c328:	e075      	b.n	800c416 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c330:	2b02      	cmp	r3, #2
 800c332:	d002      	beq.n	800c33a <USBD_SetConfig+0x36>
 800c334:	2b03      	cmp	r3, #3
 800c336:	d023      	beq.n	800c380 <USBD_SetConfig+0x7c>
 800c338:	e062      	b.n	800c400 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800c33a:	4b38      	ldr	r3, [pc, #224]	; (800c41c <USBD_SetConfig+0x118>)
 800c33c:	781b      	ldrb	r3, [r3, #0]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d01a      	beq.n	800c378 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800c342:	4b36      	ldr	r3, [pc, #216]	; (800c41c <USBD_SetConfig+0x118>)
 800c344:	781b      	ldrb	r3, [r3, #0]
 800c346:	461a      	mov	r2, r3
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	2203      	movs	r2, #3
 800c350:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c354:	4b31      	ldr	r3, [pc, #196]	; (800c41c <USBD_SetConfig+0x118>)
 800c356:	781b      	ldrb	r3, [r3, #0]
 800c358:	4619      	mov	r1, r3
 800c35a:	6878      	ldr	r0, [r7, #4]
 800c35c:	f7ff f9f3 	bl	800b746 <USBD_SetClassConfig>
 800c360:	4603      	mov	r3, r0
 800c362:	2b02      	cmp	r3, #2
 800c364:	d104      	bne.n	800c370 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800c366:	6839      	ldr	r1, [r7, #0]
 800c368:	6878      	ldr	r0, [r7, #4]
 800c36a:	f000 f931 	bl	800c5d0 <USBD_CtlError>
            return;
 800c36e:	e052      	b.n	800c416 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800c370:	6878      	ldr	r0, [r7, #4]
 800c372:	f000 f9f5 	bl	800c760 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c376:	e04e      	b.n	800c416 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c378:	6878      	ldr	r0, [r7, #4]
 800c37a:	f000 f9f1 	bl	800c760 <USBD_CtlSendStatus>
        break;
 800c37e:	e04a      	b.n	800c416 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800c380:	4b26      	ldr	r3, [pc, #152]	; (800c41c <USBD_SetConfig+0x118>)
 800c382:	781b      	ldrb	r3, [r3, #0]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d112      	bne.n	800c3ae <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2202      	movs	r2, #2
 800c38c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800c390:	4b22      	ldr	r3, [pc, #136]	; (800c41c <USBD_SetConfig+0x118>)
 800c392:	781b      	ldrb	r3, [r3, #0]
 800c394:	461a      	mov	r2, r3
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800c39a:	4b20      	ldr	r3, [pc, #128]	; (800c41c <USBD_SetConfig+0x118>)
 800c39c:	781b      	ldrb	r3, [r3, #0]
 800c39e:	4619      	mov	r1, r3
 800c3a0:	6878      	ldr	r0, [r7, #4]
 800c3a2:	f7ff f9ef 	bl	800b784 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800c3a6:	6878      	ldr	r0, [r7, #4]
 800c3a8:	f000 f9da 	bl	800c760 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c3ac:	e033      	b.n	800c416 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800c3ae:	4b1b      	ldr	r3, [pc, #108]	; (800c41c <USBD_SetConfig+0x118>)
 800c3b0:	781b      	ldrb	r3, [r3, #0]
 800c3b2:	461a      	mov	r2, r3
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	685b      	ldr	r3, [r3, #4]
 800c3b8:	429a      	cmp	r2, r3
 800c3ba:	d01d      	beq.n	800c3f8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	685b      	ldr	r3, [r3, #4]
 800c3c0:	b2db      	uxtb	r3, r3
 800c3c2:	4619      	mov	r1, r3
 800c3c4:	6878      	ldr	r0, [r7, #4]
 800c3c6:	f7ff f9dd 	bl	800b784 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800c3ca:	4b14      	ldr	r3, [pc, #80]	; (800c41c <USBD_SetConfig+0x118>)
 800c3cc:	781b      	ldrb	r3, [r3, #0]
 800c3ce:	461a      	mov	r2, r3
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c3d4:	4b11      	ldr	r3, [pc, #68]	; (800c41c <USBD_SetConfig+0x118>)
 800c3d6:	781b      	ldrb	r3, [r3, #0]
 800c3d8:	4619      	mov	r1, r3
 800c3da:	6878      	ldr	r0, [r7, #4]
 800c3dc:	f7ff f9b3 	bl	800b746 <USBD_SetClassConfig>
 800c3e0:	4603      	mov	r3, r0
 800c3e2:	2b02      	cmp	r3, #2
 800c3e4:	d104      	bne.n	800c3f0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800c3e6:	6839      	ldr	r1, [r7, #0]
 800c3e8:	6878      	ldr	r0, [r7, #4]
 800c3ea:	f000 f8f1 	bl	800c5d0 <USBD_CtlError>
            return;
 800c3ee:	e012      	b.n	800c416 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c3f0:	6878      	ldr	r0, [r7, #4]
 800c3f2:	f000 f9b5 	bl	800c760 <USBD_CtlSendStatus>
        break;
 800c3f6:	e00e      	b.n	800c416 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c3f8:	6878      	ldr	r0, [r7, #4]
 800c3fa:	f000 f9b1 	bl	800c760 <USBD_CtlSendStatus>
        break;
 800c3fe:	e00a      	b.n	800c416 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800c400:	6839      	ldr	r1, [r7, #0]
 800c402:	6878      	ldr	r0, [r7, #4]
 800c404:	f000 f8e4 	bl	800c5d0 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800c408:	4b04      	ldr	r3, [pc, #16]	; (800c41c <USBD_SetConfig+0x118>)
 800c40a:	781b      	ldrb	r3, [r3, #0]
 800c40c:	4619      	mov	r1, r3
 800c40e:	6878      	ldr	r0, [r7, #4]
 800c410:	f7ff f9b8 	bl	800b784 <USBD_ClrClassConfig>
        break;
 800c414:	bf00      	nop
    }
  }
}
 800c416:	3708      	adds	r7, #8
 800c418:	46bd      	mov	sp, r7
 800c41a:	bd80      	pop	{r7, pc}
 800c41c:	20000984 	.word	0x20000984

0800c420 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b082      	sub	sp, #8
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
 800c428:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	88db      	ldrh	r3, [r3, #6]
 800c42e:	2b01      	cmp	r3, #1
 800c430:	d004      	beq.n	800c43c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c432:	6839      	ldr	r1, [r7, #0]
 800c434:	6878      	ldr	r0, [r7, #4]
 800c436:	f000 f8cb 	bl	800c5d0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c43a:	e021      	b.n	800c480 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c442:	2b01      	cmp	r3, #1
 800c444:	db17      	blt.n	800c476 <USBD_GetConfig+0x56>
 800c446:	2b02      	cmp	r3, #2
 800c448:	dd02      	ble.n	800c450 <USBD_GetConfig+0x30>
 800c44a:	2b03      	cmp	r3, #3
 800c44c:	d00b      	beq.n	800c466 <USBD_GetConfig+0x46>
 800c44e:	e012      	b.n	800c476 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	2200      	movs	r2, #0
 800c454:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	3308      	adds	r3, #8
 800c45a:	2201      	movs	r2, #1
 800c45c:	4619      	mov	r1, r3
 800c45e:	6878      	ldr	r0, [r7, #4]
 800c460:	f000 f920 	bl	800c6a4 <USBD_CtlSendData>
        break;
 800c464:	e00c      	b.n	800c480 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	3304      	adds	r3, #4
 800c46a:	2201      	movs	r2, #1
 800c46c:	4619      	mov	r1, r3
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	f000 f918 	bl	800c6a4 <USBD_CtlSendData>
        break;
 800c474:	e004      	b.n	800c480 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800c476:	6839      	ldr	r1, [r7, #0]
 800c478:	6878      	ldr	r0, [r7, #4]
 800c47a:	f000 f8a9 	bl	800c5d0 <USBD_CtlError>
        break;
 800c47e:	bf00      	nop
}
 800c480:	bf00      	nop
 800c482:	3708      	adds	r7, #8
 800c484:	46bd      	mov	sp, r7
 800c486:	bd80      	pop	{r7, pc}

0800c488 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b082      	sub	sp, #8
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
 800c490:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c498:	3b01      	subs	r3, #1
 800c49a:	2b02      	cmp	r3, #2
 800c49c:	d81e      	bhi.n	800c4dc <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	88db      	ldrh	r3, [r3, #6]
 800c4a2:	2b02      	cmp	r3, #2
 800c4a4:	d004      	beq.n	800c4b0 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800c4a6:	6839      	ldr	r1, [r7, #0]
 800c4a8:	6878      	ldr	r0, [r7, #4]
 800c4aa:	f000 f891 	bl	800c5d0 <USBD_CtlError>
        break;
 800c4ae:	e01a      	b.n	800c4e6 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2201      	movs	r2, #1
 800c4b4:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d005      	beq.n	800c4cc <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	68db      	ldr	r3, [r3, #12]
 800c4c4:	f043 0202 	orr.w	r2, r3, #2
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	330c      	adds	r3, #12
 800c4d0:	2202      	movs	r2, #2
 800c4d2:	4619      	mov	r1, r3
 800c4d4:	6878      	ldr	r0, [r7, #4]
 800c4d6:	f000 f8e5 	bl	800c6a4 <USBD_CtlSendData>
      break;
 800c4da:	e004      	b.n	800c4e6 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800c4dc:	6839      	ldr	r1, [r7, #0]
 800c4de:	6878      	ldr	r0, [r7, #4]
 800c4e0:	f000 f876 	bl	800c5d0 <USBD_CtlError>
      break;
 800c4e4:	bf00      	nop
  }
}
 800c4e6:	bf00      	nop
 800c4e8:	3708      	adds	r7, #8
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd80      	pop	{r7, pc}

0800c4ee <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c4ee:	b580      	push	{r7, lr}
 800c4f0:	b082      	sub	sp, #8
 800c4f2:	af00      	add	r7, sp, #0
 800c4f4:	6078      	str	r0, [r7, #4]
 800c4f6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	885b      	ldrh	r3, [r3, #2]
 800c4fc:	2b01      	cmp	r3, #1
 800c4fe:	d106      	bne.n	800c50e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	2201      	movs	r2, #1
 800c504:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800c508:	6878      	ldr	r0, [r7, #4]
 800c50a:	f000 f929 	bl	800c760 <USBD_CtlSendStatus>
  }
}
 800c50e:	bf00      	nop
 800c510:	3708      	adds	r7, #8
 800c512:	46bd      	mov	sp, r7
 800c514:	bd80      	pop	{r7, pc}

0800c516 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c516:	b580      	push	{r7, lr}
 800c518:	b082      	sub	sp, #8
 800c51a:	af00      	add	r7, sp, #0
 800c51c:	6078      	str	r0, [r7, #4]
 800c51e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c526:	3b01      	subs	r3, #1
 800c528:	2b02      	cmp	r3, #2
 800c52a:	d80b      	bhi.n	800c544 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c52c:	683b      	ldr	r3, [r7, #0]
 800c52e:	885b      	ldrh	r3, [r3, #2]
 800c530:	2b01      	cmp	r3, #1
 800c532:	d10c      	bne.n	800c54e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	2200      	movs	r2, #0
 800c538:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800c53c:	6878      	ldr	r0, [r7, #4]
 800c53e:	f000 f90f 	bl	800c760 <USBD_CtlSendStatus>
      }
      break;
 800c542:	e004      	b.n	800c54e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c544:	6839      	ldr	r1, [r7, #0]
 800c546:	6878      	ldr	r0, [r7, #4]
 800c548:	f000 f842 	bl	800c5d0 <USBD_CtlError>
      break;
 800c54c:	e000      	b.n	800c550 <USBD_ClrFeature+0x3a>
      break;
 800c54e:	bf00      	nop
  }
}
 800c550:	bf00      	nop
 800c552:	3708      	adds	r7, #8
 800c554:	46bd      	mov	sp, r7
 800c556:	bd80      	pop	{r7, pc}

0800c558 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c558:	b480      	push	{r7}
 800c55a:	b083      	sub	sp, #12
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
 800c560:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	781a      	ldrb	r2, [r3, #0]
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800c56a:	683b      	ldr	r3, [r7, #0]
 800c56c:	785a      	ldrb	r2, [r3, #1]
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800c572:	683b      	ldr	r3, [r7, #0]
 800c574:	3302      	adds	r3, #2
 800c576:	781b      	ldrb	r3, [r3, #0]
 800c578:	b29a      	uxth	r2, r3
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	3303      	adds	r3, #3
 800c57e:	781b      	ldrb	r3, [r3, #0]
 800c580:	b29b      	uxth	r3, r3
 800c582:	021b      	lsls	r3, r3, #8
 800c584:	b29b      	uxth	r3, r3
 800c586:	4413      	add	r3, r2
 800c588:	b29a      	uxth	r2, r3
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	3304      	adds	r3, #4
 800c592:	781b      	ldrb	r3, [r3, #0]
 800c594:	b29a      	uxth	r2, r3
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	3305      	adds	r3, #5
 800c59a:	781b      	ldrb	r3, [r3, #0]
 800c59c:	b29b      	uxth	r3, r3
 800c59e:	021b      	lsls	r3, r3, #8
 800c5a0:	b29b      	uxth	r3, r3
 800c5a2:	4413      	add	r3, r2
 800c5a4:	b29a      	uxth	r2, r3
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	3306      	adds	r3, #6
 800c5ae:	781b      	ldrb	r3, [r3, #0]
 800c5b0:	b29a      	uxth	r2, r3
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	3307      	adds	r3, #7
 800c5b6:	781b      	ldrb	r3, [r3, #0]
 800c5b8:	b29b      	uxth	r3, r3
 800c5ba:	021b      	lsls	r3, r3, #8
 800c5bc:	b29b      	uxth	r3, r3
 800c5be:	4413      	add	r3, r2
 800c5c0:	b29a      	uxth	r2, r3
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	80da      	strh	r2, [r3, #6]

}
 800c5c6:	bf00      	nop
 800c5c8:	370c      	adds	r7, #12
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	bc80      	pop	{r7}
 800c5ce:	4770      	bx	lr

0800c5d0 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b082      	sub	sp, #8
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
 800c5d8:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800c5da:	2180      	movs	r1, #128	; 0x80
 800c5dc:	6878      	ldr	r0, [r7, #4]
 800c5de:	f000 fcb5 	bl	800cf4c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800c5e2:	2100      	movs	r1, #0
 800c5e4:	6878      	ldr	r0, [r7, #4]
 800c5e6:	f000 fcb1 	bl	800cf4c <USBD_LL_StallEP>
}
 800c5ea:	bf00      	nop
 800c5ec:	3708      	adds	r7, #8
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	bd80      	pop	{r7, pc}

0800c5f2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c5f2:	b580      	push	{r7, lr}
 800c5f4:	b086      	sub	sp, #24
 800c5f6:	af00      	add	r7, sp, #0
 800c5f8:	60f8      	str	r0, [r7, #12]
 800c5fa:	60b9      	str	r1, [r7, #8]
 800c5fc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c5fe:	2300      	movs	r3, #0
 800c600:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d032      	beq.n	800c66e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800c608:	68f8      	ldr	r0, [r7, #12]
 800c60a:	f000 f834 	bl	800c676 <USBD_GetLen>
 800c60e:	4603      	mov	r3, r0
 800c610:	3301      	adds	r3, #1
 800c612:	b29b      	uxth	r3, r3
 800c614:	005b      	lsls	r3, r3, #1
 800c616:	b29a      	uxth	r2, r3
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800c61c:	7dfb      	ldrb	r3, [r7, #23]
 800c61e:	1c5a      	adds	r2, r3, #1
 800c620:	75fa      	strb	r2, [r7, #23]
 800c622:	461a      	mov	r2, r3
 800c624:	68bb      	ldr	r3, [r7, #8]
 800c626:	4413      	add	r3, r2
 800c628:	687a      	ldr	r2, [r7, #4]
 800c62a:	7812      	ldrb	r2, [r2, #0]
 800c62c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800c62e:	7dfb      	ldrb	r3, [r7, #23]
 800c630:	1c5a      	adds	r2, r3, #1
 800c632:	75fa      	strb	r2, [r7, #23]
 800c634:	461a      	mov	r2, r3
 800c636:	68bb      	ldr	r3, [r7, #8]
 800c638:	4413      	add	r3, r2
 800c63a:	2203      	movs	r2, #3
 800c63c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800c63e:	e012      	b.n	800c666 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	1c5a      	adds	r2, r3, #1
 800c644:	60fa      	str	r2, [r7, #12]
 800c646:	7dfa      	ldrb	r2, [r7, #23]
 800c648:	1c51      	adds	r1, r2, #1
 800c64a:	75f9      	strb	r1, [r7, #23]
 800c64c:	4611      	mov	r1, r2
 800c64e:	68ba      	ldr	r2, [r7, #8]
 800c650:	440a      	add	r2, r1
 800c652:	781b      	ldrb	r3, [r3, #0]
 800c654:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800c656:	7dfb      	ldrb	r3, [r7, #23]
 800c658:	1c5a      	adds	r2, r3, #1
 800c65a:	75fa      	strb	r2, [r7, #23]
 800c65c:	461a      	mov	r2, r3
 800c65e:	68bb      	ldr	r3, [r7, #8]
 800c660:	4413      	add	r3, r2
 800c662:	2200      	movs	r2, #0
 800c664:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	781b      	ldrb	r3, [r3, #0]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d1e8      	bne.n	800c640 <USBD_GetString+0x4e>
    }
  }
}
 800c66e:	bf00      	nop
 800c670:	3718      	adds	r7, #24
 800c672:	46bd      	mov	sp, r7
 800c674:	bd80      	pop	{r7, pc}

0800c676 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c676:	b480      	push	{r7}
 800c678:	b085      	sub	sp, #20
 800c67a:	af00      	add	r7, sp, #0
 800c67c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c67e:	2300      	movs	r3, #0
 800c680:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800c682:	e005      	b.n	800c690 <USBD_GetLen+0x1a>
  {
    len++;
 800c684:	7bfb      	ldrb	r3, [r7, #15]
 800c686:	3301      	adds	r3, #1
 800c688:	73fb      	strb	r3, [r7, #15]
    buf++;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	3301      	adds	r3, #1
 800c68e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	781b      	ldrb	r3, [r3, #0]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d1f5      	bne.n	800c684 <USBD_GetLen+0xe>
  }

  return len;
 800c698:	7bfb      	ldrb	r3, [r7, #15]
}
 800c69a:	4618      	mov	r0, r3
 800c69c:	3714      	adds	r7, #20
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	bc80      	pop	{r7}
 800c6a2:	4770      	bx	lr

0800c6a4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b084      	sub	sp, #16
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	60f8      	str	r0, [r7, #12]
 800c6ac:	60b9      	str	r1, [r7, #8]
 800c6ae:	4613      	mov	r3, r2
 800c6b0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	2202      	movs	r2, #2
 800c6b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c6ba:	88fa      	ldrh	r2, [r7, #6]
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800c6c0:	88fa      	ldrh	r2, [r7, #6]
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c6c6:	88fb      	ldrh	r3, [r7, #6]
 800c6c8:	68ba      	ldr	r2, [r7, #8]
 800c6ca:	2100      	movs	r1, #0
 800c6cc:	68f8      	ldr	r0, [r7, #12]
 800c6ce:	f000 fcbf 	bl	800d050 <USBD_LL_Transmit>

  return USBD_OK;
 800c6d2:	2300      	movs	r3, #0
}
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	3710      	adds	r7, #16
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	bd80      	pop	{r7, pc}

0800c6dc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b084      	sub	sp, #16
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	60f8      	str	r0, [r7, #12]
 800c6e4:	60b9      	str	r1, [r7, #8]
 800c6e6:	4613      	mov	r3, r2
 800c6e8:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c6ea:	88fb      	ldrh	r3, [r7, #6]
 800c6ec:	68ba      	ldr	r2, [r7, #8]
 800c6ee:	2100      	movs	r1, #0
 800c6f0:	68f8      	ldr	r0, [r7, #12]
 800c6f2:	f000 fcad 	bl	800d050 <USBD_LL_Transmit>

  return USBD_OK;
 800c6f6:	2300      	movs	r3, #0
}
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	3710      	adds	r7, #16
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	bd80      	pop	{r7, pc}

0800c700 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800c700:	b580      	push	{r7, lr}
 800c702:	b084      	sub	sp, #16
 800c704:	af00      	add	r7, sp, #0
 800c706:	60f8      	str	r0, [r7, #12]
 800c708:	60b9      	str	r1, [r7, #8]
 800c70a:	4613      	mov	r3, r2
 800c70c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	2203      	movs	r2, #3
 800c712:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c716:	88fa      	ldrh	r2, [r7, #6]
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800c71e:	88fa      	ldrh	r2, [r7, #6]
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c726:	88fb      	ldrh	r3, [r7, #6]
 800c728:	68ba      	ldr	r2, [r7, #8]
 800c72a:	2100      	movs	r1, #0
 800c72c:	68f8      	ldr	r0, [r7, #12]
 800c72e:	f000 fcb2 	bl	800d096 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c732:	2300      	movs	r3, #0
}
 800c734:	4618      	mov	r0, r3
 800c736:	3710      	adds	r7, #16
 800c738:	46bd      	mov	sp, r7
 800c73a:	bd80      	pop	{r7, pc}

0800c73c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b084      	sub	sp, #16
 800c740:	af00      	add	r7, sp, #0
 800c742:	60f8      	str	r0, [r7, #12]
 800c744:	60b9      	str	r1, [r7, #8]
 800c746:	4613      	mov	r3, r2
 800c748:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c74a:	88fb      	ldrh	r3, [r7, #6]
 800c74c:	68ba      	ldr	r2, [r7, #8]
 800c74e:	2100      	movs	r1, #0
 800c750:	68f8      	ldr	r0, [r7, #12]
 800c752:	f000 fca0 	bl	800d096 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c756:	2300      	movs	r3, #0
}
 800c758:	4618      	mov	r0, r3
 800c75a:	3710      	adds	r7, #16
 800c75c:	46bd      	mov	sp, r7
 800c75e:	bd80      	pop	{r7, pc}

0800c760 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c760:	b580      	push	{r7, lr}
 800c762:	b082      	sub	sp, #8
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2204      	movs	r2, #4
 800c76c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c770:	2300      	movs	r3, #0
 800c772:	2200      	movs	r2, #0
 800c774:	2100      	movs	r1, #0
 800c776:	6878      	ldr	r0, [r7, #4]
 800c778:	f000 fc6a 	bl	800d050 <USBD_LL_Transmit>

  return USBD_OK;
 800c77c:	2300      	movs	r3, #0
}
 800c77e:	4618      	mov	r0, r3
 800c780:	3708      	adds	r7, #8
 800c782:	46bd      	mov	sp, r7
 800c784:	bd80      	pop	{r7, pc}

0800c786 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c786:	b580      	push	{r7, lr}
 800c788:	b082      	sub	sp, #8
 800c78a:	af00      	add	r7, sp, #0
 800c78c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	2205      	movs	r2, #5
 800c792:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c796:	2300      	movs	r3, #0
 800c798:	2200      	movs	r2, #0
 800c79a:	2100      	movs	r1, #0
 800c79c:	6878      	ldr	r0, [r7, #4]
 800c79e:	f000 fc7a 	bl	800d096 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c7a2:	2300      	movs	r3, #0
}
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	3708      	adds	r7, #8
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	bd80      	pop	{r7, pc}

0800c7ac <my_MX_USB_DEVICE_Init>:
/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void my_MX_USB_DEVICE_Init(void)
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	af00      	add	r7, sp, #0
  DecTrigger = 1;
 800c7b0:	4b0a      	ldr	r3, [pc, #40]	; (800c7dc <my_MX_USB_DEVICE_Init+0x30>)
 800c7b2:	2201      	movs	r2, #1
 800c7b4:	601a      	str	r2, [r3, #0]
  /* Init Device Library,Add Supported Class and Start the library*/
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	4909      	ldr	r1, [pc, #36]	; (800c7e0 <my_MX_USB_DEVICE_Init+0x34>)
 800c7ba:	480a      	ldr	r0, [pc, #40]	; (800c7e4 <my_MX_USB_DEVICE_Init+0x38>)
 800c7bc:	f7fe ff69 	bl	800b692 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID);
 800c7c0:	4909      	ldr	r1, [pc, #36]	; (800c7e8 <my_MX_USB_DEVICE_Init+0x3c>)
 800c7c2:	4808      	ldr	r0, [pc, #32]	; (800c7e4 <my_MX_USB_DEVICE_Init+0x38>)
 800c7c4:	f7fe ff90 	bl	800b6e8 <USBD_RegisterClass>

  USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS);
 800c7c8:	4908      	ldr	r1, [pc, #32]	; (800c7ec <my_MX_USB_DEVICE_Init+0x40>)
 800c7ca:	4806      	ldr	r0, [pc, #24]	; (800c7e4 <my_MX_USB_DEVICE_Init+0x38>)
 800c7cc:	f7f7 fd44 	bl	8004258 <USBD_CUSTOM_HID_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 800c7d0:	4804      	ldr	r0, [pc, #16]	; (800c7e4 <my_MX_USB_DEVICE_Init+0x38>)
 800c7d2:	f7fe ffa2 	bl	800b71a <USBD_Start>

}
 800c7d6:	bf00      	nop
 800c7d8:	bd80      	pop	{r7, pc}
 800c7da:	bf00      	nop
 800c7dc:	20000e10 	.word	0x20000e10
 800c7e0:	20000378 	.word	0x20000378
 800c7e4:	20000e18 	.word	0x20000e18
 800c7e8:	20000160 	.word	0x20000160
 800c7ec:	20000150 	.word	0x20000150

0800c7f0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	af00      	add	r7, sp, #0
	DecTrigger = 0;
 800c7f4:	4b14      	ldr	r3, [pc, #80]	; (800c848 <MX_USB_DEVICE_Init+0x58>)
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	4913      	ldr	r1, [pc, #76]	; (800c84c <MX_USB_DEVICE_Init+0x5c>)
 800c7fe:	4814      	ldr	r0, [pc, #80]	; (800c850 <MX_USB_DEVICE_Init+0x60>)
 800c800:	f7fe ff47 	bl	800b692 <USBD_Init>
 800c804:	4603      	mov	r3, r0
 800c806:	2b00      	cmp	r3, #0
 800c808:	d001      	beq.n	800c80e <MX_USB_DEVICE_Init+0x1e>
  {
    Error_Handler();
 800c80a:	f7f7 fb61 	bl	8003ed0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c80e:	4911      	ldr	r1, [pc, #68]	; (800c854 <MX_USB_DEVICE_Init+0x64>)
 800c810:	480f      	ldr	r0, [pc, #60]	; (800c850 <MX_USB_DEVICE_Init+0x60>)
 800c812:	f7fe ff69 	bl	800b6e8 <USBD_RegisterClass>
 800c816:	4603      	mov	r3, r0
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d001      	beq.n	800c820 <MX_USB_DEVICE_Init+0x30>
  {
    Error_Handler();
 800c81c:	f7f7 fb58 	bl	8003ed0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c820:	490d      	ldr	r1, [pc, #52]	; (800c858 <MX_USB_DEVICE_Init+0x68>)
 800c822:	480b      	ldr	r0, [pc, #44]	; (800c850 <MX_USB_DEVICE_Init+0x60>)
 800c824:	f7fe fe9a 	bl	800b55c <USBD_CDC_RegisterInterface>
 800c828:	4603      	mov	r3, r0
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d001      	beq.n	800c832 <MX_USB_DEVICE_Init+0x42>
  {
    Error_Handler();
 800c82e:	f7f7 fb4f 	bl	8003ed0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c832:	4807      	ldr	r0, [pc, #28]	; (800c850 <MX_USB_DEVICE_Init+0x60>)
 800c834:	f7fe ff71 	bl	800b71a <USBD_Start>
 800c838:	4603      	mov	r3, r0
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d001      	beq.n	800c842 <MX_USB_DEVICE_Init+0x52>
  {
    Error_Handler();
 800c83e:	f7f7 fb47 	bl	8003ed0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c842:	bf00      	nop
 800c844:	bd80      	pop	{r7, pc}
 800c846:	bf00      	nop
 800c848:	20000e10 	.word	0x20000e10
 800c84c:	20000378 	.word	0x20000378
 800c850:	20000e18 	.word	0x20000e18
 800c854:	20000264 	.word	0x20000264
 800c858:	20000368 	.word	0x20000368

0800c85c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c860:	2200      	movs	r2, #0
 800c862:	4905      	ldr	r1, [pc, #20]	; (800c878 <CDC_Init_FS+0x1c>)
 800c864:	4805      	ldr	r0, [pc, #20]	; (800c87c <CDC_Init_FS+0x20>)
 800c866:	f7fe fe8f 	bl	800b588 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c86a:	4905      	ldr	r1, [pc, #20]	; (800c880 <CDC_Init_FS+0x24>)
 800c86c:	4803      	ldr	r0, [pc, #12]	; (800c87c <CDC_Init_FS+0x20>)
 800c86e:	f7fe fea4 	bl	800b5ba <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c872:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c874:	4618      	mov	r0, r3
 800c876:	bd80      	pop	{r7, pc}
 800c878:	200014c4 	.word	0x200014c4
 800c87c:	20000e18 	.word	0x20000e18
 800c880:	200010dc 	.word	0x200010dc

0800c884 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c884:	b480      	push	{r7}
 800c886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c888:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c88a:	4618      	mov	r0, r3
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bc80      	pop	{r7}
 800c890:	4770      	bx	lr
	...

0800c894 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c894:	b480      	push	{r7}
 800c896:	b083      	sub	sp, #12
 800c898:	af00      	add	r7, sp, #0
 800c89a:	4603      	mov	r3, r0
 800c89c:	6039      	str	r1, [r7, #0]
 800c89e:	71fb      	strb	r3, [r7, #7]
 800c8a0:	4613      	mov	r3, r2
 800c8a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c8a4:	79fb      	ldrb	r3, [r7, #7]
 800c8a6:	2b23      	cmp	r3, #35	; 0x23
 800c8a8:	d84a      	bhi.n	800c940 <CDC_Control_FS+0xac>
 800c8aa:	a201      	add	r2, pc, #4	; (adr r2, 800c8b0 <CDC_Control_FS+0x1c>)
 800c8ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8b0:	0800c941 	.word	0x0800c941
 800c8b4:	0800c941 	.word	0x0800c941
 800c8b8:	0800c941 	.word	0x0800c941
 800c8bc:	0800c941 	.word	0x0800c941
 800c8c0:	0800c941 	.word	0x0800c941
 800c8c4:	0800c941 	.word	0x0800c941
 800c8c8:	0800c941 	.word	0x0800c941
 800c8cc:	0800c941 	.word	0x0800c941
 800c8d0:	0800c941 	.word	0x0800c941
 800c8d4:	0800c941 	.word	0x0800c941
 800c8d8:	0800c941 	.word	0x0800c941
 800c8dc:	0800c941 	.word	0x0800c941
 800c8e0:	0800c941 	.word	0x0800c941
 800c8e4:	0800c941 	.word	0x0800c941
 800c8e8:	0800c941 	.word	0x0800c941
 800c8ec:	0800c941 	.word	0x0800c941
 800c8f0:	0800c941 	.word	0x0800c941
 800c8f4:	0800c941 	.word	0x0800c941
 800c8f8:	0800c941 	.word	0x0800c941
 800c8fc:	0800c941 	.word	0x0800c941
 800c900:	0800c941 	.word	0x0800c941
 800c904:	0800c941 	.word	0x0800c941
 800c908:	0800c941 	.word	0x0800c941
 800c90c:	0800c941 	.word	0x0800c941
 800c910:	0800c941 	.word	0x0800c941
 800c914:	0800c941 	.word	0x0800c941
 800c918:	0800c941 	.word	0x0800c941
 800c91c:	0800c941 	.word	0x0800c941
 800c920:	0800c941 	.word	0x0800c941
 800c924:	0800c941 	.word	0x0800c941
 800c928:	0800c941 	.word	0x0800c941
 800c92c:	0800c941 	.word	0x0800c941
 800c930:	0800c941 	.word	0x0800c941
 800c934:	0800c941 	.word	0x0800c941
 800c938:	0800c941 	.word	0x0800c941
 800c93c:	0800c941 	.word	0x0800c941
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c940:	bf00      	nop
  }

  return (USBD_OK);
 800c942:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c944:	4618      	mov	r0, r3
 800c946:	370c      	adds	r7, #12
 800c948:	46bd      	mov	sp, r7
 800c94a:	bc80      	pop	{r7}
 800c94c:	4770      	bx	lr
 800c94e:	bf00      	nop

0800c950 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b082      	sub	sp, #8
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
 800c958:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	Serial_Recived(Buf, Len);
 800c95a:	6839      	ldr	r1, [r7, #0]
 800c95c:	6878      	ldr	r0, [r7, #4]
 800c95e:	f7f5 ff4f 	bl	8002800 <Serial_Recived>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c962:	6879      	ldr	r1, [r7, #4]
 800c964:	4805      	ldr	r0, [pc, #20]	; (800c97c <CDC_Receive_FS+0x2c>)
 800c966:	f7fe fe28 	bl	800b5ba <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c96a:	4804      	ldr	r0, [pc, #16]	; (800c97c <CDC_Receive_FS+0x2c>)
 800c96c:	f7fe fe67 	bl	800b63e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c970:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c972:	4618      	mov	r0, r3
 800c974:	3708      	adds	r7, #8
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}
 800c97a:	bf00      	nop
 800c97c:	20000e18 	.word	0x20000e18

0800c980 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b084      	sub	sp, #16
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
 800c988:	460b      	mov	r3, r1
 800c98a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c98c:	2300      	movs	r3, #0
 800c98e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c990:	4b0d      	ldr	r3, [pc, #52]	; (800c9c8 <CDC_Transmit_FS+0x48>)
 800c992:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c996:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c998:	68bb      	ldr	r3, [r7, #8]
 800c99a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d001      	beq.n	800c9a6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c9a2:	2301      	movs	r3, #1
 800c9a4:	e00b      	b.n	800c9be <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c9a6:	887b      	ldrh	r3, [r7, #2]
 800c9a8:	461a      	mov	r2, r3
 800c9aa:	6879      	ldr	r1, [r7, #4]
 800c9ac:	4806      	ldr	r0, [pc, #24]	; (800c9c8 <CDC_Transmit_FS+0x48>)
 800c9ae:	f7fe fdeb 	bl	800b588 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c9b2:	4805      	ldr	r0, [pc, #20]	; (800c9c8 <CDC_Transmit_FS+0x48>)
 800c9b4:	f7fe fe14 	bl	800b5e0 <USBD_CDC_TransmitPacket>
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c9bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9be:	4618      	mov	r0, r3
 800c9c0:	3710      	adds	r7, #16
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	bd80      	pop	{r7, pc}
 800c9c6:	bf00      	nop
 800c9c8:	20000e18 	.word	0x20000e18

0800c9cc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c9cc:	b480      	push	{r7}
 800c9ce:	b083      	sub	sp, #12
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	4603      	mov	r3, r0
 800c9d4:	6039      	str	r1, [r7, #0]
 800c9d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  if(DecTrigger == 1){
 800c9d8:	4b08      	ldr	r3, [pc, #32]	; (800c9fc <USBD_FS_DeviceDescriptor+0x30>)
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	2b01      	cmp	r3, #1
 800c9de:	d104      	bne.n	800c9ea <USBD_FS_DeviceDescriptor+0x1e>
	  *length = sizeof(MY_USBD_FS_DeviceDesc);
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	2212      	movs	r2, #18
 800c9e4:	801a      	strh	r2, [r3, #0]
	  return MY_USBD_FS_DeviceDesc;
 800c9e6:	4b06      	ldr	r3, [pc, #24]	; (800ca00 <USBD_FS_DeviceDescriptor+0x34>)
 800c9e8:	e003      	b.n	800c9f2 <USBD_FS_DeviceDescriptor+0x26>
  } else {
	  *length = sizeof(USBD_FS_DeviceDesc);
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	2212      	movs	r2, #18
 800c9ee:	801a      	strh	r2, [r3, #0]
	  return USBD_FS_DeviceDesc;
 800c9f0:	4b04      	ldr	r3, [pc, #16]	; (800ca04 <USBD_FS_DeviceDescriptor+0x38>)
  }
}
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	370c      	adds	r7, #12
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	bc80      	pop	{r7}
 800c9fa:	4770      	bx	lr
 800c9fc:	20000e10 	.word	0x20000e10
 800ca00:	20000394 	.word	0x20000394
 800ca04:	200003a8 	.word	0x200003a8

0800ca08 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca08:	b480      	push	{r7}
 800ca0a:	b083      	sub	sp, #12
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	4603      	mov	r3, r0
 800ca10:	6039      	str	r1, [r7, #0]
 800ca12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	2204      	movs	r2, #4
 800ca18:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ca1a:	4b03      	ldr	r3, [pc, #12]	; (800ca28 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	370c      	adds	r7, #12
 800ca20:	46bd      	mov	sp, r7
 800ca22:	bc80      	pop	{r7}
 800ca24:	4770      	bx	lr
 800ca26:	bf00      	nop
 800ca28:	200003bc 	.word	0x200003bc

0800ca2c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b082      	sub	sp, #8
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	4603      	mov	r3, r0
 800ca34:	6039      	str	r1, [r7, #0]
 800ca36:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ca38:	79fb      	ldrb	r3, [r7, #7]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d105      	bne.n	800ca4a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ca3e:	683a      	ldr	r2, [r7, #0]
 800ca40:	4907      	ldr	r1, [pc, #28]	; (800ca60 <USBD_FS_ProductStrDescriptor+0x34>)
 800ca42:	4808      	ldr	r0, [pc, #32]	; (800ca64 <USBD_FS_ProductStrDescriptor+0x38>)
 800ca44:	f7ff fdd5 	bl	800c5f2 <USBD_GetString>
 800ca48:	e004      	b.n	800ca54 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ca4a:	683a      	ldr	r2, [r7, #0]
 800ca4c:	4904      	ldr	r1, [pc, #16]	; (800ca60 <USBD_FS_ProductStrDescriptor+0x34>)
 800ca4e:	4805      	ldr	r0, [pc, #20]	; (800ca64 <USBD_FS_ProductStrDescriptor+0x38>)
 800ca50:	f7ff fdcf 	bl	800c5f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ca54:	4b02      	ldr	r3, [pc, #8]	; (800ca60 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ca56:	4618      	mov	r0, r3
 800ca58:	3708      	adds	r7, #8
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	bd80      	pop	{r7, pc}
 800ca5e:	bf00      	nop
 800ca60:	200018ac 	.word	0x200018ac
 800ca64:	0800dff4 	.word	0x0800dff4

0800ca68 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b082      	sub	sp, #8
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	4603      	mov	r3, r0
 800ca70:	6039      	str	r1, [r7, #0]
 800ca72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ca74:	683a      	ldr	r2, [r7, #0]
 800ca76:	4904      	ldr	r1, [pc, #16]	; (800ca88 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ca78:	4804      	ldr	r0, [pc, #16]	; (800ca8c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ca7a:	f7ff fdba 	bl	800c5f2 <USBD_GetString>
  return USBD_StrDesc;
 800ca7e:	4b02      	ldr	r3, [pc, #8]	; (800ca88 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ca80:	4618      	mov	r0, r3
 800ca82:	3708      	adds	r7, #8
 800ca84:	46bd      	mov	sp, r7
 800ca86:	bd80      	pop	{r7, pc}
 800ca88:	200018ac 	.word	0x200018ac
 800ca8c:	0800dffc 	.word	0x0800dffc

0800ca90 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b082      	sub	sp, #8
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	4603      	mov	r3, r0
 800ca98:	6039      	str	r1, [r7, #0]
 800ca9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	221a      	movs	r2, #26
 800caa0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800caa2:	f000 f873 	bl	800cb8c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800caa6:	4b02      	ldr	r3, [pc, #8]	; (800cab0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800caa8:	4618      	mov	r0, r3
 800caaa:	3708      	adds	r7, #8
 800caac:	46bd      	mov	sp, r7
 800caae:	bd80      	pop	{r7, pc}
 800cab0:	200003c0 	.word	0x200003c0

0800cab4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b082      	sub	sp, #8
 800cab8:	af00      	add	r7, sp, #0
 800caba:	4603      	mov	r3, r0
 800cabc:	6039      	str	r1, [r7, #0]
 800cabe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cac0:	79fb      	ldrb	r3, [r7, #7]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d10f      	bne.n	800cae6 <USBD_FS_ConfigStrDescriptor+0x32>
  {
	  if(DecTrigger == 1) USBD_GetString((uint8_t *)MY_USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cac6:	4b12      	ldr	r3, [pc, #72]	; (800cb10 <USBD_FS_ConfigStrDescriptor+0x5c>)
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	2b01      	cmp	r3, #1
 800cacc:	d105      	bne.n	800cada <USBD_FS_ConfigStrDescriptor+0x26>
 800cace:	683a      	ldr	r2, [r7, #0]
 800cad0:	4910      	ldr	r1, [pc, #64]	; (800cb14 <USBD_FS_ConfigStrDescriptor+0x60>)
 800cad2:	4811      	ldr	r0, [pc, #68]	; (800cb18 <USBD_FS_ConfigStrDescriptor+0x64>)
 800cad4:	f7ff fd8d 	bl	800c5f2 <USBD_GetString>
 800cad8:	e014      	b.n	800cb04 <USBD_FS_ConfigStrDescriptor+0x50>
	  else USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cada:	683a      	ldr	r2, [r7, #0]
 800cadc:	490d      	ldr	r1, [pc, #52]	; (800cb14 <USBD_FS_ConfigStrDescriptor+0x60>)
 800cade:	480f      	ldr	r0, [pc, #60]	; (800cb1c <USBD_FS_ConfigStrDescriptor+0x68>)
 800cae0:	f7ff fd87 	bl	800c5f2 <USBD_GetString>
 800cae4:	e00e      	b.n	800cb04 <USBD_FS_ConfigStrDescriptor+0x50>
  }
  else
  {
	  if(DecTrigger == 1) USBD_GetString((uint8_t *)MY_USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cae6:	4b0a      	ldr	r3, [pc, #40]	; (800cb10 <USBD_FS_ConfigStrDescriptor+0x5c>)
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	2b01      	cmp	r3, #1
 800caec:	d105      	bne.n	800cafa <USBD_FS_ConfigStrDescriptor+0x46>
 800caee:	683a      	ldr	r2, [r7, #0]
 800caf0:	4908      	ldr	r1, [pc, #32]	; (800cb14 <USBD_FS_ConfigStrDescriptor+0x60>)
 800caf2:	4809      	ldr	r0, [pc, #36]	; (800cb18 <USBD_FS_ConfigStrDescriptor+0x64>)
 800caf4:	f7ff fd7d 	bl	800c5f2 <USBD_GetString>
 800caf8:	e004      	b.n	800cb04 <USBD_FS_ConfigStrDescriptor+0x50>
	  else USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cafa:	683a      	ldr	r2, [r7, #0]
 800cafc:	4905      	ldr	r1, [pc, #20]	; (800cb14 <USBD_FS_ConfigStrDescriptor+0x60>)
 800cafe:	4807      	ldr	r0, [pc, #28]	; (800cb1c <USBD_FS_ConfigStrDescriptor+0x68>)
 800cb00:	f7ff fd77 	bl	800c5f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cb04:	4b03      	ldr	r3, [pc, #12]	; (800cb14 <USBD_FS_ConfigStrDescriptor+0x60>)
}
 800cb06:	4618      	mov	r0, r3
 800cb08:	3708      	adds	r7, #8
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	bd80      	pop	{r7, pc}
 800cb0e:	bf00      	nop
 800cb10:	20000e10 	.word	0x20000e10
 800cb14:	200018ac 	.word	0x200018ac
 800cb18:	0800e008 	.word	0x0800e008
 800cb1c:	0800e01c 	.word	0x0800e01c

0800cb20 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b082      	sub	sp, #8
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	4603      	mov	r3, r0
 800cb28:	6039      	str	r1, [r7, #0]
 800cb2a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cb2c:	79fb      	ldrb	r3, [r7, #7]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d10f      	bne.n	800cb52 <USBD_FS_InterfaceStrDescriptor+0x32>
  {
	  if(DecTrigger == 1) USBD_GetString((uint8_t *)MY_USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cb32:	4b12      	ldr	r3, [pc, #72]	; (800cb7c <USBD_FS_InterfaceStrDescriptor+0x5c>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	2b01      	cmp	r3, #1
 800cb38:	d105      	bne.n	800cb46 <USBD_FS_InterfaceStrDescriptor+0x26>
 800cb3a:	683a      	ldr	r2, [r7, #0]
 800cb3c:	4910      	ldr	r1, [pc, #64]	; (800cb80 <USBD_FS_InterfaceStrDescriptor+0x60>)
 800cb3e:	4811      	ldr	r0, [pc, #68]	; (800cb84 <USBD_FS_InterfaceStrDescriptor+0x64>)
 800cb40:	f7ff fd57 	bl	800c5f2 <USBD_GetString>
 800cb44:	e014      	b.n	800cb70 <USBD_FS_InterfaceStrDescriptor+0x50>
	  else USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cb46:	683a      	ldr	r2, [r7, #0]
 800cb48:	490d      	ldr	r1, [pc, #52]	; (800cb80 <USBD_FS_InterfaceStrDescriptor+0x60>)
 800cb4a:	480f      	ldr	r0, [pc, #60]	; (800cb88 <USBD_FS_InterfaceStrDescriptor+0x68>)
 800cb4c:	f7ff fd51 	bl	800c5f2 <USBD_GetString>
 800cb50:	e00e      	b.n	800cb70 <USBD_FS_InterfaceStrDescriptor+0x50>
  }
  else
  {
	  if(DecTrigger == 1) USBD_GetString((uint8_t *)MY_USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cb52:	4b0a      	ldr	r3, [pc, #40]	; (800cb7c <USBD_FS_InterfaceStrDescriptor+0x5c>)
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	2b01      	cmp	r3, #1
 800cb58:	d105      	bne.n	800cb66 <USBD_FS_InterfaceStrDescriptor+0x46>
 800cb5a:	683a      	ldr	r2, [r7, #0]
 800cb5c:	4908      	ldr	r1, [pc, #32]	; (800cb80 <USBD_FS_InterfaceStrDescriptor+0x60>)
 800cb5e:	4809      	ldr	r0, [pc, #36]	; (800cb84 <USBD_FS_InterfaceStrDescriptor+0x64>)
 800cb60:	f7ff fd47 	bl	800c5f2 <USBD_GetString>
 800cb64:	e004      	b.n	800cb70 <USBD_FS_InterfaceStrDescriptor+0x50>
	  else USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cb66:	683a      	ldr	r2, [r7, #0]
 800cb68:	4905      	ldr	r1, [pc, #20]	; (800cb80 <USBD_FS_InterfaceStrDescriptor+0x60>)
 800cb6a:	4807      	ldr	r0, [pc, #28]	; (800cb88 <USBD_FS_InterfaceStrDescriptor+0x68>)
 800cb6c:	f7ff fd41 	bl	800c5f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cb70:	4b03      	ldr	r3, [pc, #12]	; (800cb80 <USBD_FS_InterfaceStrDescriptor+0x60>)
}
 800cb72:	4618      	mov	r0, r3
 800cb74:	3708      	adds	r7, #8
 800cb76:	46bd      	mov	sp, r7
 800cb78:	bd80      	pop	{r7, pc}
 800cb7a:	bf00      	nop
 800cb7c:	20000e10 	.word	0x20000e10
 800cb80:	200018ac 	.word	0x200018ac
 800cb84:	0800e028 	.word	0x0800e028
 800cb88:	0800e0dc 	.word	0x0800e0dc

0800cb8c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b084      	sub	sp, #16
 800cb90:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cb92:	4b0f      	ldr	r3, [pc, #60]	; (800cbd0 <Get_SerialNum+0x44>)
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cb98:	4b0e      	ldr	r3, [pc, #56]	; (800cbd4 <Get_SerialNum+0x48>)
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cb9e:	4b0e      	ldr	r3, [pc, #56]	; (800cbd8 <Get_SerialNum+0x4c>)
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cba4:	68fa      	ldr	r2, [r7, #12]
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	4413      	add	r3, r2
 800cbaa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d009      	beq.n	800cbc6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cbb2:	2208      	movs	r2, #8
 800cbb4:	4909      	ldr	r1, [pc, #36]	; (800cbdc <Get_SerialNum+0x50>)
 800cbb6:	68f8      	ldr	r0, [r7, #12]
 800cbb8:	f000 f814 	bl	800cbe4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cbbc:	2204      	movs	r2, #4
 800cbbe:	4908      	ldr	r1, [pc, #32]	; (800cbe0 <Get_SerialNum+0x54>)
 800cbc0:	68b8      	ldr	r0, [r7, #8]
 800cbc2:	f000 f80f 	bl	800cbe4 <IntToUnicode>
  }
}
 800cbc6:	bf00      	nop
 800cbc8:	3710      	adds	r7, #16
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	bd80      	pop	{r7, pc}
 800cbce:	bf00      	nop
 800cbd0:	1ffff7e8 	.word	0x1ffff7e8
 800cbd4:	1ffff7ec 	.word	0x1ffff7ec
 800cbd8:	1ffff7f0 	.word	0x1ffff7f0
 800cbdc:	200003c2 	.word	0x200003c2
 800cbe0:	200003d2 	.word	0x200003d2

0800cbe4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cbe4:	b480      	push	{r7}
 800cbe6:	b087      	sub	sp, #28
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	60f8      	str	r0, [r7, #12]
 800cbec:	60b9      	str	r1, [r7, #8]
 800cbee:	4613      	mov	r3, r2
 800cbf0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	75fb      	strb	r3, [r7, #23]
 800cbfa:	e027      	b.n	800cc4c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	0f1b      	lsrs	r3, r3, #28
 800cc00:	2b09      	cmp	r3, #9
 800cc02:	d80b      	bhi.n	800cc1c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	0f1b      	lsrs	r3, r3, #28
 800cc08:	b2da      	uxtb	r2, r3
 800cc0a:	7dfb      	ldrb	r3, [r7, #23]
 800cc0c:	005b      	lsls	r3, r3, #1
 800cc0e:	4619      	mov	r1, r3
 800cc10:	68bb      	ldr	r3, [r7, #8]
 800cc12:	440b      	add	r3, r1
 800cc14:	3230      	adds	r2, #48	; 0x30
 800cc16:	b2d2      	uxtb	r2, r2
 800cc18:	701a      	strb	r2, [r3, #0]
 800cc1a:	e00a      	b.n	800cc32 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	0f1b      	lsrs	r3, r3, #28
 800cc20:	b2da      	uxtb	r2, r3
 800cc22:	7dfb      	ldrb	r3, [r7, #23]
 800cc24:	005b      	lsls	r3, r3, #1
 800cc26:	4619      	mov	r1, r3
 800cc28:	68bb      	ldr	r3, [r7, #8]
 800cc2a:	440b      	add	r3, r1
 800cc2c:	3237      	adds	r2, #55	; 0x37
 800cc2e:	b2d2      	uxtb	r2, r2
 800cc30:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	011b      	lsls	r3, r3, #4
 800cc36:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cc38:	7dfb      	ldrb	r3, [r7, #23]
 800cc3a:	005b      	lsls	r3, r3, #1
 800cc3c:	3301      	adds	r3, #1
 800cc3e:	68ba      	ldr	r2, [r7, #8]
 800cc40:	4413      	add	r3, r2
 800cc42:	2200      	movs	r2, #0
 800cc44:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cc46:	7dfb      	ldrb	r3, [r7, #23]
 800cc48:	3301      	adds	r3, #1
 800cc4a:	75fb      	strb	r3, [r7, #23]
 800cc4c:	7dfa      	ldrb	r2, [r7, #23]
 800cc4e:	79fb      	ldrb	r3, [r7, #7]
 800cc50:	429a      	cmp	r2, r3
 800cc52:	d3d3      	bcc.n	800cbfc <IntToUnicode+0x18>
  }
}
 800cc54:	bf00      	nop
 800cc56:	371c      	adds	r7, #28
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	bc80      	pop	{r7}
 800cc5c:	4770      	bx	lr
	...

0800cc60 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b084      	sub	sp, #16
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	4a0d      	ldr	r2, [pc, #52]	; (800cca4 <HAL_PCD_MspInit+0x44>)
 800cc6e:	4293      	cmp	r3, r2
 800cc70:	d113      	bne.n	800cc9a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800cc72:	4b0d      	ldr	r3, [pc, #52]	; (800cca8 <HAL_PCD_MspInit+0x48>)
 800cc74:	69db      	ldr	r3, [r3, #28]
 800cc76:	4a0c      	ldr	r2, [pc, #48]	; (800cca8 <HAL_PCD_MspInit+0x48>)
 800cc78:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cc7c:	61d3      	str	r3, [r2, #28]
 800cc7e:	4b0a      	ldr	r3, [pc, #40]	; (800cca8 <HAL_PCD_MspInit+0x48>)
 800cc80:	69db      	ldr	r3, [r3, #28]
 800cc82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cc86:	60fb      	str	r3, [r7, #12]
 800cc88:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	2100      	movs	r1, #0
 800cc8e:	2014      	movs	r0, #20
 800cc90:	f7f8 fedf 	bl	8005a52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800cc94:	2014      	movs	r0, #20
 800cc96:	f7f8 fef8 	bl	8005a8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800cc9a:	bf00      	nop
 800cc9c:	3710      	adds	r7, #16
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	bd80      	pop	{r7, pc}
 800cca2:	bf00      	nop
 800cca4:	40005c00 	.word	0x40005c00
 800cca8:	40021000 	.word	0x40021000

0800ccac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b082      	sub	sp, #8
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800ccc0:	4619      	mov	r1, r3
 800ccc2:	4610      	mov	r0, r2
 800ccc4:	f7fe fd71 	bl	800b7aa <USBD_LL_SetupStage>
}
 800ccc8:	bf00      	nop
 800ccca:	3708      	adds	r7, #8
 800cccc:	46bd      	mov	sp, r7
 800ccce:	bd80      	pop	{r7, pc}

0800ccd0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b082      	sub	sp, #8
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
 800ccd8:	460b      	mov	r3, r1
 800ccda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800cce2:	78fb      	ldrb	r3, [r7, #3]
 800cce4:	687a      	ldr	r2, [r7, #4]
 800cce6:	015b      	lsls	r3, r3, #5
 800cce8:	4413      	add	r3, r2
 800ccea:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800ccee:	681a      	ldr	r2, [r3, #0]
 800ccf0:	78fb      	ldrb	r3, [r7, #3]
 800ccf2:	4619      	mov	r1, r3
 800ccf4:	f7fe fda4 	bl	800b840 <USBD_LL_DataOutStage>
}
 800ccf8:	bf00      	nop
 800ccfa:	3708      	adds	r7, #8
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	bd80      	pop	{r7, pc}

0800cd00 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b082      	sub	sp, #8
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
 800cd08:	460b      	mov	r3, r1
 800cd0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800cd12:	78fb      	ldrb	r3, [r7, #3]
 800cd14:	687a      	ldr	r2, [r7, #4]
 800cd16:	015b      	lsls	r3, r3, #5
 800cd18:	4413      	add	r3, r2
 800cd1a:	333c      	adds	r3, #60	; 0x3c
 800cd1c:	681a      	ldr	r2, [r3, #0]
 800cd1e:	78fb      	ldrb	r3, [r7, #3]
 800cd20:	4619      	mov	r1, r3
 800cd22:	f7fe fdfe 	bl	800b922 <USBD_LL_DataInStage>
}
 800cd26:	bf00      	nop
 800cd28:	3708      	adds	r7, #8
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bd80      	pop	{r7, pc}

0800cd2e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd2e:	b580      	push	{r7, lr}
 800cd30:	b082      	sub	sp, #8
 800cd32:	af00      	add	r7, sp, #0
 800cd34:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	f7fe ff0e 	bl	800bb5e <USBD_LL_SOF>
}
 800cd42:	bf00      	nop
 800cd44:	3708      	adds	r7, #8
 800cd46:	46bd      	mov	sp, r7
 800cd48:	bd80      	pop	{r7, pc}

0800cd4a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800cd4a:	b580      	push	{r7, lr}
 800cd4c:	b084      	sub	sp, #16
 800cd4e:	af00      	add	r7, sp, #0
 800cd50:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cd52:	2301      	movs	r3, #1
 800cd54:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	689b      	ldr	r3, [r3, #8]
 800cd5a:	2b02      	cmp	r3, #2
 800cd5c:	d001      	beq.n	800cd62 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800cd5e:	f7f7 f8b7 	bl	8003ed0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800cd68:	7bfa      	ldrb	r2, [r7, #15]
 800cd6a:	4611      	mov	r1, r2
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	f7fe febe 	bl	800baee <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800cd78:	4618      	mov	r0, r3
 800cd7a:	f7fe fe77 	bl	800ba6c <USBD_LL_Reset>
}
 800cd7e:	bf00      	nop
 800cd80:	3710      	adds	r7, #16
 800cd82:	46bd      	mov	sp, r7
 800cd84:	bd80      	pop	{r7, pc}
	...

0800cd88 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b082      	sub	sp, #8
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800cd96:	4618      	mov	r0, r3
 800cd98:	f7fe feb8 	bl	800bb0c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	699b      	ldr	r3, [r3, #24]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d005      	beq.n	800cdb0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cda4:	4b04      	ldr	r3, [pc, #16]	; (800cdb8 <HAL_PCD_SuspendCallback+0x30>)
 800cda6:	691b      	ldr	r3, [r3, #16]
 800cda8:	4a03      	ldr	r2, [pc, #12]	; (800cdb8 <HAL_PCD_SuspendCallback+0x30>)
 800cdaa:	f043 0306 	orr.w	r3, r3, #6
 800cdae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cdb0:	bf00      	nop
 800cdb2:	3708      	adds	r7, #8
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	bd80      	pop	{r7, pc}
 800cdb8:	e000ed00 	.word	0xe000ed00

0800cdbc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b082      	sub	sp, #8
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800cdca:	4618      	mov	r0, r3
 800cdcc:	f7fe feb2 	bl	800bb34 <USBD_LL_Resume>
}
 800cdd0:	bf00      	nop
 800cdd2:	3708      	adds	r7, #8
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	bd80      	pop	{r7, pc}

0800cdd8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b082      	sub	sp, #8
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800cde0:	4a28      	ldr	r2, [pc, #160]	; (800ce84 <USBD_LL_Init+0xac>)
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	4a26      	ldr	r2, [pc, #152]	; (800ce84 <USBD_LL_Init+0xac>)
 800cdec:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800cdf0:	4b24      	ldr	r3, [pc, #144]	; (800ce84 <USBD_LL_Init+0xac>)
 800cdf2:	4a25      	ldr	r2, [pc, #148]	; (800ce88 <USBD_LL_Init+0xb0>)
 800cdf4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800cdf6:	4b23      	ldr	r3, [pc, #140]	; (800ce84 <USBD_LL_Init+0xac>)
 800cdf8:	2208      	movs	r2, #8
 800cdfa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800cdfc:	4b21      	ldr	r3, [pc, #132]	; (800ce84 <USBD_LL_Init+0xac>)
 800cdfe:	2202      	movs	r2, #2
 800ce00:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ce02:	4b20      	ldr	r3, [pc, #128]	; (800ce84 <USBD_LL_Init+0xac>)
 800ce04:	2200      	movs	r2, #0
 800ce06:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ce08:	4b1e      	ldr	r3, [pc, #120]	; (800ce84 <USBD_LL_Init+0xac>)
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ce0e:	4b1d      	ldr	r3, [pc, #116]	; (800ce84 <USBD_LL_Init+0xac>)
 800ce10:	2200      	movs	r2, #0
 800ce12:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ce14:	481b      	ldr	r0, [pc, #108]	; (800ce84 <USBD_LL_Init+0xac>)
 800ce16:	f7fa f95f 	bl	80070d8 <HAL_PCD_Init>
 800ce1a:	4603      	mov	r3, r0
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d001      	beq.n	800ce24 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800ce20:	f7f7 f856 	bl	8003ed0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ce2a:	2318      	movs	r3, #24
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	2100      	movs	r1, #0
 800ce30:	f7fa fff8 	bl	8007e24 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ce3a:	2358      	movs	r3, #88	; 0x58
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	2180      	movs	r1, #128	; 0x80
 800ce40:	f7fa fff0 	bl	8007e24 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ce4a:	23c0      	movs	r3, #192	; 0xc0
 800ce4c:	2200      	movs	r2, #0
 800ce4e:	2181      	movs	r1, #129	; 0x81
 800ce50:	f7fa ffe8 	bl	8007e24 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ce5a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800ce5e:	2200      	movs	r2, #0
 800ce60:	2101      	movs	r1, #1
 800ce62:	f7fa ffdf 	bl	8007e24 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ce6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ce70:	2200      	movs	r2, #0
 800ce72:	2182      	movs	r1, #130	; 0x82
 800ce74:	f7fa ffd6 	bl	8007e24 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ce78:	2300      	movs	r3, #0
}
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	3708      	adds	r7, #8
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	bd80      	pop	{r7, pc}
 800ce82:	bf00      	nop
 800ce84:	20001aac 	.word	0x20001aac
 800ce88:	40005c00 	.word	0x40005c00

0800ce8c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b084      	sub	sp, #16
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce94:	2300      	movs	r3, #0
 800ce96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce98:	2300      	movs	r3, #0
 800ce9a:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cea2:	4618      	mov	r0, r3
 800cea4:	f7fa f9f9 	bl	800729a <HAL_PCD_Start>
 800cea8:	4603      	mov	r3, r0
 800ceaa:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800ceac:	7bfb      	ldrb	r3, [r7, #15]
 800ceae:	4618      	mov	r0, r3
 800ceb0:	f000 f948 	bl	800d144 <USBD_Get_USB_Status>
 800ceb4:	4603      	mov	r3, r0
 800ceb6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800ceb8:	7bbb      	ldrb	r3, [r7, #14]
}
 800ceba:	4618      	mov	r0, r3
 800cebc:	3710      	adds	r7, #16
 800cebe:	46bd      	mov	sp, r7
 800cec0:	bd80      	pop	{r7, pc}

0800cec2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cec2:	b580      	push	{r7, lr}
 800cec4:	b084      	sub	sp, #16
 800cec6:	af00      	add	r7, sp, #0
 800cec8:	6078      	str	r0, [r7, #4]
 800ceca:	4608      	mov	r0, r1
 800cecc:	4611      	mov	r1, r2
 800cece:	461a      	mov	r2, r3
 800ced0:	4603      	mov	r3, r0
 800ced2:	70fb      	strb	r3, [r7, #3]
 800ced4:	460b      	mov	r3, r1
 800ced6:	70bb      	strb	r3, [r7, #2]
 800ced8:	4613      	mov	r3, r2
 800ceda:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cedc:	2300      	movs	r3, #0
 800cede:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cee0:	2300      	movs	r3, #0
 800cee2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ceea:	78bb      	ldrb	r3, [r7, #2]
 800ceec:	883a      	ldrh	r2, [r7, #0]
 800ceee:	78f9      	ldrb	r1, [r7, #3]
 800cef0:	f7fa fb2c 	bl	800754c <HAL_PCD_EP_Open>
 800cef4:	4603      	mov	r3, r0
 800cef6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cef8:	7bfb      	ldrb	r3, [r7, #15]
 800cefa:	4618      	mov	r0, r3
 800cefc:	f000 f922 	bl	800d144 <USBD_Get_USB_Status>
 800cf00:	4603      	mov	r3, r0
 800cf02:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800cf04:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf06:	4618      	mov	r0, r3
 800cf08:	3710      	adds	r7, #16
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	bd80      	pop	{r7, pc}

0800cf0e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf0e:	b580      	push	{r7, lr}
 800cf10:	b084      	sub	sp, #16
 800cf12:	af00      	add	r7, sp, #0
 800cf14:	6078      	str	r0, [r7, #4]
 800cf16:	460b      	mov	r3, r1
 800cf18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf1e:	2300      	movs	r3, #0
 800cf20:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cf28:	78fa      	ldrb	r2, [r7, #3]
 800cf2a:	4611      	mov	r1, r2
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	f7fa fb6d 	bl	800760c <HAL_PCD_EP_Close>
 800cf32:	4603      	mov	r3, r0
 800cf34:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf36:	7bfb      	ldrb	r3, [r7, #15]
 800cf38:	4618      	mov	r0, r3
 800cf3a:	f000 f903 	bl	800d144 <USBD_Get_USB_Status>
 800cf3e:	4603      	mov	r3, r0
 800cf40:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 800cf42:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf44:	4618      	mov	r0, r3
 800cf46:	3710      	adds	r7, #16
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	bd80      	pop	{r7, pc}

0800cf4c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b084      	sub	sp, #16
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
 800cf54:	460b      	mov	r3, r1
 800cf56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf58:	2300      	movs	r3, #0
 800cf5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cf66:	78fa      	ldrb	r2, [r7, #3]
 800cf68:	4611      	mov	r1, r2
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	f7fa fc17 	bl	800779e <HAL_PCD_EP_SetStall>
 800cf70:	4603      	mov	r3, r0
 800cf72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf74:	7bfb      	ldrb	r3, [r7, #15]
 800cf76:	4618      	mov	r0, r3
 800cf78:	f000 f8e4 	bl	800d144 <USBD_Get_USB_Status>
 800cf7c:	4603      	mov	r3, r0
 800cf7e:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800cf80:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf82:	4618      	mov	r0, r3
 800cf84:	3710      	adds	r7, #16
 800cf86:	46bd      	mov	sp, r7
 800cf88:	bd80      	pop	{r7, pc}

0800cf8a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf8a:	b580      	push	{r7, lr}
 800cf8c:	b084      	sub	sp, #16
 800cf8e:	af00      	add	r7, sp, #0
 800cf90:	6078      	str	r0, [r7, #4]
 800cf92:	460b      	mov	r3, r1
 800cf94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf96:	2300      	movs	r3, #0
 800cf98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cfa4:	78fa      	ldrb	r2, [r7, #3]
 800cfa6:	4611      	mov	r1, r2
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	f7fa fc52 	bl	8007852 <HAL_PCD_EP_ClrStall>
 800cfae:	4603      	mov	r3, r0
 800cfb0:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800cfb2:	7bfb      	ldrb	r3, [r7, #15]
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	f000 f8c5 	bl	800d144 <USBD_Get_USB_Status>
 800cfba:	4603      	mov	r3, r0
 800cfbc:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 800cfbe:	7bbb      	ldrb	r3, [r7, #14]
}
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	3710      	adds	r7, #16
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	bd80      	pop	{r7, pc}

0800cfc8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cfc8:	b480      	push	{r7}
 800cfca:	b085      	sub	sp, #20
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
 800cfd0:	460b      	mov	r3, r1
 800cfd2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cfda:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800cfdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	da08      	bge.n	800cff6 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800cfe4:	78fb      	ldrb	r3, [r7, #3]
 800cfe6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cfea:	68fa      	ldr	r2, [r7, #12]
 800cfec:	015b      	lsls	r3, r3, #5
 800cfee:	4413      	add	r3, r2
 800cff0:	332a      	adds	r3, #42	; 0x2a
 800cff2:	781b      	ldrb	r3, [r3, #0]
 800cff4:	e008      	b.n	800d008 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800cff6:	78fb      	ldrb	r3, [r7, #3]
 800cff8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cffc:	68fa      	ldr	r2, [r7, #12]
 800cffe:	015b      	lsls	r3, r3, #5
 800d000:	4413      	add	r3, r2
 800d002:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800d006:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d008:	4618      	mov	r0, r3
 800d00a:	3714      	adds	r7, #20
 800d00c:	46bd      	mov	sp, r7
 800d00e:	bc80      	pop	{r7}
 800d010:	4770      	bx	lr

0800d012 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d012:	b580      	push	{r7, lr}
 800d014:	b084      	sub	sp, #16
 800d016:	af00      	add	r7, sp, #0
 800d018:	6078      	str	r0, [r7, #4]
 800d01a:	460b      	mov	r3, r1
 800d01c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d01e:	2300      	movs	r3, #0
 800d020:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d022:	2300      	movs	r3, #0
 800d024:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d02c:	78fa      	ldrb	r2, [r7, #3]
 800d02e:	4611      	mov	r1, r2
 800d030:	4618      	mov	r0, r3
 800d032:	f7fa fa66 	bl	8007502 <HAL_PCD_SetAddress>
 800d036:	4603      	mov	r3, r0
 800d038:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d03a:	7bfb      	ldrb	r3, [r7, #15]
 800d03c:	4618      	mov	r0, r3
 800d03e:	f000 f881 	bl	800d144 <USBD_Get_USB_Status>
 800d042:	4603      	mov	r3, r0
 800d044:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800d046:	7bbb      	ldrb	r3, [r7, #14]
}
 800d048:	4618      	mov	r0, r3
 800d04a:	3710      	adds	r7, #16
 800d04c:	46bd      	mov	sp, r7
 800d04e:	bd80      	pop	{r7, pc}

0800d050 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b086      	sub	sp, #24
 800d054:	af00      	add	r7, sp, #0
 800d056:	60f8      	str	r0, [r7, #12]
 800d058:	607a      	str	r2, [r7, #4]
 800d05a:	461a      	mov	r2, r3
 800d05c:	460b      	mov	r3, r1
 800d05e:	72fb      	strb	r3, [r7, #11]
 800d060:	4613      	mov	r3, r2
 800d062:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d064:	2300      	movs	r3, #0
 800d066:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d068:	2300      	movs	r3, #0
 800d06a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d072:	893b      	ldrh	r3, [r7, #8]
 800d074:	7af9      	ldrb	r1, [r7, #11]
 800d076:	687a      	ldr	r2, [r7, #4]
 800d078:	f7fa fb58 	bl	800772c <HAL_PCD_EP_Transmit>
 800d07c:	4603      	mov	r3, r0
 800d07e:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d080:	7dfb      	ldrb	r3, [r7, #23]
 800d082:	4618      	mov	r0, r3
 800d084:	f000 f85e 	bl	800d144 <USBD_Get_USB_Status>
 800d088:	4603      	mov	r3, r0
 800d08a:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800d08c:	7dbb      	ldrb	r3, [r7, #22]
}
 800d08e:	4618      	mov	r0, r3
 800d090:	3718      	adds	r7, #24
 800d092:	46bd      	mov	sp, r7
 800d094:	bd80      	pop	{r7, pc}

0800d096 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d096:	b580      	push	{r7, lr}
 800d098:	b086      	sub	sp, #24
 800d09a:	af00      	add	r7, sp, #0
 800d09c:	60f8      	str	r0, [r7, #12]
 800d09e:	607a      	str	r2, [r7, #4]
 800d0a0:	461a      	mov	r2, r3
 800d0a2:	460b      	mov	r3, r1
 800d0a4:	72fb      	strb	r3, [r7, #11]
 800d0a6:	4613      	mov	r3, r2
 800d0a8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d0b8:	893b      	ldrh	r3, [r7, #8]
 800d0ba:	7af9      	ldrb	r1, [r7, #11]
 800d0bc:	687a      	ldr	r2, [r7, #4]
 800d0be:	f7fa fae7 	bl	8007690 <HAL_PCD_EP_Receive>
 800d0c2:	4603      	mov	r3, r0
 800d0c4:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0c6:	7dfb      	ldrb	r3, [r7, #23]
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	f000 f83b 	bl	800d144 <USBD_Get_USB_Status>
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 800d0d2:	7dbb      	ldrb	r3, [r7, #22]
}
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	3718      	adds	r7, #24
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	bd80      	pop	{r7, pc}

0800d0dc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b082      	sub	sp, #8
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]
 800d0e4:	460b      	mov	r3, r1
 800d0e6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d0ee:	78fa      	ldrb	r2, [r7, #3]
 800d0f0:	4611      	mov	r1, r2
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	f7fa fb06 	bl	8007704 <HAL_PCD_EP_GetRxCount>
 800d0f8:	4603      	mov	r3, r0
}
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	3708      	adds	r7, #8
 800d0fe:	46bd      	mov	sp, r7
 800d100:	bd80      	pop	{r7, pc}
	...

0800d104 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d104:	b480      	push	{r7}
 800d106:	b083      	sub	sp, #12
 800d108:	af00      	add	r7, sp, #0
 800d10a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d10c:	4b02      	ldr	r3, [pc, #8]	; (800d118 <USBD_static_malloc+0x14>)
}
 800d10e:	4618      	mov	r0, r3
 800d110:	370c      	adds	r7, #12
 800d112:	46bd      	mov	sp, r7
 800d114:	bc80      	pop	{r7}
 800d116:	4770      	bx	lr
 800d118:	20000988 	.word	0x20000988

0800d11c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d11c:	b480      	push	{r7}
 800d11e:	b083      	sub	sp, #12
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]

}
 800d124:	bf00      	nop
 800d126:	370c      	adds	r7, #12
 800d128:	46bd      	mov	sp, r7
 800d12a:	bc80      	pop	{r7}
 800d12c:	4770      	bx	lr

0800d12e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d12e:	b480      	push	{r7}
 800d130:	b083      	sub	sp, #12
 800d132:	af00      	add	r7, sp, #0
 800d134:	6078      	str	r0, [r7, #4]
 800d136:	460b      	mov	r3, r1
 800d138:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800d13a:	bf00      	nop
 800d13c:	370c      	adds	r7, #12
 800d13e:	46bd      	mov	sp, r7
 800d140:	bc80      	pop	{r7}
 800d142:	4770      	bx	lr

0800d144 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d144:	b480      	push	{r7}
 800d146:	b085      	sub	sp, #20
 800d148:	af00      	add	r7, sp, #0
 800d14a:	4603      	mov	r3, r0
 800d14c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d14e:	2300      	movs	r3, #0
 800d150:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d152:	79fb      	ldrb	r3, [r7, #7]
 800d154:	2b03      	cmp	r3, #3
 800d156:	d817      	bhi.n	800d188 <USBD_Get_USB_Status+0x44>
 800d158:	a201      	add	r2, pc, #4	; (adr r2, 800d160 <USBD_Get_USB_Status+0x1c>)
 800d15a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d15e:	bf00      	nop
 800d160:	0800d171 	.word	0x0800d171
 800d164:	0800d177 	.word	0x0800d177
 800d168:	0800d17d 	.word	0x0800d17d
 800d16c:	0800d183 	.word	0x0800d183
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d170:	2300      	movs	r3, #0
 800d172:	73fb      	strb	r3, [r7, #15]
    break;
 800d174:	e00b      	b.n	800d18e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d176:	2302      	movs	r3, #2
 800d178:	73fb      	strb	r3, [r7, #15]
    break;
 800d17a:	e008      	b.n	800d18e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d17c:	2301      	movs	r3, #1
 800d17e:	73fb      	strb	r3, [r7, #15]
    break;
 800d180:	e005      	b.n	800d18e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d182:	2302      	movs	r3, #2
 800d184:	73fb      	strb	r3, [r7, #15]
    break;
 800d186:	e002      	b.n	800d18e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d188:	2302      	movs	r3, #2
 800d18a:	73fb      	strb	r3, [r7, #15]
    break;
 800d18c:	bf00      	nop
  }
  return usb_status;
 800d18e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d190:	4618      	mov	r0, r3
 800d192:	3714      	adds	r7, #20
 800d194:	46bd      	mov	sp, r7
 800d196:	bc80      	pop	{r7}
 800d198:	4770      	bx	lr
 800d19a:	bf00      	nop

0800d19c <__errno>:
 800d19c:	4b01      	ldr	r3, [pc, #4]	; (800d1a4 <__errno+0x8>)
 800d19e:	6818      	ldr	r0, [r3, #0]
 800d1a0:	4770      	bx	lr
 800d1a2:	bf00      	nop
 800d1a4:	200003dc 	.word	0x200003dc

0800d1a8 <__libc_init_array>:
 800d1a8:	b570      	push	{r4, r5, r6, lr}
 800d1aa:	2500      	movs	r5, #0
 800d1ac:	4e0c      	ldr	r6, [pc, #48]	; (800d1e0 <__libc_init_array+0x38>)
 800d1ae:	4c0d      	ldr	r4, [pc, #52]	; (800d1e4 <__libc_init_array+0x3c>)
 800d1b0:	1ba4      	subs	r4, r4, r6
 800d1b2:	10a4      	asrs	r4, r4, #2
 800d1b4:	42a5      	cmp	r5, r4
 800d1b6:	d109      	bne.n	800d1cc <__libc_init_array+0x24>
 800d1b8:	f000 fc36 	bl	800da28 <_init>
 800d1bc:	2500      	movs	r5, #0
 800d1be:	4e0a      	ldr	r6, [pc, #40]	; (800d1e8 <__libc_init_array+0x40>)
 800d1c0:	4c0a      	ldr	r4, [pc, #40]	; (800d1ec <__libc_init_array+0x44>)
 800d1c2:	1ba4      	subs	r4, r4, r6
 800d1c4:	10a4      	asrs	r4, r4, #2
 800d1c6:	42a5      	cmp	r5, r4
 800d1c8:	d105      	bne.n	800d1d6 <__libc_init_array+0x2e>
 800d1ca:	bd70      	pop	{r4, r5, r6, pc}
 800d1cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d1d0:	4798      	blx	r3
 800d1d2:	3501      	adds	r5, #1
 800d1d4:	e7ee      	b.n	800d1b4 <__libc_init_array+0xc>
 800d1d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d1da:	4798      	blx	r3
 800d1dc:	3501      	adds	r5, #1
 800d1de:	e7f2      	b.n	800d1c6 <__libc_init_array+0x1e>
 800d1e0:	08010d5c 	.word	0x08010d5c
 800d1e4:	08010d5c 	.word	0x08010d5c
 800d1e8:	08010d5c 	.word	0x08010d5c
 800d1ec:	08010d60 	.word	0x08010d60

0800d1f0 <memcpy>:
 800d1f0:	b510      	push	{r4, lr}
 800d1f2:	1e43      	subs	r3, r0, #1
 800d1f4:	440a      	add	r2, r1
 800d1f6:	4291      	cmp	r1, r2
 800d1f8:	d100      	bne.n	800d1fc <memcpy+0xc>
 800d1fa:	bd10      	pop	{r4, pc}
 800d1fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d200:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d204:	e7f7      	b.n	800d1f6 <memcpy+0x6>

0800d206 <memset>:
 800d206:	4603      	mov	r3, r0
 800d208:	4402      	add	r2, r0
 800d20a:	4293      	cmp	r3, r2
 800d20c:	d100      	bne.n	800d210 <memset+0xa>
 800d20e:	4770      	bx	lr
 800d210:	f803 1b01 	strb.w	r1, [r3], #1
 800d214:	e7f9      	b.n	800d20a <memset+0x4>
	...

0800d218 <siprintf>:
 800d218:	b40e      	push	{r1, r2, r3}
 800d21a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d21e:	b500      	push	{lr}
 800d220:	b09c      	sub	sp, #112	; 0x70
 800d222:	ab1d      	add	r3, sp, #116	; 0x74
 800d224:	9002      	str	r0, [sp, #8]
 800d226:	9006      	str	r0, [sp, #24]
 800d228:	9107      	str	r1, [sp, #28]
 800d22a:	9104      	str	r1, [sp, #16]
 800d22c:	4808      	ldr	r0, [pc, #32]	; (800d250 <siprintf+0x38>)
 800d22e:	4909      	ldr	r1, [pc, #36]	; (800d254 <siprintf+0x3c>)
 800d230:	f853 2b04 	ldr.w	r2, [r3], #4
 800d234:	9105      	str	r1, [sp, #20]
 800d236:	6800      	ldr	r0, [r0, #0]
 800d238:	a902      	add	r1, sp, #8
 800d23a:	9301      	str	r3, [sp, #4]
 800d23c:	f000 f866 	bl	800d30c <_svfiprintf_r>
 800d240:	2200      	movs	r2, #0
 800d242:	9b02      	ldr	r3, [sp, #8]
 800d244:	701a      	strb	r2, [r3, #0]
 800d246:	b01c      	add	sp, #112	; 0x70
 800d248:	f85d eb04 	ldr.w	lr, [sp], #4
 800d24c:	b003      	add	sp, #12
 800d24e:	4770      	bx	lr
 800d250:	200003dc 	.word	0x200003dc
 800d254:	ffff0208 	.word	0xffff0208

0800d258 <__ssputs_r>:
 800d258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d25c:	688e      	ldr	r6, [r1, #8]
 800d25e:	4682      	mov	sl, r0
 800d260:	429e      	cmp	r6, r3
 800d262:	460c      	mov	r4, r1
 800d264:	4690      	mov	r8, r2
 800d266:	4699      	mov	r9, r3
 800d268:	d837      	bhi.n	800d2da <__ssputs_r+0x82>
 800d26a:	898a      	ldrh	r2, [r1, #12]
 800d26c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d270:	d031      	beq.n	800d2d6 <__ssputs_r+0x7e>
 800d272:	2302      	movs	r3, #2
 800d274:	6825      	ldr	r5, [r4, #0]
 800d276:	6909      	ldr	r1, [r1, #16]
 800d278:	1a6f      	subs	r7, r5, r1
 800d27a:	6965      	ldr	r5, [r4, #20]
 800d27c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d280:	fb95 f5f3 	sdiv	r5, r5, r3
 800d284:	f109 0301 	add.w	r3, r9, #1
 800d288:	443b      	add	r3, r7
 800d28a:	429d      	cmp	r5, r3
 800d28c:	bf38      	it	cc
 800d28e:	461d      	movcc	r5, r3
 800d290:	0553      	lsls	r3, r2, #21
 800d292:	d530      	bpl.n	800d2f6 <__ssputs_r+0x9e>
 800d294:	4629      	mov	r1, r5
 800d296:	f000 fb2d 	bl	800d8f4 <_malloc_r>
 800d29a:	4606      	mov	r6, r0
 800d29c:	b950      	cbnz	r0, 800d2b4 <__ssputs_r+0x5c>
 800d29e:	230c      	movs	r3, #12
 800d2a0:	f04f 30ff 	mov.w	r0, #4294967295
 800d2a4:	f8ca 3000 	str.w	r3, [sl]
 800d2a8:	89a3      	ldrh	r3, [r4, #12]
 800d2aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d2ae:	81a3      	strh	r3, [r4, #12]
 800d2b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2b4:	463a      	mov	r2, r7
 800d2b6:	6921      	ldr	r1, [r4, #16]
 800d2b8:	f7ff ff9a 	bl	800d1f0 <memcpy>
 800d2bc:	89a3      	ldrh	r3, [r4, #12]
 800d2be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d2c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2c6:	81a3      	strh	r3, [r4, #12]
 800d2c8:	6126      	str	r6, [r4, #16]
 800d2ca:	443e      	add	r6, r7
 800d2cc:	6026      	str	r6, [r4, #0]
 800d2ce:	464e      	mov	r6, r9
 800d2d0:	6165      	str	r5, [r4, #20]
 800d2d2:	1bed      	subs	r5, r5, r7
 800d2d4:	60a5      	str	r5, [r4, #8]
 800d2d6:	454e      	cmp	r6, r9
 800d2d8:	d900      	bls.n	800d2dc <__ssputs_r+0x84>
 800d2da:	464e      	mov	r6, r9
 800d2dc:	4632      	mov	r2, r6
 800d2de:	4641      	mov	r1, r8
 800d2e0:	6820      	ldr	r0, [r4, #0]
 800d2e2:	f000 faa1 	bl	800d828 <memmove>
 800d2e6:	68a3      	ldr	r3, [r4, #8]
 800d2e8:	2000      	movs	r0, #0
 800d2ea:	1b9b      	subs	r3, r3, r6
 800d2ec:	60a3      	str	r3, [r4, #8]
 800d2ee:	6823      	ldr	r3, [r4, #0]
 800d2f0:	441e      	add	r6, r3
 800d2f2:	6026      	str	r6, [r4, #0]
 800d2f4:	e7dc      	b.n	800d2b0 <__ssputs_r+0x58>
 800d2f6:	462a      	mov	r2, r5
 800d2f8:	f000 fb56 	bl	800d9a8 <_realloc_r>
 800d2fc:	4606      	mov	r6, r0
 800d2fe:	2800      	cmp	r0, #0
 800d300:	d1e2      	bne.n	800d2c8 <__ssputs_r+0x70>
 800d302:	6921      	ldr	r1, [r4, #16]
 800d304:	4650      	mov	r0, sl
 800d306:	f000 faa9 	bl	800d85c <_free_r>
 800d30a:	e7c8      	b.n	800d29e <__ssputs_r+0x46>

0800d30c <_svfiprintf_r>:
 800d30c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d310:	461d      	mov	r5, r3
 800d312:	898b      	ldrh	r3, [r1, #12]
 800d314:	b09d      	sub	sp, #116	; 0x74
 800d316:	061f      	lsls	r7, r3, #24
 800d318:	4680      	mov	r8, r0
 800d31a:	460c      	mov	r4, r1
 800d31c:	4616      	mov	r6, r2
 800d31e:	d50f      	bpl.n	800d340 <_svfiprintf_r+0x34>
 800d320:	690b      	ldr	r3, [r1, #16]
 800d322:	b96b      	cbnz	r3, 800d340 <_svfiprintf_r+0x34>
 800d324:	2140      	movs	r1, #64	; 0x40
 800d326:	f000 fae5 	bl	800d8f4 <_malloc_r>
 800d32a:	6020      	str	r0, [r4, #0]
 800d32c:	6120      	str	r0, [r4, #16]
 800d32e:	b928      	cbnz	r0, 800d33c <_svfiprintf_r+0x30>
 800d330:	230c      	movs	r3, #12
 800d332:	f8c8 3000 	str.w	r3, [r8]
 800d336:	f04f 30ff 	mov.w	r0, #4294967295
 800d33a:	e0c8      	b.n	800d4ce <_svfiprintf_r+0x1c2>
 800d33c:	2340      	movs	r3, #64	; 0x40
 800d33e:	6163      	str	r3, [r4, #20]
 800d340:	2300      	movs	r3, #0
 800d342:	9309      	str	r3, [sp, #36]	; 0x24
 800d344:	2320      	movs	r3, #32
 800d346:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d34a:	2330      	movs	r3, #48	; 0x30
 800d34c:	f04f 0b01 	mov.w	fp, #1
 800d350:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d354:	9503      	str	r5, [sp, #12]
 800d356:	4637      	mov	r7, r6
 800d358:	463d      	mov	r5, r7
 800d35a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d35e:	b10b      	cbz	r3, 800d364 <_svfiprintf_r+0x58>
 800d360:	2b25      	cmp	r3, #37	; 0x25
 800d362:	d13e      	bne.n	800d3e2 <_svfiprintf_r+0xd6>
 800d364:	ebb7 0a06 	subs.w	sl, r7, r6
 800d368:	d00b      	beq.n	800d382 <_svfiprintf_r+0x76>
 800d36a:	4653      	mov	r3, sl
 800d36c:	4632      	mov	r2, r6
 800d36e:	4621      	mov	r1, r4
 800d370:	4640      	mov	r0, r8
 800d372:	f7ff ff71 	bl	800d258 <__ssputs_r>
 800d376:	3001      	adds	r0, #1
 800d378:	f000 80a4 	beq.w	800d4c4 <_svfiprintf_r+0x1b8>
 800d37c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d37e:	4453      	add	r3, sl
 800d380:	9309      	str	r3, [sp, #36]	; 0x24
 800d382:	783b      	ldrb	r3, [r7, #0]
 800d384:	2b00      	cmp	r3, #0
 800d386:	f000 809d 	beq.w	800d4c4 <_svfiprintf_r+0x1b8>
 800d38a:	2300      	movs	r3, #0
 800d38c:	f04f 32ff 	mov.w	r2, #4294967295
 800d390:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d394:	9304      	str	r3, [sp, #16]
 800d396:	9307      	str	r3, [sp, #28]
 800d398:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d39c:	931a      	str	r3, [sp, #104]	; 0x68
 800d39e:	462f      	mov	r7, r5
 800d3a0:	2205      	movs	r2, #5
 800d3a2:	f817 1b01 	ldrb.w	r1, [r7], #1
 800d3a6:	4850      	ldr	r0, [pc, #320]	; (800d4e8 <_svfiprintf_r+0x1dc>)
 800d3a8:	f000 fa30 	bl	800d80c <memchr>
 800d3ac:	9b04      	ldr	r3, [sp, #16]
 800d3ae:	b9d0      	cbnz	r0, 800d3e6 <_svfiprintf_r+0xda>
 800d3b0:	06d9      	lsls	r1, r3, #27
 800d3b2:	bf44      	itt	mi
 800d3b4:	2220      	movmi	r2, #32
 800d3b6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d3ba:	071a      	lsls	r2, r3, #28
 800d3bc:	bf44      	itt	mi
 800d3be:	222b      	movmi	r2, #43	; 0x2b
 800d3c0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d3c4:	782a      	ldrb	r2, [r5, #0]
 800d3c6:	2a2a      	cmp	r2, #42	; 0x2a
 800d3c8:	d015      	beq.n	800d3f6 <_svfiprintf_r+0xea>
 800d3ca:	462f      	mov	r7, r5
 800d3cc:	2000      	movs	r0, #0
 800d3ce:	250a      	movs	r5, #10
 800d3d0:	9a07      	ldr	r2, [sp, #28]
 800d3d2:	4639      	mov	r1, r7
 800d3d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d3d8:	3b30      	subs	r3, #48	; 0x30
 800d3da:	2b09      	cmp	r3, #9
 800d3dc:	d94d      	bls.n	800d47a <_svfiprintf_r+0x16e>
 800d3de:	b1b8      	cbz	r0, 800d410 <_svfiprintf_r+0x104>
 800d3e0:	e00f      	b.n	800d402 <_svfiprintf_r+0xf6>
 800d3e2:	462f      	mov	r7, r5
 800d3e4:	e7b8      	b.n	800d358 <_svfiprintf_r+0x4c>
 800d3e6:	4a40      	ldr	r2, [pc, #256]	; (800d4e8 <_svfiprintf_r+0x1dc>)
 800d3e8:	463d      	mov	r5, r7
 800d3ea:	1a80      	subs	r0, r0, r2
 800d3ec:	fa0b f000 	lsl.w	r0, fp, r0
 800d3f0:	4318      	orrs	r0, r3
 800d3f2:	9004      	str	r0, [sp, #16]
 800d3f4:	e7d3      	b.n	800d39e <_svfiprintf_r+0x92>
 800d3f6:	9a03      	ldr	r2, [sp, #12]
 800d3f8:	1d11      	adds	r1, r2, #4
 800d3fa:	6812      	ldr	r2, [r2, #0]
 800d3fc:	9103      	str	r1, [sp, #12]
 800d3fe:	2a00      	cmp	r2, #0
 800d400:	db01      	blt.n	800d406 <_svfiprintf_r+0xfa>
 800d402:	9207      	str	r2, [sp, #28]
 800d404:	e004      	b.n	800d410 <_svfiprintf_r+0x104>
 800d406:	4252      	negs	r2, r2
 800d408:	f043 0302 	orr.w	r3, r3, #2
 800d40c:	9207      	str	r2, [sp, #28]
 800d40e:	9304      	str	r3, [sp, #16]
 800d410:	783b      	ldrb	r3, [r7, #0]
 800d412:	2b2e      	cmp	r3, #46	; 0x2e
 800d414:	d10c      	bne.n	800d430 <_svfiprintf_r+0x124>
 800d416:	787b      	ldrb	r3, [r7, #1]
 800d418:	2b2a      	cmp	r3, #42	; 0x2a
 800d41a:	d133      	bne.n	800d484 <_svfiprintf_r+0x178>
 800d41c:	9b03      	ldr	r3, [sp, #12]
 800d41e:	3702      	adds	r7, #2
 800d420:	1d1a      	adds	r2, r3, #4
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	9203      	str	r2, [sp, #12]
 800d426:	2b00      	cmp	r3, #0
 800d428:	bfb8      	it	lt
 800d42a:	f04f 33ff 	movlt.w	r3, #4294967295
 800d42e:	9305      	str	r3, [sp, #20]
 800d430:	4d2e      	ldr	r5, [pc, #184]	; (800d4ec <_svfiprintf_r+0x1e0>)
 800d432:	2203      	movs	r2, #3
 800d434:	7839      	ldrb	r1, [r7, #0]
 800d436:	4628      	mov	r0, r5
 800d438:	f000 f9e8 	bl	800d80c <memchr>
 800d43c:	b138      	cbz	r0, 800d44e <_svfiprintf_r+0x142>
 800d43e:	2340      	movs	r3, #64	; 0x40
 800d440:	1b40      	subs	r0, r0, r5
 800d442:	fa03 f000 	lsl.w	r0, r3, r0
 800d446:	9b04      	ldr	r3, [sp, #16]
 800d448:	3701      	adds	r7, #1
 800d44a:	4303      	orrs	r3, r0
 800d44c:	9304      	str	r3, [sp, #16]
 800d44e:	7839      	ldrb	r1, [r7, #0]
 800d450:	2206      	movs	r2, #6
 800d452:	4827      	ldr	r0, [pc, #156]	; (800d4f0 <_svfiprintf_r+0x1e4>)
 800d454:	1c7e      	adds	r6, r7, #1
 800d456:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d45a:	f000 f9d7 	bl	800d80c <memchr>
 800d45e:	2800      	cmp	r0, #0
 800d460:	d038      	beq.n	800d4d4 <_svfiprintf_r+0x1c8>
 800d462:	4b24      	ldr	r3, [pc, #144]	; (800d4f4 <_svfiprintf_r+0x1e8>)
 800d464:	bb13      	cbnz	r3, 800d4ac <_svfiprintf_r+0x1a0>
 800d466:	9b03      	ldr	r3, [sp, #12]
 800d468:	3307      	adds	r3, #7
 800d46a:	f023 0307 	bic.w	r3, r3, #7
 800d46e:	3308      	adds	r3, #8
 800d470:	9303      	str	r3, [sp, #12]
 800d472:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d474:	444b      	add	r3, r9
 800d476:	9309      	str	r3, [sp, #36]	; 0x24
 800d478:	e76d      	b.n	800d356 <_svfiprintf_r+0x4a>
 800d47a:	fb05 3202 	mla	r2, r5, r2, r3
 800d47e:	2001      	movs	r0, #1
 800d480:	460f      	mov	r7, r1
 800d482:	e7a6      	b.n	800d3d2 <_svfiprintf_r+0xc6>
 800d484:	2300      	movs	r3, #0
 800d486:	250a      	movs	r5, #10
 800d488:	4619      	mov	r1, r3
 800d48a:	3701      	adds	r7, #1
 800d48c:	9305      	str	r3, [sp, #20]
 800d48e:	4638      	mov	r0, r7
 800d490:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d494:	3a30      	subs	r2, #48	; 0x30
 800d496:	2a09      	cmp	r2, #9
 800d498:	d903      	bls.n	800d4a2 <_svfiprintf_r+0x196>
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d0c8      	beq.n	800d430 <_svfiprintf_r+0x124>
 800d49e:	9105      	str	r1, [sp, #20]
 800d4a0:	e7c6      	b.n	800d430 <_svfiprintf_r+0x124>
 800d4a2:	fb05 2101 	mla	r1, r5, r1, r2
 800d4a6:	2301      	movs	r3, #1
 800d4a8:	4607      	mov	r7, r0
 800d4aa:	e7f0      	b.n	800d48e <_svfiprintf_r+0x182>
 800d4ac:	ab03      	add	r3, sp, #12
 800d4ae:	9300      	str	r3, [sp, #0]
 800d4b0:	4622      	mov	r2, r4
 800d4b2:	4b11      	ldr	r3, [pc, #68]	; (800d4f8 <_svfiprintf_r+0x1ec>)
 800d4b4:	a904      	add	r1, sp, #16
 800d4b6:	4640      	mov	r0, r8
 800d4b8:	f3af 8000 	nop.w
 800d4bc:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d4c0:	4681      	mov	r9, r0
 800d4c2:	d1d6      	bne.n	800d472 <_svfiprintf_r+0x166>
 800d4c4:	89a3      	ldrh	r3, [r4, #12]
 800d4c6:	065b      	lsls	r3, r3, #25
 800d4c8:	f53f af35 	bmi.w	800d336 <_svfiprintf_r+0x2a>
 800d4cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d4ce:	b01d      	add	sp, #116	; 0x74
 800d4d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4d4:	ab03      	add	r3, sp, #12
 800d4d6:	9300      	str	r3, [sp, #0]
 800d4d8:	4622      	mov	r2, r4
 800d4da:	4b07      	ldr	r3, [pc, #28]	; (800d4f8 <_svfiprintf_r+0x1ec>)
 800d4dc:	a904      	add	r1, sp, #16
 800d4de:	4640      	mov	r0, r8
 800d4e0:	f000 f882 	bl	800d5e8 <_printf_i>
 800d4e4:	e7ea      	b.n	800d4bc <_svfiprintf_r+0x1b0>
 800d4e6:	bf00      	nop
 800d4e8:	08010d28 	.word	0x08010d28
 800d4ec:	08010d2e 	.word	0x08010d2e
 800d4f0:	08010d32 	.word	0x08010d32
 800d4f4:	00000000 	.word	0x00000000
 800d4f8:	0800d259 	.word	0x0800d259

0800d4fc <_printf_common>:
 800d4fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d500:	4691      	mov	r9, r2
 800d502:	461f      	mov	r7, r3
 800d504:	688a      	ldr	r2, [r1, #8]
 800d506:	690b      	ldr	r3, [r1, #16]
 800d508:	4606      	mov	r6, r0
 800d50a:	4293      	cmp	r3, r2
 800d50c:	bfb8      	it	lt
 800d50e:	4613      	movlt	r3, r2
 800d510:	f8c9 3000 	str.w	r3, [r9]
 800d514:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d518:	460c      	mov	r4, r1
 800d51a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d51e:	b112      	cbz	r2, 800d526 <_printf_common+0x2a>
 800d520:	3301      	adds	r3, #1
 800d522:	f8c9 3000 	str.w	r3, [r9]
 800d526:	6823      	ldr	r3, [r4, #0]
 800d528:	0699      	lsls	r1, r3, #26
 800d52a:	bf42      	ittt	mi
 800d52c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d530:	3302      	addmi	r3, #2
 800d532:	f8c9 3000 	strmi.w	r3, [r9]
 800d536:	6825      	ldr	r5, [r4, #0]
 800d538:	f015 0506 	ands.w	r5, r5, #6
 800d53c:	d107      	bne.n	800d54e <_printf_common+0x52>
 800d53e:	f104 0a19 	add.w	sl, r4, #25
 800d542:	68e3      	ldr	r3, [r4, #12]
 800d544:	f8d9 2000 	ldr.w	r2, [r9]
 800d548:	1a9b      	subs	r3, r3, r2
 800d54a:	42ab      	cmp	r3, r5
 800d54c:	dc29      	bgt.n	800d5a2 <_printf_common+0xa6>
 800d54e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d552:	6822      	ldr	r2, [r4, #0]
 800d554:	3300      	adds	r3, #0
 800d556:	bf18      	it	ne
 800d558:	2301      	movne	r3, #1
 800d55a:	0692      	lsls	r2, r2, #26
 800d55c:	d42e      	bmi.n	800d5bc <_printf_common+0xc0>
 800d55e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d562:	4639      	mov	r1, r7
 800d564:	4630      	mov	r0, r6
 800d566:	47c0      	blx	r8
 800d568:	3001      	adds	r0, #1
 800d56a:	d021      	beq.n	800d5b0 <_printf_common+0xb4>
 800d56c:	6823      	ldr	r3, [r4, #0]
 800d56e:	68e5      	ldr	r5, [r4, #12]
 800d570:	f003 0306 	and.w	r3, r3, #6
 800d574:	2b04      	cmp	r3, #4
 800d576:	bf18      	it	ne
 800d578:	2500      	movne	r5, #0
 800d57a:	f8d9 2000 	ldr.w	r2, [r9]
 800d57e:	f04f 0900 	mov.w	r9, #0
 800d582:	bf08      	it	eq
 800d584:	1aad      	subeq	r5, r5, r2
 800d586:	68a3      	ldr	r3, [r4, #8]
 800d588:	6922      	ldr	r2, [r4, #16]
 800d58a:	bf08      	it	eq
 800d58c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d590:	4293      	cmp	r3, r2
 800d592:	bfc4      	itt	gt
 800d594:	1a9b      	subgt	r3, r3, r2
 800d596:	18ed      	addgt	r5, r5, r3
 800d598:	341a      	adds	r4, #26
 800d59a:	454d      	cmp	r5, r9
 800d59c:	d11a      	bne.n	800d5d4 <_printf_common+0xd8>
 800d59e:	2000      	movs	r0, #0
 800d5a0:	e008      	b.n	800d5b4 <_printf_common+0xb8>
 800d5a2:	2301      	movs	r3, #1
 800d5a4:	4652      	mov	r2, sl
 800d5a6:	4639      	mov	r1, r7
 800d5a8:	4630      	mov	r0, r6
 800d5aa:	47c0      	blx	r8
 800d5ac:	3001      	adds	r0, #1
 800d5ae:	d103      	bne.n	800d5b8 <_printf_common+0xbc>
 800d5b0:	f04f 30ff 	mov.w	r0, #4294967295
 800d5b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5b8:	3501      	adds	r5, #1
 800d5ba:	e7c2      	b.n	800d542 <_printf_common+0x46>
 800d5bc:	2030      	movs	r0, #48	; 0x30
 800d5be:	18e1      	adds	r1, r4, r3
 800d5c0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d5c4:	1c5a      	adds	r2, r3, #1
 800d5c6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d5ca:	4422      	add	r2, r4
 800d5cc:	3302      	adds	r3, #2
 800d5ce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d5d2:	e7c4      	b.n	800d55e <_printf_common+0x62>
 800d5d4:	2301      	movs	r3, #1
 800d5d6:	4622      	mov	r2, r4
 800d5d8:	4639      	mov	r1, r7
 800d5da:	4630      	mov	r0, r6
 800d5dc:	47c0      	blx	r8
 800d5de:	3001      	adds	r0, #1
 800d5e0:	d0e6      	beq.n	800d5b0 <_printf_common+0xb4>
 800d5e2:	f109 0901 	add.w	r9, r9, #1
 800d5e6:	e7d8      	b.n	800d59a <_printf_common+0x9e>

0800d5e8 <_printf_i>:
 800d5e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d5ec:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800d5f0:	460c      	mov	r4, r1
 800d5f2:	7e09      	ldrb	r1, [r1, #24]
 800d5f4:	b085      	sub	sp, #20
 800d5f6:	296e      	cmp	r1, #110	; 0x6e
 800d5f8:	4617      	mov	r7, r2
 800d5fa:	4606      	mov	r6, r0
 800d5fc:	4698      	mov	r8, r3
 800d5fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d600:	f000 80b3 	beq.w	800d76a <_printf_i+0x182>
 800d604:	d822      	bhi.n	800d64c <_printf_i+0x64>
 800d606:	2963      	cmp	r1, #99	; 0x63
 800d608:	d036      	beq.n	800d678 <_printf_i+0x90>
 800d60a:	d80a      	bhi.n	800d622 <_printf_i+0x3a>
 800d60c:	2900      	cmp	r1, #0
 800d60e:	f000 80b9 	beq.w	800d784 <_printf_i+0x19c>
 800d612:	2958      	cmp	r1, #88	; 0x58
 800d614:	f000 8083 	beq.w	800d71e <_printf_i+0x136>
 800d618:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d61c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800d620:	e032      	b.n	800d688 <_printf_i+0xa0>
 800d622:	2964      	cmp	r1, #100	; 0x64
 800d624:	d001      	beq.n	800d62a <_printf_i+0x42>
 800d626:	2969      	cmp	r1, #105	; 0x69
 800d628:	d1f6      	bne.n	800d618 <_printf_i+0x30>
 800d62a:	6820      	ldr	r0, [r4, #0]
 800d62c:	6813      	ldr	r3, [r2, #0]
 800d62e:	0605      	lsls	r5, r0, #24
 800d630:	f103 0104 	add.w	r1, r3, #4
 800d634:	d52a      	bpl.n	800d68c <_printf_i+0xa4>
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	6011      	str	r1, [r2, #0]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	da03      	bge.n	800d646 <_printf_i+0x5e>
 800d63e:	222d      	movs	r2, #45	; 0x2d
 800d640:	425b      	negs	r3, r3
 800d642:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d646:	486f      	ldr	r0, [pc, #444]	; (800d804 <_printf_i+0x21c>)
 800d648:	220a      	movs	r2, #10
 800d64a:	e039      	b.n	800d6c0 <_printf_i+0xd8>
 800d64c:	2973      	cmp	r1, #115	; 0x73
 800d64e:	f000 809d 	beq.w	800d78c <_printf_i+0x1a4>
 800d652:	d808      	bhi.n	800d666 <_printf_i+0x7e>
 800d654:	296f      	cmp	r1, #111	; 0x6f
 800d656:	d020      	beq.n	800d69a <_printf_i+0xb2>
 800d658:	2970      	cmp	r1, #112	; 0x70
 800d65a:	d1dd      	bne.n	800d618 <_printf_i+0x30>
 800d65c:	6823      	ldr	r3, [r4, #0]
 800d65e:	f043 0320 	orr.w	r3, r3, #32
 800d662:	6023      	str	r3, [r4, #0]
 800d664:	e003      	b.n	800d66e <_printf_i+0x86>
 800d666:	2975      	cmp	r1, #117	; 0x75
 800d668:	d017      	beq.n	800d69a <_printf_i+0xb2>
 800d66a:	2978      	cmp	r1, #120	; 0x78
 800d66c:	d1d4      	bne.n	800d618 <_printf_i+0x30>
 800d66e:	2378      	movs	r3, #120	; 0x78
 800d670:	4865      	ldr	r0, [pc, #404]	; (800d808 <_printf_i+0x220>)
 800d672:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d676:	e055      	b.n	800d724 <_printf_i+0x13c>
 800d678:	6813      	ldr	r3, [r2, #0]
 800d67a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d67e:	1d19      	adds	r1, r3, #4
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	6011      	str	r1, [r2, #0]
 800d684:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d688:	2301      	movs	r3, #1
 800d68a:	e08c      	b.n	800d7a6 <_printf_i+0x1be>
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d692:	6011      	str	r1, [r2, #0]
 800d694:	bf18      	it	ne
 800d696:	b21b      	sxthne	r3, r3
 800d698:	e7cf      	b.n	800d63a <_printf_i+0x52>
 800d69a:	6813      	ldr	r3, [r2, #0]
 800d69c:	6825      	ldr	r5, [r4, #0]
 800d69e:	1d18      	adds	r0, r3, #4
 800d6a0:	6010      	str	r0, [r2, #0]
 800d6a2:	0628      	lsls	r0, r5, #24
 800d6a4:	d501      	bpl.n	800d6aa <_printf_i+0xc2>
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	e002      	b.n	800d6b0 <_printf_i+0xc8>
 800d6aa:	0668      	lsls	r0, r5, #25
 800d6ac:	d5fb      	bpl.n	800d6a6 <_printf_i+0xbe>
 800d6ae:	881b      	ldrh	r3, [r3, #0]
 800d6b0:	296f      	cmp	r1, #111	; 0x6f
 800d6b2:	bf14      	ite	ne
 800d6b4:	220a      	movne	r2, #10
 800d6b6:	2208      	moveq	r2, #8
 800d6b8:	4852      	ldr	r0, [pc, #328]	; (800d804 <_printf_i+0x21c>)
 800d6ba:	2100      	movs	r1, #0
 800d6bc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d6c0:	6865      	ldr	r5, [r4, #4]
 800d6c2:	2d00      	cmp	r5, #0
 800d6c4:	60a5      	str	r5, [r4, #8]
 800d6c6:	f2c0 8095 	blt.w	800d7f4 <_printf_i+0x20c>
 800d6ca:	6821      	ldr	r1, [r4, #0]
 800d6cc:	f021 0104 	bic.w	r1, r1, #4
 800d6d0:	6021      	str	r1, [r4, #0]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d13d      	bne.n	800d752 <_printf_i+0x16a>
 800d6d6:	2d00      	cmp	r5, #0
 800d6d8:	f040 808e 	bne.w	800d7f8 <_printf_i+0x210>
 800d6dc:	4665      	mov	r5, ip
 800d6de:	2a08      	cmp	r2, #8
 800d6e0:	d10b      	bne.n	800d6fa <_printf_i+0x112>
 800d6e2:	6823      	ldr	r3, [r4, #0]
 800d6e4:	07db      	lsls	r3, r3, #31
 800d6e6:	d508      	bpl.n	800d6fa <_printf_i+0x112>
 800d6e8:	6923      	ldr	r3, [r4, #16]
 800d6ea:	6862      	ldr	r2, [r4, #4]
 800d6ec:	429a      	cmp	r2, r3
 800d6ee:	bfde      	ittt	le
 800d6f0:	2330      	movle	r3, #48	; 0x30
 800d6f2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d6f6:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d6fa:	ebac 0305 	sub.w	r3, ip, r5
 800d6fe:	6123      	str	r3, [r4, #16]
 800d700:	f8cd 8000 	str.w	r8, [sp]
 800d704:	463b      	mov	r3, r7
 800d706:	aa03      	add	r2, sp, #12
 800d708:	4621      	mov	r1, r4
 800d70a:	4630      	mov	r0, r6
 800d70c:	f7ff fef6 	bl	800d4fc <_printf_common>
 800d710:	3001      	adds	r0, #1
 800d712:	d14d      	bne.n	800d7b0 <_printf_i+0x1c8>
 800d714:	f04f 30ff 	mov.w	r0, #4294967295
 800d718:	b005      	add	sp, #20
 800d71a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d71e:	4839      	ldr	r0, [pc, #228]	; (800d804 <_printf_i+0x21c>)
 800d720:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d724:	6813      	ldr	r3, [r2, #0]
 800d726:	6821      	ldr	r1, [r4, #0]
 800d728:	1d1d      	adds	r5, r3, #4
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	6015      	str	r5, [r2, #0]
 800d72e:	060a      	lsls	r2, r1, #24
 800d730:	d50b      	bpl.n	800d74a <_printf_i+0x162>
 800d732:	07ca      	lsls	r2, r1, #31
 800d734:	bf44      	itt	mi
 800d736:	f041 0120 	orrmi.w	r1, r1, #32
 800d73a:	6021      	strmi	r1, [r4, #0]
 800d73c:	b91b      	cbnz	r3, 800d746 <_printf_i+0x15e>
 800d73e:	6822      	ldr	r2, [r4, #0]
 800d740:	f022 0220 	bic.w	r2, r2, #32
 800d744:	6022      	str	r2, [r4, #0]
 800d746:	2210      	movs	r2, #16
 800d748:	e7b7      	b.n	800d6ba <_printf_i+0xd2>
 800d74a:	064d      	lsls	r5, r1, #25
 800d74c:	bf48      	it	mi
 800d74e:	b29b      	uxthmi	r3, r3
 800d750:	e7ef      	b.n	800d732 <_printf_i+0x14a>
 800d752:	4665      	mov	r5, ip
 800d754:	fbb3 f1f2 	udiv	r1, r3, r2
 800d758:	fb02 3311 	mls	r3, r2, r1, r3
 800d75c:	5cc3      	ldrb	r3, [r0, r3]
 800d75e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d762:	460b      	mov	r3, r1
 800d764:	2900      	cmp	r1, #0
 800d766:	d1f5      	bne.n	800d754 <_printf_i+0x16c>
 800d768:	e7b9      	b.n	800d6de <_printf_i+0xf6>
 800d76a:	6813      	ldr	r3, [r2, #0]
 800d76c:	6825      	ldr	r5, [r4, #0]
 800d76e:	1d18      	adds	r0, r3, #4
 800d770:	6961      	ldr	r1, [r4, #20]
 800d772:	6010      	str	r0, [r2, #0]
 800d774:	0628      	lsls	r0, r5, #24
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	d501      	bpl.n	800d77e <_printf_i+0x196>
 800d77a:	6019      	str	r1, [r3, #0]
 800d77c:	e002      	b.n	800d784 <_printf_i+0x19c>
 800d77e:	066a      	lsls	r2, r5, #25
 800d780:	d5fb      	bpl.n	800d77a <_printf_i+0x192>
 800d782:	8019      	strh	r1, [r3, #0]
 800d784:	2300      	movs	r3, #0
 800d786:	4665      	mov	r5, ip
 800d788:	6123      	str	r3, [r4, #16]
 800d78a:	e7b9      	b.n	800d700 <_printf_i+0x118>
 800d78c:	6813      	ldr	r3, [r2, #0]
 800d78e:	1d19      	adds	r1, r3, #4
 800d790:	6011      	str	r1, [r2, #0]
 800d792:	681d      	ldr	r5, [r3, #0]
 800d794:	6862      	ldr	r2, [r4, #4]
 800d796:	2100      	movs	r1, #0
 800d798:	4628      	mov	r0, r5
 800d79a:	f000 f837 	bl	800d80c <memchr>
 800d79e:	b108      	cbz	r0, 800d7a4 <_printf_i+0x1bc>
 800d7a0:	1b40      	subs	r0, r0, r5
 800d7a2:	6060      	str	r0, [r4, #4]
 800d7a4:	6863      	ldr	r3, [r4, #4]
 800d7a6:	6123      	str	r3, [r4, #16]
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d7ae:	e7a7      	b.n	800d700 <_printf_i+0x118>
 800d7b0:	6923      	ldr	r3, [r4, #16]
 800d7b2:	462a      	mov	r2, r5
 800d7b4:	4639      	mov	r1, r7
 800d7b6:	4630      	mov	r0, r6
 800d7b8:	47c0      	blx	r8
 800d7ba:	3001      	adds	r0, #1
 800d7bc:	d0aa      	beq.n	800d714 <_printf_i+0x12c>
 800d7be:	6823      	ldr	r3, [r4, #0]
 800d7c0:	079b      	lsls	r3, r3, #30
 800d7c2:	d413      	bmi.n	800d7ec <_printf_i+0x204>
 800d7c4:	68e0      	ldr	r0, [r4, #12]
 800d7c6:	9b03      	ldr	r3, [sp, #12]
 800d7c8:	4298      	cmp	r0, r3
 800d7ca:	bfb8      	it	lt
 800d7cc:	4618      	movlt	r0, r3
 800d7ce:	e7a3      	b.n	800d718 <_printf_i+0x130>
 800d7d0:	2301      	movs	r3, #1
 800d7d2:	464a      	mov	r2, r9
 800d7d4:	4639      	mov	r1, r7
 800d7d6:	4630      	mov	r0, r6
 800d7d8:	47c0      	blx	r8
 800d7da:	3001      	adds	r0, #1
 800d7dc:	d09a      	beq.n	800d714 <_printf_i+0x12c>
 800d7de:	3501      	adds	r5, #1
 800d7e0:	68e3      	ldr	r3, [r4, #12]
 800d7e2:	9a03      	ldr	r2, [sp, #12]
 800d7e4:	1a9b      	subs	r3, r3, r2
 800d7e6:	42ab      	cmp	r3, r5
 800d7e8:	dcf2      	bgt.n	800d7d0 <_printf_i+0x1e8>
 800d7ea:	e7eb      	b.n	800d7c4 <_printf_i+0x1dc>
 800d7ec:	2500      	movs	r5, #0
 800d7ee:	f104 0919 	add.w	r9, r4, #25
 800d7f2:	e7f5      	b.n	800d7e0 <_printf_i+0x1f8>
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d1ac      	bne.n	800d752 <_printf_i+0x16a>
 800d7f8:	7803      	ldrb	r3, [r0, #0]
 800d7fa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d7fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d802:	e76c      	b.n	800d6de <_printf_i+0xf6>
 800d804:	08010d39 	.word	0x08010d39
 800d808:	08010d4a 	.word	0x08010d4a

0800d80c <memchr>:
 800d80c:	b510      	push	{r4, lr}
 800d80e:	b2c9      	uxtb	r1, r1
 800d810:	4402      	add	r2, r0
 800d812:	4290      	cmp	r0, r2
 800d814:	4603      	mov	r3, r0
 800d816:	d101      	bne.n	800d81c <memchr+0x10>
 800d818:	2300      	movs	r3, #0
 800d81a:	e003      	b.n	800d824 <memchr+0x18>
 800d81c:	781c      	ldrb	r4, [r3, #0]
 800d81e:	3001      	adds	r0, #1
 800d820:	428c      	cmp	r4, r1
 800d822:	d1f6      	bne.n	800d812 <memchr+0x6>
 800d824:	4618      	mov	r0, r3
 800d826:	bd10      	pop	{r4, pc}

0800d828 <memmove>:
 800d828:	4288      	cmp	r0, r1
 800d82a:	b510      	push	{r4, lr}
 800d82c:	eb01 0302 	add.w	r3, r1, r2
 800d830:	d807      	bhi.n	800d842 <memmove+0x1a>
 800d832:	1e42      	subs	r2, r0, #1
 800d834:	4299      	cmp	r1, r3
 800d836:	d00a      	beq.n	800d84e <memmove+0x26>
 800d838:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d83c:	f802 4f01 	strb.w	r4, [r2, #1]!
 800d840:	e7f8      	b.n	800d834 <memmove+0xc>
 800d842:	4283      	cmp	r3, r0
 800d844:	d9f5      	bls.n	800d832 <memmove+0xa>
 800d846:	1881      	adds	r1, r0, r2
 800d848:	1ad2      	subs	r2, r2, r3
 800d84a:	42d3      	cmn	r3, r2
 800d84c:	d100      	bne.n	800d850 <memmove+0x28>
 800d84e:	bd10      	pop	{r4, pc}
 800d850:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d854:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800d858:	e7f7      	b.n	800d84a <memmove+0x22>
	...

0800d85c <_free_r>:
 800d85c:	b538      	push	{r3, r4, r5, lr}
 800d85e:	4605      	mov	r5, r0
 800d860:	2900      	cmp	r1, #0
 800d862:	d043      	beq.n	800d8ec <_free_r+0x90>
 800d864:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d868:	1f0c      	subs	r4, r1, #4
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	bfb8      	it	lt
 800d86e:	18e4      	addlt	r4, r4, r3
 800d870:	f000 f8d0 	bl	800da14 <__malloc_lock>
 800d874:	4a1e      	ldr	r2, [pc, #120]	; (800d8f0 <_free_r+0x94>)
 800d876:	6813      	ldr	r3, [r2, #0]
 800d878:	4610      	mov	r0, r2
 800d87a:	b933      	cbnz	r3, 800d88a <_free_r+0x2e>
 800d87c:	6063      	str	r3, [r4, #4]
 800d87e:	6014      	str	r4, [r2, #0]
 800d880:	4628      	mov	r0, r5
 800d882:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d886:	f000 b8c6 	b.w	800da16 <__malloc_unlock>
 800d88a:	42a3      	cmp	r3, r4
 800d88c:	d90b      	bls.n	800d8a6 <_free_r+0x4a>
 800d88e:	6821      	ldr	r1, [r4, #0]
 800d890:	1862      	adds	r2, r4, r1
 800d892:	4293      	cmp	r3, r2
 800d894:	bf01      	itttt	eq
 800d896:	681a      	ldreq	r2, [r3, #0]
 800d898:	685b      	ldreq	r3, [r3, #4]
 800d89a:	1852      	addeq	r2, r2, r1
 800d89c:	6022      	streq	r2, [r4, #0]
 800d89e:	6063      	str	r3, [r4, #4]
 800d8a0:	6004      	str	r4, [r0, #0]
 800d8a2:	e7ed      	b.n	800d880 <_free_r+0x24>
 800d8a4:	4613      	mov	r3, r2
 800d8a6:	685a      	ldr	r2, [r3, #4]
 800d8a8:	b10a      	cbz	r2, 800d8ae <_free_r+0x52>
 800d8aa:	42a2      	cmp	r2, r4
 800d8ac:	d9fa      	bls.n	800d8a4 <_free_r+0x48>
 800d8ae:	6819      	ldr	r1, [r3, #0]
 800d8b0:	1858      	adds	r0, r3, r1
 800d8b2:	42a0      	cmp	r0, r4
 800d8b4:	d10b      	bne.n	800d8ce <_free_r+0x72>
 800d8b6:	6820      	ldr	r0, [r4, #0]
 800d8b8:	4401      	add	r1, r0
 800d8ba:	1858      	adds	r0, r3, r1
 800d8bc:	4282      	cmp	r2, r0
 800d8be:	6019      	str	r1, [r3, #0]
 800d8c0:	d1de      	bne.n	800d880 <_free_r+0x24>
 800d8c2:	6810      	ldr	r0, [r2, #0]
 800d8c4:	6852      	ldr	r2, [r2, #4]
 800d8c6:	4401      	add	r1, r0
 800d8c8:	6019      	str	r1, [r3, #0]
 800d8ca:	605a      	str	r2, [r3, #4]
 800d8cc:	e7d8      	b.n	800d880 <_free_r+0x24>
 800d8ce:	d902      	bls.n	800d8d6 <_free_r+0x7a>
 800d8d0:	230c      	movs	r3, #12
 800d8d2:	602b      	str	r3, [r5, #0]
 800d8d4:	e7d4      	b.n	800d880 <_free_r+0x24>
 800d8d6:	6820      	ldr	r0, [r4, #0]
 800d8d8:	1821      	adds	r1, r4, r0
 800d8da:	428a      	cmp	r2, r1
 800d8dc:	bf01      	itttt	eq
 800d8de:	6811      	ldreq	r1, [r2, #0]
 800d8e0:	6852      	ldreq	r2, [r2, #4]
 800d8e2:	1809      	addeq	r1, r1, r0
 800d8e4:	6021      	streq	r1, [r4, #0]
 800d8e6:	6062      	str	r2, [r4, #4]
 800d8e8:	605c      	str	r4, [r3, #4]
 800d8ea:	e7c9      	b.n	800d880 <_free_r+0x24>
 800d8ec:	bd38      	pop	{r3, r4, r5, pc}
 800d8ee:	bf00      	nop
 800d8f0:	20000ba8 	.word	0x20000ba8

0800d8f4 <_malloc_r>:
 800d8f4:	b570      	push	{r4, r5, r6, lr}
 800d8f6:	1ccd      	adds	r5, r1, #3
 800d8f8:	f025 0503 	bic.w	r5, r5, #3
 800d8fc:	3508      	adds	r5, #8
 800d8fe:	2d0c      	cmp	r5, #12
 800d900:	bf38      	it	cc
 800d902:	250c      	movcc	r5, #12
 800d904:	2d00      	cmp	r5, #0
 800d906:	4606      	mov	r6, r0
 800d908:	db01      	blt.n	800d90e <_malloc_r+0x1a>
 800d90a:	42a9      	cmp	r1, r5
 800d90c:	d903      	bls.n	800d916 <_malloc_r+0x22>
 800d90e:	230c      	movs	r3, #12
 800d910:	6033      	str	r3, [r6, #0]
 800d912:	2000      	movs	r0, #0
 800d914:	bd70      	pop	{r4, r5, r6, pc}
 800d916:	f000 f87d 	bl	800da14 <__malloc_lock>
 800d91a:	4a21      	ldr	r2, [pc, #132]	; (800d9a0 <_malloc_r+0xac>)
 800d91c:	6814      	ldr	r4, [r2, #0]
 800d91e:	4621      	mov	r1, r4
 800d920:	b991      	cbnz	r1, 800d948 <_malloc_r+0x54>
 800d922:	4c20      	ldr	r4, [pc, #128]	; (800d9a4 <_malloc_r+0xb0>)
 800d924:	6823      	ldr	r3, [r4, #0]
 800d926:	b91b      	cbnz	r3, 800d930 <_malloc_r+0x3c>
 800d928:	4630      	mov	r0, r6
 800d92a:	f000 f863 	bl	800d9f4 <_sbrk_r>
 800d92e:	6020      	str	r0, [r4, #0]
 800d930:	4629      	mov	r1, r5
 800d932:	4630      	mov	r0, r6
 800d934:	f000 f85e 	bl	800d9f4 <_sbrk_r>
 800d938:	1c43      	adds	r3, r0, #1
 800d93a:	d124      	bne.n	800d986 <_malloc_r+0x92>
 800d93c:	230c      	movs	r3, #12
 800d93e:	4630      	mov	r0, r6
 800d940:	6033      	str	r3, [r6, #0]
 800d942:	f000 f868 	bl	800da16 <__malloc_unlock>
 800d946:	e7e4      	b.n	800d912 <_malloc_r+0x1e>
 800d948:	680b      	ldr	r3, [r1, #0]
 800d94a:	1b5b      	subs	r3, r3, r5
 800d94c:	d418      	bmi.n	800d980 <_malloc_r+0x8c>
 800d94e:	2b0b      	cmp	r3, #11
 800d950:	d90f      	bls.n	800d972 <_malloc_r+0x7e>
 800d952:	600b      	str	r3, [r1, #0]
 800d954:	18cc      	adds	r4, r1, r3
 800d956:	50cd      	str	r5, [r1, r3]
 800d958:	4630      	mov	r0, r6
 800d95a:	f000 f85c 	bl	800da16 <__malloc_unlock>
 800d95e:	f104 000b 	add.w	r0, r4, #11
 800d962:	1d23      	adds	r3, r4, #4
 800d964:	f020 0007 	bic.w	r0, r0, #7
 800d968:	1ac3      	subs	r3, r0, r3
 800d96a:	d0d3      	beq.n	800d914 <_malloc_r+0x20>
 800d96c:	425a      	negs	r2, r3
 800d96e:	50e2      	str	r2, [r4, r3]
 800d970:	e7d0      	b.n	800d914 <_malloc_r+0x20>
 800d972:	684b      	ldr	r3, [r1, #4]
 800d974:	428c      	cmp	r4, r1
 800d976:	bf16      	itet	ne
 800d978:	6063      	strne	r3, [r4, #4]
 800d97a:	6013      	streq	r3, [r2, #0]
 800d97c:	460c      	movne	r4, r1
 800d97e:	e7eb      	b.n	800d958 <_malloc_r+0x64>
 800d980:	460c      	mov	r4, r1
 800d982:	6849      	ldr	r1, [r1, #4]
 800d984:	e7cc      	b.n	800d920 <_malloc_r+0x2c>
 800d986:	1cc4      	adds	r4, r0, #3
 800d988:	f024 0403 	bic.w	r4, r4, #3
 800d98c:	42a0      	cmp	r0, r4
 800d98e:	d005      	beq.n	800d99c <_malloc_r+0xa8>
 800d990:	1a21      	subs	r1, r4, r0
 800d992:	4630      	mov	r0, r6
 800d994:	f000 f82e 	bl	800d9f4 <_sbrk_r>
 800d998:	3001      	adds	r0, #1
 800d99a:	d0cf      	beq.n	800d93c <_malloc_r+0x48>
 800d99c:	6025      	str	r5, [r4, #0]
 800d99e:	e7db      	b.n	800d958 <_malloc_r+0x64>
 800d9a0:	20000ba8 	.word	0x20000ba8
 800d9a4:	20000bac 	.word	0x20000bac

0800d9a8 <_realloc_r>:
 800d9a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9aa:	4607      	mov	r7, r0
 800d9ac:	4614      	mov	r4, r2
 800d9ae:	460e      	mov	r6, r1
 800d9b0:	b921      	cbnz	r1, 800d9bc <_realloc_r+0x14>
 800d9b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d9b6:	4611      	mov	r1, r2
 800d9b8:	f7ff bf9c 	b.w	800d8f4 <_malloc_r>
 800d9bc:	b922      	cbnz	r2, 800d9c8 <_realloc_r+0x20>
 800d9be:	f7ff ff4d 	bl	800d85c <_free_r>
 800d9c2:	4625      	mov	r5, r4
 800d9c4:	4628      	mov	r0, r5
 800d9c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d9c8:	f000 f826 	bl	800da18 <_malloc_usable_size_r>
 800d9cc:	42a0      	cmp	r0, r4
 800d9ce:	d20f      	bcs.n	800d9f0 <_realloc_r+0x48>
 800d9d0:	4621      	mov	r1, r4
 800d9d2:	4638      	mov	r0, r7
 800d9d4:	f7ff ff8e 	bl	800d8f4 <_malloc_r>
 800d9d8:	4605      	mov	r5, r0
 800d9da:	2800      	cmp	r0, #0
 800d9dc:	d0f2      	beq.n	800d9c4 <_realloc_r+0x1c>
 800d9de:	4631      	mov	r1, r6
 800d9e0:	4622      	mov	r2, r4
 800d9e2:	f7ff fc05 	bl	800d1f0 <memcpy>
 800d9e6:	4631      	mov	r1, r6
 800d9e8:	4638      	mov	r0, r7
 800d9ea:	f7ff ff37 	bl	800d85c <_free_r>
 800d9ee:	e7e9      	b.n	800d9c4 <_realloc_r+0x1c>
 800d9f0:	4635      	mov	r5, r6
 800d9f2:	e7e7      	b.n	800d9c4 <_realloc_r+0x1c>

0800d9f4 <_sbrk_r>:
 800d9f4:	b538      	push	{r3, r4, r5, lr}
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	4c05      	ldr	r4, [pc, #20]	; (800da10 <_sbrk_r+0x1c>)
 800d9fa:	4605      	mov	r5, r0
 800d9fc:	4608      	mov	r0, r1
 800d9fe:	6023      	str	r3, [r4, #0]
 800da00:	f7f7 fa0a 	bl	8004e18 <_sbrk>
 800da04:	1c43      	adds	r3, r0, #1
 800da06:	d102      	bne.n	800da0e <_sbrk_r+0x1a>
 800da08:	6823      	ldr	r3, [r4, #0]
 800da0a:	b103      	cbz	r3, 800da0e <_sbrk_r+0x1a>
 800da0c:	602b      	str	r3, [r5, #0]
 800da0e:	bd38      	pop	{r3, r4, r5, pc}
 800da10:	20001d18 	.word	0x20001d18

0800da14 <__malloc_lock>:
 800da14:	4770      	bx	lr

0800da16 <__malloc_unlock>:
 800da16:	4770      	bx	lr

0800da18 <_malloc_usable_size_r>:
 800da18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da1c:	1f18      	subs	r0, r3, #4
 800da1e:	2b00      	cmp	r3, #0
 800da20:	bfbc      	itt	lt
 800da22:	580b      	ldrlt	r3, [r1, r0]
 800da24:	18c0      	addlt	r0, r0, r3
 800da26:	4770      	bx	lr

0800da28 <_init>:
 800da28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da2a:	bf00      	nop
 800da2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da2e:	bc08      	pop	{r3}
 800da30:	469e      	mov	lr, r3
 800da32:	4770      	bx	lr

0800da34 <_fini>:
 800da34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da36:	bf00      	nop
 800da38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da3a:	bc08      	pop	{r3}
 800da3c:	469e      	mov	lr, r3
 800da3e:	4770      	bx	lr
