
stm_nrf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c1b4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000136c  0800c2c4  0800c2c4  0001c2c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d630  0800d630  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  0800d630  0800d630  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d630  0800d630  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d630  0800d630  0001d630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d634  0800d634  0001d634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800d638  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000018d4  200001f0  0800d828  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001ac4  0800d828  00021ac4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000214e0  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004595  00000000  00000000  000416f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ac0  00000000  00000000  00045c90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000018d8  00000000  00000000  00047750  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a087  00000000  00000000  00049028  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016cd3  00000000  00000000  000630af  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008246b  00000000  00000000  00079d82  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fc1ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007464  00000000  00000000  000fc268  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c2ac 	.word	0x0800c2ac

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	0800c2ac 	.word	0x0800c2ac

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2iz>:
 80008fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000900:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000904:	d215      	bcs.n	8000932 <__aeabi_d2iz+0x36>
 8000906:	d511      	bpl.n	800092c <__aeabi_d2iz+0x30>
 8000908:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800090c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000910:	d912      	bls.n	8000938 <__aeabi_d2iz+0x3c>
 8000912:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000916:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800091a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800091e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000922:	fa23 f002 	lsr.w	r0, r3, r2
 8000926:	bf18      	it	ne
 8000928:	4240      	negne	r0, r0
 800092a:	4770      	bx	lr
 800092c:	f04f 0000 	mov.w	r0, #0
 8000930:	4770      	bx	lr
 8000932:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000936:	d105      	bne.n	8000944 <__aeabi_d2iz+0x48>
 8000938:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800093c:	bf08      	it	eq
 800093e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000942:	4770      	bx	lr
 8000944:	f04f 0000 	mov.w	r0, #0
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop

0800094c <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8000958:	4b0a      	ldr	r3, [pc, #40]	; (8000984 <NRF24_DelayMicroSeconds+0x38>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a0a      	ldr	r2, [pc, #40]	; (8000988 <NRF24_DelayMicroSeconds+0x3c>)
 800095e:	fba2 2303 	umull	r2, r3, r2, r3
 8000962:	0c9a      	lsrs	r2, r3, #18
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	fb02 f303 	mul.w	r3, r2, r3
 800096a:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 800096c:	bf00      	nop
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	1e5a      	subs	r2, r3, #1
 8000972:	60fa      	str	r2, [r7, #12]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d1fa      	bne.n	800096e <NRF24_DelayMicroSeconds+0x22>
}
 8000978:	bf00      	nop
 800097a:	3714      	adds	r7, #20
 800097c:	46bd      	mov	sp, r7
 800097e:	bc80      	pop	{r7}
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	20000010 	.word	0x20000010
 8000988:	165e9f81 	.word	0x165e9f81

0800098c <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d008      	beq.n	80009ac <NRF24_csn+0x20>
 800099a:	4b0a      	ldr	r3, [pc, #40]	; (80009c4 <NRF24_csn+0x38>)
 800099c:	6818      	ldr	r0, [r3, #0]
 800099e:	4b0a      	ldr	r3, [pc, #40]	; (80009c8 <NRF24_csn+0x3c>)
 80009a0:	881b      	ldrh	r3, [r3, #0]
 80009a2:	2201      	movs	r2, #1
 80009a4:	4619      	mov	r1, r3
 80009a6:	f004 f81a 	bl	80049de <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 80009aa:	e007      	b.n	80009bc <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 80009ac:	4b05      	ldr	r3, [pc, #20]	; (80009c4 <NRF24_csn+0x38>)
 80009ae:	6818      	ldr	r0, [r3, #0]
 80009b0:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <NRF24_csn+0x3c>)
 80009b2:	881b      	ldrh	r3, [r3, #0]
 80009b4:	2200      	movs	r2, #0
 80009b6:	4619      	mov	r1, r3
 80009b8:	f004 f811 	bl	80049de <HAL_GPIO_WritePin>
}
 80009bc:	bf00      	nop
 80009be:	3708      	adds	r7, #8
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	2000021c 	.word	0x2000021c
 80009c8:	20000220 	.word	0x20000220

080009cc <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d008      	beq.n	80009ec <NRF24_ce+0x20>
 80009da:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <NRF24_ce+0x38>)
 80009dc:	6818      	ldr	r0, [r3, #0]
 80009de:	4b0a      	ldr	r3, [pc, #40]	; (8000a08 <NRF24_ce+0x3c>)
 80009e0:	881b      	ldrh	r3, [r3, #0]
 80009e2:	2201      	movs	r2, #1
 80009e4:	4619      	mov	r1, r3
 80009e6:	f003 fffa 	bl	80049de <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 80009ea:	e007      	b.n	80009fc <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 80009ec:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <NRF24_ce+0x38>)
 80009ee:	6818      	ldr	r0, [r3, #0]
 80009f0:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <NRF24_ce+0x3c>)
 80009f2:	881b      	ldrh	r3, [r3, #0]
 80009f4:	2200      	movs	r2, #0
 80009f6:	4619      	mov	r1, r3
 80009f8:	f003 fff1 	bl	80049de <HAL_GPIO_WritePin>
}
 80009fc:	bf00      	nop
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	2000021c 	.word	0x2000021c
 8000a08:	20000222 	.word	0x20000222

08000a0c <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8000a16:	2000      	movs	r0, #0
 8000a18:	f7ff ffb8 	bl	800098c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000a1c:	79fb      	ldrb	r3, [r7, #7]
 8000a1e:	f003 031f 	and.w	r3, r3, #31
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000a26:	f107 010c 	add.w	r1, r7, #12
 8000a2a:	2364      	movs	r3, #100	; 0x64
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	480a      	ldr	r0, [pc, #40]	; (8000a58 <NRF24_read_register+0x4c>)
 8000a30:	f006 fcc9 	bl	80073c6 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8000a34:	f107 030c 	add.w	r3, r7, #12
 8000a38:	1c59      	adds	r1, r3, #1
 8000a3a:	2364      	movs	r3, #100	; 0x64
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	4806      	ldr	r0, [pc, #24]	; (8000a58 <NRF24_read_register+0x4c>)
 8000a40:	f006 fdf5 	bl	800762e <HAL_SPI_Receive>
	retData = spiBuf[1];
 8000a44:	7b7b      	ldrb	r3, [r7, #13]
 8000a46:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8000a48:	2001      	movs	r0, #1
 8000a4a:	f7ff ff9f 	bl	800098c <NRF24_csn>
	return retData;
 8000a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	3710      	adds	r7, #16
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20000224 	.word	0x20000224

08000a5c <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	6039      	str	r1, [r7, #0]
 8000a66:	71fb      	strb	r3, [r7, #7]
 8000a68:	4613      	mov	r3, r2
 8000a6a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	f7ff ff8d 	bl	800098c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	f003 031f 	and.w	r3, r3, #31
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000a7c:	f107 010c 	add.w	r1, r7, #12
 8000a80:	2364      	movs	r3, #100	; 0x64
 8000a82:	2201      	movs	r2, #1
 8000a84:	4808      	ldr	r0, [pc, #32]	; (8000aa8 <NRF24_read_registerN+0x4c>)
 8000a86:	f006 fc9e 	bl	80073c6 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8000a8a:	79bb      	ldrb	r3, [r7, #6]
 8000a8c:	b29a      	uxth	r2, r3
 8000a8e:	2364      	movs	r3, #100	; 0x64
 8000a90:	6839      	ldr	r1, [r7, #0]
 8000a92:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <NRF24_read_registerN+0x4c>)
 8000a94:	f006 fdcb 	bl	800762e <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8000a98:	2001      	movs	r0, #1
 8000a9a:	f7ff ff77 	bl	800098c <NRF24_csn>
}
 8000a9e:	bf00      	nop
 8000aa0:	3710      	adds	r7, #16
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000224 	.word	0x20000224

08000aac <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	460a      	mov	r2, r1
 8000ab6:	71fb      	strb	r3, [r7, #7]
 8000ab8:	4613      	mov	r3, r2
 8000aba:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000abc:	2000      	movs	r0, #0
 8000abe:	f7ff ff65 	bl	800098c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	f043 0320 	orr.w	r3, r3, #32
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8000acc:	79bb      	ldrb	r3, [r7, #6]
 8000ace:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8000ad0:	f107 010c 	add.w	r1, r7, #12
 8000ad4:	2364      	movs	r3, #100	; 0x64
 8000ad6:	2202      	movs	r2, #2
 8000ad8:	4804      	ldr	r0, [pc, #16]	; (8000aec <NRF24_write_register+0x40>)
 8000ada:	f006 fc74 	bl	80073c6 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000ade:	2001      	movs	r0, #1
 8000ae0:	f7ff ff54 	bl	800098c <NRF24_csn>
}
 8000ae4:	bf00      	nop
 8000ae6:	3710      	adds	r7, #16
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20000224 	.word	0x20000224

08000af0 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	6039      	str	r1, [r7, #0]
 8000afa:	71fb      	strb	r3, [r7, #7]
 8000afc:	4613      	mov	r3, r2
 8000afe:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000b00:	2000      	movs	r0, #0
 8000b02:	f7ff ff43 	bl	800098c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000b06:	79fb      	ldrb	r3, [r7, #7]
 8000b08:	f043 0320 	orr.w	r3, r3, #32
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000b10:	f107 010c 	add.w	r1, r7, #12
 8000b14:	2364      	movs	r3, #100	; 0x64
 8000b16:	2201      	movs	r2, #1
 8000b18:	4808      	ldr	r0, [pc, #32]	; (8000b3c <NRF24_write_registerN+0x4c>)
 8000b1a:	f006 fc54 	bl	80073c6 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8000b1e:	79bb      	ldrb	r3, [r7, #6]
 8000b20:	b29a      	uxth	r2, r3
 8000b22:	2364      	movs	r3, #100	; 0x64
 8000b24:	6839      	ldr	r1, [r7, #0]
 8000b26:	4805      	ldr	r0, [pc, #20]	; (8000b3c <NRF24_write_registerN+0x4c>)
 8000b28:	f006 fc4d 	bl	80073c6 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000b2c:	2001      	movs	r0, #1
 8000b2e:	f7ff ff2d 	bl	800098c <NRF24_csn>
}
 8000b32:	bf00      	nop
 8000b34:	3710      	adds	r7, #16
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000224 	.word	0x20000224

08000b40 <NRF24_read_payload>:
	//Bring CSN high
	NRF24_csn(1);
}
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	460b      	mov	r3, r1
 8000b4a:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 8000b4c:	f000 fa06 	bl	8000f5c <NRF24_getPayloadSize>
 8000b50:	4603      	mov	r3, r0
 8000b52:	461a      	mov	r2, r3
 8000b54:	78fb      	ldrb	r3, [r7, #3]
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d303      	bcc.n	8000b62 <NRF24_read_payload+0x22>
 8000b5a:	f000 f9ff 	bl	8000f5c <NRF24_getPayloadSize>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	e000      	b.n	8000b64 <NRF24_read_payload+0x24>
 8000b62:	78fb      	ldrb	r3, [r7, #3]
 8000b64:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8000b66:	2000      	movs	r0, #0
 8000b68:	f7ff ff10 	bl	800098c <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 8000b6c:	2361      	movs	r3, #97	; 0x61
 8000b6e:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 8000b70:	f107 010e 	add.w	r1, r7, #14
 8000b74:	2364      	movs	r3, #100	; 0x64
 8000b76:	2201      	movs	r2, #1
 8000b78:	4808      	ldr	r0, [pc, #32]	; (8000b9c <NRF24_read_payload+0x5c>)
 8000b7a:	f006 fc24 	bl	80073c6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 8000b7e:	7bfb      	ldrb	r3, [r7, #15]
 8000b80:	b29a      	uxth	r2, r3
 8000b82:	2364      	movs	r3, #100	; 0x64
 8000b84:	6879      	ldr	r1, [r7, #4]
 8000b86:	4805      	ldr	r0, [pc, #20]	; (8000b9c <NRF24_read_payload+0x5c>)
 8000b88:	f006 fd51 	bl	800762e <HAL_SPI_Receive>
	NRF24_csn(1);
 8000b8c:	2001      	movs	r0, #1
 8000b8e:	f7ff fefd 	bl	800098c <NRF24_csn>
}
 8000b92:	bf00      	nop
 8000b94:	3710      	adds	r7, #16
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000224 	.word	0x20000224

08000ba0 <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000ba4:	21ff      	movs	r1, #255	; 0xff
 8000ba6:	20e1      	movs	r0, #225	; 0xe1
 8000ba8:	f7ff ff80 	bl	8000aac <NRF24_write_register>
}
 8000bac:	bf00      	nop
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000bb4:	21ff      	movs	r1, #255	; 0xff
 8000bb6:	20e2      	movs	r0, #226	; 0xe2
 8000bb8:	f7ff ff78 	bl	8000aac <NRF24_write_register>
}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8000bc6:	2007      	movs	r0, #7
 8000bc8:	f7ff ff20 	bl	8000a0c <NRF24_read_register>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
	...

08000bdc <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8000bdc:	b082      	sub	sp, #8
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b084      	sub	sp, #16
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
 8000be6:	61fb      	str	r3, [r7, #28]
 8000be8:	460b      	mov	r3, r1
 8000bea:	807b      	strh	r3, [r7, #2]
 8000bec:	4613      	mov	r3, r2
 8000bee:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000bf0:	4b66      	ldr	r3, [pc, #408]	; (8000d8c <NRF24_begin+0x1b0>)
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f107 031c 	add.w	r3, r7, #28
 8000bf8:	2258      	movs	r2, #88	; 0x58
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	f00a ff3a 	bl	800ba74 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000c00:	4a63      	ldr	r2, [pc, #396]	; (8000d90 <NRF24_begin+0x1b4>)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8000c06:	4a63      	ldr	r2, [pc, #396]	; (8000d94 <NRF24_begin+0x1b8>)
 8000c08:	887b      	ldrh	r3, [r7, #2]
 8000c0a:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000c0c:	4a62      	ldr	r2, [pc, #392]	; (8000d98 <NRF24_begin+0x1bc>)
 8000c0e:	883b      	ldrh	r3, [r7, #0]
 8000c10:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 8000c12:	2001      	movs	r0, #1
 8000c14:	f7ff feba 	bl	800098c <NRF24_csn>
	NRF24_ce(0);
 8000c18:	2000      	movs	r0, #0
 8000c1a:	f7ff fed7 	bl	80009cc <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000c1e:	2005      	movs	r0, #5
 8000c20:	f003 f976 	bl	8003f10 <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000c24:	2108      	movs	r1, #8
 8000c26:	2000      	movs	r0, #0
 8000c28:	f7ff ff40 	bl	8000aac <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000c2c:	213f      	movs	r1, #63	; 0x3f
 8000c2e:	2001      	movs	r0, #1
 8000c30:	f7ff ff3c 	bl	8000aac <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000c34:	2103      	movs	r1, #3
 8000c36:	2002      	movs	r0, #2
 8000c38:	f7ff ff38 	bl	8000aac <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000c3c:	2103      	movs	r1, #3
 8000c3e:	2003      	movs	r0, #3
 8000c40:	f7ff ff34 	bl	8000aac <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000c44:	2103      	movs	r1, #3
 8000c46:	2004      	movs	r0, #4
 8000c48:	f7ff ff30 	bl	8000aac <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000c4c:	2102      	movs	r1, #2
 8000c4e:	2005      	movs	r0, #5
 8000c50:	f7ff ff2c 	bl	8000aac <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8000c54:	210f      	movs	r1, #15
 8000c56:	2006      	movs	r0, #6
 8000c58:	f7ff ff28 	bl	8000aac <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000c5c:	210e      	movs	r1, #14
 8000c5e:	2007      	movs	r0, #7
 8000c60:	f7ff ff24 	bl	8000aac <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8000c64:	2100      	movs	r1, #0
 8000c66:	2008      	movs	r0, #8
 8000c68:	f7ff ff20 	bl	8000aac <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	2009      	movs	r0, #9
 8000c70:	f7ff ff1c 	bl	8000aac <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000c74:	23e7      	movs	r3, #231	; 0xe7
 8000c76:	733b      	strb	r3, [r7, #12]
 8000c78:	23e7      	movs	r3, #231	; 0xe7
 8000c7a:	72fb      	strb	r3, [r7, #11]
 8000c7c:	23e7      	movs	r3, #231	; 0xe7
 8000c7e:	72bb      	strb	r3, [r7, #10]
 8000c80:	23e7      	movs	r3, #231	; 0xe7
 8000c82:	727b      	strb	r3, [r7, #9]
 8000c84:	23e7      	movs	r3, #231	; 0xe7
 8000c86:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8000c88:	f107 0308 	add.w	r3, r7, #8
 8000c8c:	2205      	movs	r2, #5
 8000c8e:	4619      	mov	r1, r3
 8000c90:	200a      	movs	r0, #10
 8000c92:	f7ff ff2d 	bl	8000af0 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 8000c96:	23c2      	movs	r3, #194	; 0xc2
 8000c98:	733b      	strb	r3, [r7, #12]
 8000c9a:	23c2      	movs	r3, #194	; 0xc2
 8000c9c:	72fb      	strb	r3, [r7, #11]
 8000c9e:	23c2      	movs	r3, #194	; 0xc2
 8000ca0:	72bb      	strb	r3, [r7, #10]
 8000ca2:	23c2      	movs	r3, #194	; 0xc2
 8000ca4:	727b      	strb	r3, [r7, #9]
 8000ca6:	23c2      	movs	r3, #194	; 0xc2
 8000ca8:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8000caa:	f107 0308 	add.w	r3, r7, #8
 8000cae:	2205      	movs	r2, #5
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	200b      	movs	r0, #11
 8000cb4:	f7ff ff1c 	bl	8000af0 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8000cb8:	21c3      	movs	r1, #195	; 0xc3
 8000cba:	200c      	movs	r0, #12
 8000cbc:	f7ff fef6 	bl	8000aac <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000cc0:	21c4      	movs	r1, #196	; 0xc4
 8000cc2:	200d      	movs	r0, #13
 8000cc4:	f7ff fef2 	bl	8000aac <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8000cc8:	21c5      	movs	r1, #197	; 0xc5
 8000cca:	200e      	movs	r0, #14
 8000ccc:	f7ff feee 	bl	8000aac <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000cd0:	21c6      	movs	r1, #198	; 0xc6
 8000cd2:	200f      	movs	r0, #15
 8000cd4:	f7ff feea 	bl	8000aac <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000cd8:	23e7      	movs	r3, #231	; 0xe7
 8000cda:	733b      	strb	r3, [r7, #12]
 8000cdc:	23e7      	movs	r3, #231	; 0xe7
 8000cde:	72fb      	strb	r3, [r7, #11]
 8000ce0:	23e7      	movs	r3, #231	; 0xe7
 8000ce2:	72bb      	strb	r3, [r7, #10]
 8000ce4:	23e7      	movs	r3, #231	; 0xe7
 8000ce6:	727b      	strb	r3, [r7, #9]
 8000ce8:	23e7      	movs	r3, #231	; 0xe7
 8000cea:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000cec:	f107 0308 	add.w	r3, r7, #8
 8000cf0:	2205      	movs	r2, #5
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	2010      	movs	r0, #16
 8000cf6:	f7ff fefb 	bl	8000af0 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	2011      	movs	r0, #17
 8000cfe:	f7ff fed5 	bl	8000aac <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000d02:	2100      	movs	r1, #0
 8000d04:	2012      	movs	r0, #18
 8000d06:	f7ff fed1 	bl	8000aac <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	2013      	movs	r0, #19
 8000d0e:	f7ff fecd 	bl	8000aac <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000d12:	2100      	movs	r1, #0
 8000d14:	2014      	movs	r0, #20
 8000d16:	f7ff fec9 	bl	8000aac <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	2015      	movs	r0, #21
 8000d1e:	f7ff fec5 	bl	8000aac <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000d22:	2100      	movs	r1, #0
 8000d24:	2016      	movs	r0, #22
 8000d26:	f7ff fec1 	bl	8000aac <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 8000d2a:	f000 facf 	bl	80012cc <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000d2e:	2100      	movs	r1, #0
 8000d30:	201c      	movs	r0, #28
 8000d32:	f7ff febb 	bl	8000aac <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8000d36:	2100      	movs	r1, #0
 8000d38:	201d      	movs	r0, #29
 8000d3a:	f7ff feb7 	bl	8000aac <NRF24_write_register>
	printRadioSettings();
 8000d3e:	f000 fadf 	bl	8001300 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000d42:	210f      	movs	r1, #15
 8000d44:	200f      	movs	r0, #15
 8000d46:	f000 f8c3 	bl	8000ed0 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8000d4a:	2003      	movs	r0, #3
 8000d4c:	f000 f9a5 	bl	800109a <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000d50:	2001      	movs	r0, #1
 8000d52:	f000 f9db 	bl	800110c <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8000d56:	2002      	movs	r0, #2
 8000d58:	f000 fa1e 	bl	8001198 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000d5c:	f000 f970 	bl	8001040 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000d60:	2020      	movs	r0, #32
 8000d62:	f000 f8e5 	bl	8000f30 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 8000d66:	f000 faa8 	bl	80012ba <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8000d6a:	204c      	movs	r0, #76	; 0x4c
 8000d6c:	f000 f8cb 	bl	8000f06 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000d70:	f7ff ff16 	bl	8000ba0 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000d74:	f7ff ff1c 	bl	8000bb0 <NRF24_flush_rx>
	
	NRF24_powerDown();
 8000d78:	f000 fa36 	bl	80011e8 <NRF24_powerDown>
	
}
 8000d7c:	bf00      	nop
 8000d7e:	3710      	adds	r7, #16
 8000d80:	46bd      	mov	sp, r7
 8000d82:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d86:	b002      	add	sp, #8
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	20000224 	.word	0x20000224
 8000d90:	2000021c 	.word	0x2000021c
 8000d94:	20000220 	.word	0x20000220
 8000d98:	20000222 	.word	0x20000222

08000d9c <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8000d9c:	b598      	push	{r3, r4, r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 8000da0:	2000      	movs	r0, #0
 8000da2:	f7ff fe33 	bl	8000a0c <NRF24_read_register>
 8000da6:	4603      	mov	r3, r0
 8000da8:	f043 0303 	orr.w	r3, r3, #3
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	4619      	mov	r1, r3
 8000db0:	2000      	movs	r0, #0
 8000db2:	f7ff fe7b 	bl	8000aac <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 8000db6:	4b0a      	ldr	r3, [pc, #40]	; (8000de0 <NRF24_startListening+0x44>)
 8000db8:	cb18      	ldmia	r3, {r3, r4}
 8000dba:	4323      	orrs	r3, r4
 8000dbc:	d004      	beq.n	8000dc8 <NRF24_startListening+0x2c>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 8000dbe:	2205      	movs	r2, #5
 8000dc0:	4907      	ldr	r1, [pc, #28]	; (8000de0 <NRF24_startListening+0x44>)
 8000dc2:	200a      	movs	r0, #10
 8000dc4:	f7ff fe94 	bl	8000af0 <NRF24_write_registerN>
	
	//Flush buffers
	NRF24_flush_tx();
 8000dc8:	f7ff feea 	bl	8000ba0 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000dcc:	f7ff fef0 	bl	8000bb0 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 8000dd0:	2001      	movs	r0, #1
 8000dd2:	f7ff fdfb 	bl	80009cc <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8000dd6:	2096      	movs	r0, #150	; 0x96
 8000dd8:	f7ff fdb8 	bl	800094c <NRF24_DelayMicroSeconds>
}
 8000ddc:	bf00      	nop
 8000dde:	bd98      	pop	{r3, r4, r7, pc}
 8000de0:	20000210 	.word	0x20000210

08000de4 <NRF24_available>:
	NRF24_flush_tx();
	return retStatus;
}
//16. Check for available data to read
bool NRF24_available(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8000de8:	2000      	movs	r0, #0
 8000dea:	f000 fa0c 	bl	8001206 <NRF24_availablePipe>
 8000dee:	4603      	mov	r3, r0
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 8000e00:	78fb      	ldrb	r3, [r7, #3]
 8000e02:	4619      	mov	r1, r3
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f7ff fe9b 	bl	8000b40 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 8000e0a:	2017      	movs	r0, #23
 8000e0c:	f7ff fdfe 	bl	8000a0c <NRF24_read_register>
 8000e10:	4603      	mov	r3, r0
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 8000e18:	f7ff feca 	bl	8000bb0 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 8000e1c:	f000 f8a8 	bl	8000f70 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 8000e20:	7bfb      	ldrb	r3, [r7, #15]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	bf14      	ite	ne
 8000e26:	2301      	movne	r3, #1
 8000e28:	2300      	moveq	r3, #0
 8000e2a:	b2db      	uxtb	r3, r3
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3710      	adds	r7, #16
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <NRF24_openReadingPipe>:
	const uint8_t max_payload_size = 32;
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
}
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 8000e34:	b590      	push	{r4, r7, lr}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4601      	mov	r1, r0
 8000e3c:	e9c7 2300 	strd	r2, r3, [r7]
 8000e40:	460b      	mov	r3, r1
 8000e42:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 8000e44:	7bfb      	ldrb	r3, [r7, #15]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d104      	bne.n	8000e54 <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 8000e4a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000e4e:	4a1c      	ldr	r2, [pc, #112]	; (8000ec0 <NRF24_openReadingPipe+0x8c>)
 8000e50:	e9c2 3400 	strd	r3, r4, [r2]
	
	if(number <= 6)
 8000e54:	7bfb      	ldrb	r3, [r7, #15]
 8000e56:	2b06      	cmp	r3, #6
 8000e58:	d82d      	bhi.n	8000eb6 <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 8000e5a:	7bfb      	ldrb	r3, [r7, #15]
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d808      	bhi.n	8000e72 <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 8000e60:	7bfb      	ldrb	r3, [r7, #15]
 8000e62:	4a18      	ldr	r2, [pc, #96]	; (8000ec4 <NRF24_openReadingPipe+0x90>)
 8000e64:	5cd3      	ldrb	r3, [r2, r3]
 8000e66:	4639      	mov	r1, r7
 8000e68:	2205      	movs	r2, #5
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff fe40 	bl	8000af0 <NRF24_write_registerN>
 8000e70:	e007      	b.n	8000e82 <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 8000e72:	7bfb      	ldrb	r3, [r7, #15]
 8000e74:	4a13      	ldr	r2, [pc, #76]	; (8000ec4 <NRF24_openReadingPipe+0x90>)
 8000e76:	5cd3      	ldrb	r3, [r2, r3]
 8000e78:	4639      	mov	r1, r7
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff fe37 	bl	8000af0 <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 8000e82:	7bfb      	ldrb	r3, [r7, #15]
 8000e84:	4a10      	ldr	r2, [pc, #64]	; (8000ec8 <NRF24_openReadingPipe+0x94>)
 8000e86:	5cd2      	ldrb	r2, [r2, r3]
 8000e88:	4b10      	ldr	r3, [pc, #64]	; (8000ecc <NRF24_openReadingPipe+0x98>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4610      	mov	r0, r2
 8000e90:	f7ff fe0c 	bl	8000aac <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 8000e94:	2002      	movs	r0, #2
 8000e96:	f7ff fdb9 	bl	8000a0c <NRF24_read_register>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	b25a      	sxtb	r2, r3
 8000e9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea6:	b25b      	sxtb	r3, r3
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	b25b      	sxtb	r3, r3
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	4619      	mov	r1, r3
 8000eb0:	2002      	movs	r0, #2
 8000eb2:	f7ff fdfb 	bl	8000aac <NRF24_write_register>
	}
	
}
 8000eb6:	bf00      	nop
 8000eb8:	3714      	adds	r7, #20
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd90      	pop	{r4, r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20000210 	.word	0x20000210
 8000ec4:	0800c878 	.word	0x0800c878
 8000ec8:	0800c880 	.word	0x0800c880
 8000ecc:	20000218 	.word	0x20000218

08000ed0 <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	460a      	mov	r2, r1
 8000eda:	71fb      	strb	r3, [r7, #7]
 8000edc:	4613      	mov	r3, r2
 8000ede:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	011b      	lsls	r3, r3, #4
 8000ee4:	b25a      	sxtb	r2, r3
 8000ee6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000eea:	f003 030f 	and.w	r3, r3, #15
 8000eee:	b25b      	sxtb	r3, r3
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	b25b      	sxtb	r3, r3
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	2004      	movs	r0, #4
 8000efa:	f7ff fdd7 	bl	8000aac <NRF24_write_register>
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b084      	sub	sp, #16
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8000f10:	237f      	movs	r3, #127	; 0x7f
 8000f12:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000f14:	7bfa      	ldrb	r2, [r7, #15]
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	bf28      	it	cs
 8000f1c:	4613      	movcs	r3, r2
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	4619      	mov	r1, r3
 8000f22:	2005      	movs	r0, #5
 8000f24:	f7ff fdc2 	bl	8000aac <NRF24_write_register>
}
 8000f28:	bf00      	nop
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8000f3a:	2320      	movs	r3, #32
 8000f3c:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8000f3e:	7bfa      	ldrb	r2, [r7, #15]
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	4293      	cmp	r3, r2
 8000f44:	bf28      	it	cs
 8000f46:	4613      	movcs	r3, r2
 8000f48:	b2da      	uxtb	r2, r3
 8000f4a:	4b03      	ldr	r3, [pc, #12]	; (8000f58 <NRF24_setPayloadSize+0x28>)
 8000f4c:	701a      	strb	r2, [r3, #0]
}
 8000f4e:	bf00      	nop
 8000f50:	3714      	adds	r7, #20
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr
 8000f58:	20000218 	.word	0x20000218

08000f5c <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
	return payload_size;
 8000f60:	4b02      	ldr	r3, [pc, #8]	; (8000f6c <NRF24_getPayloadSize+0x10>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bc80      	pop	{r7}
 8000f6a:	4770      	bx	lr
 8000f6c:	20000218 	.word	0x20000218

08000f70 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8000f74:	2060      	movs	r0, #96	; 0x60
 8000f76:	f7ff fd49 	bl	8000a0c <NRF24_read_register>
 8000f7a:	4603      	mov	r3, r0
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <NRF24_enableAckPayload>:
//25. Enable payload on Ackknowledge packet
void NRF24_enableAckPayload(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
	//Need to enable dynamic payload and Ack payload together
	 NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8000f84:	201d      	movs	r0, #29
 8000f86:	f7ff fd41 	bl	8000a0c <NRF24_read_register>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	f043 0306 	orr.w	r3, r3, #6
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	4619      	mov	r1, r3
 8000f94:	201d      	movs	r0, #29
 8000f96:	f7ff fd89 	bl	8000aac <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8000f9a:	201d      	movs	r0, #29
 8000f9c:	f7ff fd36 	bl	8000a0c <NRF24_read_register>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d10c      	bne.n	8000fc0 <NRF24_enableAckPayload+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8000fa6:	f000 f991 	bl	80012cc <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8000faa:	201d      	movs	r0, #29
 8000fac:	f7ff fd2e 	bl	8000a0c <NRF24_read_register>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	f043 0306 	orr.w	r3, r3, #6
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	4619      	mov	r1, r3
 8000fba:	201d      	movs	r0, #29
 8000fbc:	f7ff fd76 	bl	8000aac <NRF24_write_register>
	}
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8000fc0:	201c      	movs	r0, #28
 8000fc2:	f7ff fd23 	bl	8000a0c <NRF24_read_register>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	f043 0303 	orr.w	r3, r3, #3
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	4619      	mov	r1, r3
 8000fd0:	201c      	movs	r0, #28
 8000fd2:	f7ff fd6b 	bl	8000aac <NRF24_write_register>
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <NRF24_enableDynamicPayloads>:
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8000fe0:	201d      	movs	r0, #29
 8000fe2:	f7ff fd13 	bl	8000a0c <NRF24_read_register>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	f043 0304 	orr.w	r3, r3, #4
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	4619      	mov	r1, r3
 8000ff0:	201d      	movs	r0, #29
 8000ff2:	f7ff fd5b 	bl	8000aac <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8000ff6:	201d      	movs	r0, #29
 8000ff8:	f7ff fd08 	bl	8000a0c <NRF24_read_register>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d10c      	bne.n	800101c <NRF24_enableDynamicPayloads+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8001002:	f000 f963 	bl	80012cc <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8001006:	201d      	movs	r0, #29
 8001008:	f7ff fd00 	bl	8000a0c <NRF24_read_register>
 800100c:	4603      	mov	r3, r0
 800100e:	f043 0304 	orr.w	r3, r3, #4
 8001012:	b2db      	uxtb	r3, r3
 8001014:	4619      	mov	r1, r3
 8001016:	201d      	movs	r0, #29
 8001018:	f7ff fd48 	bl	8000aac <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 800101c:	201c      	movs	r0, #28
 800101e:	f7ff fcf5 	bl	8000a0c <NRF24_read_register>
 8001022:	4603      	mov	r3, r0
 8001024:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8001028:	b2db      	uxtb	r3, r3
 800102a:	4619      	mov	r1, r3
 800102c:	201c      	movs	r0, #28
 800102e:	f7ff fd3d 	bl	8000aac <NRF24_write_register>
  dynamic_payloads_enabled = true;
 8001032:	4b02      	ldr	r3, [pc, #8]	; (800103c <NRF24_enableDynamicPayloads+0x60>)
 8001034:	2201      	movs	r2, #1
 8001036:	701a      	strb	r2, [r3, #0]
	
}
 8001038:	bf00      	nop
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000219 	.word	0x20000219

08001040 <NRF24_disableDynamicPayloads>:
void NRF24_disableDynamicPayloads(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8001044:	201d      	movs	r0, #29
 8001046:	f7ff fce1 	bl	8000a0c <NRF24_read_register>
 800104a:	4603      	mov	r3, r0
 800104c:	f023 0304 	bic.w	r3, r3, #4
 8001050:	b2db      	uxtb	r3, r3
 8001052:	4619      	mov	r1, r3
 8001054:	201d      	movs	r0, #29
 8001056:	f7ff fd29 	bl	8000aac <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 800105a:	2100      	movs	r1, #0
 800105c:	201c      	movs	r0, #28
 800105e:	f7ff fd25 	bl	8000aac <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8001062:	4b02      	ldr	r3, [pc, #8]	; (800106c <NRF24_disableDynamicPayloads+0x2c>)
 8001064:	2200      	movs	r2, #0
 8001066:	701a      	strb	r2, [r3, #0]
}
 8001068:	bf00      	nop
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000219 	.word	0x20000219

08001070 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d004      	beq.n	800108a <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8001080:	213f      	movs	r1, #63	; 0x3f
 8001082:	2001      	movs	r0, #1
 8001084:	f7ff fd12 	bl	8000aac <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8001088:	e003      	b.n	8001092 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 800108a:	2100      	movs	r1, #0
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff fd0d 	bl	8000aac <NRF24_write_register>
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b084      	sub	sp, #16
 800109e:	af00      	add	r7, sp, #0
 80010a0:	4603      	mov	r3, r0
 80010a2:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80010a4:	2006      	movs	r0, #6
 80010a6:	f7ff fcb1 	bl	8000a0c <NRF24_read_register>
 80010aa:	4603      	mov	r3, r0
 80010ac:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80010ae:	7bfb      	ldrb	r3, [r7, #15]
 80010b0:	f023 0306 	bic.w	r3, r3, #6
 80010b4:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	2b03      	cmp	r3, #3
 80010ba:	d104      	bne.n	80010c6 <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
 80010be:	f043 0306 	orr.w	r3, r3, #6
 80010c2:	73fb      	strb	r3, [r7, #15]
 80010c4:	e019      	b.n	80010fa <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d104      	bne.n	80010d6 <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
 80010ce:	f043 0304 	orr.w	r3, r3, #4
 80010d2:	73fb      	strb	r3, [r7, #15]
 80010d4:	e011      	b.n	80010fa <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d104      	bne.n	80010e6 <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
 80010de:	f043 0302 	orr.w	r3, r3, #2
 80010e2:	73fb      	strb	r3, [r7, #15]
 80010e4:	e009      	b.n	80010fa <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d006      	beq.n	80010fa <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	2b04      	cmp	r3, #4
 80010f0:	d103      	bne.n	80010fa <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
 80010f4:	f043 0306 	orr.w	r3, r3, #6
 80010f8:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 80010fa:	7bfb      	ldrb	r3, [r7, #15]
 80010fc:	4619      	mov	r1, r3
 80010fe:	2006      	movs	r0, #6
 8001100:	f7ff fcd4 	bl	8000aac <NRF24_write_register>
}
 8001104:	bf00      	nop
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8001116:	2300      	movs	r3, #0
 8001118:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 800111a:	2006      	movs	r0, #6
 800111c:	f7ff fc76 	bl	8000a0c <NRF24_read_register>
 8001120:	4603      	mov	r3, r0
 8001122:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8001124:	4b1b      	ldr	r3, [pc, #108]	; (8001194 <NRF24_setDataRate+0x88>)
 8001126:	2200      	movs	r2, #0
 8001128:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 800112a:	7bbb      	ldrb	r3, [r7, #14]
 800112c:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8001130:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	2b02      	cmp	r3, #2
 8001136:	d107      	bne.n	8001148 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8001138:	4b16      	ldr	r3, [pc, #88]	; (8001194 <NRF24_setDataRate+0x88>)
 800113a:	2200      	movs	r2, #0
 800113c:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 800113e:	7bbb      	ldrb	r3, [r7, #14]
 8001140:	f043 0320 	orr.w	r3, r3, #32
 8001144:	73bb      	strb	r3, [r7, #14]
 8001146:	e00d      	b.n	8001164 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	2b01      	cmp	r3, #1
 800114c:	d107      	bne.n	800115e <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 800114e:	4b11      	ldr	r3, [pc, #68]	; (8001194 <NRF24_setDataRate+0x88>)
 8001150:	2201      	movs	r2, #1
 8001152:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8001154:	7bbb      	ldrb	r3, [r7, #14]
 8001156:	f043 0308 	orr.w	r3, r3, #8
 800115a:	73bb      	strb	r3, [r7, #14]
 800115c:	e002      	b.n	8001164 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 800115e:	4b0d      	ldr	r3, [pc, #52]	; (8001194 <NRF24_setDataRate+0x88>)
 8001160:	2200      	movs	r2, #0
 8001162:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8001164:	7bbb      	ldrb	r3, [r7, #14]
 8001166:	4619      	mov	r1, r3
 8001168:	2006      	movs	r0, #6
 800116a:	f7ff fc9f 	bl	8000aac <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 800116e:	2006      	movs	r0, #6
 8001170:	f7ff fc4c 	bl	8000a0c <NRF24_read_register>
 8001174:	4603      	mov	r3, r0
 8001176:	461a      	mov	r2, r3
 8001178:	7bbb      	ldrb	r3, [r7, #14]
 800117a:	4293      	cmp	r3, r2
 800117c:	d102      	bne.n	8001184 <NRF24_setDataRate+0x78>
  {
    result = true;
 800117e:	2301      	movs	r3, #1
 8001180:	73fb      	strb	r3, [r7, #15]
 8001182:	e002      	b.n	800118a <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8001184:	4b03      	ldr	r3, [pc, #12]	; (8001194 <NRF24_setDataRate+0x88>)
 8001186:	2200      	movs	r2, #0
 8001188:	701a      	strb	r2, [r3, #0]
  }

  return result;
 800118a:	7bfb      	ldrb	r3, [r7, #15]
}
 800118c:	4618      	mov	r0, r3
 800118e:	3710      	adds	r7, #16
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	2000021a 	.word	0x2000021a

08001198 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 80011a2:	2000      	movs	r0, #0
 80011a4:	f7ff fc32 	bl	8000a0c <NRF24_read_register>
 80011a8:	4603      	mov	r3, r0
 80011aa:	f023 030c 	bic.w	r3, r3, #12
 80011ae:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d00f      	beq.n	80011d6 <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d104      	bne.n	80011c6 <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
 80011be:	f043 0308 	orr.w	r3, r3, #8
 80011c2:	73fb      	strb	r3, [r7, #15]
 80011c4:	e007      	b.n	80011d6 <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 80011c6:	7bfb      	ldrb	r3, [r7, #15]
 80011c8:	f043 0308 	orr.w	r3, r3, #8
 80011cc:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 80011ce:	7bfb      	ldrb	r3, [r7, #15]
 80011d0:	f043 0304 	orr.w	r3, r3, #4
 80011d4:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 80011d6:	7bfb      	ldrb	r3, [r7, #15]
 80011d8:	4619      	mov	r1, r3
 80011da:	2000      	movs	r0, #0
 80011dc:	f7ff fc66 	bl	8000aac <NRF24_write_register>
}
 80011e0:	bf00      	nop
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 80011ec:	2000      	movs	r0, #0
 80011ee:	f7ff fc0d 	bl	8000a0c <NRF24_read_register>
 80011f2:	4603      	mov	r3, r0
 80011f4:	f023 0302 	bic.w	r3, r3, #2
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	4619      	mov	r1, r3
 80011fc:	2000      	movs	r0, #0
 80011fe:	f7ff fc55 	bl	8000aac <NRF24_write_register>
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}

08001206 <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	b084      	sub	sp, #16
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 800120e:	f7ff fcd7 	bl	8000bc0 <NRF24_get_status>
 8001212:	4603      	mov	r3, r0
 8001214:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8001216:	7bfb      	ldrb	r3, [r7, #15]
 8001218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800121c:	2b00      	cmp	r3, #0
 800121e:	bf14      	ite	ne
 8001220:	2301      	movne	r3, #1
 8001222:	2300      	moveq	r3, #0
 8001224:	73bb      	strb	r3, [r7, #14]

  if (result)
 8001226:	7bbb      	ldrb	r3, [r7, #14]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d017      	beq.n	800125c <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d007      	beq.n	8001242 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8001232:	7bfb      	ldrb	r3, [r7, #15]
 8001234:	085b      	lsrs	r3, r3, #1
 8001236:	b2db      	uxtb	r3, r3
 8001238:	f003 0307 	and.w	r3, r3, #7
 800123c:	b2da      	uxtb	r2, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8001242:	2140      	movs	r1, #64	; 0x40
 8001244:	2007      	movs	r0, #7
 8001246:	f7ff fc31 	bl	8000aac <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 800124a:	7bfb      	ldrb	r3, [r7, #15]
 800124c:	f003 0320 	and.w	r3, r3, #32
 8001250:	2b00      	cmp	r3, #0
 8001252:	d003      	beq.n	800125c <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8001254:	2120      	movs	r1, #32
 8001256:	2007      	movs	r0, #7
 8001258:	f7ff fc28 	bl	8000aac <NRF24_write_register>
    }
  }
  return result;
 800125c:	7bbb      	ldrb	r3, [r7, #14]
}
 800125e:	4618      	mov	r0, r3
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <NRF24_writeAckPayload>:
  NRF24_DelayMicroSeconds(15);
  NRF24_ce(0);
}
//41. Write acknowledge payload
void NRF24_writeAckPayload(uint8_t pipe, const void* buf, uint8_t len)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	b084      	sub	sp, #16
 800126a:	af00      	add	r7, sp, #0
 800126c:	4603      	mov	r3, r0
 800126e:	6039      	str	r1, [r7, #0]
 8001270:	71fb      	strb	r3, [r7, #7]
 8001272:	4613      	mov	r3, r2
 8001274:	71bb      	strb	r3, [r7, #6]
	const uint8_t* current = (uint8_t *)buf;
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	60fb      	str	r3, [r7, #12]
	const uint8_t max_payload_size = 32;
 800127a:	2320      	movs	r3, #32
 800127c:	72fb      	strb	r3, [r7, #11]
  uint8_t data_len = MIN(len,max_payload_size);
 800127e:	7afa      	ldrb	r2, [r7, #11]
 8001280:	79bb      	ldrb	r3, [r7, #6]
 8001282:	4293      	cmp	r3, r2
 8001284:	bf28      	it	cs
 8001286:	4613      	movcs	r3, r2
 8001288:	72bb      	strb	r3, [r7, #10]
	
  NRF24_csn(0);
 800128a:	2000      	movs	r0, #0
 800128c:	f7ff fb7e 	bl	800098c <NRF24_csn>
	NRF24_write_registerN(CMD_W_ACK_PAYLOAD | ( pipe & 0x7 ) , current, data_len);
 8001290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001294:	f003 0307 	and.w	r3, r3, #7
 8001298:	b25b      	sxtb	r3, r3
 800129a:	f063 0357 	orn	r3, r3, #87	; 0x57
 800129e:	b25b      	sxtb	r3, r3
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	7aba      	ldrb	r2, [r7, #10]
 80012a4:	68f9      	ldr	r1, [r7, #12]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff fc22 	bl	8000af0 <NRF24_write_registerN>
  NRF24_csn(1);
 80012ac:	2001      	movs	r0, #1
 80012ae:	f7ff fb6d 	bl	800098c <NRF24_csn>
}
 80012b2:	bf00      	nop
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 80012be:	2170      	movs	r1, #112	; 0x70
 80012c0:	2007      	movs	r0, #7
 80012c2:	f7ff fbf3 	bl	8000aac <NRF24_write_register>
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
	...

080012cc <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80012d2:	2000      	movs	r0, #0
 80012d4:	f7ff fb5a 	bl	800098c <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 80012d8:	2350      	movs	r3, #80	; 0x50
 80012da:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 80012dc:	2373      	movs	r3, #115	; 0x73
 80012de:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 80012e0:	1d39      	adds	r1, r7, #4
 80012e2:	2364      	movs	r3, #100	; 0x64
 80012e4:	2202      	movs	r2, #2
 80012e6:	4805      	ldr	r0, [pc, #20]	; (80012fc <NRF24_ACTIVATE_cmd+0x30>)
 80012e8:	f006 f86d 	bl	80073c6 <HAL_SPI_Transmit>
	NRF24_csn(1);
 80012ec:	2001      	movs	r0, #1
 80012ee:	f7ff fb4d 	bl	800098c <NRF24_csn>
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20000224 	.word	0x20000224

08001300 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8001300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001302:	b0a1      	sub	sp, #132	; 0x84
 8001304:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001306:	f107 0308 	add.w	r3, r7, #8
 800130a:	4ab6      	ldr	r2, [pc, #728]	; (80015e4 <printRadioSettings+0x2e4>)
 800130c:	461c      	mov	r4, r3
 800130e:	4615      	mov	r5, r2
 8001310:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001312:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001314:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001316:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001318:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800131a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800131c:	682b      	ldr	r3, [r5, #0]
 800131e:	461a      	mov	r2, r3
 8001320:	8022      	strh	r2, [r4, #0]
 8001322:	3402      	adds	r4, #2
 8001324:	0c1b      	lsrs	r3, r3, #16
 8001326:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001328:	f107 0308 	add.w	r3, r7, #8
 800132c:	4618      	mov	r0, r3
 800132e:	f7fe ff0f 	bl	8000150 <strlen>
 8001332:	4603      	mov	r3, r0
 8001334:	b29a      	uxth	r2, r3
 8001336:	f107 0108 	add.w	r1, r7, #8
 800133a:	230a      	movs	r3, #10
 800133c:	48aa      	ldr	r0, [pc, #680]	; (80015e8 <printRadioSettings+0x2e8>)
 800133e:	f007 f868 	bl	8008412 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8001342:	2000      	movs	r0, #0
 8001344:	f7ff fb62 	bl	8000a0c <NRF24_read_register>
 8001348:	4603      	mov	r3, r0
 800134a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 800134e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001352:	f003 0308 	and.w	r3, r3, #8
 8001356:	2b00      	cmp	r3, #0
 8001358:	d020      	beq.n	800139c <printRadioSettings+0x9c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 800135a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800135e:	f003 0304 	and.w	r3, r3, #4
 8001362:	2b00      	cmp	r3, #0
 8001364:	d00b      	beq.n	800137e <printRadioSettings+0x7e>
 8001366:	f107 0308 	add.w	r3, r7, #8
 800136a:	4aa0      	ldr	r2, [pc, #640]	; (80015ec <printRadioSettings+0x2ec>)
 800136c:	461c      	mov	r4, r3
 800136e:	4615      	mov	r5, r2
 8001370:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001372:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001374:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001378:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800137c:	e017      	b.n	80013ae <printRadioSettings+0xae>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 800137e:	f107 0308 	add.w	r3, r7, #8
 8001382:	4a9b      	ldr	r2, [pc, #620]	; (80015f0 <printRadioSettings+0x2f0>)
 8001384:	461c      	mov	r4, r3
 8001386:	4615      	mov	r5, r2
 8001388:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800138a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800138c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001390:	c403      	stmia	r4!, {r0, r1}
 8001392:	8022      	strh	r2, [r4, #0]
 8001394:	3402      	adds	r4, #2
 8001396:	0c13      	lsrs	r3, r2, #16
 8001398:	7023      	strb	r3, [r4, #0]
 800139a:	e008      	b.n	80013ae <printRadioSettings+0xae>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 800139c:	f107 0308 	add.w	r3, r7, #8
 80013a0:	4a94      	ldr	r2, [pc, #592]	; (80015f4 <printRadioSettings+0x2f4>)
 80013a2:	461c      	mov	r4, r3
 80013a4:	4615      	mov	r5, r2
 80013a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013aa:	682b      	ldr	r3, [r5, #0]
 80013ac:	6023      	str	r3, [r4, #0]
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80013ae:	f107 0308 	add.w	r3, r7, #8
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7fe fecc 	bl	8000150 <strlen>
 80013b8:	4603      	mov	r3, r0
 80013ba:	b29a      	uxth	r2, r3
 80013bc:	f107 0108 	add.w	r1, r7, #8
 80013c0:	230a      	movs	r3, #10
 80013c2:	4889      	ldr	r0, [pc, #548]	; (80015e8 <printRadioSettings+0x2e8>)
 80013c4:	f007 f825 	bl	8008412 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 80013c8:	2001      	movs	r0, #1
 80013ca:	f7ff fb1f 	bl	8000a0c <NRF24_read_register>
 80013ce:	4603      	mov	r3, r0
 80013d0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80013d4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013d8:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80013dc:	2b00      	cmp	r3, #0
 80013de:	bfcc      	ite	gt
 80013e0:	2301      	movgt	r3, #1
 80013e2:	2300      	movle	r3, #0
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80013e8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013ec:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	bfcc      	ite	gt
 80013f4:	2301      	movgt	r3, #1
 80013f6:	2300      	movle	r3, #0
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80013fc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001400:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001404:	2b00      	cmp	r3, #0
 8001406:	bfcc      	ite	gt
 8001408:	2301      	movgt	r3, #1
 800140a:	2300      	movle	r3, #0
 800140c:	b2db      	uxtb	r3, r3
 800140e:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001410:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001414:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001418:	2b00      	cmp	r3, #0
 800141a:	bfcc      	ite	gt
 800141c:	2301      	movgt	r3, #1
 800141e:	2300      	movle	r3, #0
 8001420:	b2db      	uxtb	r3, r3
 8001422:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001424:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001428:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800142c:	2b00      	cmp	r3, #0
 800142e:	bfcc      	ite	gt
 8001430:	2301      	movgt	r3, #1
 8001432:	2300      	movle	r3, #0
 8001434:	b2db      	uxtb	r3, r3
 8001436:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001438:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800143c:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001440:	2b00      	cmp	r3, #0
 8001442:	bfcc      	ite	gt
 8001444:	2301      	movgt	r3, #1
 8001446:	2300      	movle	r3, #0
 8001448:	b2db      	uxtb	r3, r3
 800144a:	f107 0008 	add.w	r0, r7, #8
 800144e:	9303      	str	r3, [sp, #12]
 8001450:	9402      	str	r4, [sp, #8]
 8001452:	9101      	str	r1, [sp, #4]
 8001454:	9200      	str	r2, [sp, #0]
 8001456:	4633      	mov	r3, r6
 8001458:	462a      	mov	r2, r5
 800145a:	4967      	ldr	r1, [pc, #412]	; (80015f8 <printRadioSettings+0x2f8>)
 800145c:	f00a fb1e 	bl	800ba9c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001460:	f107 0308 	add.w	r3, r7, #8
 8001464:	4618      	mov	r0, r3
 8001466:	f7fe fe73 	bl	8000150 <strlen>
 800146a:	4603      	mov	r3, r0
 800146c:	b29a      	uxth	r2, r3
 800146e:	f107 0108 	add.w	r1, r7, #8
 8001472:	230a      	movs	r3, #10
 8001474:	485c      	ldr	r0, [pc, #368]	; (80015e8 <printRadioSettings+0x2e8>)
 8001476:	f006 ffcc 	bl	8008412 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 800147a:	2002      	movs	r0, #2
 800147c:	f7ff fac6 	bl	8000a0c <NRF24_read_register>
 8001480:	4603      	mov	r3, r0
 8001482:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001486:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800148a:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800148e:	2b00      	cmp	r3, #0
 8001490:	bfcc      	ite	gt
 8001492:	2301      	movgt	r3, #1
 8001494:	2300      	movle	r3, #0
 8001496:	b2db      	uxtb	r3, r3
 8001498:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800149a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800149e:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	bfcc      	ite	gt
 80014a6:	2301      	movgt	r3, #1
 80014a8:	2300      	movle	r3, #0
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80014ae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80014b2:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	bfcc      	ite	gt
 80014ba:	2301      	movgt	r3, #1
 80014bc:	2300      	movle	r3, #0
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80014c2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80014c6:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	bfcc      	ite	gt
 80014ce:	2301      	movgt	r3, #1
 80014d0:	2300      	movle	r3, #0
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80014d6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80014da:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80014de:	2b00      	cmp	r3, #0
 80014e0:	bfcc      	ite	gt
 80014e2:	2301      	movgt	r3, #1
 80014e4:	2300      	movle	r3, #0
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80014ea:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80014ee:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	bfcc      	ite	gt
 80014f6:	2301      	movgt	r3, #1
 80014f8:	2300      	movle	r3, #0
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	f107 0008 	add.w	r0, r7, #8
 8001500:	9303      	str	r3, [sp, #12]
 8001502:	9402      	str	r4, [sp, #8]
 8001504:	9101      	str	r1, [sp, #4]
 8001506:	9200      	str	r2, [sp, #0]
 8001508:	4633      	mov	r3, r6
 800150a:	462a      	mov	r2, r5
 800150c:	493b      	ldr	r1, [pc, #236]	; (80015fc <printRadioSettings+0x2fc>)
 800150e:	f00a fac5 	bl	800ba9c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001512:	f107 0308 	add.w	r3, r7, #8
 8001516:	4618      	mov	r0, r3
 8001518:	f7fe fe1a 	bl	8000150 <strlen>
 800151c:	4603      	mov	r3, r0
 800151e:	b29a      	uxth	r2, r3
 8001520:	f107 0108 	add.w	r1, r7, #8
 8001524:	230a      	movs	r3, #10
 8001526:	4830      	ldr	r0, [pc, #192]	; (80015e8 <printRadioSettings+0x2e8>)
 8001528:	f006 ff73 	bl	8008412 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 800152c:	2003      	movs	r0, #3
 800152e:	f7ff fa6d 	bl	8000a0c <NRF24_read_register>
 8001532:	4603      	mov	r3, r0
 8001534:	f003 0303 	and.w	r3, r3, #3
 8001538:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 800153c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001540:	3302      	adds	r3, #2
 8001542:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8001546:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800154a:	f107 0308 	add.w	r3, r7, #8
 800154e:	492c      	ldr	r1, [pc, #176]	; (8001600 <printRadioSettings+0x300>)
 8001550:	4618      	mov	r0, r3
 8001552:	f00a faa3 	bl	800ba9c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001556:	f107 0308 	add.w	r3, r7, #8
 800155a:	4618      	mov	r0, r3
 800155c:	f7fe fdf8 	bl	8000150 <strlen>
 8001560:	4603      	mov	r3, r0
 8001562:	b29a      	uxth	r2, r3
 8001564:	f107 0108 	add.w	r1, r7, #8
 8001568:	230a      	movs	r3, #10
 800156a:	481f      	ldr	r0, [pc, #124]	; (80015e8 <printRadioSettings+0x2e8>)
 800156c:	f006 ff51 	bl	8008412 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8001570:	2005      	movs	r0, #5
 8001572:	f7ff fa4b 	bl	8000a0c <NRF24_read_register>
 8001576:	4603      	mov	r3, r0
 8001578:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 800157c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001580:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001584:	f107 0308 	add.w	r3, r7, #8
 8001588:	491e      	ldr	r1, [pc, #120]	; (8001604 <printRadioSettings+0x304>)
 800158a:	4618      	mov	r0, r3
 800158c:	f00a fa86 	bl	800ba9c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001590:	f107 0308 	add.w	r3, r7, #8
 8001594:	4618      	mov	r0, r3
 8001596:	f7fe fddb 	bl	8000150 <strlen>
 800159a:	4603      	mov	r3, r0
 800159c:	b29a      	uxth	r2, r3
 800159e:	f107 0108 	add.w	r1, r7, #8
 80015a2:	230a      	movs	r3, #10
 80015a4:	4810      	ldr	r0, [pc, #64]	; (80015e8 <printRadioSettings+0x2e8>)
 80015a6:	f006 ff34 	bl	8008412 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 80015aa:	2006      	movs	r0, #6
 80015ac:	f7ff fa2e 	bl	8000a0c <NRF24_read_register>
 80015b0:	4603      	mov	r3, r0
 80015b2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 80015b6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015ba:	f003 0308 	and.w	r3, r3, #8
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d024      	beq.n	800160c <printRadioSettings+0x30c>
 80015c2:	f107 0308 	add.w	r3, r7, #8
 80015c6:	4a10      	ldr	r2, [pc, #64]	; (8001608 <printRadioSettings+0x308>)
 80015c8:	461c      	mov	r4, r3
 80015ca:	4615      	mov	r5, r2
 80015cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015d0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80015d4:	6020      	str	r0, [r4, #0]
 80015d6:	3404      	adds	r4, #4
 80015d8:	8021      	strh	r1, [r4, #0]
 80015da:	3402      	adds	r4, #2
 80015dc:	0c0b      	lsrs	r3, r1, #16
 80015de:	7023      	strb	r3, [r4, #0]
 80015e0:	e023      	b.n	800162a <printRadioSettings+0x32a>
 80015e2:	bf00      	nop
 80015e4:	0800c2c4 	.word	0x0800c2c4
 80015e8:	2000027c 	.word	0x2000027c
 80015ec:	0800c2f8 	.word	0x0800c2f8
 80015f0:	0800c314 	.word	0x0800c314
 80015f4:	0800c330 	.word	0x0800c330
 80015f8:	0800c344 	.word	0x0800c344
 80015fc:	0800c388 	.word	0x0800c388
 8001600:	0800c3d4 	.word	0x0800c3d4
 8001604:	0800c3f0 	.word	0x0800c3f0
 8001608:	0800c404 	.word	0x0800c404
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 800160c:	f107 0308 	add.w	r3, r7, #8
 8001610:	4a29      	ldr	r2, [pc, #164]	; (80016b8 <printRadioSettings+0x3b8>)
 8001612:	461c      	mov	r4, r3
 8001614:	4615      	mov	r5, r2
 8001616:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001618:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800161a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800161e:	6020      	str	r0, [r4, #0]
 8001620:	3404      	adds	r4, #4
 8001622:	8021      	strh	r1, [r4, #0]
 8001624:	3402      	adds	r4, #2
 8001626:	0c0b      	lsrs	r3, r1, #16
 8001628:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800162a:	f107 0308 	add.w	r3, r7, #8
 800162e:	4618      	mov	r0, r3
 8001630:	f7fe fd8e 	bl	8000150 <strlen>
 8001634:	4603      	mov	r3, r0
 8001636:	b29a      	uxth	r2, r3
 8001638:	f107 0108 	add.w	r1, r7, #8
 800163c:	230a      	movs	r3, #10
 800163e:	481f      	ldr	r0, [pc, #124]	; (80016bc <printRadioSettings+0x3bc>)
 8001640:	f006 fee7 	bl	8008412 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8001644:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001648:	f003 0306 	and.w	r3, r3, #6
 800164c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8001650:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001654:	085b      	lsrs	r3, r3, #1
 8001656:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 800165a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800165e:	2b00      	cmp	r3, #0
 8001660:	d109      	bne.n	8001676 <printRadioSettings+0x376>
 8001662:	f107 0308 	add.w	r3, r7, #8
 8001666:	4a16      	ldr	r2, [pc, #88]	; (80016c0 <printRadioSettings+0x3c0>)
 8001668:	461c      	mov	r4, r3
 800166a:	4615      	mov	r5, r2
 800166c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800166e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001670:	682b      	ldr	r3, [r5, #0]
 8001672:	6023      	str	r3, [r4, #0]
 8001674:	e037      	b.n	80016e6 <printRadioSettings+0x3e6>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8001676:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800167a:	2b01      	cmp	r3, #1
 800167c:	d109      	bne.n	8001692 <printRadioSettings+0x392>
 800167e:	f107 0308 	add.w	r3, r7, #8
 8001682:	4a10      	ldr	r2, [pc, #64]	; (80016c4 <printRadioSettings+0x3c4>)
 8001684:	461c      	mov	r4, r3
 8001686:	4615      	mov	r5, r2
 8001688:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800168a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800168c:	682b      	ldr	r3, [r5, #0]
 800168e:	6023      	str	r3, [r4, #0]
 8001690:	e029      	b.n	80016e6 <printRadioSettings+0x3e6>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8001692:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001696:	2b02      	cmp	r3, #2
 8001698:	d118      	bne.n	80016cc <printRadioSettings+0x3cc>
 800169a:	f107 0308 	add.w	r3, r7, #8
 800169e:	4a0a      	ldr	r2, [pc, #40]	; (80016c8 <printRadioSettings+0x3c8>)
 80016a0:	461c      	mov	r4, r3
 80016a2:	4615      	mov	r5, r2
 80016a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016a8:	682b      	ldr	r3, [r5, #0]
 80016aa:	461a      	mov	r2, r3
 80016ac:	8022      	strh	r2, [r4, #0]
 80016ae:	3402      	adds	r4, #2
 80016b0:	0c1b      	lsrs	r3, r3, #16
 80016b2:	7023      	strb	r3, [r4, #0]
 80016b4:	e017      	b.n	80016e6 <printRadioSettings+0x3e6>
 80016b6:	bf00      	nop
 80016b8:	0800c41c 	.word	0x0800c41c
 80016bc:	2000027c 	.word	0x2000027c
 80016c0:	0800c434 	.word	0x0800c434
 80016c4:	0800c448 	.word	0x0800c448
 80016c8:	0800c45c 	.word	0x0800c45c
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 80016cc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016d0:	2b03      	cmp	r3, #3
 80016d2:	d108      	bne.n	80016e6 <printRadioSettings+0x3e6>
 80016d4:	f107 0308 	add.w	r3, r7, #8
 80016d8:	4ad7      	ldr	r2, [pc, #860]	; (8001a38 <printRadioSettings+0x738>)
 80016da:	461c      	mov	r4, r3
 80016dc:	4615      	mov	r5, r2
 80016de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016e2:	682b      	ldr	r3, [r5, #0]
 80016e4:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016e6:	f107 0308 	add.w	r3, r7, #8
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7fe fd30 	bl	8000150 <strlen>
 80016f0:	4603      	mov	r3, r0
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	f107 0108 	add.w	r1, r7, #8
 80016f8:	230a      	movs	r3, #10
 80016fa:	48d0      	ldr	r0, [pc, #832]	; (8001a3c <printRadioSettings+0x73c>)
 80016fc:	f006 fe89 	bl	8008412 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8001700:	463b      	mov	r3, r7
 8001702:	2205      	movs	r2, #5
 8001704:	4619      	mov	r1, r3
 8001706:	200a      	movs	r0, #10
 8001708:	f7ff f9a8 	bl	8000a5c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800170c:	793b      	ldrb	r3, [r7, #4]
 800170e:	461c      	mov	r4, r3
 8001710:	78fb      	ldrb	r3, [r7, #3]
 8001712:	461d      	mov	r5, r3
 8001714:	78bb      	ldrb	r3, [r7, #2]
 8001716:	787a      	ldrb	r2, [r7, #1]
 8001718:	7839      	ldrb	r1, [r7, #0]
 800171a:	f107 0008 	add.w	r0, r7, #8
 800171e:	9102      	str	r1, [sp, #8]
 8001720:	9201      	str	r2, [sp, #4]
 8001722:	9300      	str	r3, [sp, #0]
 8001724:	462b      	mov	r3, r5
 8001726:	4622      	mov	r2, r4
 8001728:	49c5      	ldr	r1, [pc, #788]	; (8001a40 <printRadioSettings+0x740>)
 800172a:	f00a f9b7 	bl	800ba9c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800172e:	f107 0308 	add.w	r3, r7, #8
 8001732:	4618      	mov	r0, r3
 8001734:	f7fe fd0c 	bl	8000150 <strlen>
 8001738:	4603      	mov	r3, r0
 800173a:	b29a      	uxth	r2, r3
 800173c:	f107 0108 	add.w	r1, r7, #8
 8001740:	230a      	movs	r3, #10
 8001742:	48be      	ldr	r0, [pc, #760]	; (8001a3c <printRadioSettings+0x73c>)
 8001744:	f006 fe65 	bl	8008412 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8001748:	463b      	mov	r3, r7
 800174a:	2205      	movs	r2, #5
 800174c:	4619      	mov	r1, r3
 800174e:	200b      	movs	r0, #11
 8001750:	f7ff f984 	bl	8000a5c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001754:	793b      	ldrb	r3, [r7, #4]
 8001756:	461c      	mov	r4, r3
 8001758:	78fb      	ldrb	r3, [r7, #3]
 800175a:	461d      	mov	r5, r3
 800175c:	78bb      	ldrb	r3, [r7, #2]
 800175e:	787a      	ldrb	r2, [r7, #1]
 8001760:	7839      	ldrb	r1, [r7, #0]
 8001762:	f107 0008 	add.w	r0, r7, #8
 8001766:	9102      	str	r1, [sp, #8]
 8001768:	9201      	str	r2, [sp, #4]
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	462b      	mov	r3, r5
 800176e:	4622      	mov	r2, r4
 8001770:	49b4      	ldr	r1, [pc, #720]	; (8001a44 <printRadioSettings+0x744>)
 8001772:	f00a f993 	bl	800ba9c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001776:	f107 0308 	add.w	r3, r7, #8
 800177a:	4618      	mov	r0, r3
 800177c:	f7fe fce8 	bl	8000150 <strlen>
 8001780:	4603      	mov	r3, r0
 8001782:	b29a      	uxth	r2, r3
 8001784:	f107 0108 	add.w	r1, r7, #8
 8001788:	230a      	movs	r3, #10
 800178a:	48ac      	ldr	r0, [pc, #688]	; (8001a3c <printRadioSettings+0x73c>)
 800178c:	f006 fe41 	bl	8008412 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 8001790:	463b      	mov	r3, r7
 8001792:	2201      	movs	r2, #1
 8001794:	4619      	mov	r1, r3
 8001796:	200c      	movs	r0, #12
 8001798:	f7ff f960 	bl	8000a5c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800179c:	783b      	ldrb	r3, [r7, #0]
 800179e:	461a      	mov	r2, r3
 80017a0:	f107 0308 	add.w	r3, r7, #8
 80017a4:	49a8      	ldr	r1, [pc, #672]	; (8001a48 <printRadioSettings+0x748>)
 80017a6:	4618      	mov	r0, r3
 80017a8:	f00a f978 	bl	800ba9c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80017ac:	f107 0308 	add.w	r3, r7, #8
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7fe fccd 	bl	8000150 <strlen>
 80017b6:	4603      	mov	r3, r0
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	f107 0108 	add.w	r1, r7, #8
 80017be:	230a      	movs	r3, #10
 80017c0:	489e      	ldr	r0, [pc, #632]	; (8001a3c <printRadioSettings+0x73c>)
 80017c2:	f006 fe26 	bl	8008412 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 80017c6:	463b      	mov	r3, r7
 80017c8:	2201      	movs	r2, #1
 80017ca:	4619      	mov	r1, r3
 80017cc:	200d      	movs	r0, #13
 80017ce:	f7ff f945 	bl	8000a5c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80017d2:	783b      	ldrb	r3, [r7, #0]
 80017d4:	461a      	mov	r2, r3
 80017d6:	f107 0308 	add.w	r3, r7, #8
 80017da:	499c      	ldr	r1, [pc, #624]	; (8001a4c <printRadioSettings+0x74c>)
 80017dc:	4618      	mov	r0, r3
 80017de:	f00a f95d 	bl	800ba9c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80017e2:	f107 0308 	add.w	r3, r7, #8
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7fe fcb2 	bl	8000150 <strlen>
 80017ec:	4603      	mov	r3, r0
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	f107 0108 	add.w	r1, r7, #8
 80017f4:	230a      	movs	r3, #10
 80017f6:	4891      	ldr	r0, [pc, #580]	; (8001a3c <printRadioSettings+0x73c>)
 80017f8:	f006 fe0b 	bl	8008412 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 80017fc:	463b      	mov	r3, r7
 80017fe:	2201      	movs	r2, #1
 8001800:	4619      	mov	r1, r3
 8001802:	200e      	movs	r0, #14
 8001804:	f7ff f92a 	bl	8000a5c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001808:	783b      	ldrb	r3, [r7, #0]
 800180a:	461a      	mov	r2, r3
 800180c:	f107 0308 	add.w	r3, r7, #8
 8001810:	498f      	ldr	r1, [pc, #572]	; (8001a50 <printRadioSettings+0x750>)
 8001812:	4618      	mov	r0, r3
 8001814:	f00a f942 	bl	800ba9c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001818:	f107 0308 	add.w	r3, r7, #8
 800181c:	4618      	mov	r0, r3
 800181e:	f7fe fc97 	bl	8000150 <strlen>
 8001822:	4603      	mov	r3, r0
 8001824:	b29a      	uxth	r2, r3
 8001826:	f107 0108 	add.w	r1, r7, #8
 800182a:	230a      	movs	r3, #10
 800182c:	4883      	ldr	r0, [pc, #524]	; (8001a3c <printRadioSettings+0x73c>)
 800182e:	f006 fdf0 	bl	8008412 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8001832:	463b      	mov	r3, r7
 8001834:	2201      	movs	r2, #1
 8001836:	4619      	mov	r1, r3
 8001838:	200f      	movs	r0, #15
 800183a:	f7ff f90f 	bl	8000a5c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800183e:	783b      	ldrb	r3, [r7, #0]
 8001840:	461a      	mov	r2, r3
 8001842:	f107 0308 	add.w	r3, r7, #8
 8001846:	4983      	ldr	r1, [pc, #524]	; (8001a54 <printRadioSettings+0x754>)
 8001848:	4618      	mov	r0, r3
 800184a:	f00a f927 	bl	800ba9c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800184e:	f107 0308 	add.w	r3, r7, #8
 8001852:	4618      	mov	r0, r3
 8001854:	f7fe fc7c 	bl	8000150 <strlen>
 8001858:	4603      	mov	r3, r0
 800185a:	b29a      	uxth	r2, r3
 800185c:	f107 0108 	add.w	r1, r7, #8
 8001860:	230a      	movs	r3, #10
 8001862:	4876      	ldr	r0, [pc, #472]	; (8001a3c <printRadioSettings+0x73c>)
 8001864:	f006 fdd5 	bl	8008412 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8001868:	463b      	mov	r3, r7
 800186a:	2205      	movs	r2, #5
 800186c:	4619      	mov	r1, r3
 800186e:	2010      	movs	r0, #16
 8001870:	f7ff f8f4 	bl	8000a5c <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001874:	793b      	ldrb	r3, [r7, #4]
 8001876:	461c      	mov	r4, r3
 8001878:	78fb      	ldrb	r3, [r7, #3]
 800187a:	461d      	mov	r5, r3
 800187c:	78bb      	ldrb	r3, [r7, #2]
 800187e:	787a      	ldrb	r2, [r7, #1]
 8001880:	7839      	ldrb	r1, [r7, #0]
 8001882:	f107 0008 	add.w	r0, r7, #8
 8001886:	9102      	str	r1, [sp, #8]
 8001888:	9201      	str	r2, [sp, #4]
 800188a:	9300      	str	r3, [sp, #0]
 800188c:	462b      	mov	r3, r5
 800188e:	4622      	mov	r2, r4
 8001890:	4971      	ldr	r1, [pc, #452]	; (8001a58 <printRadioSettings+0x758>)
 8001892:	f00a f903 	bl	800ba9c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001896:	f107 0308 	add.w	r3, r7, #8
 800189a:	4618      	mov	r0, r3
 800189c:	f7fe fc58 	bl	8000150 <strlen>
 80018a0:	4603      	mov	r3, r0
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	f107 0108 	add.w	r1, r7, #8
 80018a8:	230a      	movs	r3, #10
 80018aa:	4864      	ldr	r0, [pc, #400]	; (8001a3c <printRadioSettings+0x73c>)
 80018ac:	f006 fdb1 	bl	8008412 <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 80018b0:	2011      	movs	r0, #17
 80018b2:	f7ff f8ab 	bl	8000a0c <NRF24_read_register>
 80018b6:	4603      	mov	r3, r0
 80018b8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80018bc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80018c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018c4:	f107 0308 	add.w	r3, r7, #8
 80018c8:	4964      	ldr	r1, [pc, #400]	; (8001a5c <printRadioSettings+0x75c>)
 80018ca:	4618      	mov	r0, r3
 80018cc:	f00a f8e6 	bl	800ba9c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018d0:	f107 0308 	add.w	r3, r7, #8
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7fe fc3b 	bl	8000150 <strlen>
 80018da:	4603      	mov	r3, r0
 80018dc:	b29a      	uxth	r2, r3
 80018de:	f107 0108 	add.w	r1, r7, #8
 80018e2:	230a      	movs	r3, #10
 80018e4:	4855      	ldr	r0, [pc, #340]	; (8001a3c <printRadioSettings+0x73c>)
 80018e6:	f006 fd94 	bl	8008412 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 80018ea:	2012      	movs	r0, #18
 80018ec:	f7ff f88e 	bl	8000a0c <NRF24_read_register>
 80018f0:	4603      	mov	r3, r0
 80018f2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80018f6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80018fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018fe:	f107 0308 	add.w	r3, r7, #8
 8001902:	4957      	ldr	r1, [pc, #348]	; (8001a60 <printRadioSettings+0x760>)
 8001904:	4618      	mov	r0, r3
 8001906:	f00a f8c9 	bl	800ba9c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800190a:	f107 0308 	add.w	r3, r7, #8
 800190e:	4618      	mov	r0, r3
 8001910:	f7fe fc1e 	bl	8000150 <strlen>
 8001914:	4603      	mov	r3, r0
 8001916:	b29a      	uxth	r2, r3
 8001918:	f107 0108 	add.w	r1, r7, #8
 800191c:	230a      	movs	r3, #10
 800191e:	4847      	ldr	r0, [pc, #284]	; (8001a3c <printRadioSettings+0x73c>)
 8001920:	f006 fd77 	bl	8008412 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 8001924:	2013      	movs	r0, #19
 8001926:	f7ff f871 	bl	8000a0c <NRF24_read_register>
 800192a:	4603      	mov	r3, r0
 800192c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001930:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001934:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001938:	f107 0308 	add.w	r3, r7, #8
 800193c:	4949      	ldr	r1, [pc, #292]	; (8001a64 <printRadioSettings+0x764>)
 800193e:	4618      	mov	r0, r3
 8001940:	f00a f8ac 	bl	800ba9c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001944:	f107 0308 	add.w	r3, r7, #8
 8001948:	4618      	mov	r0, r3
 800194a:	f7fe fc01 	bl	8000150 <strlen>
 800194e:	4603      	mov	r3, r0
 8001950:	b29a      	uxth	r2, r3
 8001952:	f107 0108 	add.w	r1, r7, #8
 8001956:	230a      	movs	r3, #10
 8001958:	4838      	ldr	r0, [pc, #224]	; (8001a3c <printRadioSettings+0x73c>)
 800195a:	f006 fd5a 	bl	8008412 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 800195e:	2014      	movs	r0, #20
 8001960:	f7ff f854 	bl	8000a0c <NRF24_read_register>
 8001964:	4603      	mov	r3, r0
 8001966:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800196a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800196e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001972:	f107 0308 	add.w	r3, r7, #8
 8001976:	493c      	ldr	r1, [pc, #240]	; (8001a68 <printRadioSettings+0x768>)
 8001978:	4618      	mov	r0, r3
 800197a:	f00a f88f 	bl	800ba9c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800197e:	f107 0308 	add.w	r3, r7, #8
 8001982:	4618      	mov	r0, r3
 8001984:	f7fe fbe4 	bl	8000150 <strlen>
 8001988:	4603      	mov	r3, r0
 800198a:	b29a      	uxth	r2, r3
 800198c:	f107 0108 	add.w	r1, r7, #8
 8001990:	230a      	movs	r3, #10
 8001992:	482a      	ldr	r0, [pc, #168]	; (8001a3c <printRadioSettings+0x73c>)
 8001994:	f006 fd3d 	bl	8008412 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 8001998:	2015      	movs	r0, #21
 800199a:	f7ff f837 	bl	8000a0c <NRF24_read_register>
 800199e:	4603      	mov	r3, r0
 80019a0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80019a4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80019a8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019ac:	f107 0308 	add.w	r3, r7, #8
 80019b0:	492e      	ldr	r1, [pc, #184]	; (8001a6c <printRadioSettings+0x76c>)
 80019b2:	4618      	mov	r0, r3
 80019b4:	f00a f872 	bl	800ba9c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80019b8:	f107 0308 	add.w	r3, r7, #8
 80019bc:	4618      	mov	r0, r3
 80019be:	f7fe fbc7 	bl	8000150 <strlen>
 80019c2:	4603      	mov	r3, r0
 80019c4:	b29a      	uxth	r2, r3
 80019c6:	f107 0108 	add.w	r1, r7, #8
 80019ca:	230a      	movs	r3, #10
 80019cc:	481b      	ldr	r0, [pc, #108]	; (8001a3c <printRadioSettings+0x73c>)
 80019ce:	f006 fd20 	bl	8008412 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 80019d2:	2016      	movs	r0, #22
 80019d4:	f7ff f81a 	bl	8000a0c <NRF24_read_register>
 80019d8:	4603      	mov	r3, r0
 80019da:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80019de:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80019e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019e6:	f107 0308 	add.w	r3, r7, #8
 80019ea:	4921      	ldr	r1, [pc, #132]	; (8001a70 <printRadioSettings+0x770>)
 80019ec:	4618      	mov	r0, r3
 80019ee:	f00a f855 	bl	800ba9c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80019f2:	f107 0308 	add.w	r3, r7, #8
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7fe fbaa 	bl	8000150 <strlen>
 80019fc:	4603      	mov	r3, r0
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	f107 0108 	add.w	r1, r7, #8
 8001a04:	230a      	movs	r3, #10
 8001a06:	480d      	ldr	r0, [pc, #52]	; (8001a3c <printRadioSettings+0x73c>)
 8001a08:	f006 fd03 	bl	8008412 <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8001a0c:	201c      	movs	r0, #28
 8001a0e:	f7fe fffd 	bl	8000a0c <NRF24_read_register>
 8001a12:	4603      	mov	r3, r0
 8001a14:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001a18:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a1c:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	bfcc      	ite	gt
 8001a24:	2301      	movgt	r3, #1
 8001a26:	2300      	movle	r3, #0
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001a2c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	e01e      	b.n	8001a74 <printRadioSettings+0x774>
 8001a36:	bf00      	nop
 8001a38:	0800c470 	.word	0x0800c470
 8001a3c:	2000027c 	.word	0x2000027c
 8001a40:	0800c484 	.word	0x0800c484
 8001a44:	0800c4b4 	.word	0x0800c4b4
 8001a48:	0800c4e4 	.word	0x0800c4e4
 8001a4c:	0800c50c 	.word	0x0800c50c
 8001a50:	0800c534 	.word	0x0800c534
 8001a54:	0800c55c 	.word	0x0800c55c
 8001a58:	0800c584 	.word	0x0800c584
 8001a5c:	0800c5b0 	.word	0x0800c5b0
 8001a60:	0800c5cc 	.word	0x0800c5cc
 8001a64:	0800c5e8 	.word	0x0800c5e8
 8001a68:	0800c604 	.word	0x0800c604
 8001a6c:	0800c620 	.word	0x0800c620
 8001a70:	0800c63c 	.word	0x0800c63c
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	bfcc      	ite	gt
 8001a78:	2301      	movgt	r3, #1
 8001a7a:	2300      	movle	r3, #0
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001a80:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a84:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	bfcc      	ite	gt
 8001a8c:	2301      	movgt	r3, #1
 8001a8e:	2300      	movle	r3, #0
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001a94:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a98:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	bfcc      	ite	gt
 8001aa0:	2301      	movgt	r3, #1
 8001aa2:	2300      	movle	r3, #0
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001aa8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001aac:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	bfcc      	ite	gt
 8001ab4:	2301      	movgt	r3, #1
 8001ab6:	2300      	movle	r3, #0
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001abc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001ac0:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	bfcc      	ite	gt
 8001ac8:	2301      	movgt	r3, #1
 8001aca:	2300      	movle	r3, #0
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	f107 0008 	add.w	r0, r7, #8
 8001ad2:	9303      	str	r3, [sp, #12]
 8001ad4:	9402      	str	r4, [sp, #8]
 8001ad6:	9101      	str	r1, [sp, #4]
 8001ad8:	9200      	str	r2, [sp, #0]
 8001ada:	4633      	mov	r3, r6
 8001adc:	462a      	mov	r2, r5
 8001ade:	494a      	ldr	r1, [pc, #296]	; (8001c08 <printRadioSettings+0x908>)
 8001ae0:	f009 ffdc 	bl	800ba9c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001ae4:	f107 0308 	add.w	r3, r7, #8
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7fe fb31 	bl	8000150 <strlen>
 8001aee:	4603      	mov	r3, r0
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	f107 0108 	add.w	r1, r7, #8
 8001af6:	230a      	movs	r3, #10
 8001af8:	4844      	ldr	r0, [pc, #272]	; (8001c0c <printRadioSettings+0x90c>)
 8001afa:	f006 fc8a 	bl	8008412 <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8001afe:	201d      	movs	r0, #29
 8001b00:	f7fe ff84 	bl	8000a0c <NRF24_read_register>
 8001b04:	4603      	mov	r3, r0
 8001b06:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8001b0a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001b0e:	f003 0304 	and.w	r3, r3, #4
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d00c      	beq.n	8001b30 <printRadioSettings+0x830>
 8001b16:	f107 0308 	add.w	r3, r7, #8
 8001b1a:	4a3d      	ldr	r2, [pc, #244]	; (8001c10 <printRadioSettings+0x910>)
 8001b1c:	461c      	mov	r4, r3
 8001b1e:	4615      	mov	r5, r2
 8001b20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b24:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001b28:	6020      	str	r0, [r4, #0]
 8001b2a:	3404      	adds	r4, #4
 8001b2c:	8021      	strh	r1, [r4, #0]
 8001b2e:	e00e      	b.n	8001b4e <printRadioSettings+0x84e>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8001b30:	f107 0308 	add.w	r3, r7, #8
 8001b34:	4a37      	ldr	r2, [pc, #220]	; (8001c14 <printRadioSettings+0x914>)
 8001b36:	461c      	mov	r4, r3
 8001b38:	4615      	mov	r5, r2
 8001b3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b3e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001b42:	6020      	str	r0, [r4, #0]
 8001b44:	3404      	adds	r4, #4
 8001b46:	8021      	strh	r1, [r4, #0]
 8001b48:	3402      	adds	r4, #2
 8001b4a:	0c0b      	lsrs	r3, r1, #16
 8001b4c:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001b4e:	f107 0308 	add.w	r3, r7, #8
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7fe fafc 	bl	8000150 <strlen>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	f107 0108 	add.w	r1, r7, #8
 8001b60:	230a      	movs	r3, #10
 8001b62:	482a      	ldr	r0, [pc, #168]	; (8001c0c <printRadioSettings+0x90c>)
 8001b64:	f006 fc55 	bl	8008412 <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8001b68:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d00b      	beq.n	8001b8c <printRadioSettings+0x88c>
 8001b74:	f107 0308 	add.w	r3, r7, #8
 8001b78:	4a27      	ldr	r2, [pc, #156]	; (8001c18 <printRadioSettings+0x918>)
 8001b7a:	461c      	mov	r4, r3
 8001b7c:	4615      	mov	r5, r2
 8001b7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b82:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b86:	c403      	stmia	r4!, {r0, r1}
 8001b88:	8022      	strh	r2, [r4, #0]
 8001b8a:	e00d      	b.n	8001ba8 <printRadioSettings+0x8a8>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8001b8c:	f107 0308 	add.w	r3, r7, #8
 8001b90:	4a22      	ldr	r2, [pc, #136]	; (8001c1c <printRadioSettings+0x91c>)
 8001b92:	461c      	mov	r4, r3
 8001b94:	4615      	mov	r5, r2
 8001b96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b9a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b9e:	c403      	stmia	r4!, {r0, r1}
 8001ba0:	8022      	strh	r2, [r4, #0]
 8001ba2:	3402      	adds	r4, #2
 8001ba4:	0c13      	lsrs	r3, r2, #16
 8001ba6:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001ba8:	f107 0308 	add.w	r3, r7, #8
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7fe facf 	bl	8000150 <strlen>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	f107 0108 	add.w	r1, r7, #8
 8001bba:	230a      	movs	r3, #10
 8001bbc:	4813      	ldr	r0, [pc, #76]	; (8001c0c <printRadioSettings+0x90c>)
 8001bbe:	f006 fc28 	bl	8008412 <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001bc2:	f107 0308 	add.w	r3, r7, #8
 8001bc6:	4a16      	ldr	r2, [pc, #88]	; (8001c20 <printRadioSettings+0x920>)
 8001bc8:	461c      	mov	r4, r3
 8001bca:	4615      	mov	r5, r2
 8001bcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bd8:	682b      	ldr	r3, [r5, #0]
 8001bda:	461a      	mov	r2, r3
 8001bdc:	8022      	strh	r2, [r4, #0]
 8001bde:	3402      	adds	r4, #2
 8001be0:	0c1b      	lsrs	r3, r3, #16
 8001be2:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001be4:	f107 0308 	add.w	r3, r7, #8
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7fe fab1 	bl	8000150 <strlen>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	b29a      	uxth	r2, r3
 8001bf2:	f107 0108 	add.w	r1, r7, #8
 8001bf6:	230a      	movs	r3, #10
 8001bf8:	4804      	ldr	r0, [pc, #16]	; (8001c0c <printRadioSettings+0x90c>)
 8001bfa:	f006 fc0a 	bl	8008412 <HAL_UART_Transmit>
}
 8001bfe:	bf00      	nop
 8001c00:	3774      	adds	r7, #116	; 0x74
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c06:	bf00      	nop
 8001c08:	0800c658 	.word	0x0800c658
 8001c0c:	2000027c 	.word	0x2000027c
 8001c10:	0800c6a4 	.word	0x0800c6a4
 8001c14:	0800c6bc 	.word	0x0800c6bc
 8001c18:	0800c6d4 	.word	0x0800c6d4
 8001c1c:	0800c6f0 	.word	0x0800c6f0
 8001c20:	0800c2c4 	.word	0x0800c2c4

08001c24 <MPU6050_Init>:
static int16_t GyroRW[3];

//Fucntion Definitions
//1- i2c Handler 
void MPU6050_Init(I2C_HandleTypeDef *I2Chnd)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
	//Copy I2C CubeMX handle to local library
	memcpy(&i2cHandler, I2Chnd, sizeof(*I2Chnd));
 8001c2c:	2254      	movs	r2, #84	; 0x54
 8001c2e:	6879      	ldr	r1, [r7, #4]
 8001c30:	4803      	ldr	r0, [pc, #12]	; (8001c40 <MPU6050_Init+0x1c>)
 8001c32:	f009 ff1f 	bl	800ba74 <memcpy>
}
 8001c36:	bf00      	nop
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	200002bc 	.word	0x200002bc

08001c44 <I2C_Read>:

//2- i2c Read
void I2C_Read(uint8_t ADDR, uint8_t *i2cBif, uint8_t NofData)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af02      	add	r7, sp, #8
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	6039      	str	r1, [r7, #0]
 8001c4e:	71fb      	strb	r3, [r7, #7]
 8001c50:	4613      	mov	r3, r2
 8001c52:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cBuf[2];
	uint8_t MPUADDR;
	//Need to Shift address to make it proper to i2c operation
	MPUADDR = (MPU_ADDR<<1);
 8001c54:	23d0      	movs	r3, #208	; 0xd0
 8001c56:	73fb      	strb	r3, [r7, #15]
	i2cBuf[0] = ADDR;
 8001c58:	79fb      	ldrb	r3, [r7, #7]
 8001c5a:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cBuf, 1, 10);
 8001c5c:	7bfb      	ldrb	r3, [r7, #15]
 8001c5e:	b299      	uxth	r1, r3
 8001c60:	f107 020c 	add.w	r2, r7, #12
 8001c64:	230a      	movs	r3, #10
 8001c66:	9300      	str	r3, [sp, #0]
 8001c68:	2301      	movs	r3, #1
 8001c6a:	4809      	ldr	r0, [pc, #36]	; (8001c90 <I2C_Read+0x4c>)
 8001c6c:	f003 f840 	bl	8004cf0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cHandler, MPUADDR, i2cBif, NofData, 100);
 8001c70:	7bfb      	ldrb	r3, [r7, #15]
 8001c72:	b299      	uxth	r1, r3
 8001c74:	79bb      	ldrb	r3, [r7, #6]
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	2364      	movs	r3, #100	; 0x64
 8001c7a:	9300      	str	r3, [sp, #0]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	683a      	ldr	r2, [r7, #0]
 8001c80:	4803      	ldr	r0, [pc, #12]	; (8001c90 <I2C_Read+0x4c>)
 8001c82:	f003 f933 	bl	8004eec <HAL_I2C_Master_Receive>
}
 8001c86:	bf00      	nop
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	200002bc 	.word	0x200002bc

08001c94 <I2C_Write8>:

//3- i2c Write
void I2C_Write8(uint8_t ADDR, uint8_t data)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af02      	add	r7, sp, #8
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	460a      	mov	r2, r1
 8001c9e:	71fb      	strb	r3, [r7, #7]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cData[2];
	i2cData[0] = ADDR;
 8001ca4:	79fb      	ldrb	r3, [r7, #7]
 8001ca6:	733b      	strb	r3, [r7, #12]
	i2cData[1] = data;
 8001ca8:	79bb      	ldrb	r3, [r7, #6]
 8001caa:	737b      	strb	r3, [r7, #13]
	uint8_t MPUADDR = (MPU_ADDR<<1);
 8001cac:	23d0      	movs	r3, #208	; 0xd0
 8001cae:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cData, 2,100);
 8001cb0:	7bfb      	ldrb	r3, [r7, #15]
 8001cb2:	b299      	uxth	r1, r3
 8001cb4:	f107 020c 	add.w	r2, r7, #12
 8001cb8:	2364      	movs	r3, #100	; 0x64
 8001cba:	9300      	str	r3, [sp, #0]
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	4803      	ldr	r0, [pc, #12]	; (8001ccc <I2C_Write8+0x38>)
 8001cc0:	f003 f816 	bl	8004cf0 <HAL_I2C_Master_Transmit>
}
 8001cc4:	bf00      	nop
 8001cc6:	3710      	adds	r7, #16
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	200002bc 	.word	0x200002bc

08001cd0 <MPU6050_Config>:

//4- MPU6050 Initialaztion Configuration 
void MPU6050_Config(MPU_ConfigTypeDef *config)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
	uint8_t Buffer = 0;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	73fb      	strb	r3, [r7, #15]
	//Clock Source 
	//Reset Device
	I2C_Write8(PWR_MAGT_1_REG, 0x80);
 8001cdc:	2180      	movs	r1, #128	; 0x80
 8001cde:	206b      	movs	r0, #107	; 0x6b
 8001ce0:	f7ff ffd8 	bl	8001c94 <I2C_Write8>
	HAL_Delay(100);
 8001ce4:	2064      	movs	r0, #100	; 0x64
 8001ce6:	f002 f913 	bl	8003f10 <HAL_Delay>
	Buffer = config ->ClockSource & 0x07; //change the 7th bits of register
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	73fb      	strb	r3, [r7, #15]
	Buffer |= (config ->Sleep_Mode_Bit << 6) &0x40; // change only the 7th bit in the register
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	791b      	ldrb	r3, [r3, #4]
 8001cf8:	019b      	lsls	r3, r3, #6
 8001cfa:	b25b      	sxtb	r3, r3
 8001cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d00:	b25a      	sxtb	r2, r3
 8001d02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	b25b      	sxtb	r3, r3
 8001d0a:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(PWR_MAGT_1_REG, Buffer);
 8001d0c:	7bfb      	ldrb	r3, [r7, #15]
 8001d0e:	4619      	mov	r1, r3
 8001d10:	206b      	movs	r0, #107	; 0x6b
 8001d12:	f7ff ffbf 	bl	8001c94 <I2C_Write8>
	HAL_Delay(100); // should wait 10ms after changeing the clock setting.
 8001d16:	2064      	movs	r0, #100	; 0x64
 8001d18:	f002 f8fa 	bl	8003f10 <HAL_Delay>
	
	//Set the Digital Low Pass Filter
	Buffer = 0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	73fb      	strb	r3, [r7, #15]
	Buffer = config->CONFIG_DLPF & 0x07;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	78db      	ldrb	r3, [r3, #3]
 8001d24:	f003 0307 	and.w	r3, r3, #7
 8001d28:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(CONFIG_REG, Buffer);
 8001d2a:	7bfb      	ldrb	r3, [r7, #15]
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	201a      	movs	r0, #26
 8001d30:	f7ff ffb0 	bl	8001c94 <I2C_Write8>
	
	//Select the Gyroscope Full Scale Range
	Buffer = 0;
 8001d34:	2300      	movs	r3, #0
 8001d36:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Gyro_Full_Scale << 3) & 0x18;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	785b      	ldrb	r3, [r3, #1]
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	f003 0318 	and.w	r3, r3, #24
 8001d44:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(GYRO_CONFIG_REG, Buffer);
 8001d46:	7bfb      	ldrb	r3, [r7, #15]
 8001d48:	4619      	mov	r1, r3
 8001d4a:	201b      	movs	r0, #27
 8001d4c:	f7ff ffa2 	bl	8001c94 <I2C_Write8>
	
	//Select the Accelerometer Full Scale Range 
	Buffer = 0; 
 8001d50:	2300      	movs	r3, #0
 8001d52:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Accel_Full_Scale << 3) & 0x18;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	789b      	ldrb	r3, [r3, #2]
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	f003 0318 	and.w	r3, r3, #24
 8001d60:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(ACCEL_CONFIG_REG, Buffer);
 8001d62:	7bfb      	ldrb	r3, [r7, #15]
 8001d64:	4619      	mov	r1, r3
 8001d66:	201c      	movs	r0, #28
 8001d68:	f7ff ff94 	bl	8001c94 <I2C_Write8>
	//Set SRD To Default
	MPU6050_Set_SMPRT_DIV(0x04);
 8001d6c:	2004      	movs	r0, #4
 8001d6e:	f000 f857 	bl	8001e20 <MPU6050_Set_SMPRT_DIV>
	
	
	//Accelerometer Scaling Factor, Set the Accelerometer and Gyroscope Scaling Factor
	switch (config->Accel_Full_Scale)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	789b      	ldrb	r3, [r3, #2]
 8001d76:	2b03      	cmp	r3, #3
 8001d78:	d81a      	bhi.n	8001db0 <MPU6050_Config+0xe0>
 8001d7a:	a201      	add	r2, pc, #4	; (adr r2, 8001d80 <MPU6050_Config+0xb0>)
 8001d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d80:	08001d91 	.word	0x08001d91
 8001d84:	08001d99 	.word	0x08001d99
 8001d88:	08001da1 	.word	0x08001da1
 8001d8c:	08001da9 	.word	0x08001da9
	{
		case AFS_SEL_2g:
			accelScalingFactor = (2000.0f/32768.0f);
 8001d90:	4b1a      	ldr	r3, [pc, #104]	; (8001dfc <MPU6050_Config+0x12c>)
 8001d92:	4a1b      	ldr	r2, [pc, #108]	; (8001e00 <MPU6050_Config+0x130>)
 8001d94:	601a      	str	r2, [r3, #0]
			break;
 8001d96:	e00c      	b.n	8001db2 <MPU6050_Config+0xe2>
		
		case AFS_SEL_4g:
			accelScalingFactor = (4000.0f/32768.0f);
 8001d98:	4b18      	ldr	r3, [pc, #96]	; (8001dfc <MPU6050_Config+0x12c>)
 8001d9a:	4a1a      	ldr	r2, [pc, #104]	; (8001e04 <MPU6050_Config+0x134>)
 8001d9c:	601a      	str	r2, [r3, #0]
				break;
 8001d9e:	e008      	b.n	8001db2 <MPU6050_Config+0xe2>
		
		case AFS_SEL_8g:
			accelScalingFactor = (8000.0f/32768.0f);
 8001da0:	4b16      	ldr	r3, [pc, #88]	; (8001dfc <MPU6050_Config+0x12c>)
 8001da2:	4a19      	ldr	r2, [pc, #100]	; (8001e08 <MPU6050_Config+0x138>)
 8001da4:	601a      	str	r2, [r3, #0]
			break;
 8001da6:	e004      	b.n	8001db2 <MPU6050_Config+0xe2>
		
		case AFS_SEL_16g:
			accelScalingFactor = (16000.0f/32768.0f);
 8001da8:	4b14      	ldr	r3, [pc, #80]	; (8001dfc <MPU6050_Config+0x12c>)
 8001daa:	4a18      	ldr	r2, [pc, #96]	; (8001e0c <MPU6050_Config+0x13c>)
 8001dac:	601a      	str	r2, [r3, #0]
			break;
 8001dae:	e000      	b.n	8001db2 <MPU6050_Config+0xe2>
		
		default:
			break;
 8001db0:	bf00      	nop
	}
	//Gyroscope Scaling Factor 
	switch (config->Gyro_Full_Scale)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	785b      	ldrb	r3, [r3, #1]
 8001db6:	2b03      	cmp	r3, #3
 8001db8:	d81a      	bhi.n	8001df0 <MPU6050_Config+0x120>
 8001dba:	a201      	add	r2, pc, #4	; (adr r2, 8001dc0 <MPU6050_Config+0xf0>)
 8001dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dc0:	08001dd1 	.word	0x08001dd1
 8001dc4:	08001dd9 	.word	0x08001dd9
 8001dc8:	08001de1 	.word	0x08001de1
 8001dcc:	08001de9 	.word	0x08001de9
	{
		case FS_SEL_250:
			gyroScalingFactor = 250.0f/32768.0f;
 8001dd0:	4b0f      	ldr	r3, [pc, #60]	; (8001e10 <MPU6050_Config+0x140>)
 8001dd2:	4a10      	ldr	r2, [pc, #64]	; (8001e14 <MPU6050_Config+0x144>)
 8001dd4:	601a      	str	r2, [r3, #0]
			break;
 8001dd6:	e00c      	b.n	8001df2 <MPU6050_Config+0x122>
		
		case FS_SEL_500:
				gyroScalingFactor = 500.0f/32768.0f;
 8001dd8:	4b0d      	ldr	r3, [pc, #52]	; (8001e10 <MPU6050_Config+0x140>)
 8001dda:	4a0f      	ldr	r2, [pc, #60]	; (8001e18 <MPU6050_Config+0x148>)
 8001ddc:	601a      	str	r2, [r3, #0]
				break;
 8001dde:	e008      	b.n	8001df2 <MPU6050_Config+0x122>
		
		case FS_SEL_1000:
			gyroScalingFactor = 1000.0f/32768.0f;
 8001de0:	4b0b      	ldr	r3, [pc, #44]	; (8001e10 <MPU6050_Config+0x140>)
 8001de2:	4a0e      	ldr	r2, [pc, #56]	; (8001e1c <MPU6050_Config+0x14c>)
 8001de4:	601a      	str	r2, [r3, #0]
			break;
 8001de6:	e004      	b.n	8001df2 <MPU6050_Config+0x122>
		
		case FS_SEL_2000:
			gyroScalingFactor = 2000.0f/32768.0f;
 8001de8:	4b09      	ldr	r3, [pc, #36]	; (8001e10 <MPU6050_Config+0x140>)
 8001dea:	4a05      	ldr	r2, [pc, #20]	; (8001e00 <MPU6050_Config+0x130>)
 8001dec:	601a      	str	r2, [r3, #0]
			break;
 8001dee:	e000      	b.n	8001df2 <MPU6050_Config+0x122>
		
		default:
			break;
 8001df0:	bf00      	nop
	}
	
}
 8001df2:	bf00      	nop
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	20000310 	.word	0x20000310
 8001e00:	3d7a0000 	.word	0x3d7a0000
 8001e04:	3dfa0000 	.word	0x3dfa0000
 8001e08:	3e7a0000 	.word	0x3e7a0000
 8001e0c:	3efa0000 	.word	0x3efa0000
 8001e10:	20000314 	.word	0x20000314
 8001e14:	3bfa0000 	.word	0x3bfa0000
 8001e18:	3c7a0000 	.word	0x3c7a0000
 8001e1c:	3cfa0000 	.word	0x3cfa0000

08001e20 <MPU6050_Set_SMPRT_DIV>:
	return Buffer;
}

//6- Set Sample Rate Divider
void MPU6050_Set_SMPRT_DIV(uint8_t SMPRTvalue)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	71fb      	strb	r3, [r7, #7]
	I2C_Write8(SMPLRT_DIV_REG, SMPRTvalue);
 8001e2a:	79fb      	ldrb	r3, [r7, #7]
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	2019      	movs	r0, #25
 8001e30:	f7ff ff30 	bl	8001c94 <I2C_Write8>
}
 8001e34:	bf00      	nop
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <MPU6050_Get_Accel_RawData>:
	
}

//9- Get Accel Raw Data
void MPU6050_Get_Accel_RawData(RawData_Def *rawDef)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b088      	sub	sp, #32
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
	uint8_t i2cBuf[2];
	uint8_t AcceArr[6], GyroArr[6];
	
	//i2cBuf[1] = 0;

	I2C_Read(INT_STATUS_REG, &i2cBuf[1],1);
 8001e44:	f107 031c 	add.w	r3, r7, #28
 8001e48:	3301      	adds	r3, #1
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	203a      	movs	r0, #58	; 0x3a
 8001e50:	f7ff fef8 	bl	8001c44 <I2C_Read>
	if((i2cBuf[1]&&0x01))
 8001e54:	7f7b      	ldrb	r3, [r7, #29]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d04f      	beq.n	8001efa <MPU6050_Get_Accel_RawData+0xbe>
	{
		I2C_Read(ACCEL_XOUT_H_REG, AcceArr,6);
 8001e5a:	f107 0314 	add.w	r3, r7, #20
 8001e5e:	2206      	movs	r2, #6
 8001e60:	4619      	mov	r1, r3
 8001e62:	203b      	movs	r0, #59	; 0x3b
 8001e64:	f7ff feee 	bl	8001c44 <I2C_Read>
		
		//Accel Raw Data
		rawDef->x = ((AcceArr[0]<<8) + AcceArr[1]); // x-Axis
 8001e68:	7d3b      	ldrb	r3, [r7, #20]
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	021b      	lsls	r3, r3, #8
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	7d7b      	ldrb	r3, [r7, #21]
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	4413      	add	r3, r2
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	b21a      	sxth	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	801a      	strh	r2, [r3, #0]
		rawDef->y = ((AcceArr[2]<<8) + AcceArr[3]); // y-Axis
 8001e7e:	7dbb      	ldrb	r3, [r7, #22]
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	021b      	lsls	r3, r3, #8
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	7dfb      	ldrb	r3, [r7, #23]
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	4413      	add	r3, r2
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	b21a      	sxth	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	805a      	strh	r2, [r3, #2]
		rawDef->z = ((AcceArr[4]<<8) + AcceArr[5]); // z-Axis
 8001e94:	7e3b      	ldrb	r3, [r7, #24]
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	021b      	lsls	r3, r3, #8
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	7e7b      	ldrb	r3, [r7, #25]
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	4413      	add	r3, r2
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	b21a      	sxth	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	809a      	strh	r2, [r3, #4]
		//Gyro Raw Data
		I2C_Read(GYRO_XOUT_H_REG, GyroArr,6);
 8001eaa:	f107 030c 	add.w	r3, r7, #12
 8001eae:	2206      	movs	r2, #6
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	2043      	movs	r0, #67	; 0x43
 8001eb4:	f7ff fec6 	bl	8001c44 <I2C_Read>
		GyroRW[0] = ((GyroArr[0]<<8) + GyroArr[1]);
 8001eb8:	7b3b      	ldrb	r3, [r7, #12]
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	021b      	lsls	r3, r3, #8
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	7b7b      	ldrb	r3, [r7, #13]
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	4413      	add	r3, r2
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	b21a      	sxth	r2, r3
 8001eca:	4b0e      	ldr	r3, [pc, #56]	; (8001f04 <MPU6050_Get_Accel_RawData+0xc8>)
 8001ecc:	801a      	strh	r2, [r3, #0]
		GyroRW[1] = (GyroArr[2]<<8) + GyroArr[3];
 8001ece:	7bbb      	ldrb	r3, [r7, #14]
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	021b      	lsls	r3, r3, #8
 8001ed4:	b29a      	uxth	r2, r3
 8001ed6:	7bfb      	ldrb	r3, [r7, #15]
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	4413      	add	r3, r2
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	b21a      	sxth	r2, r3
 8001ee0:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <MPU6050_Get_Accel_RawData+0xc8>)
 8001ee2:	805a      	strh	r2, [r3, #2]
		GyroRW[2] = ((GyroArr[4]<<8) + GyroArr[5]);
 8001ee4:	7c3b      	ldrb	r3, [r7, #16]
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	021b      	lsls	r3, r3, #8
 8001eea:	b29a      	uxth	r2, r3
 8001eec:	7c7b      	ldrb	r3, [r7, #17]
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	4413      	add	r3, r2
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	b21a      	sxth	r2, r3
 8001ef6:	4b03      	ldr	r3, [pc, #12]	; (8001f04 <MPU6050_Get_Accel_RawData+0xc8>)
 8001ef8:	809a      	strh	r2, [r3, #4]
	}
}
 8001efa:	bf00      	nop
 8001efc:	3720      	adds	r7, #32
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	20000318 	.word	0x20000318

08001f08 <MPU6050_Get_Gyro_RawData>:
	CaliDef->y = (AccelScaled.y) - A_Y_Bias;// y-Axis
	CaliDef->z = (AccelScaled.z) - A_Z_Bias;// z-Axis
}
//12- Get Gyro Raw Data
void MPU6050_Get_Gyro_RawData(RawData_Def *rawDef)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
	
	//Accel Raw Data
	rawDef->x = GyroRW[0];
 8001f10:	4b09      	ldr	r3, [pc, #36]	; (8001f38 <MPU6050_Get_Gyro_RawData+0x30>)
 8001f12:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	801a      	strh	r2, [r3, #0]
	rawDef->y = GyroRW[1];
 8001f1a:	4b07      	ldr	r3, [pc, #28]	; (8001f38 <MPU6050_Get_Gyro_RawData+0x30>)
 8001f1c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	805a      	strh	r2, [r3, #2]
	rawDef->z = GyroRW[2];
 8001f24:	4b04      	ldr	r3, [pc, #16]	; (8001f38 <MPU6050_Get_Gyro_RawData+0x30>)
 8001f26:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	809a      	strh	r2, [r3, #4]
	
}
 8001f2e:	bf00      	nop
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bc80      	pop	{r7}
 8001f36:	4770      	bx	lr
 8001f38:	20000318 	.word	0x20000318

08001f3c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af02      	add	r7, sp, #8
 8001f42:	4603      	mov	r3, r0
 8001f44:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8001f46:	79fb      	ldrb	r3, [r7, #7]
 8001f48:	f023 030f 	bic.w	r3, r3, #15
 8001f4c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001f4e:	79fb      	ldrb	r3, [r7, #7]
 8001f50:	011b      	lsls	r3, r3, #4
 8001f52:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001f54:	7bfb      	ldrb	r3, [r7, #15]
 8001f56:	f043 030c 	orr.w	r3, r3, #12
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001f5e:	7bfb      	ldrb	r3, [r7, #15]
 8001f60:	f043 0308 	orr.w	r3, r3, #8
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001f68:	7bbb      	ldrb	r3, [r7, #14]
 8001f6a:	f043 030c 	orr.w	r3, r3, #12
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001f72:	7bbb      	ldrb	r3, [r7, #14]
 8001f74:	f043 0308 	orr.w	r3, r3, #8
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001f7c:	f107 0208 	add.w	r2, r7, #8
 8001f80:	2364      	movs	r3, #100	; 0x64
 8001f82:	9300      	str	r3, [sp, #0]
 8001f84:	2304      	movs	r3, #4
 8001f86:	214e      	movs	r1, #78	; 0x4e
 8001f88:	4803      	ldr	r0, [pc, #12]	; (8001f98 <lcd_send_cmd+0x5c>)
 8001f8a:	f002 feb1 	bl	8004cf0 <HAL_I2C_Master_Transmit>
}
 8001f8e:	bf00      	nop
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	20000970 	.word	0x20000970

08001f9c <lcd_init>:
	data_t[3] = data_l|0x09;  //en=0, rs=0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
}

void lcd_init (void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8001fa0:	2002      	movs	r0, #2
 8001fa2:	f7ff ffcb 	bl	8001f3c <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8001fa6:	2028      	movs	r0, #40	; 0x28
 8001fa8:	f7ff ffc8 	bl	8001f3c <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8001fac:	200c      	movs	r0, #12
 8001fae:	f7ff ffc5 	bl	8001f3c <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8001fb2:	2080      	movs	r0, #128	; 0x80
 8001fb4:	f7ff ffc2 	bl	8001f3c <lcd_send_cmd>
}
 8001fb8:	bf00      	nop
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <Serial_Recived>:
RawData_Def AccelData, GyroData;

uint64_t PipeAddres = 0x11223344AA;
char RF_RxData[32], RF_TxData[32], BadFunc;

void Serial_Recived(uint8_t* Buf, uint32_t *Len){
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
	switch(Buf[0]){
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	3b30      	subs	r3, #48	; 0x30
 8001fcc:	2b51      	cmp	r3, #81	; 0x51
 8001fce:	f200 8167 	bhi.w	80022a0 <Serial_Recived+0x2e4>
 8001fd2:	a201      	add	r2, pc, #4	; (adr r2, 8001fd8 <Serial_Recived+0x1c>)
 8001fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fd8:	08002121 	.word	0x08002121
 8001fdc:	08002143 	.word	0x08002143
 8001fe0:	08002165 	.word	0x08002165
 8001fe4:	08002181 	.word	0x08002181
 8001fe8:	080022a1 	.word	0x080022a1
 8001fec:	080022a1 	.word	0x080022a1
 8001ff0:	080022a1 	.word	0x080022a1
 8001ff4:	080022a1 	.word	0x080022a1
 8001ff8:	080022a1 	.word	0x080022a1
 8001ffc:	080022a1 	.word	0x080022a1
 8002000:	080022a1 	.word	0x080022a1
 8002004:	080022a1 	.word	0x080022a1
 8002008:	080022a1 	.word	0x080022a1
 800200c:	080022a1 	.word	0x080022a1
 8002010:	080022a1 	.word	0x080022a1
 8002014:	080022a1 	.word	0x080022a1
 8002018:	080022a1 	.word	0x080022a1
 800201c:	080022a1 	.word	0x080022a1
 8002020:	08002251 	.word	0x08002251
 8002024:	080022a1 	.word	0x080022a1
 8002028:	08002269 	.word	0x08002269
 800202c:	080022a1 	.word	0x080022a1
 8002030:	080022a1 	.word	0x080022a1
 8002034:	080022a1 	.word	0x080022a1
 8002038:	080022a1 	.word	0x080022a1
 800203c:	080022a1 	.word	0x080022a1
 8002040:	080022a1 	.word	0x080022a1
 8002044:	080022a1 	.word	0x080022a1
 8002048:	080022a1 	.word	0x080022a1
 800204c:	080022a1 	.word	0x080022a1
 8002050:	080022a1 	.word	0x080022a1
 8002054:	080022a1 	.word	0x080022a1
 8002058:	080022a1 	.word	0x080022a1
 800205c:	080022a1 	.word	0x080022a1
 8002060:	080022a1 	.word	0x080022a1
 8002064:	080022a1 	.word	0x080022a1
 8002068:	080022a1 	.word	0x080022a1
 800206c:	080022a1 	.word	0x080022a1
 8002070:	080022a1 	.word	0x080022a1
 8002074:	080022a1 	.word	0x080022a1
 8002078:	080022a1 	.word	0x080022a1
 800207c:	080022a1 	.word	0x080022a1
 8002080:	080022a1 	.word	0x080022a1
 8002084:	080022a1 	.word	0x080022a1
 8002088:	080022a1 	.word	0x080022a1
 800208c:	080022a1 	.word	0x080022a1
 8002090:	080022a1 	.word	0x080022a1
 8002094:	080022a1 	.word	0x080022a1
 8002098:	080022a1 	.word	0x080022a1
 800209c:	08002241 	.word	0x08002241
 80020a0:	08002249 	.word	0x08002249
 80020a4:	08002259 	.word	0x08002259
 80020a8:	08002261 	.word	0x08002261
 80020ac:	080022a1 	.word	0x080022a1
 80020b0:	080022a1 	.word	0x080022a1
 80020b4:	080022a1 	.word	0x080022a1
 80020b8:	080022a1 	.word	0x080022a1
 80020bc:	080022a1 	.word	0x080022a1
 80020c0:	080022a1 	.word	0x080022a1
 80020c4:	080022a1 	.word	0x080022a1
 80020c8:	080022a1 	.word	0x080022a1
 80020cc:	080022a1 	.word	0x080022a1
 80020d0:	080022a1 	.word	0x080022a1
 80020d4:	080022a1 	.word	0x080022a1
 80020d8:	080022a1 	.word	0x080022a1
 80020dc:	080022a1 	.word	0x080022a1
 80020e0:	080022a1 	.word	0x080022a1
 80020e4:	080022a1 	.word	0x080022a1
 80020e8:	080022a1 	.word	0x080022a1
 80020ec:	080022a1 	.word	0x080022a1
 80020f0:	080022a1 	.word	0x080022a1
 80020f4:	080022a1 	.word	0x080022a1
 80020f8:	080022a1 	.word	0x080022a1
 80020fc:	080022a1 	.word	0x080022a1
 8002100:	080022a1 	.word	0x080022a1
 8002104:	080022a1 	.word	0x080022a1
 8002108:	080022a1 	.word	0x080022a1
 800210c:	080022a1 	.word	0x080022a1
 8002110:	080022a1 	.word	0x080022a1
 8002114:	080022a1 	.word	0x080022a1
 8002118:	080022a1 	.word	0x080022a1
 800211c:	08002271 	.word	0x08002271
	case '0': {
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8002120:	2201      	movs	r2, #1
 8002122:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002126:	4864      	ldr	r0, [pc, #400]	; (80022b8 <Serial_Recived+0x2fc>)
 8002128:	f002 fc59 	bl	80049de <HAL_GPIO_WritePin>
		Msg[0] = 'O';
 800212c:	4b63      	ldr	r3, [pc, #396]	; (80022bc <Serial_Recived+0x300>)
 800212e:	224f      	movs	r2, #79	; 0x4f
 8002130:	701a      	strb	r2, [r3, #0]
		Msg[1] = 'N';
 8002132:	4b62      	ldr	r3, [pc, #392]	; (80022bc <Serial_Recived+0x300>)
 8002134:	224e      	movs	r2, #78	; 0x4e
 8002136:	705a      	strb	r2, [r3, #1]
		Serial_Send(Msg, 2);
 8002138:	2102      	movs	r1, #2
 800213a:	4860      	ldr	r0, [pc, #384]	; (80022bc <Serial_Recived+0x300>)
 800213c:	f000 f8c6 	bl	80022cc <Serial_Send>
		break;
 8002140:	e0b5      	b.n	80022ae <Serial_Recived+0x2f2>
	}
	case '1': {
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8002142:	2200      	movs	r2, #0
 8002144:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002148:	485b      	ldr	r0, [pc, #364]	; (80022b8 <Serial_Recived+0x2fc>)
 800214a:	f002 fc48 	bl	80049de <HAL_GPIO_WritePin>
		Msg[0] = 'O';
 800214e:	4b5b      	ldr	r3, [pc, #364]	; (80022bc <Serial_Recived+0x300>)
 8002150:	224f      	movs	r2, #79	; 0x4f
 8002152:	701a      	strb	r2, [r3, #0]
		Msg[1] = 'F';
 8002154:	4b59      	ldr	r3, [pc, #356]	; (80022bc <Serial_Recived+0x300>)
 8002156:	2246      	movs	r2, #70	; 0x46
 8002158:	705a      	strb	r2, [r3, #1]
		Serial_Send(Msg, 2);
 800215a:	2102      	movs	r1, #2
 800215c:	4857      	ldr	r0, [pc, #348]	; (80022bc <Serial_Recived+0x300>)
 800215e:	f000 f8b5 	bl	80022cc <Serial_Send>
		break;
 8002162:	e0a4      	b.n	80022ae <Serial_Recived+0x2f2>
	}
	case '2': {
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8002164:	2200      	movs	r2, #0
 8002166:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800216a:	4853      	ldr	r0, [pc, #332]	; (80022b8 <Serial_Recived+0x2fc>)
 800216c:	f002 fc37 	bl	80049de <HAL_GPIO_WritePin>
		Msg[0] = FUNC_ACCEL_GYRO_DATA;
 8002170:	4b52      	ldr	r3, [pc, #328]	; (80022bc <Serial_Recived+0x300>)
 8002172:	2280      	movs	r2, #128	; 0x80
 8002174:	701a      	strb	r2, [r3, #0]
		Serial_Send(Msg, 1);
 8002176:	2101      	movs	r1, #1
 8002178:	4850      	ldr	r0, [pc, #320]	; (80022bc <Serial_Recived+0x300>)
 800217a:	f000 f8a7 	bl	80022cc <Serial_Send>
		break;
 800217e:	e096      	b.n	80022ae <Serial_Recived+0x2f2>
	}
	case '3': {
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8002180:	2200      	movs	r2, #0
 8002182:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002186:	484c      	ldr	r0, [pc, #304]	; (80022b8 <Serial_Recived+0x2fc>)
 8002188:	f002 fc29 	bl	80049de <HAL_GPIO_WritePin>
		int16_t Ax = 1024;
 800218c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002190:	82fb      	strh	r3, [r7, #22]
		int16_t Ay = -1024;
 8002192:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8002196:	82bb      	strh	r3, [r7, #20]
		int16_t Az = 32767;
 8002198:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800219c:	827b      	strh	r3, [r7, #18]
		int16_t Gx = -32767;
 800219e:	f248 0301 	movw	r3, #32769	; 0x8001
 80021a2:	823b      	strh	r3, [r7, #16]
		int16_t Gy = 255;
 80021a4:	23ff      	movs	r3, #255	; 0xff
 80021a6:	81fb      	strh	r3, [r7, #14]
		int16_t Gz = -255;
 80021a8:	f64f 7301 	movw	r3, #65281	; 0xff01
 80021ac:	81bb      	strh	r3, [r7, #12]
		Msg[0] = FUNC_ACCEL_GYRO_DATA;
 80021ae:	4b43      	ldr	r3, [pc, #268]	; (80022bc <Serial_Recived+0x300>)
 80021b0:	2280      	movs	r2, #128	; 0x80
 80021b2:	701a      	strb	r2, [r3, #0]
		Msg[1] = (char)Ax;
 80021b4:	8afb      	ldrh	r3, [r7, #22]
 80021b6:	b2da      	uxtb	r2, r3
 80021b8:	4b40      	ldr	r3, [pc, #256]	; (80022bc <Serial_Recived+0x300>)
 80021ba:	705a      	strb	r2, [r3, #1]
		Msg[2] = (char)(Ax >> 8);
 80021bc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80021c0:	121b      	asrs	r3, r3, #8
 80021c2:	b21b      	sxth	r3, r3
 80021c4:	b2da      	uxtb	r2, r3
 80021c6:	4b3d      	ldr	r3, [pc, #244]	; (80022bc <Serial_Recived+0x300>)
 80021c8:	709a      	strb	r2, [r3, #2]
		Msg[3] = (char)Ay;
 80021ca:	8abb      	ldrh	r3, [r7, #20]
 80021cc:	b2da      	uxtb	r2, r3
 80021ce:	4b3b      	ldr	r3, [pc, #236]	; (80022bc <Serial_Recived+0x300>)
 80021d0:	70da      	strb	r2, [r3, #3]
		Msg[4] = (char)(Ay >> 8);
 80021d2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80021d6:	121b      	asrs	r3, r3, #8
 80021d8:	b21b      	sxth	r3, r3
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	4b37      	ldr	r3, [pc, #220]	; (80022bc <Serial_Recived+0x300>)
 80021de:	711a      	strb	r2, [r3, #4]
		Msg[5] = (char)Az;
 80021e0:	8a7b      	ldrh	r3, [r7, #18]
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	4b35      	ldr	r3, [pc, #212]	; (80022bc <Serial_Recived+0x300>)
 80021e6:	715a      	strb	r2, [r3, #5]
		Msg[6] = (char)(Az >> 8);
 80021e8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80021ec:	121b      	asrs	r3, r3, #8
 80021ee:	b21b      	sxth	r3, r3
 80021f0:	b2da      	uxtb	r2, r3
 80021f2:	4b32      	ldr	r3, [pc, #200]	; (80022bc <Serial_Recived+0x300>)
 80021f4:	719a      	strb	r2, [r3, #6]
		Msg[7] = (char)Gx;
 80021f6:	8a3b      	ldrh	r3, [r7, #16]
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	4b30      	ldr	r3, [pc, #192]	; (80022bc <Serial_Recived+0x300>)
 80021fc:	71da      	strb	r2, [r3, #7]
		Msg[8] = (char)(Gx >> 8);
 80021fe:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002202:	121b      	asrs	r3, r3, #8
 8002204:	b21b      	sxth	r3, r3
 8002206:	b2da      	uxtb	r2, r3
 8002208:	4b2c      	ldr	r3, [pc, #176]	; (80022bc <Serial_Recived+0x300>)
 800220a:	721a      	strb	r2, [r3, #8]
		Msg[9] = (char)Gy;
 800220c:	89fb      	ldrh	r3, [r7, #14]
 800220e:	b2da      	uxtb	r2, r3
 8002210:	4b2a      	ldr	r3, [pc, #168]	; (80022bc <Serial_Recived+0x300>)
 8002212:	725a      	strb	r2, [r3, #9]
		Msg[10] = (char)(Gy >> 8);
 8002214:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002218:	121b      	asrs	r3, r3, #8
 800221a:	b21b      	sxth	r3, r3
 800221c:	b2da      	uxtb	r2, r3
 800221e:	4b27      	ldr	r3, [pc, #156]	; (80022bc <Serial_Recived+0x300>)
 8002220:	729a      	strb	r2, [r3, #10]
		Msg[11] = (char)Gz;
 8002222:	89bb      	ldrh	r3, [r7, #12]
 8002224:	b2da      	uxtb	r2, r3
 8002226:	4b25      	ldr	r3, [pc, #148]	; (80022bc <Serial_Recived+0x300>)
 8002228:	72da      	strb	r2, [r3, #11]
		Msg[12] = (char)(Gz >> 8);
 800222a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800222e:	121b      	asrs	r3, r3, #8
 8002230:	b21b      	sxth	r3, r3
 8002232:	b2da      	uxtb	r2, r3
 8002234:	4b21      	ldr	r3, [pc, #132]	; (80022bc <Serial_Recived+0x300>)
 8002236:	731a      	strb	r2, [r3, #12]

		Serial_Send(Msg, 13);
 8002238:	210d      	movs	r1, #13
 800223a:	4820      	ldr	r0, [pc, #128]	; (80022bc <Serial_Recived+0x300>)
 800223c:	f000 f846 	bl	80022cc <Serial_Send>
	}
	case 'a': {
		Flag[0] = 1;
 8002240:	4b1f      	ldr	r3, [pc, #124]	; (80022c0 <Serial_Recived+0x304>)
 8002242:	2201      	movs	r2, #1
 8002244:	701a      	strb	r2, [r3, #0]
		break;
 8002246:	e032      	b.n	80022ae <Serial_Recived+0x2f2>
	}
	case 'b': {
		Flag[1] = 1;
 8002248:	4b1d      	ldr	r3, [pc, #116]	; (80022c0 <Serial_Recived+0x304>)
 800224a:	2201      	movs	r2, #1
 800224c:	705a      	strb	r2, [r3, #1]
		break;
 800224e:	e02e      	b.n	80022ae <Serial_Recived+0x2f2>
	}
	case 'B': {
		Flag[1] = 0;
 8002250:	4b1b      	ldr	r3, [pc, #108]	; (80022c0 <Serial_Recived+0x304>)
 8002252:	2200      	movs	r2, #0
 8002254:	705a      	strb	r2, [r3, #1]
		break;
 8002256:	e02a      	b.n	80022ae <Serial_Recived+0x2f2>
	}
	case 'c': {
		Flag[2] = 1;
 8002258:	4b19      	ldr	r3, [pc, #100]	; (80022c0 <Serial_Recived+0x304>)
 800225a:	2201      	movs	r2, #1
 800225c:	709a      	strb	r2, [r3, #2]
		break;
 800225e:	e026      	b.n	80022ae <Serial_Recived+0x2f2>
	}
	case 'd': {
		Flag[3] = 1;
 8002260:	4b17      	ldr	r3, [pc, #92]	; (80022c0 <Serial_Recived+0x304>)
 8002262:	2201      	movs	r2, #1
 8002264:	70da      	strb	r2, [r3, #3]
		break;
 8002266:	e022      	b.n	80022ae <Serial_Recived+0x2f2>
	}
	case 'D': {
		Flag[3] = 0;
 8002268:	4b15      	ldr	r3, [pc, #84]	; (80022c0 <Serial_Recived+0x304>)
 800226a:	2200      	movs	r2, #0
 800226c:	70da      	strb	r2, [r3, #3]
		break;
 800226e:	e01e      	b.n	80022ae <Serial_Recived+0x2f2>
	}
	case FUNC_JOYSTICK_DATA: {
		//Flag[4] = 1;
		//BadFunc = 0;
		// Funkcja FUNC_JOYSTICK_DATA
		RF_TxData[0] = FUNC_JOYSTICK_DATA;
 8002270:	4b14      	ldr	r3, [pc, #80]	; (80022c4 <Serial_Recived+0x308>)
 8002272:	2281      	movs	r2, #129	; 0x81
 8002274:	701a      	strb	r2, [r3, #0]
		RF_TxData[1] = Buf[1];
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	3301      	adds	r3, #1
 800227a:	781a      	ldrb	r2, [r3, #0]
 800227c:	4b11      	ldr	r3, [pc, #68]	; (80022c4 <Serial_Recived+0x308>)
 800227e:	705a      	strb	r2, [r3, #1]
		RF_TxData[2] = Buf[2];
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	3302      	adds	r3, #2
 8002284:	781a      	ldrb	r2, [r3, #0]
 8002286:	4b0f      	ldr	r3, [pc, #60]	; (80022c4 <Serial_Recived+0x308>)
 8002288:	709a      	strb	r2, [r3, #2]
		RF_TxData[3] = Buf[3];
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	3303      	adds	r3, #3
 800228e:	781a      	ldrb	r2, [r3, #0]
 8002290:	4b0c      	ldr	r3, [pc, #48]	; (80022c4 <Serial_Recived+0x308>)
 8002292:	70da      	strb	r2, [r3, #3]
		RF_TxData[4] = Buf[4];
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	3304      	adds	r3, #4
 8002298:	781a      	ldrb	r2, [r3, #0]
 800229a:	4b0a      	ldr	r3, [pc, #40]	; (80022c4 <Serial_Recived+0x308>)
 800229c:	711a      	strb	r2, [r3, #4]
		break;
 800229e:	e006      	b.n	80022ae <Serial_Recived+0x2f2>
	}
	default: {
		Flag[4] = 1;
 80022a0:	4b07      	ldr	r3, [pc, #28]	; (80022c0 <Serial_Recived+0x304>)
 80022a2:	2201      	movs	r2, #1
 80022a4:	711a      	strb	r2, [r3, #4]
		BadFunc = Buf[0];
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	781a      	ldrb	r2, [r3, #0]
 80022aa:	4b07      	ldr	r3, [pc, #28]	; (80022c8 <Serial_Recived+0x30c>)
 80022ac:	701a      	strb	r2, [r3, #0]
	}
	}
}
 80022ae:	bf00      	nop
 80022b0:	3718      	adds	r7, #24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	40011000 	.word	0x40011000
 80022bc:	20000960 	.word	0x20000960
 80022c0:	20000320 	.word	0x20000320
 80022c4:	20000a60 	.word	0x20000a60
 80022c8:	20000bb8 	.word	0x20000bb8

080022cc <Serial_Send>:

int Serial_Send(uint8_t* Buf, uint32_t *Len){
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
	CDC_Transmit_FS(Buf, Len);
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	4619      	mov	r1, r3
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f008 ffce 	bl	800b27c <CDC_Transmit_FS>
	return &Len;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <wait_for_gpio_state_timeout>:
#define I2C1_SCL_GPIO_Port SCL_GPIO_Port
#define I2C1_SDA_Pin SDA_Pin
#define I2C1_SDA_GPIO_Port SDA_GPIO_Port

static bool wait_for_gpio_state_timeout(GPIO_TypeDef *port, uint16_t pin, GPIO_PinState state, uint32_t timeout)
 {
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b086      	sub	sp, #24
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	60f8      	str	r0, [r7, #12]
 80022f2:	607b      	str	r3, [r7, #4]
 80022f4:	460b      	mov	r3, r1
 80022f6:	817b      	strh	r3, [r7, #10]
 80022f8:	4613      	mov	r3, r2
 80022fa:	727b      	strb	r3, [r7, #9]
    uint32_t Tickstart = HAL_GetTick();
 80022fc:	f001 fdfe 	bl	8003efc <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]
    bool ret = true;
 8002302:	2301      	movs	r3, #1
 8002304:	75fb      	strb	r3, [r7, #23]
    /* Wait until flag is set */
    for(;(state != HAL_GPIO_ReadPin(port, pin)) && (true == ret);)
 8002306:	e011      	b.n	800232c <wait_for_gpio_state_timeout+0x42>
    {
        /* Check for the timeout */
        if (timeout != HAL_MAX_DELAY)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800230e:	d00c      	beq.n	800232a <wait_for_gpio_state_timeout+0x40>
        {
            if ((timeout == 0U) || ((HAL_GetTick() - Tickstart) > timeout))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d007      	beq.n	8002326 <wait_for_gpio_state_timeout+0x3c>
 8002316:	f001 fdf1 	bl	8003efc <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	429a      	cmp	r2, r3
 8002324:	d201      	bcs.n	800232a <wait_for_gpio_state_timeout+0x40>
            {
                ret = false;
 8002326:	2300      	movs	r3, #0
 8002328:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
            }
        }
        asm("nop");
 800232a:	bf00      	nop
    for(;(state != HAL_GPIO_ReadPin(port, pin)) && (true == ret);)
 800232c:	897b      	ldrh	r3, [r7, #10]
 800232e:	4619      	mov	r1, r3
 8002330:	68f8      	ldr	r0, [r7, #12]
 8002332:	f002 fb3d 	bl	80049b0 <HAL_GPIO_ReadPin>
 8002336:	4603      	mov	r3, r0
 8002338:	461a      	mov	r2, r3
 800233a:	7a7b      	ldrb	r3, [r7, #9]
 800233c:	4293      	cmp	r3, r2
 800233e:	d002      	beq.n	8002346 <wait_for_gpio_state_timeout+0x5c>
 8002340:	7dfb      	ldrb	r3, [r7, #23]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1e0      	bne.n	8002308 <wait_for_gpio_state_timeout+0x1e>
    }
    return ret;
 8002346:	7dfb      	ldrb	r3, [r7, #23]
}
 8002348:	4618      	mov	r0, r3
 800234a:	3718      	adds	r7, #24
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <I2C_ClearBusyFlagErratum>:


static void I2C_ClearBusyFlagErratum(I2C_HandleTypeDef* handle, uint32_t timeout)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
    GPIO_InitTypeDef GPIO_InitStructure;

    // 1. Clear PE bit.
    CLEAR_BIT(handle->Instance->CR1, I2C_CR1_PE);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 0201 	bic.w	r2, r2, #1
 8002368:	601a      	str	r2, [r3, #0]

    //  2. Configure the SCL and SDA I/Os as General Purpose Output Open-Drain, High level (Write 1 to GPIOx_ODR).
    HAL_I2C_DeInit(handle);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f002 fc90 	bl	8004c90 <HAL_I2C_DeInit>

    GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 8002370:	2311      	movs	r3, #17
 8002372:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002374:	2300      	movs	r3, #0
 8002376:	613b      	str	r3, [r7, #16]

    GPIO_InitStructure.Pin = I2C1_SCL_Pin;
 8002378:	2340      	movs	r3, #64	; 0x40
 800237a:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800237c:	f107 0308 	add.w	r3, r7, #8
 8002380:	4619      	mov	r1, r3
 8002382:	4840      	ldr	r0, [pc, #256]	; (8002484 <I2C_ClearBusyFlagErratum+0x134>)
 8002384:	f002 f8fe 	bl	8004584 <HAL_GPIO_Init>

    GPIO_InitStructure.Pin = I2C1_SDA_Pin;
 8002388:	2380      	movs	r3, #128	; 0x80
 800238a:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(I2C1_SDA_GPIO_Port, &GPIO_InitStructure);
 800238c:	f107 0308 	add.w	r3, r7, #8
 8002390:	4619      	mov	r1, r3
 8002392:	483c      	ldr	r0, [pc, #240]	; (8002484 <I2C_ClearBusyFlagErratum+0x134>)
 8002394:	f002 f8f6 	bl	8004584 <HAL_GPIO_Init>

    // 3. Check SCL and SDA High level in GPIOx_IDR.
    HAL_GPIO_WritePin(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin, GPIO_PIN_SET);
 8002398:	2201      	movs	r2, #1
 800239a:	2180      	movs	r1, #128	; 0x80
 800239c:	4839      	ldr	r0, [pc, #228]	; (8002484 <I2C_ClearBusyFlagErratum+0x134>)
 800239e:	f002 fb1e 	bl	80049de <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin, GPIO_PIN_SET);
 80023a2:	2201      	movs	r2, #1
 80023a4:	2140      	movs	r1, #64	; 0x40
 80023a6:	4837      	ldr	r0, [pc, #220]	; (8002484 <I2C_ClearBusyFlagErratum+0x134>)
 80023a8:	f002 fb19 	bl	80049de <HAL_GPIO_WritePin>

    wait_for_gpio_state_timeout(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin, GPIO_PIN_SET, timeout);
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	2201      	movs	r2, #1
 80023b0:	2140      	movs	r1, #64	; 0x40
 80023b2:	4834      	ldr	r0, [pc, #208]	; (8002484 <I2C_ClearBusyFlagErratum+0x134>)
 80023b4:	f7ff ff99 	bl	80022ea <wait_for_gpio_state_timeout>
    wait_for_gpio_state_timeout(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin, GPIO_PIN_SET, timeout);
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	2201      	movs	r2, #1
 80023bc:	2180      	movs	r1, #128	; 0x80
 80023be:	4831      	ldr	r0, [pc, #196]	; (8002484 <I2C_ClearBusyFlagErratum+0x134>)
 80023c0:	f7ff ff93 	bl	80022ea <wait_for_gpio_state_timeout>

    // 4. Configure the SDA I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR).
    HAL_GPIO_WritePin(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin, GPIO_PIN_RESET);
 80023c4:	2200      	movs	r2, #0
 80023c6:	2180      	movs	r1, #128	; 0x80
 80023c8:	482e      	ldr	r0, [pc, #184]	; (8002484 <I2C_ClearBusyFlagErratum+0x134>)
 80023ca:	f002 fb08 	bl	80049de <HAL_GPIO_WritePin>

    // 5. Check SDA Low level in GPIOx_IDR.
    wait_for_gpio_state_timeout(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin, GPIO_PIN_RESET, timeout);
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	2200      	movs	r2, #0
 80023d2:	2180      	movs	r1, #128	; 0x80
 80023d4:	482b      	ldr	r0, [pc, #172]	; (8002484 <I2C_ClearBusyFlagErratum+0x134>)
 80023d6:	f7ff ff88 	bl	80022ea <wait_for_gpio_state_timeout>

    // 6. Configure the SCL I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR).
    HAL_GPIO_WritePin(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin, GPIO_PIN_RESET);
 80023da:	2200      	movs	r2, #0
 80023dc:	2140      	movs	r1, #64	; 0x40
 80023de:	4829      	ldr	r0, [pc, #164]	; (8002484 <I2C_ClearBusyFlagErratum+0x134>)
 80023e0:	f002 fafd 	bl	80049de <HAL_GPIO_WritePin>

    // 7. Check SCL Low level in GPIOx_IDR.
    wait_for_gpio_state_timeout(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin, GPIO_PIN_RESET, timeout);
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	2200      	movs	r2, #0
 80023e8:	2140      	movs	r1, #64	; 0x40
 80023ea:	4826      	ldr	r0, [pc, #152]	; (8002484 <I2C_ClearBusyFlagErratum+0x134>)
 80023ec:	f7ff ff7d 	bl	80022ea <wait_for_gpio_state_timeout>

    // 8. Configure the SCL I/O as General Purpose Output Open-Drain, High level (Write 1 to GPIOx_ODR).
    HAL_GPIO_WritePin(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin, GPIO_PIN_SET);
 80023f0:	2201      	movs	r2, #1
 80023f2:	2140      	movs	r1, #64	; 0x40
 80023f4:	4823      	ldr	r0, [pc, #140]	; (8002484 <I2C_ClearBusyFlagErratum+0x134>)
 80023f6:	f002 faf2 	bl	80049de <HAL_GPIO_WritePin>

    // 9. Check SCL High level in GPIOx_IDR.
    wait_for_gpio_state_timeout(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin, GPIO_PIN_SET, timeout);
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	2201      	movs	r2, #1
 80023fe:	2140      	movs	r1, #64	; 0x40
 8002400:	4820      	ldr	r0, [pc, #128]	; (8002484 <I2C_ClearBusyFlagErratum+0x134>)
 8002402:	f7ff ff72 	bl	80022ea <wait_for_gpio_state_timeout>

    // 10. Configure the SDA I/O as General Purpose Output Open-Drain , High level (Write 1 to GPIOx_ODR).
    HAL_GPIO_WritePin(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin, GPIO_PIN_SET);
 8002406:	2201      	movs	r2, #1
 8002408:	2180      	movs	r1, #128	; 0x80
 800240a:	481e      	ldr	r0, [pc, #120]	; (8002484 <I2C_ClearBusyFlagErratum+0x134>)
 800240c:	f002 fae7 	bl	80049de <HAL_GPIO_WritePin>

    // 11. Check SDA High level in GPIOx_IDR.
    wait_for_gpio_state_timeout(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin, GPIO_PIN_SET, timeout);
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	2201      	movs	r2, #1
 8002414:	2180      	movs	r1, #128	; 0x80
 8002416:	481b      	ldr	r0, [pc, #108]	; (8002484 <I2C_ClearBusyFlagErratum+0x134>)
 8002418:	f7ff ff67 	bl	80022ea <wait_for_gpio_state_timeout>

    // 12. Configure the SCL and SDA I/Os as Alternate function Open-Drain.
    GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 800241c:	2312      	movs	r3, #18
 800241e:	60fb      	str	r3, [r7, #12]
    //MAT//GPIO_InitStructure.Alternate = GPIO_AF1_I2C1;

    GPIO_InitStructure.Pin = I2C1_SCL_Pin;
 8002420:	2340      	movs	r3, #64	; 0x40
 8002422:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(I2C1_SCL_GPIO_Port, &GPIO_InitStructure);
 8002424:	f107 0308 	add.w	r3, r7, #8
 8002428:	4619      	mov	r1, r3
 800242a:	4816      	ldr	r0, [pc, #88]	; (8002484 <I2C_ClearBusyFlagErratum+0x134>)
 800242c:	f002 f8aa 	bl	8004584 <HAL_GPIO_Init>

    GPIO_InitStructure.Pin = I2C1_SDA_Pin;
 8002430:	2380      	movs	r3, #128	; 0x80
 8002432:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(I2C1_SDA_GPIO_Port, &GPIO_InitStructure);
 8002434:	f107 0308 	add.w	r3, r7, #8
 8002438:	4619      	mov	r1, r3
 800243a:	4812      	ldr	r0, [pc, #72]	; (8002484 <I2C_ClearBusyFlagErratum+0x134>)
 800243c:	f002 f8a2 	bl	8004584 <HAL_GPIO_Init>

    // 13. Set SWRST bit in I2Cx_CR1 register.
    SET_BIT(handle->Instance->CR1, I2C_CR1_SWRST);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800244e:	601a      	str	r2, [r3, #0]
    asm("nop");
 8002450:	bf00      	nop

    /* 14. Clear SWRST bit in I2Cx_CR1 register. */
    CLEAR_BIT(handle->Instance->CR1, I2C_CR1_SWRST);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002460:	601a      	str	r2, [r3, #0]
    asm("nop");
 8002462:	bf00      	nop

    /* 15. Enable the I2C peripheral by setting the PE bit in I2Cx_CR1 register */
    SET_BIT(handle->Instance->CR1, I2C_CR1_PE);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f042 0201 	orr.w	r2, r2, #1
 8002472:	601a      	str	r2, [r3, #0]
    asm("nop");
 8002474:	bf00      	nop

    // Call initialization function.
    HAL_I2C_Init(handle);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f002 fae2 	bl	8004a40 <HAL_I2C_Init>
}
 800247c:	bf00      	nop
 800247e:	3718      	adds	r7, #24
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40010c00 	.word	0x40010c00

08002488 <MapValue>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
double MapValue(double Val, double FromLow,double FromHigh,double ToLow,double ToHigh){
 8002488:	b5b0      	push	{r4, r5, r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002492:	e9c7 2300 	strd	r2, r3, [r7]
	return ToLow + ((ToHigh - ToLow) / (FromHigh - FromLow)) * (Val - FromLow);
 8002496:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800249a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800249e:	f7fd fe63 	bl	8000168 <__aeabi_dsub>
 80024a2:	4603      	mov	r3, r0
 80024a4:	460c      	mov	r4, r1
 80024a6:	4625      	mov	r5, r4
 80024a8:	461c      	mov	r4, r3
 80024aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80024ae:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80024b2:	f7fd fe59 	bl	8000168 <__aeabi_dsub>
 80024b6:	4602      	mov	r2, r0
 80024b8:	460b      	mov	r3, r1
 80024ba:	4620      	mov	r0, r4
 80024bc:	4629      	mov	r1, r5
 80024be:	f7fe f935 	bl	800072c <__aeabi_ddiv>
 80024c2:	4603      	mov	r3, r0
 80024c4:	460c      	mov	r4, r1
 80024c6:	4625      	mov	r5, r4
 80024c8:	461c      	mov	r4, r3
 80024ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80024ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80024d2:	f7fd fe49 	bl	8000168 <__aeabi_dsub>
 80024d6:	4602      	mov	r2, r0
 80024d8:	460b      	mov	r3, r1
 80024da:	4620      	mov	r0, r4
 80024dc:	4629      	mov	r1, r5
 80024de:	f7fd fffb 	bl	80004d8 <__aeabi_dmul>
 80024e2:	4603      	mov	r3, r0
 80024e4:	460c      	mov	r4, r1
 80024e6:	4618      	mov	r0, r3
 80024e8:	4621      	mov	r1, r4
 80024ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80024ee:	f7fd fe3d 	bl	800016c <__adddf3>
 80024f2:	4603      	mov	r3, r0
 80024f4:	460c      	mov	r4, r1
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	4621      	mov	r1, r4
 80024fa:	3710      	adds	r7, #16
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bdb0      	pop	{r4, r5, r7, pc}

08002500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002502:	b0a1      	sub	sp, #132	; 0x84
 8002504:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002506:	f001 fca1 	bl	8003e4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800250a:	f000 fca9 	bl	8002e60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800250e:	f000 fe81 	bl	8003214 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002512:	f000 fd03 	bl	8002f1c <MX_ADC1_Init>
  MX_I2C1_Init();
 8002516:	f000 fd3f 	bl	8002f98 <MX_I2C1_Init>
  MX_I2C2_Init();
 800251a:	f000 fd6b 	bl	8002ff4 <MX_I2C2_Init>
  MX_SPI1_Init();
 800251e:	f000 fd97 	bl	8003050 <MX_SPI1_Init>
  MX_TIM3_Init();
 8002522:	f000 fdcb 	bl	80030bc <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8002526:	f000 fe21 	bl	800316c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800252a:	f000 fe49 	bl	80031c0 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 800252e:	f008 fde3 	bl	800b0f8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  I2C_ClearBusyFlagErratum(&hi2c1, 1000);
 8002532:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002536:	486a      	ldr	r0, [pc, #424]	; (80026e0 <main+0x1e0>)
 8002538:	f7ff ff0a 	bl	8002350 <I2C_ClearBusyFlagErratum>
  __HAL_RCC_I2C1_FORCE_RESET();
 800253c:	4b69      	ldr	r3, [pc, #420]	; (80026e4 <main+0x1e4>)
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	4a68      	ldr	r2, [pc, #416]	; (80026e4 <main+0x1e4>)
 8002542:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002546:	6113      	str	r3, [r2, #16]
  __HAL_RCC_I2C1_RELEASE_RESET();
 8002548:	4b66      	ldr	r3, [pc, #408]	; (80026e4 <main+0x1e4>)
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	4a65      	ldr	r2, [pc, #404]	; (80026e4 <main+0x1e4>)
 800254e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002552:	6113      	str	r3, [r2, #16]
  MX_I2C1_Init();
 8002554:	f000 fd20 	bl	8002f98 <MX_I2C1_Init>
  __HAL_RCC_I2C1_FORCE_RESET();
 8002558:	4b62      	ldr	r3, [pc, #392]	; (80026e4 <main+0x1e4>)
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	4a61      	ldr	r2, [pc, #388]	; (80026e4 <main+0x1e4>)
 800255e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002562:	6113      	str	r3, [r2, #16]
  __HAL_RCC_I2C1_RELEASE_RESET();
 8002564:	4b5f      	ldr	r3, [pc, #380]	; (80026e4 <main+0x1e4>)
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	4a5e      	ldr	r2, [pc, #376]	; (80026e4 <main+0x1e4>)
 800256a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800256e:	6113      	str	r3, [r2, #16]
  MX_I2C1_Init();
 8002570:	f000 fd12 	bl	8002f98 <MX_I2C1_Init>

  //I2C_ClearBusyFlagErratum2(&hi2c2, 1000);
  __HAL_RCC_I2C2_FORCE_RESET();
 8002574:	4b5b      	ldr	r3, [pc, #364]	; (80026e4 <main+0x1e4>)
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	4a5a      	ldr	r2, [pc, #360]	; (80026e4 <main+0x1e4>)
 800257a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800257e:	6113      	str	r3, [r2, #16]
  __HAL_RCC_I2C2_RELEASE_RESET();
 8002580:	4b58      	ldr	r3, [pc, #352]	; (80026e4 <main+0x1e4>)
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	4a57      	ldr	r2, [pc, #348]	; (80026e4 <main+0x1e4>)
 8002586:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800258a:	6113      	str	r3, [r2, #16]
  MX_I2C2_Init();
 800258c:	f000 fd32 	bl	8002ff4 <MX_I2C2_Init>
  __HAL_RCC_I2C2_FORCE_RESET();
 8002590:	4b54      	ldr	r3, [pc, #336]	; (80026e4 <main+0x1e4>)
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	4a53      	ldr	r2, [pc, #332]	; (80026e4 <main+0x1e4>)
 8002596:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800259a:	6113      	str	r3, [r2, #16]
  __HAL_RCC_I2C2_RELEASE_RESET();
 800259c:	4b51      	ldr	r3, [pc, #324]	; (80026e4 <main+0x1e4>)
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	4a50      	ldr	r2, [pc, #320]	; (80026e4 <main+0x1e4>)
 80025a2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80025a6:	6113      	str	r3, [r2, #16]
  MX_I2C2_Init();
 80025a8:	f000 fd24 	bl	8002ff4 <MX_I2C2_Init>

  NRF24_begin(CSN_GPIO_Port, CSN_Pin, CE_Pin, hspi1);
 80025ac:	4c4e      	ldr	r4, [pc, #312]	; (80026e8 <main+0x1e8>)
 80025ae:	4668      	mov	r0, sp
 80025b0:	1d23      	adds	r3, r4, #4
 80025b2:	2254      	movs	r2, #84	; 0x54
 80025b4:	4619      	mov	r1, r3
 80025b6:	f009 fa5d 	bl	800ba74 <memcpy>
 80025ba:	6823      	ldr	r3, [r4, #0]
 80025bc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80025c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80025c4:	4849      	ldr	r0, [pc, #292]	; (80026ec <main+0x1ec>)
 80025c6:	f7fe fb09 	bl	8000bdc <NRF24_begin>

  NRF24_setAutoAck(true);
 80025ca:	2001      	movs	r0, #1
 80025cc:	f7fe fd50 	bl	8001070 <NRF24_setAutoAck>
  NRF24_setChannel(52);
 80025d0:	2034      	movs	r0, #52	; 0x34
 80025d2:	f7fe fc98 	bl	8000f06 <NRF24_setChannel>
  NRF24_setPayloadSize(13);
 80025d6:	200d      	movs	r0, #13
 80025d8:	f7fe fcaa 	bl	8000f30 <NRF24_setPayloadSize>
  NRF24_openReadingPipe(1, PipeAddres);
 80025dc:	4b44      	ldr	r3, [pc, #272]	; (80026f0 <main+0x1f0>)
 80025de:	cb18      	ldmia	r3, {r3, r4}
 80025e0:	461a      	mov	r2, r3
 80025e2:	4623      	mov	r3, r4
 80025e4:	2001      	movs	r0, #1
 80025e6:	f7fe fc25 	bl	8000e34 <NRF24_openReadingPipe>
  NRF24_enableDynamicPayloads();
 80025ea:	f7fe fcf7 	bl	8000fdc <NRF24_enableDynamicPayloads>
  NRF24_enableAckPayload();
 80025ee:	f7fe fcc7 	bl	8000f80 <NRF24_enableAckPayload>
  NRF24_startListening();
 80025f2:	f7fe fbd3 	bl	8000d9c <NRF24_startListening>

  //HAL_I2C_Init(&hi2c1);

  MPU6050_Init(&hi2c1);
 80025f6:	483a      	ldr	r0, [pc, #232]	; (80026e0 <main+0x1e0>)
 80025f8:	f7ff fb14 	bl	8001c24 <MPU6050_Init>

  MpuConfig.Accel_Full_Scale = AFS_SEL_4g;
 80025fc:	2301      	movs	r3, #1
 80025fe:	76bb      	strb	r3, [r7, #26]
  MpuConfig.ClockSource = Internal_8MHz;
 8002600:	2300      	movs	r3, #0
 8002602:	763b      	strb	r3, [r7, #24]
  MpuConfig.CONFIG_DLPF = DLPF_184A_188G_Hz;
 8002604:	2301      	movs	r3, #1
 8002606:	76fb      	strb	r3, [r7, #27]
  MpuConfig.Gyro_Full_Scale = FS_SEL_500;
 8002608:	2301      	movs	r3, #1
 800260a:	767b      	strb	r3, [r7, #25]
  MpuConfig.Sleep_Mode_Bit = 0;
 800260c:	2300      	movs	r3, #0
 800260e:	773b      	strb	r3, [r7, #28]
  MPU6050_Config(&MpuConfig);
 8002610:	f107 0318 	add.w	r3, r7, #24
 8002614:	4618      	mov	r0, r3
 8002616:	f7ff fb5b 	bl	8001cd0 <MPU6050_Config>


	lcd_init ();
 800261a:	f7ff fcbf 	bl	8001f9c <lcd_init>
	uint8_t check = SSD1306_Init ();
 800261e:	f000 fe89 	bl	8003334 <SSD1306_Init>
 8002622:	4603      	mov	r3, r0
 8002624:	77fb      	strb	r3, [r7, #31]
	SSD1306_Fill (0);
 8002626:	2000      	movs	r0, #0
 8002628:	f000 ff70 	bl	800350c <SSD1306_Fill>
	SSD1306_UpdateScreen(); //display
 800262c:	f000 ff40 	bl	80034b0 <SSD1306_UpdateScreen>
	SSD1306_GotoXY (10,10);
 8002630:	210a      	movs	r1, #10
 8002632:	200a      	movs	r0, #10
 8002634:	f000 ffe0 	bl	80035f8 <SSD1306_GotoXY>
	SSD1306_Puts ("HELLO", &Font_11x18, 1);
 8002638:	2201      	movs	r2, #1
 800263a:	492e      	ldr	r1, [pc, #184]	; (80026f4 <main+0x1f4>)
 800263c:	482e      	ldr	r0, [pc, #184]	; (80026f8 <main+0x1f8>)
 800263e:	f001 f871 	bl	8003724 <SSD1306_Puts>
	SSD1306_GotoXY (10, 30);
 8002642:	211e      	movs	r1, #30
 8002644:	200a      	movs	r0, #10
 8002646:	f000 ffd7 	bl	80035f8 <SSD1306_GotoXY>
	SSD1306_Puts ("WORLD !!", &Font_11x18, 1);
 800264a:	2201      	movs	r2, #1
 800264c:	4929      	ldr	r1, [pc, #164]	; (80026f4 <main+0x1f4>)
 800264e:	482b      	ldr	r0, [pc, #172]	; (80026fc <main+0x1fc>)
 8002650:	f001 f868 	bl	8003724 <SSD1306_Puts>
	SSD1306_UpdateScreen(); //display
 8002654:	f000 ff2c 	bl	80034b0 <SSD1306_UpdateScreen>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  if (NRF24_available()){
 8002658:	f7fe fbc4 	bl	8000de4 <NRF24_available>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	f000 811d 	beq.w	800289e <main+0x39e>
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002664:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002668:	4820      	ldr	r0, [pc, #128]	; (80026ec <main+0x1ec>)
 800266a:	f002 f9d0 	bl	8004a0e <HAL_GPIO_TogglePin>
		  NRF24_read(RF_RxData, 13);
 800266e:	210d      	movs	r1, #13
 8002670:	4823      	ldr	r0, [pc, #140]	; (8002700 <main+0x200>)
 8002672:	f7fe fbbf 	bl	8000df4 <NRF24_read>
		  Serial_Send(RF_RxData, 13);
 8002676:	210d      	movs	r1, #13
 8002678:	4821      	ldr	r0, [pc, #132]	; (8002700 <main+0x200>)
 800267a:	f7ff fe27 	bl	80022cc <Serial_Send>
		  NRF24_writeAckPayload(1, RF_TxData, 16);
 800267e:	2210      	movs	r2, #16
 8002680:	4920      	ldr	r1, [pc, #128]	; (8002704 <main+0x204>)
 8002682:	2001      	movs	r0, #1
 8002684:	f7fe fdef 	bl	8001266 <NRF24_writeAckPayload>
// BARDZO ISTOTNE, I2C i NRF ZAKLUCAJA SIE JAKOS, DLA TEGO DANE ZBIERAMY PO TRANSMISJI NRF
// ZAKLUCENIA NADAL WYSTEPUJA ALE ZADZIEJ, JE WYELIMINOWAC TRZEBA INACZEJ ??
		  // Ustawienie funkcji
		  RF_TxData[0] = 0;
 8002688:	4b1e      	ldr	r3, [pc, #120]	; (8002704 <main+0x204>)
 800268a:	2200      	movs	r2, #0
 800268c:	701a      	strb	r2, [r3, #0]
		  int16_t Val[4];
		  if (Flag[3] == 1) {
 800268e:	4b1e      	ldr	r3, [pc, #120]	; (8002708 <main+0x208>)
 8002690:	78db      	ldrb	r3, [r3, #3]
 8002692:	2b01      	cmp	r3, #1
 8002694:	f040 8103 	bne.w	800289e <main+0x39e>
			  // Ustawienie funkcji
			  RF_TxData[0] = FUNC_JOYSTICK_DATA;
 8002698:	4b1a      	ldr	r3, [pc, #104]	; (8002704 <main+0x204>)
 800269a:	2281      	movs	r2, #129	; 0x81
 800269c:	701a      	strb	r2, [r3, #0]
			  // Odczyt z ADS1115
			  for (int a = 0; a < 4; a++){
 800269e:	2300      	movs	r3, #0
 80026a0:	627b      	str	r3, [r7, #36]	; 0x24
 80026a2:	e06d      	b.n	8002780 <main+0x280>
				  ADSwrite[0] = 0x01;
 80026a4:	4b19      	ldr	r3, [pc, #100]	; (800270c <main+0x20c>)
 80026a6:	2201      	movs	r2, #1
 80026a8:	701a      	strb	r2, [r3, #0]
				  switch(a){
 80026aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ac:	2b03      	cmp	r3, #3
 80026ae:	d833      	bhi.n	8002718 <main+0x218>
 80026b0:	a201      	add	r2, pc, #4	; (adr r2, 80026b8 <main+0x1b8>)
 80026b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026b6:	bf00      	nop
 80026b8:	080026c9 	.word	0x080026c9
 80026bc:	080026d1 	.word	0x080026d1
 80026c0:	080026d9 	.word	0x080026d9
 80026c4:	08002711 	.word	0x08002711
				  case 0: {
					  ADSwrite[1] = 0xC1; // 11000011
 80026c8:	4b10      	ldr	r3, [pc, #64]	; (800270c <main+0x20c>)
 80026ca:	22c1      	movs	r2, #193	; 0xc1
 80026cc:	705a      	strb	r2, [r3, #1]
					  break;
 80026ce:	e023      	b.n	8002718 <main+0x218>
				  }
				  case 1: {
					  ADSwrite[1] = 0xD1; // 11010011
 80026d0:	4b0e      	ldr	r3, [pc, #56]	; (800270c <main+0x20c>)
 80026d2:	22d1      	movs	r2, #209	; 0xd1
 80026d4:	705a      	strb	r2, [r3, #1]
					  break;
 80026d6:	e01f      	b.n	8002718 <main+0x218>
				  }
				  case 2: {
					  ADSwrite[1] = 0xE1; // 11100011
 80026d8:	4b0c      	ldr	r3, [pc, #48]	; (800270c <main+0x20c>)
 80026da:	22e1      	movs	r2, #225	; 0xe1
 80026dc:	705a      	strb	r2, [r3, #1]
					  break;
 80026de:	e01b      	b.n	8002718 <main+0x218>
 80026e0:	20000970 	.word	0x20000970
 80026e4:	40021000 	.word	0x40021000
 80026e8:	20000b20 	.word	0x20000b20
 80026ec:	40011000 	.word	0x40011000
 80026f0:	20000008 	.word	0x20000008
 80026f4:	20000000 	.word	0x20000000
 80026f8:	0800c808 	.word	0x0800c808
 80026fc:	0800c810 	.word	0x0800c810
 8002700:	20000ab0 	.word	0x20000ab0
 8002704:	20000a60 	.word	0x20000a60
 8002708:	20000320 	.word	0x20000320
 800270c:	20000b10 	.word	0x20000b10
				  }
				  case 3: {
					  ADSwrite[1] = 0xF1; // 11110011
 8002710:	4bb9      	ldr	r3, [pc, #740]	; (80029f8 <main+0x4f8>)
 8002712:	22f1      	movs	r2, #241	; 0xf1
 8002714:	705a      	strb	r2, [r3, #1]
					  break;
 8002716:	bf00      	nop
				  __HAL_RCC_I2C2_FORCE_RESET();
				  __HAL_RCC_I2C2_RELEASE_RESET();
				  MX_I2C2_Init();*/


				  ADSwrite[2] = 0xE3; // 10000011 // 10100011 // 11000011// 11100011
 8002718:	4bb7      	ldr	r3, [pc, #732]	; (80029f8 <main+0x4f8>)
 800271a:	22e3      	movs	r2, #227	; 0xe3
 800271c:	709a      	strb	r2, [r3, #2]
				  HAL_I2C_Master_Transmit(&hi2c2, ADS1115_ADDRESS<<1, ADSwrite, 3, 100);
 800271e:	2364      	movs	r3, #100	; 0x64
 8002720:	9300      	str	r3, [sp, #0]
 8002722:	2303      	movs	r3, #3
 8002724:	4ab4      	ldr	r2, [pc, #720]	; (80029f8 <main+0x4f8>)
 8002726:	2190      	movs	r1, #144	; 0x90
 8002728:	48b4      	ldr	r0, [pc, #720]	; (80029fc <main+0x4fc>)
 800272a:	f002 fae1 	bl	8004cf0 <HAL_I2C_Master_Transmit>
				  ADSwrite[0] = 0x00;
 800272e:	4bb2      	ldr	r3, [pc, #712]	; (80029f8 <main+0x4f8>)
 8002730:	2200      	movs	r2, #0
 8002732:	701a      	strb	r2, [r3, #0]
				  HAL_I2C_Master_Transmit(&hi2c2, ADS1115_ADDRESS<<1, ADSwrite, 1, 100);
 8002734:	2364      	movs	r3, #100	; 0x64
 8002736:	9300      	str	r3, [sp, #0]
 8002738:	2301      	movs	r3, #1
 800273a:	4aaf      	ldr	r2, [pc, #700]	; (80029f8 <main+0x4f8>)
 800273c:	2190      	movs	r1, #144	; 0x90
 800273e:	48af      	ldr	r0, [pc, #700]	; (80029fc <main+0x4fc>)
 8002740:	f002 fad6 	bl	8004cf0 <HAL_I2C_Master_Transmit>
				  //HAL_Delay(1);
				  NRF24_DelayMicroSeconds(100);
 8002744:	2064      	movs	r0, #100	; 0x64
 8002746:	f7fe f901 	bl	800094c <NRF24_DelayMicroSeconds>
				  HAL_I2C_Master_Receive(&hi2c2, ADS1115_ADDRESS<<1, ADSwrite, 2, 100);
 800274a:	2364      	movs	r3, #100	; 0x64
 800274c:	9300      	str	r3, [sp, #0]
 800274e:	2302      	movs	r3, #2
 8002750:	4aa9      	ldr	r2, [pc, #676]	; (80029f8 <main+0x4f8>)
 8002752:	2190      	movs	r1, #144	; 0x90
 8002754:	48a9      	ldr	r0, [pc, #676]	; (80029fc <main+0x4fc>)
 8002756:	f002 fbc9 	bl	8004eec <HAL_I2C_Master_Receive>

				  //RF_TxData[1 + a*2] = ADSwrite[1];
				  //RF_TxData[1 + a*2 + 1] = ADSwrite[0];
				  Val[a] = (((int16_t)ADSwrite[0]) << 8 | ADSwrite[1]);
 800275a:	4ba7      	ldr	r3, [pc, #668]	; (80029f8 <main+0x4f8>)
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	021b      	lsls	r3, r3, #8
 8002760:	b21a      	sxth	r2, r3
 8002762:	4ba5      	ldr	r3, [pc, #660]	; (80029f8 <main+0x4f8>)
 8002764:	785b      	ldrb	r3, [r3, #1]
 8002766:	b21b      	sxth	r3, r3
 8002768:	4313      	orrs	r3, r2
 800276a:	b21a      	sxth	r2, r3
 800276c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002774:	440b      	add	r3, r1
 8002776:	f823 2c18 	strh.w	r2, [r3, #-24]
			  for (int a = 0; a < 4; a++){
 800277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277c:	3301      	adds	r3, #1
 800277e:	627b      	str	r3, [r7, #36]	; 0x24
 8002780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002782:	2b03      	cmp	r3, #3
 8002784:	dd8e      	ble.n	80026a4 <main+0x1a4>
				}
			  //Val[1] = (int16_t)MapValue(Val[1], 0, Val[0], -1023, 1023);
			  Val[2] = (int16_t)MapValue(Val[2], 0, Val[0], -1023, 1023) - 22;
 8002786:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800278a:	4618      	mov	r0, r3
 800278c:	f7fd fe3a 	bl	8000404 <__aeabi_i2d>
 8002790:	4605      	mov	r5, r0
 8002792:	460e      	mov	r6, r1
 8002794:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002798:	4618      	mov	r0, r3
 800279a:	f7fd fe33 	bl	8000404 <__aeabi_i2d>
 800279e:	460a      	mov	r2, r1
 80027a0:	4601      	mov	r1, r0
 80027a2:	a491      	add	r4, pc, #580	; (adr r4, 80029e8 <main+0x4e8>)
 80027a4:	e9d4 3400 	ldrd	r3, r4, [r4]
 80027a8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80027ac:	a490      	add	r4, pc, #576	; (adr r4, 80029f0 <main+0x4f0>)
 80027ae:	e9d4 3400 	ldrd	r3, r4, [r4]
 80027b2:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80027b6:	e9cd 1200 	strd	r1, r2, [sp]
 80027ba:	f04f 0200 	mov.w	r2, #0
 80027be:	f04f 0300 	mov.w	r3, #0
 80027c2:	4628      	mov	r0, r5
 80027c4:	4631      	mov	r1, r6
 80027c6:	f7ff fe5f 	bl	8002488 <MapValue>
 80027ca:	4603      	mov	r3, r0
 80027cc:	460c      	mov	r4, r1
 80027ce:	4618      	mov	r0, r3
 80027d0:	4621      	mov	r1, r4
 80027d2:	f7fe f893 	bl	80008fc <__aeabi_d2iz>
 80027d6:	4603      	mov	r3, r0
 80027d8:	b21b      	sxth	r3, r3
 80027da:	b29b      	uxth	r3, r3
 80027dc:	3b16      	subs	r3, #22
 80027de:	b29b      	uxth	r3, r3
 80027e0:	b21b      	sxth	r3, r3
 80027e2:	82bb      	strh	r3, [r7, #20]
			  Val[3] = (int16_t)MapValue(Val[3], 0, Val[0], -1023, 1023) - 22;
 80027e4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7fd fe0b 	bl	8000404 <__aeabi_i2d>
 80027ee:	4605      	mov	r5, r0
 80027f0:	460e      	mov	r6, r1
 80027f2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7fd fe04 	bl	8000404 <__aeabi_i2d>
 80027fc:	460a      	mov	r2, r1
 80027fe:	4601      	mov	r1, r0
 8002800:	a479      	add	r4, pc, #484	; (adr r4, 80029e8 <main+0x4e8>)
 8002802:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002806:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800280a:	a479      	add	r4, pc, #484	; (adr r4, 80029f0 <main+0x4f0>)
 800280c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002810:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8002814:	e9cd 1200 	strd	r1, r2, [sp]
 8002818:	f04f 0200 	mov.w	r2, #0
 800281c:	f04f 0300 	mov.w	r3, #0
 8002820:	4628      	mov	r0, r5
 8002822:	4631      	mov	r1, r6
 8002824:	f7ff fe30 	bl	8002488 <MapValue>
 8002828:	4603      	mov	r3, r0
 800282a:	460c      	mov	r4, r1
 800282c:	4618      	mov	r0, r3
 800282e:	4621      	mov	r1, r4
 8002830:	f7fe f864 	bl	80008fc <__aeabi_d2iz>
 8002834:	4603      	mov	r3, r0
 8002836:	b21b      	sxth	r3, r3
 8002838:	b29b      	uxth	r3, r3
 800283a:	3b16      	subs	r3, #22
 800283c:	b29b      	uxth	r3, r3
 800283e:	b21b      	sxth	r3, r3
 8002840:	82fb      	strh	r3, [r7, #22]
			  //Val[0] = (int16_t)MapValue(Val[0], 0, Val[0], -1023, 1023);

			  if ((Val[2] <= 6) && (Val[2] >= -6)) Val[2] = 0;
 8002842:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002846:	2b06      	cmp	r3, #6
 8002848:	dc06      	bgt.n	8002858 <main+0x358>
 800284a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800284e:	f113 0f06 	cmn.w	r3, #6
 8002852:	db01      	blt.n	8002858 <main+0x358>
 8002854:	2300      	movs	r3, #0
 8002856:	82bb      	strh	r3, [r7, #20]
			  if ((Val[3] <= 6) && (Val[3] >= -6)) Val[3] = 0;
 8002858:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800285c:	2b06      	cmp	r3, #6
 800285e:	dc06      	bgt.n	800286e <main+0x36e>
 8002860:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002864:	f113 0f06 	cmn.w	r3, #6
 8002868:	db01      	blt.n	800286e <main+0x36e>
 800286a:	2300      	movs	r3, #0
 800286c:	82fb      	strh	r3, [r7, #22]

			  RF_TxData[1] = Val[2];
 800286e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002872:	b2da      	uxtb	r2, r3
 8002874:	4b62      	ldr	r3, [pc, #392]	; (8002a00 <main+0x500>)
 8002876:	705a      	strb	r2, [r3, #1]
			  RF_TxData[2] = Val[2] >> 8;
 8002878:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800287c:	121b      	asrs	r3, r3, #8
 800287e:	b21b      	sxth	r3, r3
 8002880:	b2da      	uxtb	r2, r3
 8002882:	4b5f      	ldr	r3, [pc, #380]	; (8002a00 <main+0x500>)
 8002884:	709a      	strb	r2, [r3, #2]
			  RF_TxData[3] = Val[3];
 8002886:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800288a:	b2da      	uxtb	r2, r3
 800288c:	4b5c      	ldr	r3, [pc, #368]	; (8002a00 <main+0x500>)
 800288e:	70da      	strb	r2, [r3, #3]
			  RF_TxData[4] = Val[3] >> 8;
 8002890:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002894:	121b      	asrs	r3, r3, #8
 8002896:	b21b      	sxth	r3, r3
 8002898:	b2da      	uxtb	r2, r3
 800289a:	4b59      	ldr	r3, [pc, #356]	; (8002a00 <main+0x500>)
 800289c:	711a      	strb	r2, [r3, #4]

			  // Nastepne odczyty...

		  }
	  }
	  if (Flag[4] == 1){
 800289e:	4b59      	ldr	r3, [pc, #356]	; (8002a04 <main+0x504>)
 80028a0:	791b      	ldrb	r3, [r3, #4]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d122      	bne.n	80028ec <main+0x3ec>
		  Flag[4] = 0;
 80028a6:	4b57      	ldr	r3, [pc, #348]	; (8002a04 <main+0x504>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	711a      	strb	r2, [r3, #4]
		  char Bad[6] = {'B', 'A', 'D', '(', BadFunc, ')'};
 80028ac:	2342      	movs	r3, #66	; 0x42
 80028ae:	723b      	strb	r3, [r7, #8]
 80028b0:	2341      	movs	r3, #65	; 0x41
 80028b2:	727b      	strb	r3, [r7, #9]
 80028b4:	2344      	movs	r3, #68	; 0x44
 80028b6:	72bb      	strb	r3, [r7, #10]
 80028b8:	2328      	movs	r3, #40	; 0x28
 80028ba:	72fb      	strb	r3, [r7, #11]
 80028bc:	4b52      	ldr	r3, [pc, #328]	; (8002a08 <main+0x508>)
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	733b      	strb	r3, [r7, #12]
 80028c2:	2329      	movs	r3, #41	; 0x29
 80028c4:	737b      	strb	r3, [r7, #13]
		  Serial_Send(Bad, 6);
 80028c6:	f107 0308 	add.w	r3, r7, #8
 80028ca:	2106      	movs	r1, #6
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff fcfd 	bl	80022cc <Serial_Send>
		  HAL_Delay(1000);
 80028d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028d6:	f001 fb1b 	bl	8003f10 <HAL_Delay>
		  Bad[0] = BadFunc;
 80028da:	4b4b      	ldr	r3, [pc, #300]	; (8002a08 <main+0x508>)
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	723b      	strb	r3, [r7, #8]
		  Serial_Send(Bad, 6);
 80028e0:	f107 0308 	add.w	r3, r7, #8
 80028e4:	2106      	movs	r1, #6
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7ff fcf0 	bl	80022cc <Serial_Send>
	  }
	  if ((Flag[0] == 1) || (Flag[1] == 1)) {
 80028ec:	4b45      	ldr	r3, [pc, #276]	; (8002a04 <main+0x504>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d004      	beq.n	80028fe <main+0x3fe>
 80028f4:	4b43      	ldr	r3, [pc, #268]	; (8002a04 <main+0x504>)
 80028f6:	785b      	ldrb	r3, [r3, #1]
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	f040 80a6 	bne.w	8002a4a <main+0x54a>
		  Flag[0] = 0;
 80028fe:	4b41      	ldr	r3, [pc, #260]	; (8002a04 <main+0x504>)
 8002900:	2200      	movs	r2, #0
 8002902:	701a      	strb	r2, [r3, #0]

		  I2C_ClearBusyFlagErratum(&hi2c1, 1000);
 8002904:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002908:	4840      	ldr	r0, [pc, #256]	; (8002a0c <main+0x50c>)
 800290a:	f7ff fd21 	bl	8002350 <I2C_ClearBusyFlagErratum>

		  __HAL_RCC_I2C1_FORCE_RESET();
 800290e:	4b40      	ldr	r3, [pc, #256]	; (8002a10 <main+0x510>)
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	4a3f      	ldr	r2, [pc, #252]	; (8002a10 <main+0x510>)
 8002914:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002918:	6113      	str	r3, [r2, #16]
		  __HAL_RCC_I2C1_RELEASE_RESET();
 800291a:	4b3d      	ldr	r3, [pc, #244]	; (8002a10 <main+0x510>)
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	4a3c      	ldr	r2, [pc, #240]	; (8002a10 <main+0x510>)
 8002920:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002924:	6113      	str	r3, [r2, #16]
		  MX_I2C1_Init();
 8002926:	f000 fb37 	bl	8002f98 <MX_I2C1_Init>
		  __HAL_RCC_I2C1_FORCE_RESET();
 800292a:	4b39      	ldr	r3, [pc, #228]	; (8002a10 <main+0x510>)
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	4a38      	ldr	r2, [pc, #224]	; (8002a10 <main+0x510>)
 8002930:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002934:	6113      	str	r3, [r2, #16]
		  __HAL_RCC_I2C1_RELEASE_RESET();
 8002936:	4b36      	ldr	r3, [pc, #216]	; (8002a10 <main+0x510>)
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	4a35      	ldr	r2, [pc, #212]	; (8002a10 <main+0x510>)
 800293c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002940:	6113      	str	r3, [r2, #16]
		  MX_I2C1_Init();
 8002942:	f000 fb29 	bl	8002f98 <MX_I2C1_Init>

			//HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);

			MPU6050_Get_Accel_RawData(&AccelData);	// Najpier trzeba akcelerometr
 8002946:	4833      	ldr	r0, [pc, #204]	; (8002a14 <main+0x514>)
 8002948:	f7ff fa78 	bl	8001e3c <MPU6050_Get_Accel_RawData>
			MPU6050_Get_Gyro_RawData(&GyroData);		// Potem zyroskop
 800294c:	4832      	ldr	r0, [pc, #200]	; (8002a18 <main+0x518>)
 800294e:	f7ff fadb 	bl	8001f08 <MPU6050_Get_Gyro_RawData>

			Msg[0] = FUNC_ACCEL_GYRO_DATA;
 8002952:	4b32      	ldr	r3, [pc, #200]	; (8002a1c <main+0x51c>)
 8002954:	2280      	movs	r2, #128	; 0x80
 8002956:	701a      	strb	r2, [r3, #0]
			Msg[1] = AccelData.x;
 8002958:	4b2e      	ldr	r3, [pc, #184]	; (8002a14 <main+0x514>)
 800295a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800295e:	b2da      	uxtb	r2, r3
 8002960:	4b2e      	ldr	r3, [pc, #184]	; (8002a1c <main+0x51c>)
 8002962:	705a      	strb	r2, [r3, #1]
			Msg[2] = AccelData.x >> 8;
 8002964:	4b2b      	ldr	r3, [pc, #172]	; (8002a14 <main+0x514>)
 8002966:	f9b3 3000 	ldrsh.w	r3, [r3]
 800296a:	121b      	asrs	r3, r3, #8
 800296c:	b21b      	sxth	r3, r3
 800296e:	b2da      	uxtb	r2, r3
 8002970:	4b2a      	ldr	r3, [pc, #168]	; (8002a1c <main+0x51c>)
 8002972:	709a      	strb	r2, [r3, #2]
			Msg[3] = AccelData.y;
 8002974:	4b27      	ldr	r3, [pc, #156]	; (8002a14 <main+0x514>)
 8002976:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800297a:	b2da      	uxtb	r2, r3
 800297c:	4b27      	ldr	r3, [pc, #156]	; (8002a1c <main+0x51c>)
 800297e:	70da      	strb	r2, [r3, #3]
			Msg[4] = AccelData.y >> 8;
 8002980:	4b24      	ldr	r3, [pc, #144]	; (8002a14 <main+0x514>)
 8002982:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002986:	121b      	asrs	r3, r3, #8
 8002988:	b21b      	sxth	r3, r3
 800298a:	b2da      	uxtb	r2, r3
 800298c:	4b23      	ldr	r3, [pc, #140]	; (8002a1c <main+0x51c>)
 800298e:	711a      	strb	r2, [r3, #4]
			Msg[5] = AccelData.z;
 8002990:	4b20      	ldr	r3, [pc, #128]	; (8002a14 <main+0x514>)
 8002992:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002996:	b2da      	uxtb	r2, r3
 8002998:	4b20      	ldr	r3, [pc, #128]	; (8002a1c <main+0x51c>)
 800299a:	715a      	strb	r2, [r3, #5]
			Msg[6] = AccelData.z >> 8;
 800299c:	4b1d      	ldr	r3, [pc, #116]	; (8002a14 <main+0x514>)
 800299e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80029a2:	121b      	asrs	r3, r3, #8
 80029a4:	b21b      	sxth	r3, r3
 80029a6:	b2da      	uxtb	r2, r3
 80029a8:	4b1c      	ldr	r3, [pc, #112]	; (8002a1c <main+0x51c>)
 80029aa:	719a      	strb	r2, [r3, #6]

			Msg[7] = GyroData.x;
 80029ac:	4b1a      	ldr	r3, [pc, #104]	; (8002a18 <main+0x518>)
 80029ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029b2:	b2da      	uxtb	r2, r3
 80029b4:	4b19      	ldr	r3, [pc, #100]	; (8002a1c <main+0x51c>)
 80029b6:	71da      	strb	r2, [r3, #7]
			Msg[8] = GyroData.x >> 8;
 80029b8:	4b17      	ldr	r3, [pc, #92]	; (8002a18 <main+0x518>)
 80029ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029be:	121b      	asrs	r3, r3, #8
 80029c0:	b21b      	sxth	r3, r3
 80029c2:	b2da      	uxtb	r2, r3
 80029c4:	4b15      	ldr	r3, [pc, #84]	; (8002a1c <main+0x51c>)
 80029c6:	721a      	strb	r2, [r3, #8]
			Msg[9] = GyroData.y;
 80029c8:	4b13      	ldr	r3, [pc, #76]	; (8002a18 <main+0x518>)
 80029ca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80029ce:	b2da      	uxtb	r2, r3
 80029d0:	4b12      	ldr	r3, [pc, #72]	; (8002a1c <main+0x51c>)
 80029d2:	725a      	strb	r2, [r3, #9]
			Msg[10] = GyroData.y >> 8;
 80029d4:	4b10      	ldr	r3, [pc, #64]	; (8002a18 <main+0x518>)
 80029d6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80029da:	121b      	asrs	r3, r3, #8
 80029dc:	b21b      	sxth	r3, r3
 80029de:	b2da      	uxtb	r2, r3
 80029e0:	4b0e      	ldr	r3, [pc, #56]	; (8002a1c <main+0x51c>)
 80029e2:	729a      	strb	r2, [r3, #10]
 80029e4:	e01c      	b.n	8002a20 <main+0x520>
 80029e6:	bf00      	nop
 80029e8:	00000000 	.word	0x00000000
 80029ec:	408ff800 	.word	0x408ff800
 80029f0:	00000000 	.word	0x00000000
 80029f4:	c08ff800 	.word	0xc08ff800
 80029f8:	20000b10 	.word	0x20000b10
 80029fc:	200009c4 	.word	0x200009c4
 8002a00:	20000a60 	.word	0x20000a60
 8002a04:	20000320 	.word	0x20000320
 8002a08:	20000bb8 	.word	0x20000bb8
 8002a0c:	20000970 	.word	0x20000970
 8002a10:	40021000 	.word	0x40021000
 8002a14:	20000a18 	.word	0x20000a18
 8002a18:	20000b18 	.word	0x20000b18
 8002a1c:	20000960 	.word	0x20000960
			Msg[11] = GyroData.z;
 8002a20:	4bb7      	ldr	r3, [pc, #732]	; (8002d00 <main+0x800>)
 8002a22:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002a26:	b2da      	uxtb	r2, r3
 8002a28:	4bb6      	ldr	r3, [pc, #728]	; (8002d04 <main+0x804>)
 8002a2a:	72da      	strb	r2, [r3, #11]
			Msg[12] = GyroData.z >> 8;
 8002a2c:	4bb4      	ldr	r3, [pc, #720]	; (8002d00 <main+0x800>)
 8002a2e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002a32:	121b      	asrs	r3, r3, #8
 8002a34:	b21b      	sxth	r3, r3
 8002a36:	b2da      	uxtb	r2, r3
 8002a38:	4bb2      	ldr	r3, [pc, #712]	; (8002d04 <main+0x804>)
 8002a3a:	731a      	strb	r2, [r3, #12]

			Serial_Send(Msg, 13);
 8002a3c:	210d      	movs	r1, #13
 8002a3e:	48b1      	ldr	r0, [pc, #708]	; (8002d04 <main+0x804>)
 8002a40:	f7ff fc44 	bl	80022cc <Serial_Send>
			HAL_Delay(10);
 8002a44:	200a      	movs	r0, #10
 8002a46:	f001 fa63 	bl	8003f10 <HAL_Delay>
	  }
	  if (Flag[2] == 1){
 8002a4a:	4baf      	ldr	r3, [pc, #700]	; (8002d08 <main+0x808>)
 8002a4c:	789b      	ldrb	r3, [r3, #2]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	f47f ae02 	bne.w	8002658 <main+0x158>
		  Flag[2] = 0;
 8002a54:	4bac      	ldr	r3, [pc, #688]	; (8002d08 <main+0x808>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	709a      	strb	r2, [r3, #2]
		  // Odczyt z ADS1115
		  int16_t Val[4];
		  for (int a = 0; a < 4; a++){
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	623b      	str	r3, [r7, #32]
 8002a5e:	e055      	b.n	8002b0c <main+0x60c>
			  ADSwrite[0] = 0x01;
 8002a60:	4baa      	ldr	r3, [pc, #680]	; (8002d0c <main+0x80c>)
 8002a62:	2201      	movs	r2, #1
 8002a64:	701a      	strb	r2, [r3, #0]
			  switch(a){
 8002a66:	6a3b      	ldr	r3, [r7, #32]
 8002a68:	2b03      	cmp	r3, #3
 8002a6a:	d81b      	bhi.n	8002aa4 <main+0x5a4>
 8002a6c:	a201      	add	r2, pc, #4	; (adr r2, 8002a74 <main+0x574>)
 8002a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a72:	bf00      	nop
 8002a74:	08002a85 	.word	0x08002a85
 8002a78:	08002a8d 	.word	0x08002a8d
 8002a7c:	08002a95 	.word	0x08002a95
 8002a80:	08002a9d 	.word	0x08002a9d
			  case 0: {
				  ADSwrite[1] = 0xC1; // 11000011
 8002a84:	4ba1      	ldr	r3, [pc, #644]	; (8002d0c <main+0x80c>)
 8002a86:	22c1      	movs	r2, #193	; 0xc1
 8002a88:	705a      	strb	r2, [r3, #1]
				  break;
 8002a8a:	e00b      	b.n	8002aa4 <main+0x5a4>
			  }
			  case 1: {
				  ADSwrite[1] = 0xD1; // 11010011
 8002a8c:	4b9f      	ldr	r3, [pc, #636]	; (8002d0c <main+0x80c>)
 8002a8e:	22d1      	movs	r2, #209	; 0xd1
 8002a90:	705a      	strb	r2, [r3, #1]
				  break;
 8002a92:	e007      	b.n	8002aa4 <main+0x5a4>
			  }
			  case 2: {
				  ADSwrite[1] = 0xE1; // 11100011
 8002a94:	4b9d      	ldr	r3, [pc, #628]	; (8002d0c <main+0x80c>)
 8002a96:	22e1      	movs	r2, #225	; 0xe1
 8002a98:	705a      	strb	r2, [r3, #1]
				  break;
 8002a9a:	e003      	b.n	8002aa4 <main+0x5a4>
			  }
			  case 3: {
				  ADSwrite[1] = 0xF1; // 11110011
 8002a9c:	4b9b      	ldr	r3, [pc, #620]	; (8002d0c <main+0x80c>)
 8002a9e:	22f1      	movs	r2, #241	; 0xf1
 8002aa0:	705a      	strb	r2, [r3, #1]
				  break;
 8002aa2:	bf00      	nop
			  MX_I2C2_Init();
			  __HAL_RCC_I2C2_FORCE_RESET();
			  __HAL_RCC_I2C2_RELEASE_RESET();
			  MX_I2C2_Init();*/

			  ADSwrite[2] = 0xE3; // 10000011 // 10100011 // 11000011// 11100011
 8002aa4:	4b99      	ldr	r3, [pc, #612]	; (8002d0c <main+0x80c>)
 8002aa6:	22e3      	movs	r2, #227	; 0xe3
 8002aa8:	709a      	strb	r2, [r3, #2]
			  HAL_I2C_Master_Transmit(&hi2c2, ADS1115_ADDRESS<<1, ADSwrite, 3, 100);
 8002aaa:	2364      	movs	r3, #100	; 0x64
 8002aac:	9300      	str	r3, [sp, #0]
 8002aae:	2303      	movs	r3, #3
 8002ab0:	4a96      	ldr	r2, [pc, #600]	; (8002d0c <main+0x80c>)
 8002ab2:	2190      	movs	r1, #144	; 0x90
 8002ab4:	4896      	ldr	r0, [pc, #600]	; (8002d10 <main+0x810>)
 8002ab6:	f002 f91b 	bl	8004cf0 <HAL_I2C_Master_Transmit>
			  ADSwrite[0] = 0x00;
 8002aba:	4b94      	ldr	r3, [pc, #592]	; (8002d0c <main+0x80c>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	701a      	strb	r2, [r3, #0]
			  HAL_I2C_Master_Transmit(&hi2c2, ADS1115_ADDRESS<<1, ADSwrite, 1, 100);
 8002ac0:	2364      	movs	r3, #100	; 0x64
 8002ac2:	9300      	str	r3, [sp, #0]
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	4a91      	ldr	r2, [pc, #580]	; (8002d0c <main+0x80c>)
 8002ac8:	2190      	movs	r1, #144	; 0x90
 8002aca:	4891      	ldr	r0, [pc, #580]	; (8002d10 <main+0x810>)
 8002acc:	f002 f910 	bl	8004cf0 <HAL_I2C_Master_Transmit>
			  //HAL_Delay(1);
			  NRF24_DelayMicroSeconds(100);
 8002ad0:	2064      	movs	r0, #100	; 0x64
 8002ad2:	f7fd ff3b 	bl	800094c <NRF24_DelayMicroSeconds>
			  HAL_I2C_Master_Receive(&hi2c2, ADS1115_ADDRESS<<1, ADSwrite, 2, 100);
 8002ad6:	2364      	movs	r3, #100	; 0x64
 8002ad8:	9300      	str	r3, [sp, #0]
 8002ada:	2302      	movs	r3, #2
 8002adc:	4a8b      	ldr	r2, [pc, #556]	; (8002d0c <main+0x80c>)
 8002ade:	2190      	movs	r1, #144	; 0x90
 8002ae0:	488b      	ldr	r0, [pc, #556]	; (8002d10 <main+0x810>)
 8002ae2:	f002 fa03 	bl	8004eec <HAL_I2C_Master_Receive>

			  //Msg[1 + a*2] = ADSwrite[1];
			  //Msg[1 + a*2 + 1] = ADSwrite[0];
			  Val[a] = (((int16_t)ADSwrite[0]) << 8 | ADSwrite[1]);
 8002ae6:	4b89      	ldr	r3, [pc, #548]	; (8002d0c <main+0x80c>)
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	021b      	lsls	r3, r3, #8
 8002aec:	b21a      	sxth	r2, r3
 8002aee:	4b87      	ldr	r3, [pc, #540]	; (8002d0c <main+0x80c>)
 8002af0:	785b      	ldrb	r3, [r3, #1]
 8002af2:	b21b      	sxth	r3, r3
 8002af4:	4313      	orrs	r3, r2
 8002af6:	b21a      	sxth	r2, r3
 8002af8:	6a3b      	ldr	r3, [r7, #32]
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002b00:	440b      	add	r3, r1
 8002b02:	f823 2c28 	strh.w	r2, [r3, #-40]
		  for (int a = 0; a < 4; a++){
 8002b06:	6a3b      	ldr	r3, [r7, #32]
 8002b08:	3301      	adds	r3, #1
 8002b0a:	623b      	str	r3, [r7, #32]
 8002b0c:	6a3b      	ldr	r3, [r7, #32]
 8002b0e:	2b03      	cmp	r3, #3
 8002b10:	dda6      	ble.n	8002a60 <main+0x560>
			  //Serial_Send("ELO", 3);

		  }

		  Val[1] = (int16_t)MapValue(Val[1], 0, Val[0], -1023, 1023);
 8002b12:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7fd fc74 	bl	8000404 <__aeabi_i2d>
 8002b1c:	4605      	mov	r5, r0
 8002b1e:	460e      	mov	r6, r1
 8002b20:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7fd fc6d 	bl	8000404 <__aeabi_i2d>
 8002b2a:	460a      	mov	r2, r1
 8002b2c:	4601      	mov	r1, r0
 8002b2e:	a470      	add	r4, pc, #448	; (adr r4, 8002cf0 <main+0x7f0>)
 8002b30:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002b34:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8002b38:	a46f      	add	r4, pc, #444	; (adr r4, 8002cf8 <main+0x7f8>)
 8002b3a:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002b3e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8002b42:	e9cd 1200 	strd	r1, r2, [sp]
 8002b46:	f04f 0200 	mov.w	r2, #0
 8002b4a:	f04f 0300 	mov.w	r3, #0
 8002b4e:	4628      	mov	r0, r5
 8002b50:	4631      	mov	r1, r6
 8002b52:	f7ff fc99 	bl	8002488 <MapValue>
 8002b56:	4603      	mov	r3, r0
 8002b58:	460c      	mov	r4, r1
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	4621      	mov	r1, r4
 8002b5e:	f7fd fecd 	bl	80008fc <__aeabi_d2iz>
 8002b62:	4603      	mov	r3, r0
 8002b64:	b21b      	sxth	r3, r3
 8002b66:	807b      	strh	r3, [r7, #2]
		  Val[2] = (int16_t)MapValue(Val[2], 0, Val[0], -1023, 1023) - 22;
 8002b68:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7fd fc49 	bl	8000404 <__aeabi_i2d>
 8002b72:	4605      	mov	r5, r0
 8002b74:	460e      	mov	r6, r1
 8002b76:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7fd fc42 	bl	8000404 <__aeabi_i2d>
 8002b80:	460a      	mov	r2, r1
 8002b82:	4601      	mov	r1, r0
 8002b84:	a45a      	add	r4, pc, #360	; (adr r4, 8002cf0 <main+0x7f0>)
 8002b86:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002b8a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8002b8e:	a45a      	add	r4, pc, #360	; (adr r4, 8002cf8 <main+0x7f8>)
 8002b90:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002b94:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8002b98:	e9cd 1200 	strd	r1, r2, [sp]
 8002b9c:	f04f 0200 	mov.w	r2, #0
 8002ba0:	f04f 0300 	mov.w	r3, #0
 8002ba4:	4628      	mov	r0, r5
 8002ba6:	4631      	mov	r1, r6
 8002ba8:	f7ff fc6e 	bl	8002488 <MapValue>
 8002bac:	4603      	mov	r3, r0
 8002bae:	460c      	mov	r4, r1
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	4621      	mov	r1, r4
 8002bb4:	f7fd fea2 	bl	80008fc <__aeabi_d2iz>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	b21b      	sxth	r3, r3
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	3b16      	subs	r3, #22
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	b21b      	sxth	r3, r3
 8002bc4:	80bb      	strh	r3, [r7, #4]
		  Val[3] = (int16_t)MapValue(Val[3], 0, Val[0], -1023, 1023) -22;
 8002bc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7fd fc1a 	bl	8000404 <__aeabi_i2d>
 8002bd0:	4605      	mov	r5, r0
 8002bd2:	460e      	mov	r6, r1
 8002bd4:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7fd fc13 	bl	8000404 <__aeabi_i2d>
 8002bde:	460a      	mov	r2, r1
 8002be0:	4601      	mov	r1, r0
 8002be2:	a443      	add	r4, pc, #268	; (adr r4, 8002cf0 <main+0x7f0>)
 8002be4:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002be8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8002bec:	a442      	add	r4, pc, #264	; (adr r4, 8002cf8 <main+0x7f8>)
 8002bee:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002bf2:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8002bf6:	e9cd 1200 	strd	r1, r2, [sp]
 8002bfa:	f04f 0200 	mov.w	r2, #0
 8002bfe:	f04f 0300 	mov.w	r3, #0
 8002c02:	4628      	mov	r0, r5
 8002c04:	4631      	mov	r1, r6
 8002c06:	f7ff fc3f 	bl	8002488 <MapValue>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	460c      	mov	r4, r1
 8002c0e:	4618      	mov	r0, r3
 8002c10:	4621      	mov	r1, r4
 8002c12:	f7fd fe73 	bl	80008fc <__aeabi_d2iz>
 8002c16:	4603      	mov	r3, r0
 8002c18:	b21b      	sxth	r3, r3
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	3b16      	subs	r3, #22
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	b21b      	sxth	r3, r3
 8002c22:	80fb      	strh	r3, [r7, #6]
		  Val[0] = (int16_t)MapValue(Val[0], 0, Val[0], -1023, 1023);
 8002c24:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7fd fbeb 	bl	8000404 <__aeabi_i2d>
 8002c2e:	4605      	mov	r5, r0
 8002c30:	460e      	mov	r6, r1
 8002c32:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7fd fbe4 	bl	8000404 <__aeabi_i2d>
 8002c3c:	460a      	mov	r2, r1
 8002c3e:	4601      	mov	r1, r0
 8002c40:	a42b      	add	r4, pc, #172	; (adr r4, 8002cf0 <main+0x7f0>)
 8002c42:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002c46:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8002c4a:	a42b      	add	r4, pc, #172	; (adr r4, 8002cf8 <main+0x7f8>)
 8002c4c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002c50:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8002c54:	e9cd 1200 	strd	r1, r2, [sp]
 8002c58:	f04f 0200 	mov.w	r2, #0
 8002c5c:	f04f 0300 	mov.w	r3, #0
 8002c60:	4628      	mov	r0, r5
 8002c62:	4631      	mov	r1, r6
 8002c64:	f7ff fc10 	bl	8002488 <MapValue>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	460c      	mov	r4, r1
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	4621      	mov	r1, r4
 8002c70:	f7fd fe44 	bl	80008fc <__aeabi_d2iz>
 8002c74:	4603      	mov	r3, r0
 8002c76:	b21b      	sxth	r3, r3
 8002c78:	803b      	strh	r3, [r7, #0]

		  if ((Val[2] <= 3) && (Val[2] >= -3)) Val[2] = 0;
 8002c7a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002c7e:	2b03      	cmp	r3, #3
 8002c80:	dc06      	bgt.n	8002c90 <main+0x790>
 8002c82:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002c86:	f113 0f03 	cmn.w	r3, #3
 8002c8a:	db01      	blt.n	8002c90 <main+0x790>
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	80bb      	strh	r3, [r7, #4]
		  if ((Val[3] <= 3) && (Val[3] >= -3)) Val[3] = 0;
 8002c90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c94:	2b03      	cmp	r3, #3
 8002c96:	dc06      	bgt.n	8002ca6 <main+0x7a6>
 8002c98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c9c:	f113 0f03 	cmn.w	r3, #3
 8002ca0:	db01      	blt.n	8002ca6 <main+0x7a6>
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	80fb      	strh	r3, [r7, #6]

		  Msg[0] = FUNC_JOYSTICK_DATA;
 8002ca6:	4b17      	ldr	r3, [pc, #92]	; (8002d04 <main+0x804>)
 8002ca8:	2281      	movs	r2, #129	; 0x81
 8002caa:	701a      	strb	r2, [r3, #0]
		  Msg[1] = Val[2];
 8002cac:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002cb0:	b2da      	uxtb	r2, r3
 8002cb2:	4b14      	ldr	r3, [pc, #80]	; (8002d04 <main+0x804>)
 8002cb4:	705a      	strb	r2, [r3, #1]
		  Msg[2] = Val[2] >> 8;
 8002cb6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002cba:	121b      	asrs	r3, r3, #8
 8002cbc:	b21b      	sxth	r3, r3
 8002cbe:	b2da      	uxtb	r2, r3
 8002cc0:	4b10      	ldr	r3, [pc, #64]	; (8002d04 <main+0x804>)
 8002cc2:	709a      	strb	r2, [r3, #2]
		  Msg[3] = Val[3];
 8002cc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cc8:	b2da      	uxtb	r2, r3
 8002cca:	4b0e      	ldr	r3, [pc, #56]	; (8002d04 <main+0x804>)
 8002ccc:	70da      	strb	r2, [r3, #3]
		  Msg[4] = Val[3] >> 8;
 8002cce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cd2:	121b      	asrs	r3, r3, #8
 8002cd4:	b21b      	sxth	r3, r3
 8002cd6:	b2da      	uxtb	r2, r3
 8002cd8:	4b0a      	ldr	r3, [pc, #40]	; (8002d04 <main+0x804>)
 8002cda:	711a      	strb	r2, [r3, #4]
		  if (Val[1] > 0) Msg[5] = 0; else Msg[5] = 128;
 8002cdc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	dd17      	ble.n	8002d14 <main+0x814>
 8002ce4:	4b07      	ldr	r3, [pc, #28]	; (8002d04 <main+0x804>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	715a      	strb	r2, [r3, #5]
 8002cea:	e016      	b.n	8002d1a <main+0x81a>
 8002cec:	f3af 8000 	nop.w
 8002cf0:	00000000 	.word	0x00000000
 8002cf4:	408ff800 	.word	0x408ff800
 8002cf8:	00000000 	.word	0x00000000
 8002cfc:	c08ff800 	.word	0xc08ff800
 8002d00:	20000b18 	.word	0x20000b18
 8002d04:	20000960 	.word	0x20000960
 8002d08:	20000320 	.word	0x20000320
 8002d0c:	20000b10 	.word	0x20000b10
 8002d10:	200009c4 	.word	0x200009c4
 8002d14:	4b4f      	ldr	r3, [pc, #316]	; (8002e54 <main+0x954>)
 8002d16:	2280      	movs	r2, #128	; 0x80
 8002d18:	715a      	strb	r2, [r3, #5]
		  if (HAL_GPIO_ReadPin(BT_LA_GPIO_Port, BT_LA_Pin) == GPIO_PIN_RESET) Msg[5] += 64;
 8002d1a:	2104      	movs	r1, #4
 8002d1c:	484e      	ldr	r0, [pc, #312]	; (8002e58 <main+0x958>)
 8002d1e:	f001 fe47 	bl	80049b0 <HAL_GPIO_ReadPin>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d105      	bne.n	8002d34 <main+0x834>
 8002d28:	4b4a      	ldr	r3, [pc, #296]	; (8002e54 <main+0x954>)
 8002d2a:	795b      	ldrb	r3, [r3, #5]
 8002d2c:	3340      	adds	r3, #64	; 0x40
 8002d2e:	b2da      	uxtb	r2, r3
 8002d30:	4b48      	ldr	r3, [pc, #288]	; (8002e54 <main+0x954>)
 8002d32:	715a      	strb	r2, [r3, #5]
		  if (HAL_GPIO_ReadPin(BT_LB_GPIO_Port, BT_LB_Pin) == GPIO_PIN_RESET) Msg[5] += 32;
 8002d34:	2108      	movs	r1, #8
 8002d36:	4848      	ldr	r0, [pc, #288]	; (8002e58 <main+0x958>)
 8002d38:	f001 fe3a 	bl	80049b0 <HAL_GPIO_ReadPin>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d105      	bne.n	8002d4e <main+0x84e>
 8002d42:	4b44      	ldr	r3, [pc, #272]	; (8002e54 <main+0x954>)
 8002d44:	795b      	ldrb	r3, [r3, #5]
 8002d46:	3320      	adds	r3, #32
 8002d48:	b2da      	uxtb	r2, r3
 8002d4a:	4b42      	ldr	r3, [pc, #264]	; (8002e54 <main+0x954>)
 8002d4c:	715a      	strb	r2, [r3, #5]
		  if (HAL_GPIO_ReadPin(BT_LC_GPIO_Port, BT_LC_Pin) == GPIO_PIN_RESET) Msg[5] += 16;
 8002d4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d52:	4842      	ldr	r0, [pc, #264]	; (8002e5c <main+0x95c>)
 8002d54:	f001 fe2c 	bl	80049b0 <HAL_GPIO_ReadPin>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d105      	bne.n	8002d6a <main+0x86a>
 8002d5e:	4b3d      	ldr	r3, [pc, #244]	; (8002e54 <main+0x954>)
 8002d60:	795b      	ldrb	r3, [r3, #5]
 8002d62:	3310      	adds	r3, #16
 8002d64:	b2da      	uxtb	r2, r3
 8002d66:	4b3b      	ldr	r3, [pc, #236]	; (8002e54 <main+0x954>)
 8002d68:	715a      	strb	r2, [r3, #5]
		  if (HAL_GPIO_ReadPin(BT_LD_GPIO_Port, BT_LD_Pin) == GPIO_PIN_RESET) Msg[5] += 8;
 8002d6a:	2102      	movs	r1, #2
 8002d6c:	483a      	ldr	r0, [pc, #232]	; (8002e58 <main+0x958>)
 8002d6e:	f001 fe1f 	bl	80049b0 <HAL_GPIO_ReadPin>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d105      	bne.n	8002d84 <main+0x884>
 8002d78:	4b36      	ldr	r3, [pc, #216]	; (8002e54 <main+0x954>)
 8002d7a:	795b      	ldrb	r3, [r3, #5]
 8002d7c:	3308      	adds	r3, #8
 8002d7e:	b2da      	uxtb	r2, r3
 8002d80:	4b34      	ldr	r3, [pc, #208]	; (8002e54 <main+0x954>)
 8002d82:	715a      	strb	r2, [r3, #5]

		  if (HAL_GPIO_ReadPin(BT_POWER_GPIO_Port, BT_POWER_Pin) == GPIO_PIN_SET) Msg[5] += 1;
 8002d84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d88:	4833      	ldr	r0, [pc, #204]	; (8002e58 <main+0x958>)
 8002d8a:	f001 fe11 	bl	80049b0 <HAL_GPIO_ReadPin>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d105      	bne.n	8002da0 <main+0x8a0>
 8002d94:	4b2f      	ldr	r3, [pc, #188]	; (8002e54 <main+0x954>)
 8002d96:	795b      	ldrb	r3, [r3, #5]
 8002d98:	3301      	adds	r3, #1
 8002d9a:	b2da      	uxtb	r2, r3
 8002d9c:	4b2d      	ldr	r3, [pc, #180]	; (8002e54 <main+0x954>)
 8002d9e:	715a      	strb	r2, [r3, #5]

		  Msg[6] = 0;
 8002da0:	4b2c      	ldr	r3, [pc, #176]	; (8002e54 <main+0x954>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	719a      	strb	r2, [r3, #6]
		  Msg[7] = 0;
 8002da6:	4b2b      	ldr	r3, [pc, #172]	; (8002e54 <main+0x954>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	71da      	strb	r2, [r3, #7]
		  Msg[8] = 0;
 8002dac:	4b29      	ldr	r3, [pc, #164]	; (8002e54 <main+0x954>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	721a      	strb	r2, [r3, #8]
		  Msg[9] = 0;
 8002db2:	4b28      	ldr	r3, [pc, #160]	; (8002e54 <main+0x954>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	725a      	strb	r2, [r3, #9]

		  Msg[10] = 0;
 8002db8:	4b26      	ldr	r3, [pc, #152]	; (8002e54 <main+0x954>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	729a      	strb	r2, [r3, #10]
		  if (HAL_GPIO_ReadPin(BT_RS_GPIO_Port, BT_RS_Pin) == GPIO_PIN_RESET) Msg[10] += 128;
 8002dbe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002dc2:	4825      	ldr	r0, [pc, #148]	; (8002e58 <main+0x958>)
 8002dc4:	f001 fdf4 	bl	80049b0 <HAL_GPIO_ReadPin>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d105      	bne.n	8002dda <main+0x8da>
 8002dce:	4b21      	ldr	r3, [pc, #132]	; (8002e54 <main+0x954>)
 8002dd0:	7a9b      	ldrb	r3, [r3, #10]
 8002dd2:	3b80      	subs	r3, #128	; 0x80
 8002dd4:	b2da      	uxtb	r2, r3
 8002dd6:	4b1f      	ldr	r3, [pc, #124]	; (8002e54 <main+0x954>)
 8002dd8:	729a      	strb	r2, [r3, #10]
		  if (HAL_GPIO_ReadPin(BT_RA_GPIO_Port, BT_RA_Pin) == GPIO_PIN_RESET) Msg[10] += 64;
 8002dda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002dde:	481e      	ldr	r0, [pc, #120]	; (8002e58 <main+0x958>)
 8002de0:	f001 fde6 	bl	80049b0 <HAL_GPIO_ReadPin>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d105      	bne.n	8002df6 <main+0x8f6>
 8002dea:	4b1a      	ldr	r3, [pc, #104]	; (8002e54 <main+0x954>)
 8002dec:	7a9b      	ldrb	r3, [r3, #10]
 8002dee:	3340      	adds	r3, #64	; 0x40
 8002df0:	b2da      	uxtb	r2, r3
 8002df2:	4b18      	ldr	r3, [pc, #96]	; (8002e54 <main+0x954>)
 8002df4:	729a      	strb	r2, [r3, #10]
		  if (HAL_GPIO_ReadPin(BT_RB_GPIO_Port, BT_RB_Pin) == GPIO_PIN_RESET) Msg[10] += 32;
 8002df6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002dfa:	4817      	ldr	r0, [pc, #92]	; (8002e58 <main+0x958>)
 8002dfc:	f001 fdd8 	bl	80049b0 <HAL_GPIO_ReadPin>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d105      	bne.n	8002e12 <main+0x912>
 8002e06:	4b13      	ldr	r3, [pc, #76]	; (8002e54 <main+0x954>)
 8002e08:	7a9b      	ldrb	r3, [r3, #10]
 8002e0a:	3320      	adds	r3, #32
 8002e0c:	b2da      	uxtb	r2, r3
 8002e0e:	4b11      	ldr	r3, [pc, #68]	; (8002e54 <main+0x954>)
 8002e10:	729a      	strb	r2, [r3, #10]
		  if (HAL_GPIO_ReadPin(BT_RC_GPIO_Port, BT_RC_Pin) == GPIO_PIN_RESET) Msg[10] += 16;
 8002e12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e16:	4810      	ldr	r0, [pc, #64]	; (8002e58 <main+0x958>)
 8002e18:	f001 fdca 	bl	80049b0 <HAL_GPIO_ReadPin>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d105      	bne.n	8002e2e <main+0x92e>
 8002e22:	4b0c      	ldr	r3, [pc, #48]	; (8002e54 <main+0x954>)
 8002e24:	7a9b      	ldrb	r3, [r3, #10]
 8002e26:	3310      	adds	r3, #16
 8002e28:	b2da      	uxtb	r2, r3
 8002e2a:	4b0a      	ldr	r3, [pc, #40]	; (8002e54 <main+0x954>)
 8002e2c:	729a      	strb	r2, [r3, #10]
		  if (HAL_GPIO_ReadPin(BT_RD_GPIO_Port, BT_RD_Pin) == GPIO_PIN_RESET) Msg[10] += 8;
 8002e2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e32:	480a      	ldr	r0, [pc, #40]	; (8002e5c <main+0x95c>)
 8002e34:	f001 fdbc 	bl	80049b0 <HAL_GPIO_ReadPin>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d105      	bne.n	8002e4a <main+0x94a>
 8002e3e:	4b05      	ldr	r3, [pc, #20]	; (8002e54 <main+0x954>)
 8002e40:	7a9b      	ldrb	r3, [r3, #10]
 8002e42:	3308      	adds	r3, #8
 8002e44:	b2da      	uxtb	r2, r3
 8002e46:	4b03      	ldr	r3, [pc, #12]	; (8002e54 <main+0x954>)
 8002e48:	729a      	strb	r2, [r3, #10]

		  // Nastepne odczyty

		  //RF_TXData[5] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)

		  Serial_Send(Msg, 11);
 8002e4a:	210b      	movs	r1, #11
 8002e4c:	4801      	ldr	r0, [pc, #4]	; (8002e54 <main+0x954>)
 8002e4e:	f7ff fa3d 	bl	80022cc <Serial_Send>
	  if (NRF24_available()){
 8002e52:	e401      	b.n	8002658 <main+0x158>
 8002e54:	20000960 	.word	0x20000960
 8002e58:	40010c00 	.word	0x40010c00
 8002e5c:	40010800 	.word	0x40010800

08002e60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b094      	sub	sp, #80	; 0x50
 8002e64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e6a:	2228      	movs	r2, #40	; 0x28
 8002e6c:	2100      	movs	r1, #0
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f008 fe0b 	bl	800ba8a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e74:	f107 0314 	add.w	r3, r7, #20
 8002e78:	2200      	movs	r2, #0
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	605a      	str	r2, [r3, #4]
 8002e7e:	609a      	str	r2, [r3, #8]
 8002e80:	60da      	str	r2, [r3, #12]
 8002e82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e84:	1d3b      	adds	r3, r7, #4
 8002e86:	2200      	movs	r2, #0
 8002e88:	601a      	str	r2, [r3, #0]
 8002e8a:	605a      	str	r2, [r3, #4]
 8002e8c:	609a      	str	r2, [r3, #8]
 8002e8e:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002e90:	2301      	movs	r3, #1
 8002e92:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002e94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e98:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ea6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002eaa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002eac:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002eb0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002eb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f003 fd52 	bl	8006960 <HAL_RCC_OscConfig>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002ec2:	f000 fa31 	bl	8003328 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ec6:	230f      	movs	r3, #15
 8002ec8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002eca:	2302      	movs	r3, #2
 8002ecc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ed2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ed6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002ed8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002edc:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002ede:	f107 0314 	add.w	r3, r7, #20
 8002ee2:	2102      	movs	r1, #2
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f003 ffbb 	bl	8006e60 <HAL_RCC_ClockConfig>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d001      	beq.n	8002ef4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002ef0:	f000 fa1a 	bl	8003328 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8002ef4:	2312      	movs	r3, #18
 8002ef6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8002ef8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002efc:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8002efe:	2300      	movs	r3, #0
 8002f00:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f02:	1d3b      	adds	r3, r7, #4
 8002f04:	4618      	mov	r0, r3
 8002f06:	f004 f947 	bl	8007198 <HAL_RCCEx_PeriphCLKConfig>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002f10:	f000 fa0a 	bl	8003328 <Error_Handler>
  }
}
 8002f14:	bf00      	nop
 8002f16:	3750      	adds	r7, #80	; 0x50
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002f22:	1d3b      	adds	r3, r7, #4
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	605a      	str	r2, [r3, #4]
 8002f2a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8002f2c:	4b18      	ldr	r3, [pc, #96]	; (8002f90 <MX_ADC1_Init+0x74>)
 8002f2e:	4a19      	ldr	r2, [pc, #100]	; (8002f94 <MX_ADC1_Init+0x78>)
 8002f30:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002f32:	4b17      	ldr	r3, [pc, #92]	; (8002f90 <MX_ADC1_Init+0x74>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002f38:	4b15      	ldr	r3, [pc, #84]	; (8002f90 <MX_ADC1_Init+0x74>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002f3e:	4b14      	ldr	r3, [pc, #80]	; (8002f90 <MX_ADC1_Init+0x74>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002f44:	4b12      	ldr	r3, [pc, #72]	; (8002f90 <MX_ADC1_Init+0x74>)
 8002f46:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002f4a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002f4c:	4b10      	ldr	r3, [pc, #64]	; (8002f90 <MX_ADC1_Init+0x74>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002f52:	4b0f      	ldr	r3, [pc, #60]	; (8002f90 <MX_ADC1_Init+0x74>)
 8002f54:	2201      	movs	r2, #1
 8002f56:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002f58:	480d      	ldr	r0, [pc, #52]	; (8002f90 <MX_ADC1_Init+0x74>)
 8002f5a:	f000 fffb 	bl	8003f54 <HAL_ADC_Init>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8002f64:	f000 f9e0 	bl	8003328 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002f70:	2300      	movs	r3, #0
 8002f72:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f74:	1d3b      	adds	r3, r7, #4
 8002f76:	4619      	mov	r1, r3
 8002f78:	4805      	ldr	r0, [pc, #20]	; (8002f90 <MX_ADC1_Init+0x74>)
 8002f7a:	f001 f8c3 	bl	8004104 <HAL_ADC_ConfigChannel>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8002f84:	f000 f9d0 	bl	8003328 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002f88:	bf00      	nop
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	20000a80 	.word	0x20000a80
 8002f94:	40012400 	.word	0x40012400

08002f98 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002f9c:	4b12      	ldr	r3, [pc, #72]	; (8002fe8 <MX_I2C1_Init+0x50>)
 8002f9e:	4a13      	ldr	r2, [pc, #76]	; (8002fec <MX_I2C1_Init+0x54>)
 8002fa0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002fa2:	4b11      	ldr	r3, [pc, #68]	; (8002fe8 <MX_I2C1_Init+0x50>)
 8002fa4:	4a12      	ldr	r2, [pc, #72]	; (8002ff0 <MX_I2C1_Init+0x58>)
 8002fa6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002fa8:	4b0f      	ldr	r3, [pc, #60]	; (8002fe8 <MX_I2C1_Init+0x50>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002fae:	4b0e      	ldr	r3, [pc, #56]	; (8002fe8 <MX_I2C1_Init+0x50>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002fb4:	4b0c      	ldr	r3, [pc, #48]	; (8002fe8 <MX_I2C1_Init+0x50>)
 8002fb6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002fba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002fbc:	4b0a      	ldr	r3, [pc, #40]	; (8002fe8 <MX_I2C1_Init+0x50>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002fc2:	4b09      	ldr	r3, [pc, #36]	; (8002fe8 <MX_I2C1_Init+0x50>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002fc8:	4b07      	ldr	r3, [pc, #28]	; (8002fe8 <MX_I2C1_Init+0x50>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002fce:	4b06      	ldr	r3, [pc, #24]	; (8002fe8 <MX_I2C1_Init+0x50>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002fd4:	4804      	ldr	r0, [pc, #16]	; (8002fe8 <MX_I2C1_Init+0x50>)
 8002fd6:	f001 fd33 	bl	8004a40 <HAL_I2C_Init>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d001      	beq.n	8002fe4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002fe0:	f000 f9a2 	bl	8003328 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002fe4:	bf00      	nop
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	20000970 	.word	0x20000970
 8002fec:	40005400 	.word	0x40005400
 8002ff0:	00061a80 	.word	0x00061a80

08002ff4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002ff8:	4b12      	ldr	r3, [pc, #72]	; (8003044 <MX_I2C2_Init+0x50>)
 8002ffa:	4a13      	ldr	r2, [pc, #76]	; (8003048 <MX_I2C2_Init+0x54>)
 8002ffc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8002ffe:	4b11      	ldr	r3, [pc, #68]	; (8003044 <MX_I2C2_Init+0x50>)
 8003000:	4a12      	ldr	r2, [pc, #72]	; (800304c <MX_I2C2_Init+0x58>)
 8003002:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003004:	4b0f      	ldr	r3, [pc, #60]	; (8003044 <MX_I2C2_Init+0x50>)
 8003006:	2200      	movs	r2, #0
 8003008:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800300a:	4b0e      	ldr	r3, [pc, #56]	; (8003044 <MX_I2C2_Init+0x50>)
 800300c:	2200      	movs	r2, #0
 800300e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003010:	4b0c      	ldr	r3, [pc, #48]	; (8003044 <MX_I2C2_Init+0x50>)
 8003012:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003016:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003018:	4b0a      	ldr	r3, [pc, #40]	; (8003044 <MX_I2C2_Init+0x50>)
 800301a:	2200      	movs	r2, #0
 800301c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800301e:	4b09      	ldr	r3, [pc, #36]	; (8003044 <MX_I2C2_Init+0x50>)
 8003020:	2200      	movs	r2, #0
 8003022:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003024:	4b07      	ldr	r3, [pc, #28]	; (8003044 <MX_I2C2_Init+0x50>)
 8003026:	2200      	movs	r2, #0
 8003028:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800302a:	4b06      	ldr	r3, [pc, #24]	; (8003044 <MX_I2C2_Init+0x50>)
 800302c:	2200      	movs	r2, #0
 800302e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003030:	4804      	ldr	r0, [pc, #16]	; (8003044 <MX_I2C2_Init+0x50>)
 8003032:	f001 fd05 	bl	8004a40 <HAL_I2C_Init>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d001      	beq.n	8003040 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800303c:	f000 f974 	bl	8003328 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003040:	bf00      	nop
 8003042:	bd80      	pop	{r7, pc}
 8003044:	200009c4 	.word	0x200009c4
 8003048:	40005800 	.word	0x40005800
 800304c:	00061a80 	.word	0x00061a80

08003050 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003054:	4b17      	ldr	r3, [pc, #92]	; (80030b4 <MX_SPI1_Init+0x64>)
 8003056:	4a18      	ldr	r2, [pc, #96]	; (80030b8 <MX_SPI1_Init+0x68>)
 8003058:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800305a:	4b16      	ldr	r3, [pc, #88]	; (80030b4 <MX_SPI1_Init+0x64>)
 800305c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003060:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003062:	4b14      	ldr	r3, [pc, #80]	; (80030b4 <MX_SPI1_Init+0x64>)
 8003064:	2200      	movs	r2, #0
 8003066:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003068:	4b12      	ldr	r3, [pc, #72]	; (80030b4 <MX_SPI1_Init+0x64>)
 800306a:	2200      	movs	r2, #0
 800306c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800306e:	4b11      	ldr	r3, [pc, #68]	; (80030b4 <MX_SPI1_Init+0x64>)
 8003070:	2200      	movs	r2, #0
 8003072:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003074:	4b0f      	ldr	r3, [pc, #60]	; (80030b4 <MX_SPI1_Init+0x64>)
 8003076:	2200      	movs	r2, #0
 8003078:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800307a:	4b0e      	ldr	r3, [pc, #56]	; (80030b4 <MX_SPI1_Init+0x64>)
 800307c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003080:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003082:	4b0c      	ldr	r3, [pc, #48]	; (80030b4 <MX_SPI1_Init+0x64>)
 8003084:	2220      	movs	r2, #32
 8003086:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003088:	4b0a      	ldr	r3, [pc, #40]	; (80030b4 <MX_SPI1_Init+0x64>)
 800308a:	2200      	movs	r2, #0
 800308c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800308e:	4b09      	ldr	r3, [pc, #36]	; (80030b4 <MX_SPI1_Init+0x64>)
 8003090:	2200      	movs	r2, #0
 8003092:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003094:	4b07      	ldr	r3, [pc, #28]	; (80030b4 <MX_SPI1_Init+0x64>)
 8003096:	2200      	movs	r2, #0
 8003098:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800309a:	4b06      	ldr	r3, [pc, #24]	; (80030b4 <MX_SPI1_Init+0x64>)
 800309c:	220a      	movs	r2, #10
 800309e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80030a0:	4804      	ldr	r0, [pc, #16]	; (80030b4 <MX_SPI1_Init+0x64>)
 80030a2:	f004 f92f 	bl	8007304 <HAL_SPI_Init>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80030ac:	f000 f93c 	bl	8003328 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80030b0:	bf00      	nop
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	20000b20 	.word	0x20000b20
 80030b8:	40013000 	.word	0x40013000

080030bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b08a      	sub	sp, #40	; 0x28
 80030c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030c2:	f107 0320 	add.w	r3, r7, #32
 80030c6:	2200      	movs	r2, #0
 80030c8:	601a      	str	r2, [r3, #0]
 80030ca:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80030cc:	1d3b      	adds	r3, r7, #4
 80030ce:	2200      	movs	r2, #0
 80030d0:	601a      	str	r2, [r3, #0]
 80030d2:	605a      	str	r2, [r3, #4]
 80030d4:	609a      	str	r2, [r3, #8]
 80030d6:	60da      	str	r2, [r3, #12]
 80030d8:	611a      	str	r2, [r3, #16]
 80030da:	615a      	str	r2, [r3, #20]
 80030dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80030de:	4b21      	ldr	r3, [pc, #132]	; (8003164 <MX_TIM3_Init+0xa8>)
 80030e0:	4a21      	ldr	r2, [pc, #132]	; (8003168 <MX_TIM3_Init+0xac>)
 80030e2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80030e4:	4b1f      	ldr	r3, [pc, #124]	; (8003164 <MX_TIM3_Init+0xa8>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030ea:	4b1e      	ldr	r3, [pc, #120]	; (8003164 <MX_TIM3_Init+0xa8>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 80030f0:	4b1c      	ldr	r3, [pc, #112]	; (8003164 <MX_TIM3_Init+0xa8>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030f6:	4b1b      	ldr	r3, [pc, #108]	; (8003164 <MX_TIM3_Init+0xa8>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030fc:	4b19      	ldr	r3, [pc, #100]	; (8003164 <MX_TIM3_Init+0xa8>)
 80030fe:	2200      	movs	r2, #0
 8003100:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003102:	4818      	ldr	r0, [pc, #96]	; (8003164 <MX_TIM3_Init+0xa8>)
 8003104:	f004 fe18 	bl	8007d38 <HAL_TIM_PWM_Init>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800310e:	f000 f90b 	bl	8003328 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003112:	2300      	movs	r3, #0
 8003114:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003116:	2300      	movs	r3, #0
 8003118:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800311a:	f107 0320 	add.w	r3, r7, #32
 800311e:	4619      	mov	r1, r3
 8003120:	4810      	ldr	r0, [pc, #64]	; (8003164 <MX_TIM3_Init+0xa8>)
 8003122:	f005 f8e5 	bl	80082f0 <HAL_TIMEx_MasterConfigSynchronization>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 800312c:	f000 f8fc 	bl	8003328 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003130:	2360      	movs	r3, #96	; 0x60
 8003132:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003134:	2300      	movs	r3, #0
 8003136:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003138:	2300      	movs	r3, #0
 800313a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800313c:	2300      	movs	r3, #0
 800313e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003140:	1d3b      	adds	r3, r7, #4
 8003142:	2208      	movs	r2, #8
 8003144:	4619      	mov	r1, r3
 8003146:	4807      	ldr	r0, [pc, #28]	; (8003164 <MX_TIM3_Init+0xa8>)
 8003148:	f004 fe22 	bl	8007d90 <HAL_TIM_PWM_ConfigChannel>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8003152:	f000 f8e9 	bl	8003328 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003156:	4803      	ldr	r0, [pc, #12]	; (8003164 <MX_TIM3_Init+0xa8>)
 8003158:	f000 fd08 	bl	8003b6c <HAL_TIM_MspPostInit>

}
 800315c:	bf00      	nop
 800315e:	3728      	adds	r7, #40	; 0x28
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	20000a20 	.word	0x20000a20
 8003168:	40000400 	.word	0x40000400

0800316c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003170:	4b11      	ldr	r3, [pc, #68]	; (80031b8 <MX_USART1_UART_Init+0x4c>)
 8003172:	4a12      	ldr	r2, [pc, #72]	; (80031bc <MX_USART1_UART_Init+0x50>)
 8003174:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003176:	4b10      	ldr	r3, [pc, #64]	; (80031b8 <MX_USART1_UART_Init+0x4c>)
 8003178:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800317c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800317e:	4b0e      	ldr	r3, [pc, #56]	; (80031b8 <MX_USART1_UART_Init+0x4c>)
 8003180:	2200      	movs	r2, #0
 8003182:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003184:	4b0c      	ldr	r3, [pc, #48]	; (80031b8 <MX_USART1_UART_Init+0x4c>)
 8003186:	2200      	movs	r2, #0
 8003188:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800318a:	4b0b      	ldr	r3, [pc, #44]	; (80031b8 <MX_USART1_UART_Init+0x4c>)
 800318c:	2200      	movs	r2, #0
 800318e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003190:	4b09      	ldr	r3, [pc, #36]	; (80031b8 <MX_USART1_UART_Init+0x4c>)
 8003192:	220c      	movs	r2, #12
 8003194:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003196:	4b08      	ldr	r3, [pc, #32]	; (80031b8 <MX_USART1_UART_Init+0x4c>)
 8003198:	2200      	movs	r2, #0
 800319a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800319c:	4b06      	ldr	r3, [pc, #24]	; (80031b8 <MX_USART1_UART_Init+0x4c>)
 800319e:	2200      	movs	r2, #0
 80031a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80031a2:	4805      	ldr	r0, [pc, #20]	; (80031b8 <MX_USART1_UART_Init+0x4c>)
 80031a4:	f005 f8e8 	bl	8008378 <HAL_UART_Init>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80031ae:	f000 f8bb 	bl	8003328 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80031b2:	bf00      	nop
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	20000ad0 	.word	0x20000ad0
 80031bc:	40013800 	.word	0x40013800

080031c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80031c4:	4b11      	ldr	r3, [pc, #68]	; (800320c <MX_USART2_UART_Init+0x4c>)
 80031c6:	4a12      	ldr	r2, [pc, #72]	; (8003210 <MX_USART2_UART_Init+0x50>)
 80031c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80031ca:	4b10      	ldr	r3, [pc, #64]	; (800320c <MX_USART2_UART_Init+0x4c>)
 80031cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80031d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80031d2:	4b0e      	ldr	r3, [pc, #56]	; (800320c <MX_USART2_UART_Init+0x4c>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80031d8:	4b0c      	ldr	r3, [pc, #48]	; (800320c <MX_USART2_UART_Init+0x4c>)
 80031da:	2200      	movs	r2, #0
 80031dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80031de:	4b0b      	ldr	r3, [pc, #44]	; (800320c <MX_USART2_UART_Init+0x4c>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80031e4:	4b09      	ldr	r3, [pc, #36]	; (800320c <MX_USART2_UART_Init+0x4c>)
 80031e6:	220c      	movs	r2, #12
 80031e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031ea:	4b08      	ldr	r3, [pc, #32]	; (800320c <MX_USART2_UART_Init+0x4c>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80031f0:	4b06      	ldr	r3, [pc, #24]	; (800320c <MX_USART2_UART_Init+0x4c>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80031f6:	4805      	ldr	r0, [pc, #20]	; (800320c <MX_USART2_UART_Init+0x4c>)
 80031f8:	f005 f8be 	bl	8008378 <HAL_UART_Init>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003202:	f000 f891 	bl	8003328 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003206:	bf00      	nop
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	20000b78 	.word	0x20000b78
 8003210:	40004400 	.word	0x40004400

08003214 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b088      	sub	sp, #32
 8003218:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800321a:	f107 0310 	add.w	r3, r7, #16
 800321e:	2200      	movs	r2, #0
 8003220:	601a      	str	r2, [r3, #0]
 8003222:	605a      	str	r2, [r3, #4]
 8003224:	609a      	str	r2, [r3, #8]
 8003226:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003228:	4b3b      	ldr	r3, [pc, #236]	; (8003318 <MX_GPIO_Init+0x104>)
 800322a:	699b      	ldr	r3, [r3, #24]
 800322c:	4a3a      	ldr	r2, [pc, #232]	; (8003318 <MX_GPIO_Init+0x104>)
 800322e:	f043 0310 	orr.w	r3, r3, #16
 8003232:	6193      	str	r3, [r2, #24]
 8003234:	4b38      	ldr	r3, [pc, #224]	; (8003318 <MX_GPIO_Init+0x104>)
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	f003 0310 	and.w	r3, r3, #16
 800323c:	60fb      	str	r3, [r7, #12]
 800323e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003240:	4b35      	ldr	r3, [pc, #212]	; (8003318 <MX_GPIO_Init+0x104>)
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	4a34      	ldr	r2, [pc, #208]	; (8003318 <MX_GPIO_Init+0x104>)
 8003246:	f043 0320 	orr.w	r3, r3, #32
 800324a:	6193      	str	r3, [r2, #24]
 800324c:	4b32      	ldr	r3, [pc, #200]	; (8003318 <MX_GPIO_Init+0x104>)
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	f003 0320 	and.w	r3, r3, #32
 8003254:	60bb      	str	r3, [r7, #8]
 8003256:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003258:	4b2f      	ldr	r3, [pc, #188]	; (8003318 <MX_GPIO_Init+0x104>)
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	4a2e      	ldr	r2, [pc, #184]	; (8003318 <MX_GPIO_Init+0x104>)
 800325e:	f043 0304 	orr.w	r3, r3, #4
 8003262:	6193      	str	r3, [r2, #24]
 8003264:	4b2c      	ldr	r3, [pc, #176]	; (8003318 <MX_GPIO_Init+0x104>)
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	f003 0304 	and.w	r3, r3, #4
 800326c:	607b      	str	r3, [r7, #4]
 800326e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003270:	4b29      	ldr	r3, [pc, #164]	; (8003318 <MX_GPIO_Init+0x104>)
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	4a28      	ldr	r2, [pc, #160]	; (8003318 <MX_GPIO_Init+0x104>)
 8003276:	f043 0308 	orr.w	r3, r3, #8
 800327a:	6193      	str	r3, [r2, #24]
 800327c:	4b26      	ldr	r3, [pc, #152]	; (8003318 <MX_GPIO_Init+0x104>)
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	f003 0308 	and.w	r3, r3, #8
 8003284:	603b      	str	r3, [r7, #0]
 8003286:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|CSN_Pin|CE_Pin, GPIO_PIN_RESET);
 8003288:	2200      	movs	r2, #0
 800328a:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800328e:	4823      	ldr	r0, [pc, #140]	; (800331c <MX_GPIO_Init+0x108>)
 8003290:	f001 fba5 	bl	80049de <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ON_Pin|MOS_Pin, GPIO_PIN_RESET);
 8003294:	2200      	movs	r2, #0
 8003296:	f44f 7108 	mov.w	r1, #544	; 0x220
 800329a:	4821      	ldr	r0, [pc, #132]	; (8003320 <MX_GPIO_Init+0x10c>)
 800329c:	f001 fb9f 	bl	80049de <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin CSN_Pin CE_Pin */
  GPIO_InitStruct.Pin = LED_Pin|CSN_Pin|CE_Pin;
 80032a0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80032a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032a6:	2301      	movs	r3, #1
 80032a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032aa:	2300      	movs	r3, #0
 80032ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ae:	2302      	movs	r3, #2
 80032b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032b2:	f107 0310 	add.w	r3, r7, #16
 80032b6:	4619      	mov	r1, r3
 80032b8:	4818      	ldr	r0, [pc, #96]	; (800331c <MX_GPIO_Init+0x108>)
 80032ba:	f001 f963 	bl	8004584 <HAL_GPIO_Init>

  /*Configure GPIO pins : BT_LD_Pin BT_LA_Pin BT_RS_Pin BT_RA_Pin 
                           BT_RB_Pin BT_RC_Pin BT_LB_Pin VIN_Pin 
                           BT_POWER_Pin */
  GPIO_InitStruct.Pin = BT_LD_Pin|BT_LA_Pin|BT_RS_Pin|BT_RA_Pin 
 80032be:	f24f 131e 	movw	r3, #61726	; 0xf11e
 80032c2:	613b      	str	r3, [r7, #16]
                          |BT_RB_Pin|BT_RC_Pin|BT_LB_Pin|VIN_Pin 
                          |BT_POWER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032c4:	2300      	movs	r3, #0
 80032c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c8:	2300      	movs	r3, #0
 80032ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032cc:	f107 0310 	add.w	r3, r7, #16
 80032d0:	4619      	mov	r1, r3
 80032d2:	4813      	ldr	r0, [pc, #76]	; (8003320 <MX_GPIO_Init+0x10c>)
 80032d4:	f001 f956 	bl	8004584 <HAL_GPIO_Init>

  /*Configure GPIO pins : BT_RD_Pin BT_LC_Pin */
  GPIO_InitStruct.Pin = BT_RD_Pin|BT_LC_Pin;
 80032d8:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80032dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032de:	2300      	movs	r3, #0
 80032e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e2:	2300      	movs	r3, #0
 80032e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032e6:	f107 0310 	add.w	r3, r7, #16
 80032ea:	4619      	mov	r1, r3
 80032ec:	480d      	ldr	r0, [pc, #52]	; (8003324 <MX_GPIO_Init+0x110>)
 80032ee:	f001 f949 	bl	8004584 <HAL_GPIO_Init>

  /*Configure GPIO pins : ON_Pin MOS_Pin */
  GPIO_InitStruct.Pin = ON_Pin|MOS_Pin;
 80032f2:	f44f 7308 	mov.w	r3, #544	; 0x220
 80032f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032f8:	2301      	movs	r3, #1
 80032fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032fc:	2300      	movs	r3, #0
 80032fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003300:	2302      	movs	r3, #2
 8003302:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003304:	f107 0310 	add.w	r3, r7, #16
 8003308:	4619      	mov	r1, r3
 800330a:	4805      	ldr	r0, [pc, #20]	; (8003320 <MX_GPIO_Init+0x10c>)
 800330c:	f001 f93a 	bl	8004584 <HAL_GPIO_Init>

}
 8003310:	bf00      	nop
 8003312:	3720      	adds	r7, #32
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	40021000 	.word	0x40021000
 800331c:	40011000 	.word	0x40011000
 8003320:	40010c00 	.word	0x40010c00
 8003324:	40010800 	.word	0x40010800

08003328 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800332c:	bf00      	nop
 800332e:	46bd      	mov	sp, r7
 8003330:	bc80      	pop	{r7}
 8003332:	4770      	bx	lr

08003334 <SSD1306_Init>:
} SSD1306_t;

/* Private variable */
static SSD1306_t SSD1306;

uint8_t SSD1306_Init(void) {
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800333a:	f000 fa19 	bl	8003770 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800333e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8003342:	2201      	movs	r2, #1
 8003344:	2178      	movs	r1, #120	; 0x78
 8003346:	4858      	ldr	r0, [pc, #352]	; (80034a8 <SSD1306_Init+0x174>)
 8003348:	f001 fffe 	bl	8005348 <HAL_I2C_IsDeviceReady>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8003352:	2300      	movs	r3, #0
 8003354:	e0a4      	b.n	80034a0 <SSD1306_Init+0x16c>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8003356:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800335a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800335c:	e002      	b.n	8003364 <SSD1306_Init+0x30>
		p--;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	3b01      	subs	r3, #1
 8003362:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1f9      	bne.n	800335e <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800336a:	22ae      	movs	r2, #174	; 0xae
 800336c:	2100      	movs	r1, #0
 800336e:	2078      	movs	r0, #120	; 0x78
 8003370:	f000 fa6c 	bl	800384c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8003374:	2220      	movs	r2, #32
 8003376:	2100      	movs	r1, #0
 8003378:	2078      	movs	r0, #120	; 0x78
 800337a:	f000 fa67 	bl	800384c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800337e:	2210      	movs	r2, #16
 8003380:	2100      	movs	r1, #0
 8003382:	2078      	movs	r0, #120	; 0x78
 8003384:	f000 fa62 	bl	800384c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003388:	22b0      	movs	r2, #176	; 0xb0
 800338a:	2100      	movs	r1, #0
 800338c:	2078      	movs	r0, #120	; 0x78
 800338e:	f000 fa5d 	bl	800384c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8003392:	22c8      	movs	r2, #200	; 0xc8
 8003394:	2100      	movs	r1, #0
 8003396:	2078      	movs	r0, #120	; 0x78
 8003398:	f000 fa58 	bl	800384c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 800339c:	2200      	movs	r2, #0
 800339e:	2100      	movs	r1, #0
 80033a0:	2078      	movs	r0, #120	; 0x78
 80033a2:	f000 fa53 	bl	800384c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80033a6:	2210      	movs	r2, #16
 80033a8:	2100      	movs	r1, #0
 80033aa:	2078      	movs	r0, #120	; 0x78
 80033ac:	f000 fa4e 	bl	800384c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80033b0:	2240      	movs	r2, #64	; 0x40
 80033b2:	2100      	movs	r1, #0
 80033b4:	2078      	movs	r0, #120	; 0x78
 80033b6:	f000 fa49 	bl	800384c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80033ba:	2281      	movs	r2, #129	; 0x81
 80033bc:	2100      	movs	r1, #0
 80033be:	2078      	movs	r0, #120	; 0x78
 80033c0:	f000 fa44 	bl	800384c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80033c4:	22ff      	movs	r2, #255	; 0xff
 80033c6:	2100      	movs	r1, #0
 80033c8:	2078      	movs	r0, #120	; 0x78
 80033ca:	f000 fa3f 	bl	800384c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80033ce:	22a1      	movs	r2, #161	; 0xa1
 80033d0:	2100      	movs	r1, #0
 80033d2:	2078      	movs	r0, #120	; 0x78
 80033d4:	f000 fa3a 	bl	800384c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80033d8:	22a6      	movs	r2, #166	; 0xa6
 80033da:	2100      	movs	r1, #0
 80033dc:	2078      	movs	r0, #120	; 0x78
 80033de:	f000 fa35 	bl	800384c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80033e2:	22a8      	movs	r2, #168	; 0xa8
 80033e4:	2100      	movs	r1, #0
 80033e6:	2078      	movs	r0, #120	; 0x78
 80033e8:	f000 fa30 	bl	800384c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80033ec:	223f      	movs	r2, #63	; 0x3f
 80033ee:	2100      	movs	r1, #0
 80033f0:	2078      	movs	r0, #120	; 0x78
 80033f2:	f000 fa2b 	bl	800384c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80033f6:	22a4      	movs	r2, #164	; 0xa4
 80033f8:	2100      	movs	r1, #0
 80033fa:	2078      	movs	r0, #120	; 0x78
 80033fc:	f000 fa26 	bl	800384c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8003400:	22d3      	movs	r2, #211	; 0xd3
 8003402:	2100      	movs	r1, #0
 8003404:	2078      	movs	r0, #120	; 0x78
 8003406:	f000 fa21 	bl	800384c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800340a:	2200      	movs	r2, #0
 800340c:	2100      	movs	r1, #0
 800340e:	2078      	movs	r0, #120	; 0x78
 8003410:	f000 fa1c 	bl	800384c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8003414:	22d5      	movs	r2, #213	; 0xd5
 8003416:	2100      	movs	r1, #0
 8003418:	2078      	movs	r0, #120	; 0x78
 800341a:	f000 fa17 	bl	800384c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800341e:	22f0      	movs	r2, #240	; 0xf0
 8003420:	2100      	movs	r1, #0
 8003422:	2078      	movs	r0, #120	; 0x78
 8003424:	f000 fa12 	bl	800384c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8003428:	22d9      	movs	r2, #217	; 0xd9
 800342a:	2100      	movs	r1, #0
 800342c:	2078      	movs	r0, #120	; 0x78
 800342e:	f000 fa0d 	bl	800384c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8003432:	2222      	movs	r2, #34	; 0x22
 8003434:	2100      	movs	r1, #0
 8003436:	2078      	movs	r0, #120	; 0x78
 8003438:	f000 fa08 	bl	800384c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800343c:	22da      	movs	r2, #218	; 0xda
 800343e:	2100      	movs	r1, #0
 8003440:	2078      	movs	r0, #120	; 0x78
 8003442:	f000 fa03 	bl	800384c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8003446:	2212      	movs	r2, #18
 8003448:	2100      	movs	r1, #0
 800344a:	2078      	movs	r0, #120	; 0x78
 800344c:	f000 f9fe 	bl	800384c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8003450:	22db      	movs	r2, #219	; 0xdb
 8003452:	2100      	movs	r1, #0
 8003454:	2078      	movs	r0, #120	; 0x78
 8003456:	f000 f9f9 	bl	800384c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800345a:	2220      	movs	r2, #32
 800345c:	2100      	movs	r1, #0
 800345e:	2078      	movs	r0, #120	; 0x78
 8003460:	f000 f9f4 	bl	800384c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8003464:	228d      	movs	r2, #141	; 0x8d
 8003466:	2100      	movs	r1, #0
 8003468:	2078      	movs	r0, #120	; 0x78
 800346a:	f000 f9ef 	bl	800384c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800346e:	2214      	movs	r2, #20
 8003470:	2100      	movs	r1, #0
 8003472:	2078      	movs	r0, #120	; 0x78
 8003474:	f000 f9ea 	bl	800384c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8003478:	22af      	movs	r2, #175	; 0xaf
 800347a:	2100      	movs	r1, #0
 800347c:	2078      	movs	r0, #120	; 0x78
 800347e:	f000 f9e5 	bl	800384c <ssd1306_I2C_Write>
	
	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8003482:	2000      	movs	r0, #0
 8003484:	f000 f842 	bl	800350c <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8003488:	f000 f812 	bl	80034b0 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800348c:	4b07      	ldr	r3, [pc, #28]	; (80034ac <SSD1306_Init+0x178>)
 800348e:	2200      	movs	r2, #0
 8003490:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8003492:	4b06      	ldr	r3, [pc, #24]	; (80034ac <SSD1306_Init+0x178>)
 8003494:	2200      	movs	r2, #0
 8003496:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8003498:	4b04      	ldr	r3, [pc, #16]	; (80034ac <SSD1306_Init+0x178>)
 800349a:	2201      	movs	r2, #1
 800349c:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 800349e:	2301      	movs	r3, #1
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3708      	adds	r7, #8
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	20000970 	.word	0x20000970
 80034ac:	20000728 	.word	0x20000728

080034b0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80034b6:	2300      	movs	r3, #0
 80034b8:	71fb      	strb	r3, [r7, #7]
 80034ba:	e01d      	b.n	80034f8 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80034bc:	79fb      	ldrb	r3, [r7, #7]
 80034be:	3b50      	subs	r3, #80	; 0x50
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	461a      	mov	r2, r3
 80034c4:	2100      	movs	r1, #0
 80034c6:	2078      	movs	r0, #120	; 0x78
 80034c8:	f000 f9c0 	bl	800384c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80034cc:	2200      	movs	r2, #0
 80034ce:	2100      	movs	r1, #0
 80034d0:	2078      	movs	r0, #120	; 0x78
 80034d2:	f000 f9bb 	bl	800384c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80034d6:	2210      	movs	r2, #16
 80034d8:	2100      	movs	r1, #0
 80034da:	2078      	movs	r0, #120	; 0x78
 80034dc:	f000 f9b6 	bl	800384c <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80034e0:	79fb      	ldrb	r3, [r7, #7]
 80034e2:	01db      	lsls	r3, r3, #7
 80034e4:	4a08      	ldr	r2, [pc, #32]	; (8003508 <SSD1306_UpdateScreen+0x58>)
 80034e6:	441a      	add	r2, r3
 80034e8:	2380      	movs	r3, #128	; 0x80
 80034ea:	2140      	movs	r1, #64	; 0x40
 80034ec:	2078      	movs	r0, #120	; 0x78
 80034ee:	f000 f953 	bl	8003798 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80034f2:	79fb      	ldrb	r3, [r7, #7]
 80034f4:	3301      	adds	r3, #1
 80034f6:	71fb      	strb	r3, [r7, #7]
 80034f8:	79fb      	ldrb	r3, [r7, #7]
 80034fa:	2b07      	cmp	r3, #7
 80034fc:	d9de      	bls.n	80034bc <SSD1306_UpdateScreen+0xc>
	}
}
 80034fe:	bf00      	nop
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	20000328 	.word	0x20000328

0800350c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	4603      	mov	r3, r0
 8003514:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8003516:	79fb      	ldrb	r3, [r7, #7]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d101      	bne.n	8003520 <SSD1306_Fill+0x14>
 800351c:	2300      	movs	r3, #0
 800351e:	e000      	b.n	8003522 <SSD1306_Fill+0x16>
 8003520:	23ff      	movs	r3, #255	; 0xff
 8003522:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003526:	4619      	mov	r1, r3
 8003528:	4803      	ldr	r0, [pc, #12]	; (8003538 <SSD1306_Fill+0x2c>)
 800352a:	f008 faae 	bl	800ba8a <memset>
}
 800352e:	bf00      	nop
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	20000328 	.word	0x20000328

0800353c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	4603      	mov	r3, r0
 8003544:	80fb      	strh	r3, [r7, #6]
 8003546:	460b      	mov	r3, r1
 8003548:	80bb      	strh	r3, [r7, #4]
 800354a:	4613      	mov	r3, r2
 800354c:	70fb      	strb	r3, [r7, #3]
	if (
 800354e:	88fb      	ldrh	r3, [r7, #6]
 8003550:	2b7f      	cmp	r3, #127	; 0x7f
 8003552:	d848      	bhi.n	80035e6 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8003554:	88bb      	ldrh	r3, [r7, #4]
 8003556:	2b3f      	cmp	r3, #63	; 0x3f
 8003558:	d845      	bhi.n	80035e6 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800355a:	4b25      	ldr	r3, [pc, #148]	; (80035f0 <SSD1306_DrawPixel+0xb4>)
 800355c:	791b      	ldrb	r3, [r3, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d006      	beq.n	8003570 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8003562:	78fb      	ldrb	r3, [r7, #3]
 8003564:	2b00      	cmp	r3, #0
 8003566:	bf0c      	ite	eq
 8003568:	2301      	moveq	r3, #1
 800356a:	2300      	movne	r3, #0
 800356c:	b2db      	uxtb	r3, r3
 800356e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8003570:	78fb      	ldrb	r3, [r7, #3]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d11a      	bne.n	80035ac <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003576:	88fa      	ldrh	r2, [r7, #6]
 8003578:	88bb      	ldrh	r3, [r7, #4]
 800357a:	08db      	lsrs	r3, r3, #3
 800357c:	b298      	uxth	r0, r3
 800357e:	4603      	mov	r3, r0
 8003580:	01db      	lsls	r3, r3, #7
 8003582:	4413      	add	r3, r2
 8003584:	4a1b      	ldr	r2, [pc, #108]	; (80035f4 <SSD1306_DrawPixel+0xb8>)
 8003586:	5cd3      	ldrb	r3, [r2, r3]
 8003588:	b25a      	sxtb	r2, r3
 800358a:	88bb      	ldrh	r3, [r7, #4]
 800358c:	f003 0307 	and.w	r3, r3, #7
 8003590:	2101      	movs	r1, #1
 8003592:	fa01 f303 	lsl.w	r3, r1, r3
 8003596:	b25b      	sxtb	r3, r3
 8003598:	4313      	orrs	r3, r2
 800359a:	b259      	sxtb	r1, r3
 800359c:	88fa      	ldrh	r2, [r7, #6]
 800359e:	4603      	mov	r3, r0
 80035a0:	01db      	lsls	r3, r3, #7
 80035a2:	4413      	add	r3, r2
 80035a4:	b2c9      	uxtb	r1, r1
 80035a6:	4a13      	ldr	r2, [pc, #76]	; (80035f4 <SSD1306_DrawPixel+0xb8>)
 80035a8:	54d1      	strb	r1, [r2, r3]
 80035aa:	e01d      	b.n	80035e8 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80035ac:	88fa      	ldrh	r2, [r7, #6]
 80035ae:	88bb      	ldrh	r3, [r7, #4]
 80035b0:	08db      	lsrs	r3, r3, #3
 80035b2:	b298      	uxth	r0, r3
 80035b4:	4603      	mov	r3, r0
 80035b6:	01db      	lsls	r3, r3, #7
 80035b8:	4413      	add	r3, r2
 80035ba:	4a0e      	ldr	r2, [pc, #56]	; (80035f4 <SSD1306_DrawPixel+0xb8>)
 80035bc:	5cd3      	ldrb	r3, [r2, r3]
 80035be:	b25a      	sxtb	r2, r3
 80035c0:	88bb      	ldrh	r3, [r7, #4]
 80035c2:	f003 0307 	and.w	r3, r3, #7
 80035c6:	2101      	movs	r1, #1
 80035c8:	fa01 f303 	lsl.w	r3, r1, r3
 80035cc:	b25b      	sxtb	r3, r3
 80035ce:	43db      	mvns	r3, r3
 80035d0:	b25b      	sxtb	r3, r3
 80035d2:	4013      	ands	r3, r2
 80035d4:	b259      	sxtb	r1, r3
 80035d6:	88fa      	ldrh	r2, [r7, #6]
 80035d8:	4603      	mov	r3, r0
 80035da:	01db      	lsls	r3, r3, #7
 80035dc:	4413      	add	r3, r2
 80035de:	b2c9      	uxtb	r1, r1
 80035e0:	4a04      	ldr	r2, [pc, #16]	; (80035f4 <SSD1306_DrawPixel+0xb8>)
 80035e2:	54d1      	strb	r1, [r2, r3]
 80035e4:	e000      	b.n	80035e8 <SSD1306_DrawPixel+0xac>
		return;
 80035e6:	bf00      	nop
	}
}
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bc80      	pop	{r7}
 80035ee:	4770      	bx	lr
 80035f0:	20000728 	.word	0x20000728
 80035f4:	20000328 	.word	0x20000328

080035f8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	4603      	mov	r3, r0
 8003600:	460a      	mov	r2, r1
 8003602:	80fb      	strh	r3, [r7, #6]
 8003604:	4613      	mov	r3, r2
 8003606:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8003608:	4a05      	ldr	r2, [pc, #20]	; (8003620 <SSD1306_GotoXY+0x28>)
 800360a:	88fb      	ldrh	r3, [r7, #6]
 800360c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800360e:	4a04      	ldr	r2, [pc, #16]	; (8003620 <SSD1306_GotoXY+0x28>)
 8003610:	88bb      	ldrh	r3, [r7, #4]
 8003612:	8053      	strh	r3, [r2, #2]
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	bc80      	pop	{r7}
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	20000728 	.word	0x20000728

08003624 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af00      	add	r7, sp, #0
 800362a:	4603      	mov	r3, r0
 800362c:	6039      	str	r1, [r7, #0]
 800362e:	71fb      	strb	r3, [r7, #7]
 8003630:	4613      	mov	r3, r2
 8003632:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8003634:	4b3a      	ldr	r3, [pc, #232]	; (8003720 <SSD1306_Putc+0xfc>)
 8003636:	881b      	ldrh	r3, [r3, #0]
 8003638:	461a      	mov	r2, r3
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	4413      	add	r3, r2
	if (
 8003640:	2b7f      	cmp	r3, #127	; 0x7f
 8003642:	dc07      	bgt.n	8003654 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8003644:	4b36      	ldr	r3, [pc, #216]	; (8003720 <SSD1306_Putc+0xfc>)
 8003646:	885b      	ldrh	r3, [r3, #2]
 8003648:	461a      	mov	r2, r3
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	785b      	ldrb	r3, [r3, #1]
 800364e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8003650:	2b3f      	cmp	r3, #63	; 0x3f
 8003652:	dd01      	ble.n	8003658 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8003654:	2300      	movs	r3, #0
 8003656:	e05e      	b.n	8003716 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8003658:	2300      	movs	r3, #0
 800365a:	617b      	str	r3, [r7, #20]
 800365c:	e04b      	b.n	80036f6 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685a      	ldr	r2, [r3, #4]
 8003662:	79fb      	ldrb	r3, [r7, #7]
 8003664:	3b20      	subs	r3, #32
 8003666:	6839      	ldr	r1, [r7, #0]
 8003668:	7849      	ldrb	r1, [r1, #1]
 800366a:	fb01 f303 	mul.w	r3, r1, r3
 800366e:	4619      	mov	r1, r3
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	440b      	add	r3, r1
 8003674:	005b      	lsls	r3, r3, #1
 8003676:	4413      	add	r3, r2
 8003678:	881b      	ldrh	r3, [r3, #0]
 800367a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800367c:	2300      	movs	r3, #0
 800367e:	613b      	str	r3, [r7, #16]
 8003680:	e030      	b.n	80036e4 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	fa02 f303 	lsl.w	r3, r2, r3
 800368a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d010      	beq.n	80036b4 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8003692:	4b23      	ldr	r3, [pc, #140]	; (8003720 <SSD1306_Putc+0xfc>)
 8003694:	881a      	ldrh	r2, [r3, #0]
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	b29b      	uxth	r3, r3
 800369a:	4413      	add	r3, r2
 800369c:	b298      	uxth	r0, r3
 800369e:	4b20      	ldr	r3, [pc, #128]	; (8003720 <SSD1306_Putc+0xfc>)
 80036a0:	885a      	ldrh	r2, [r3, #2]
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	4413      	add	r3, r2
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	79ba      	ldrb	r2, [r7, #6]
 80036ac:	4619      	mov	r1, r3
 80036ae:	f7ff ff45 	bl	800353c <SSD1306_DrawPixel>
 80036b2:	e014      	b.n	80036de <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80036b4:	4b1a      	ldr	r3, [pc, #104]	; (8003720 <SSD1306_Putc+0xfc>)
 80036b6:	881a      	ldrh	r2, [r3, #0]
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	4413      	add	r3, r2
 80036be:	b298      	uxth	r0, r3
 80036c0:	4b17      	ldr	r3, [pc, #92]	; (8003720 <SSD1306_Putc+0xfc>)
 80036c2:	885a      	ldrh	r2, [r3, #2]
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	4413      	add	r3, r2
 80036ca:	b299      	uxth	r1, r3
 80036cc:	79bb      	ldrb	r3, [r7, #6]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	bf0c      	ite	eq
 80036d2:	2301      	moveq	r3, #1
 80036d4:	2300      	movne	r3, #0
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	461a      	mov	r2, r3
 80036da:	f7ff ff2f 	bl	800353c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	3301      	adds	r3, #1
 80036e2:	613b      	str	r3, [r7, #16]
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	461a      	mov	r2, r3
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d3c8      	bcc.n	8003682 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	3301      	adds	r3, #1
 80036f4:	617b      	str	r3, [r7, #20]
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	785b      	ldrb	r3, [r3, #1]
 80036fa:	461a      	mov	r2, r3
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	4293      	cmp	r3, r2
 8003700:	d3ad      	bcc.n	800365e <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8003702:	4b07      	ldr	r3, [pc, #28]	; (8003720 <SSD1306_Putc+0xfc>)
 8003704:	881a      	ldrh	r2, [r3, #0]
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	b29b      	uxth	r3, r3
 800370c:	4413      	add	r3, r2
 800370e:	b29a      	uxth	r2, r3
 8003710:	4b03      	ldr	r3, [pc, #12]	; (8003720 <SSD1306_Putc+0xfc>)
 8003712:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8003714:	79fb      	ldrb	r3, [r7, #7]
}
 8003716:	4618      	mov	r0, r3
 8003718:	3718      	adds	r7, #24
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	20000728 	.word	0x20000728

08003724 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	4613      	mov	r3, r2
 8003730:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8003732:	e012      	b.n	800375a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	79fa      	ldrb	r2, [r7, #7]
 800373a:	68b9      	ldr	r1, [r7, #8]
 800373c:	4618      	mov	r0, r3
 800373e:	f7ff ff71 	bl	8003624 <SSD1306_Putc>
 8003742:	4603      	mov	r3, r0
 8003744:	461a      	mov	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	429a      	cmp	r2, r3
 800374c:	d002      	beq.n	8003754 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	e008      	b.n	8003766 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	3301      	adds	r3, #1
 8003758:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1e8      	bne.n	8003734 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	781b      	ldrb	r3, [r3, #0]
}
 8003766:	4618      	mov	r0, r3
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
	...

08003770 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8003776:	4b07      	ldr	r3, [pc, #28]	; (8003794 <ssd1306_I2C_Init+0x24>)
 8003778:	607b      	str	r3, [r7, #4]
	while(p>0)
 800377a:	e002      	b.n	8003782 <ssd1306_I2C_Init+0x12>
		p--;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	3b01      	subs	r3, #1
 8003780:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d1f9      	bne.n	800377c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	bc80      	pop	{r7}
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	0003d090 	.word	0x0003d090

08003798 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8003798:	b5b0      	push	{r4, r5, r7, lr}
 800379a:	b088      	sub	sp, #32
 800379c:	af02      	add	r7, sp, #8
 800379e:	603a      	str	r2, [r7, #0]
 80037a0:	461a      	mov	r2, r3
 80037a2:	4603      	mov	r3, r0
 80037a4:	71fb      	strb	r3, [r7, #7]
 80037a6:	460b      	mov	r3, r1
 80037a8:	71bb      	strb	r3, [r7, #6]
 80037aa:	4613      	mov	r3, r2
 80037ac:	80bb      	strh	r3, [r7, #4]
 80037ae:	466b      	mov	r3, sp
 80037b0:	461d      	mov	r5, r3
	uint8_t dt[count + 1];
 80037b2:	88bb      	ldrh	r3, [r7, #4]
 80037b4:	1c58      	adds	r0, r3, #1
 80037b6:	1e43      	subs	r3, r0, #1
 80037b8:	613b      	str	r3, [r7, #16]
 80037ba:	4603      	mov	r3, r0
 80037bc:	4619      	mov	r1, r3
 80037be:	f04f 0200 	mov.w	r2, #0
 80037c2:	f04f 0300 	mov.w	r3, #0
 80037c6:	f04f 0400 	mov.w	r4, #0
 80037ca:	00d4      	lsls	r4, r2, #3
 80037cc:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80037d0:	00cb      	lsls	r3, r1, #3
 80037d2:	4603      	mov	r3, r0
 80037d4:	4619      	mov	r1, r3
 80037d6:	f04f 0200 	mov.w	r2, #0
 80037da:	f04f 0300 	mov.w	r3, #0
 80037de:	f04f 0400 	mov.w	r4, #0
 80037e2:	00d4      	lsls	r4, r2, #3
 80037e4:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80037e8:	00cb      	lsls	r3, r1, #3
 80037ea:	4603      	mov	r3, r0
 80037ec:	3307      	adds	r3, #7
 80037ee:	08db      	lsrs	r3, r3, #3
 80037f0:	00db      	lsls	r3, r3, #3
 80037f2:	ebad 0d03 	sub.w	sp, sp, r3
 80037f6:	ab02      	add	r3, sp, #8
 80037f8:	3300      	adds	r3, #0
 80037fa:	60fb      	str	r3, [r7, #12]
	dt[0] = reg;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	79ba      	ldrb	r2, [r7, #6]
 8003800:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 1; i <= count; i++)
 8003802:	2301      	movs	r3, #1
 8003804:	75fb      	strb	r3, [r7, #23]
 8003806:	e00a      	b.n	800381e <ssd1306_I2C_WriteMulti+0x86>
		dt[i] = data[i-1];
 8003808:	7dfb      	ldrb	r3, [r7, #23]
 800380a:	3b01      	subs	r3, #1
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	441a      	add	r2, r3
 8003810:	7dfb      	ldrb	r3, [r7, #23]
 8003812:	7811      	ldrb	r1, [r2, #0]
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	54d1      	strb	r1, [r2, r3]
	for(i = 1; i <= count; i++)
 8003818:	7dfb      	ldrb	r3, [r7, #23]
 800381a:	3301      	adds	r3, #1
 800381c:	75fb      	strb	r3, [r7, #23]
 800381e:	7dfb      	ldrb	r3, [r7, #23]
 8003820:	b29b      	uxth	r3, r3
 8003822:	88ba      	ldrh	r2, [r7, #4]
 8003824:	429a      	cmp	r2, r3
 8003826:	d2ef      	bcs.n	8003808 <ssd1306_I2C_WriteMulti+0x70>
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, count, 10);
 8003828:	79fb      	ldrb	r3, [r7, #7]
 800382a:	b299      	uxth	r1, r3
 800382c:	68fa      	ldr	r2, [r7, #12]
 800382e:	88b8      	ldrh	r0, [r7, #4]
 8003830:	230a      	movs	r3, #10
 8003832:	9300      	str	r3, [sp, #0]
 8003834:	4603      	mov	r3, r0
 8003836:	4804      	ldr	r0, [pc, #16]	; (8003848 <ssd1306_I2C_WriteMulti+0xb0>)
 8003838:	f001 fa5a 	bl	8004cf0 <HAL_I2C_Master_Transmit>
 800383c:	46ad      	mov	sp, r5
}
 800383e:	bf00      	nop
 8003840:	3718      	adds	r7, #24
 8003842:	46bd      	mov	sp, r7
 8003844:	bdb0      	pop	{r4, r5, r7, pc}
 8003846:	bf00      	nop
 8003848:	20000970 	.word	0x20000970

0800384c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800384c:	b580      	push	{r7, lr}
 800384e:	b086      	sub	sp, #24
 8003850:	af02      	add	r7, sp, #8
 8003852:	4603      	mov	r3, r0
 8003854:	71fb      	strb	r3, [r7, #7]
 8003856:	460b      	mov	r3, r1
 8003858:	71bb      	strb	r3, [r7, #6]
 800385a:	4613      	mov	r3, r2
 800385c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800385e:	79bb      	ldrb	r3, [r7, #6]
 8003860:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8003862:	797b      	ldrb	r3, [r7, #5]
 8003864:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8003866:	79fb      	ldrb	r3, [r7, #7]
 8003868:	b299      	uxth	r1, r3
 800386a:	f107 020c 	add.w	r2, r7, #12
 800386e:	230a      	movs	r3, #10
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	2302      	movs	r3, #2
 8003874:	4803      	ldr	r0, [pc, #12]	; (8003884 <ssd1306_I2C_Write+0x38>)
 8003876:	f001 fa3b 	bl	8004cf0 <HAL_I2C_Master_Transmit>
}
 800387a:	bf00      	nop
 800387c:	3710      	adds	r7, #16
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	20000970 	.word	0x20000970

08003888 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003888:	b480      	push	{r7}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800388e:	4b15      	ldr	r3, [pc, #84]	; (80038e4 <HAL_MspInit+0x5c>)
 8003890:	699b      	ldr	r3, [r3, #24]
 8003892:	4a14      	ldr	r2, [pc, #80]	; (80038e4 <HAL_MspInit+0x5c>)
 8003894:	f043 0301 	orr.w	r3, r3, #1
 8003898:	6193      	str	r3, [r2, #24]
 800389a:	4b12      	ldr	r3, [pc, #72]	; (80038e4 <HAL_MspInit+0x5c>)
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	60bb      	str	r3, [r7, #8]
 80038a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80038a6:	4b0f      	ldr	r3, [pc, #60]	; (80038e4 <HAL_MspInit+0x5c>)
 80038a8:	69db      	ldr	r3, [r3, #28]
 80038aa:	4a0e      	ldr	r2, [pc, #56]	; (80038e4 <HAL_MspInit+0x5c>)
 80038ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038b0:	61d3      	str	r3, [r2, #28]
 80038b2:	4b0c      	ldr	r3, [pc, #48]	; (80038e4 <HAL_MspInit+0x5c>)
 80038b4:	69db      	ldr	r3, [r3, #28]
 80038b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ba:	607b      	str	r3, [r7, #4]
 80038bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80038be:	4b0a      	ldr	r3, [pc, #40]	; (80038e8 <HAL_MspInit+0x60>)
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	60fb      	str	r3, [r7, #12]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80038ca:	60fb      	str	r3, [r7, #12]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80038d2:	60fb      	str	r3, [r7, #12]
 80038d4:	4a04      	ldr	r2, [pc, #16]	; (80038e8 <HAL_MspInit+0x60>)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038da:	bf00      	nop
 80038dc:	3714      	adds	r7, #20
 80038de:	46bd      	mov	sp, r7
 80038e0:	bc80      	pop	{r7}
 80038e2:	4770      	bx	lr
 80038e4:	40021000 	.word	0x40021000
 80038e8:	40010000 	.word	0x40010000

080038ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b088      	sub	sp, #32
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038f4:	f107 0310 	add.w	r3, r7, #16
 80038f8:	2200      	movs	r2, #0
 80038fa:	601a      	str	r2, [r3, #0]
 80038fc:	605a      	str	r2, [r3, #4]
 80038fe:	609a      	str	r2, [r3, #8]
 8003900:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a14      	ldr	r2, [pc, #80]	; (8003958 <HAL_ADC_MspInit+0x6c>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d121      	bne.n	8003950 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800390c:	4b13      	ldr	r3, [pc, #76]	; (800395c <HAL_ADC_MspInit+0x70>)
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	4a12      	ldr	r2, [pc, #72]	; (800395c <HAL_ADC_MspInit+0x70>)
 8003912:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003916:	6193      	str	r3, [r2, #24]
 8003918:	4b10      	ldr	r3, [pc, #64]	; (800395c <HAL_ADC_MspInit+0x70>)
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003920:	60fb      	str	r3, [r7, #12]
 8003922:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003924:	4b0d      	ldr	r3, [pc, #52]	; (800395c <HAL_ADC_MspInit+0x70>)
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	4a0c      	ldr	r2, [pc, #48]	; (800395c <HAL_ADC_MspInit+0x70>)
 800392a:	f043 0304 	orr.w	r3, r3, #4
 800392e:	6193      	str	r3, [r2, #24]
 8003930:	4b0a      	ldr	r3, [pc, #40]	; (800395c <HAL_ADC_MspInit+0x70>)
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	f003 0304 	and.w	r3, r3, #4
 8003938:	60bb      	str	r3, [r7, #8]
 800393a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = HORISONTAL_Pin|VERTICAL_Pin|BAT_Pin;
 800393c:	2313      	movs	r3, #19
 800393e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003940:	2303      	movs	r3, #3
 8003942:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003944:	f107 0310 	add.w	r3, r7, #16
 8003948:	4619      	mov	r1, r3
 800394a:	4805      	ldr	r0, [pc, #20]	; (8003960 <HAL_ADC_MspInit+0x74>)
 800394c:	f000 fe1a 	bl	8004584 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003950:	bf00      	nop
 8003952:	3720      	adds	r7, #32
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	40012400 	.word	0x40012400
 800395c:	40021000 	.word	0x40021000
 8003960:	40010800 	.word	0x40010800

08003964 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b08a      	sub	sp, #40	; 0x28
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800396c:	f107 0318 	add.w	r3, r7, #24
 8003970:	2200      	movs	r2, #0
 8003972:	601a      	str	r2, [r3, #0]
 8003974:	605a      	str	r2, [r3, #4]
 8003976:	609a      	str	r2, [r3, #8]
 8003978:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a2b      	ldr	r2, [pc, #172]	; (8003a2c <HAL_I2C_MspInit+0xc8>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d124      	bne.n	80039ce <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003984:	4b2a      	ldr	r3, [pc, #168]	; (8003a30 <HAL_I2C_MspInit+0xcc>)
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	4a29      	ldr	r2, [pc, #164]	; (8003a30 <HAL_I2C_MspInit+0xcc>)
 800398a:	f043 0308 	orr.w	r3, r3, #8
 800398e:	6193      	str	r3, [r2, #24]
 8003990:	4b27      	ldr	r3, [pc, #156]	; (8003a30 <HAL_I2C_MspInit+0xcc>)
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	f003 0308 	and.w	r3, r3, #8
 8003998:	617b      	str	r3, [r7, #20]
 800399a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 800399c:	23c0      	movs	r3, #192	; 0xc0
 800399e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80039a0:	2312      	movs	r3, #18
 80039a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80039a4:	2303      	movs	r3, #3
 80039a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039a8:	f107 0318 	add.w	r3, r7, #24
 80039ac:	4619      	mov	r1, r3
 80039ae:	4821      	ldr	r0, [pc, #132]	; (8003a34 <HAL_I2C_MspInit+0xd0>)
 80039b0:	f000 fde8 	bl	8004584 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80039b4:	4b1e      	ldr	r3, [pc, #120]	; (8003a30 <HAL_I2C_MspInit+0xcc>)
 80039b6:	69db      	ldr	r3, [r3, #28]
 80039b8:	4a1d      	ldr	r2, [pc, #116]	; (8003a30 <HAL_I2C_MspInit+0xcc>)
 80039ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80039be:	61d3      	str	r3, [r2, #28]
 80039c0:	4b1b      	ldr	r3, [pc, #108]	; (8003a30 <HAL_I2C_MspInit+0xcc>)
 80039c2:	69db      	ldr	r3, [r3, #28]
 80039c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039c8:	613b      	str	r3, [r7, #16]
 80039ca:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80039cc:	e029      	b.n	8003a22 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a19      	ldr	r2, [pc, #100]	; (8003a38 <HAL_I2C_MspInit+0xd4>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d124      	bne.n	8003a22 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039d8:	4b15      	ldr	r3, [pc, #84]	; (8003a30 <HAL_I2C_MspInit+0xcc>)
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	4a14      	ldr	r2, [pc, #80]	; (8003a30 <HAL_I2C_MspInit+0xcc>)
 80039de:	f043 0308 	orr.w	r3, r3, #8
 80039e2:	6193      	str	r3, [r2, #24]
 80039e4:	4b12      	ldr	r3, [pc, #72]	; (8003a30 <HAL_I2C_MspInit+0xcc>)
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	f003 0308 	and.w	r3, r3, #8
 80039ec:	60fb      	str	r3, [r7, #12]
 80039ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SCL_IMU_Pin|SDA_IMU_Pin;
 80039f0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80039f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80039f6:	2312      	movs	r3, #18
 80039f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80039fa:	2303      	movs	r3, #3
 80039fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039fe:	f107 0318 	add.w	r3, r7, #24
 8003a02:	4619      	mov	r1, r3
 8003a04:	480b      	ldr	r0, [pc, #44]	; (8003a34 <HAL_I2C_MspInit+0xd0>)
 8003a06:	f000 fdbd 	bl	8004584 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003a0a:	4b09      	ldr	r3, [pc, #36]	; (8003a30 <HAL_I2C_MspInit+0xcc>)
 8003a0c:	69db      	ldr	r3, [r3, #28]
 8003a0e:	4a08      	ldr	r2, [pc, #32]	; (8003a30 <HAL_I2C_MspInit+0xcc>)
 8003a10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a14:	61d3      	str	r3, [r2, #28]
 8003a16:	4b06      	ldr	r3, [pc, #24]	; (8003a30 <HAL_I2C_MspInit+0xcc>)
 8003a18:	69db      	ldr	r3, [r3, #28]
 8003a1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a1e:	60bb      	str	r3, [r7, #8]
 8003a20:	68bb      	ldr	r3, [r7, #8]
}
 8003a22:	bf00      	nop
 8003a24:	3728      	adds	r7, #40	; 0x28
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	40005400 	.word	0x40005400
 8003a30:	40021000 	.word	0x40021000
 8003a34:	40010c00 	.word	0x40010c00
 8003a38:	40005800 	.word	0x40005800

08003a3c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a10      	ldr	r2, [pc, #64]	; (8003a8c <HAL_I2C_MspDeInit+0x50>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d10a      	bne.n	8003a64 <HAL_I2C_MspDeInit+0x28>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8003a4e:	4b10      	ldr	r3, [pc, #64]	; (8003a90 <HAL_I2C_MspDeInit+0x54>)
 8003a50:	69db      	ldr	r3, [r3, #28]
 8003a52:	4a0f      	ldr	r2, [pc, #60]	; (8003a90 <HAL_I2C_MspDeInit+0x54>)
 8003a54:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003a58:	61d3      	str	r3, [r2, #28]
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, SCL_Pin|SDA_Pin);
 8003a5a:	21c0      	movs	r1, #192	; 0xc0
 8003a5c:	480d      	ldr	r0, [pc, #52]	; (8003a94 <HAL_I2C_MspDeInit+0x58>)
 8003a5e:	f000 feeb 	bl	8004838 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8003a62:	e00f      	b.n	8003a84 <HAL_I2C_MspDeInit+0x48>
  else if(hi2c->Instance==I2C2)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a0b      	ldr	r2, [pc, #44]	; (8003a98 <HAL_I2C_MspDeInit+0x5c>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d10a      	bne.n	8003a84 <HAL_I2C_MspDeInit+0x48>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8003a6e:	4b08      	ldr	r3, [pc, #32]	; (8003a90 <HAL_I2C_MspDeInit+0x54>)
 8003a70:	69db      	ldr	r3, [r3, #28]
 8003a72:	4a07      	ldr	r2, [pc, #28]	; (8003a90 <HAL_I2C_MspDeInit+0x54>)
 8003a74:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003a78:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, SCL_IMU_Pin|SDA_IMU_Pin);
 8003a7a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8003a7e:	4805      	ldr	r0, [pc, #20]	; (8003a94 <HAL_I2C_MspDeInit+0x58>)
 8003a80:	f000 feda 	bl	8004838 <HAL_GPIO_DeInit>
}
 8003a84:	bf00      	nop
 8003a86:	3708      	adds	r7, #8
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	40005400 	.word	0x40005400
 8003a90:	40021000 	.word	0x40021000
 8003a94:	40010c00 	.word	0x40010c00
 8003a98:	40005800 	.word	0x40005800

08003a9c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b088      	sub	sp, #32
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003aa4:	f107 0310 	add.w	r3, r7, #16
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	601a      	str	r2, [r3, #0]
 8003aac:	605a      	str	r2, [r3, #4]
 8003aae:	609a      	str	r2, [r3, #8]
 8003ab0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a1b      	ldr	r2, [pc, #108]	; (8003b24 <HAL_SPI_MspInit+0x88>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d12f      	bne.n	8003b1c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003abc:	4b1a      	ldr	r3, [pc, #104]	; (8003b28 <HAL_SPI_MspInit+0x8c>)
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	4a19      	ldr	r2, [pc, #100]	; (8003b28 <HAL_SPI_MspInit+0x8c>)
 8003ac2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003ac6:	6193      	str	r3, [r2, #24]
 8003ac8:	4b17      	ldr	r3, [pc, #92]	; (8003b28 <HAL_SPI_MspInit+0x8c>)
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ad0:	60fb      	str	r3, [r7, #12]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ad4:	4b14      	ldr	r3, [pc, #80]	; (8003b28 <HAL_SPI_MspInit+0x8c>)
 8003ad6:	699b      	ldr	r3, [r3, #24]
 8003ad8:	4a13      	ldr	r2, [pc, #76]	; (8003b28 <HAL_SPI_MspInit+0x8c>)
 8003ada:	f043 0304 	orr.w	r3, r3, #4
 8003ade:	6193      	str	r3, [r2, #24]
 8003ae0:	4b11      	ldr	r3, [pc, #68]	; (8003b28 <HAL_SPI_MspInit+0x8c>)
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	f003 0304 	and.w	r3, r3, #4
 8003ae8:	60bb      	str	r3, [r7, #8]
 8003aea:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003aec:	23a0      	movs	r3, #160	; 0xa0
 8003aee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003af0:	2302      	movs	r3, #2
 8003af2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003af4:	2303      	movs	r3, #3
 8003af6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003af8:	f107 0310 	add.w	r3, r7, #16
 8003afc:	4619      	mov	r1, r3
 8003afe:	480b      	ldr	r0, [pc, #44]	; (8003b2c <HAL_SPI_MspInit+0x90>)
 8003b00:	f000 fd40 	bl	8004584 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003b04:	2340      	movs	r3, #64	; 0x40
 8003b06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b10:	f107 0310 	add.w	r3, r7, #16
 8003b14:	4619      	mov	r1, r3
 8003b16:	4805      	ldr	r0, [pc, #20]	; (8003b2c <HAL_SPI_MspInit+0x90>)
 8003b18:	f000 fd34 	bl	8004584 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003b1c:	bf00      	nop
 8003b1e:	3720      	adds	r7, #32
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	40013000 	.word	0x40013000
 8003b28:	40021000 	.word	0x40021000
 8003b2c:	40010800 	.word	0x40010800

08003b30 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a09      	ldr	r2, [pc, #36]	; (8003b64 <HAL_TIM_PWM_MspInit+0x34>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d10b      	bne.n	8003b5a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003b42:	4b09      	ldr	r3, [pc, #36]	; (8003b68 <HAL_TIM_PWM_MspInit+0x38>)
 8003b44:	69db      	ldr	r3, [r3, #28]
 8003b46:	4a08      	ldr	r2, [pc, #32]	; (8003b68 <HAL_TIM_PWM_MspInit+0x38>)
 8003b48:	f043 0302 	orr.w	r3, r3, #2
 8003b4c:	61d3      	str	r3, [r2, #28]
 8003b4e:	4b06      	ldr	r3, [pc, #24]	; (8003b68 <HAL_TIM_PWM_MspInit+0x38>)
 8003b50:	69db      	ldr	r3, [r3, #28]
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	60fb      	str	r3, [r7, #12]
 8003b58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003b5a:	bf00      	nop
 8003b5c:	3714      	adds	r7, #20
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bc80      	pop	{r7}
 8003b62:	4770      	bx	lr
 8003b64:	40000400 	.word	0x40000400
 8003b68:	40021000 	.word	0x40021000

08003b6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b088      	sub	sp, #32
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b74:	f107 0310 	add.w	r3, r7, #16
 8003b78:	2200      	movs	r2, #0
 8003b7a:	601a      	str	r2, [r3, #0]
 8003b7c:	605a      	str	r2, [r3, #4]
 8003b7e:	609a      	str	r2, [r3, #8]
 8003b80:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a0f      	ldr	r2, [pc, #60]	; (8003bc4 <HAL_TIM_MspPostInit+0x58>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d117      	bne.n	8003bbc <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b8c:	4b0e      	ldr	r3, [pc, #56]	; (8003bc8 <HAL_TIM_MspPostInit+0x5c>)
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	4a0d      	ldr	r2, [pc, #52]	; (8003bc8 <HAL_TIM_MspPostInit+0x5c>)
 8003b92:	f043 0308 	orr.w	r3, r3, #8
 8003b96:	6193      	str	r3, [r2, #24]
 8003b98:	4b0b      	ldr	r3, [pc, #44]	; (8003bc8 <HAL_TIM_MspPostInit+0x5c>)
 8003b9a:	699b      	ldr	r3, [r3, #24]
 8003b9c:	f003 0308 	and.w	r3, r3, #8
 8003ba0:	60fb      	str	r3, [r7, #12]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration    
    PB0     ------> TIM3_CH3 
    */
    GPIO_InitStruct.Pin = BUZZ_Pin;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ba8:	2302      	movs	r3, #2
 8003baa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bac:	2302      	movs	r3, #2
 8003bae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUZZ_GPIO_Port, &GPIO_InitStruct);
 8003bb0:	f107 0310 	add.w	r3, r7, #16
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	4805      	ldr	r0, [pc, #20]	; (8003bcc <HAL_TIM_MspPostInit+0x60>)
 8003bb8:	f000 fce4 	bl	8004584 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003bbc:	bf00      	nop
 8003bbe:	3720      	adds	r7, #32
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	40000400 	.word	0x40000400
 8003bc8:	40021000 	.word	0x40021000
 8003bcc:	40010c00 	.word	0x40010c00

08003bd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b08a      	sub	sp, #40	; 0x28
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bd8:	f107 0318 	add.w	r3, r7, #24
 8003bdc:	2200      	movs	r2, #0
 8003bde:	601a      	str	r2, [r3, #0]
 8003be0:	605a      	str	r2, [r3, #4]
 8003be2:	609a      	str	r2, [r3, #8]
 8003be4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a37      	ldr	r2, [pc, #220]	; (8003cc8 <HAL_UART_MspInit+0xf8>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d132      	bne.n	8003c56 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003bf0:	4b36      	ldr	r3, [pc, #216]	; (8003ccc <HAL_UART_MspInit+0xfc>)
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	4a35      	ldr	r2, [pc, #212]	; (8003ccc <HAL_UART_MspInit+0xfc>)
 8003bf6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bfa:	6193      	str	r3, [r2, #24]
 8003bfc:	4b33      	ldr	r3, [pc, #204]	; (8003ccc <HAL_UART_MspInit+0xfc>)
 8003bfe:	699b      	ldr	r3, [r3, #24]
 8003c00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c04:	617b      	str	r3, [r7, #20]
 8003c06:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c08:	4b30      	ldr	r3, [pc, #192]	; (8003ccc <HAL_UART_MspInit+0xfc>)
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	4a2f      	ldr	r2, [pc, #188]	; (8003ccc <HAL_UART_MspInit+0xfc>)
 8003c0e:	f043 0304 	orr.w	r3, r3, #4
 8003c12:	6193      	str	r3, [r2, #24]
 8003c14:	4b2d      	ldr	r3, [pc, #180]	; (8003ccc <HAL_UART_MspInit+0xfc>)
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	f003 0304 	and.w	r3, r3, #4
 8003c1c:	613b      	str	r3, [r7, #16]
 8003c1e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003c20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c26:	2302      	movs	r3, #2
 8003c28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c2e:	f107 0318 	add.w	r3, r7, #24
 8003c32:	4619      	mov	r1, r3
 8003c34:	4826      	ldr	r0, [pc, #152]	; (8003cd0 <HAL_UART_MspInit+0x100>)
 8003c36:	f000 fca5 	bl	8004584 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003c3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c40:	2300      	movs	r3, #0
 8003c42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c44:	2300      	movs	r3, #0
 8003c46:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c48:	f107 0318 	add.w	r3, r7, #24
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	4820      	ldr	r0, [pc, #128]	; (8003cd0 <HAL_UART_MspInit+0x100>)
 8003c50:	f000 fc98 	bl	8004584 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003c54:	e034      	b.n	8003cc0 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a1e      	ldr	r2, [pc, #120]	; (8003cd4 <HAL_UART_MspInit+0x104>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d12f      	bne.n	8003cc0 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003c60:	4b1a      	ldr	r3, [pc, #104]	; (8003ccc <HAL_UART_MspInit+0xfc>)
 8003c62:	69db      	ldr	r3, [r3, #28]
 8003c64:	4a19      	ldr	r2, [pc, #100]	; (8003ccc <HAL_UART_MspInit+0xfc>)
 8003c66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c6a:	61d3      	str	r3, [r2, #28]
 8003c6c:	4b17      	ldr	r3, [pc, #92]	; (8003ccc <HAL_UART_MspInit+0xfc>)
 8003c6e:	69db      	ldr	r3, [r3, #28]
 8003c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c74:	60fb      	str	r3, [r7, #12]
 8003c76:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c78:	4b14      	ldr	r3, [pc, #80]	; (8003ccc <HAL_UART_MspInit+0xfc>)
 8003c7a:	699b      	ldr	r3, [r3, #24]
 8003c7c:	4a13      	ldr	r2, [pc, #76]	; (8003ccc <HAL_UART_MspInit+0xfc>)
 8003c7e:	f043 0304 	orr.w	r3, r3, #4
 8003c82:	6193      	str	r3, [r2, #24]
 8003c84:	4b11      	ldr	r3, [pc, #68]	; (8003ccc <HAL_UART_MspInit+0xfc>)
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	f003 0304 	and.w	r3, r3, #4
 8003c8c:	60bb      	str	r3, [r7, #8]
 8003c8e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BT_TX_Pin;
 8003c90:	2304      	movs	r3, #4
 8003c92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c94:	2302      	movs	r3, #2
 8003c96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BT_TX_GPIO_Port, &GPIO_InitStruct);
 8003c9c:	f107 0318 	add.w	r3, r7, #24
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	480b      	ldr	r0, [pc, #44]	; (8003cd0 <HAL_UART_MspInit+0x100>)
 8003ca4:	f000 fc6e 	bl	8004584 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BT_RX_Pin;
 8003ca8:	2308      	movs	r3, #8
 8003caa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003cac:	2300      	movs	r3, #0
 8003cae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BT_RX_GPIO_Port, &GPIO_InitStruct);
 8003cb4:	f107 0318 	add.w	r3, r7, #24
 8003cb8:	4619      	mov	r1, r3
 8003cba:	4805      	ldr	r0, [pc, #20]	; (8003cd0 <HAL_UART_MspInit+0x100>)
 8003cbc:	f000 fc62 	bl	8004584 <HAL_GPIO_Init>
}
 8003cc0:	bf00      	nop
 8003cc2:	3728      	adds	r7, #40	; 0x28
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	40013800 	.word	0x40013800
 8003ccc:	40021000 	.word	0x40021000
 8003cd0:	40010800 	.word	0x40010800
 8003cd4:	40004400 	.word	0x40004400

08003cd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003cdc:	bf00      	nop
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bc80      	pop	{r7}
 8003ce2:	4770      	bx	lr

08003ce4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ce8:	e7fe      	b.n	8003ce8 <HardFault_Handler+0x4>

08003cea <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003cea:	b480      	push	{r7}
 8003cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003cee:	e7fe      	b.n	8003cee <MemManage_Handler+0x4>

08003cf0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003cf4:	e7fe      	b.n	8003cf4 <BusFault_Handler+0x4>

08003cf6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003cfa:	e7fe      	b.n	8003cfa <UsageFault_Handler+0x4>

08003cfc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d00:	bf00      	nop
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bc80      	pop	{r7}
 8003d06:	4770      	bx	lr

08003d08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d0c:	bf00      	nop
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bc80      	pop	{r7}
 8003d12:	4770      	bx	lr

08003d14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d14:	b480      	push	{r7}
 8003d16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d18:	bf00      	nop
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bc80      	pop	{r7}
 8003d1e:	4770      	bx	lr

08003d20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d24:	f000 f8d8 	bl	8003ed8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d28:	bf00      	nop
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003d30:	4802      	ldr	r0, [pc, #8]	; (8003d3c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8003d32:	f002 f83a 	bl	8005daa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8003d36:	bf00      	nop
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	20001854 	.word	0x20001854

08003d40 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003d48:	4b11      	ldr	r3, [pc, #68]	; (8003d90 <_sbrk+0x50>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d102      	bne.n	8003d56 <_sbrk+0x16>
		heap_end = &end;
 8003d50:	4b0f      	ldr	r3, [pc, #60]	; (8003d90 <_sbrk+0x50>)
 8003d52:	4a10      	ldr	r2, [pc, #64]	; (8003d94 <_sbrk+0x54>)
 8003d54:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003d56:	4b0e      	ldr	r3, [pc, #56]	; (8003d90 <_sbrk+0x50>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003d5c:	4b0c      	ldr	r3, [pc, #48]	; (8003d90 <_sbrk+0x50>)
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4413      	add	r3, r2
 8003d64:	466a      	mov	r2, sp
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d907      	bls.n	8003d7a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003d6a:	f007 fe59 	bl	800ba20 <__errno>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	230c      	movs	r3, #12
 8003d72:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003d74:	f04f 33ff 	mov.w	r3, #4294967295
 8003d78:	e006      	b.n	8003d88 <_sbrk+0x48>
	}

	heap_end += incr;
 8003d7a:	4b05      	ldr	r3, [pc, #20]	; (8003d90 <_sbrk+0x50>)
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4413      	add	r3, r2
 8003d82:	4a03      	ldr	r2, [pc, #12]	; (8003d90 <_sbrk+0x50>)
 8003d84:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003d86:	68fb      	ldr	r3, [r7, #12]
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	20000730 	.word	0x20000730
 8003d94:	20001ac8 	.word	0x20001ac8

08003d98 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003d9c:	4b15      	ldr	r3, [pc, #84]	; (8003df4 <SystemInit+0x5c>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a14      	ldr	r2, [pc, #80]	; (8003df4 <SystemInit+0x5c>)
 8003da2:	f043 0301 	orr.w	r3, r3, #1
 8003da6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8003da8:	4b12      	ldr	r3, [pc, #72]	; (8003df4 <SystemInit+0x5c>)
 8003daa:	685a      	ldr	r2, [r3, #4]
 8003dac:	4911      	ldr	r1, [pc, #68]	; (8003df4 <SystemInit+0x5c>)
 8003dae:	4b12      	ldr	r3, [pc, #72]	; (8003df8 <SystemInit+0x60>)
 8003db0:	4013      	ands	r3, r2
 8003db2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003db4:	4b0f      	ldr	r3, [pc, #60]	; (8003df4 <SystemInit+0x5c>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a0e      	ldr	r2, [pc, #56]	; (8003df4 <SystemInit+0x5c>)
 8003dba:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003dbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dc2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003dc4:	4b0b      	ldr	r3, [pc, #44]	; (8003df4 <SystemInit+0x5c>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a0a      	ldr	r2, [pc, #40]	; (8003df4 <SystemInit+0x5c>)
 8003dca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dce:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003dd0:	4b08      	ldr	r3, [pc, #32]	; (8003df4 <SystemInit+0x5c>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	4a07      	ldr	r2, [pc, #28]	; (8003df4 <SystemInit+0x5c>)
 8003dd6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003dda:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003ddc:	4b05      	ldr	r3, [pc, #20]	; (8003df4 <SystemInit+0x5c>)
 8003dde:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003de2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003de4:	4b05      	ldr	r3, [pc, #20]	; (8003dfc <SystemInit+0x64>)
 8003de6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003dea:	609a      	str	r2, [r3, #8]
#endif 
}
 8003dec:	bf00      	nop
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bc80      	pop	{r7}
 8003df2:	4770      	bx	lr
 8003df4:	40021000 	.word	0x40021000
 8003df8:	f8ff0000 	.word	0xf8ff0000
 8003dfc:	e000ed00 	.word	0xe000ed00

08003e00 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003e00:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003e02:	e003      	b.n	8003e0c <LoopCopyDataInit>

08003e04 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003e04:	4b0b      	ldr	r3, [pc, #44]	; (8003e34 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003e06:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003e08:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003e0a:	3104      	adds	r1, #4

08003e0c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003e0c:	480a      	ldr	r0, [pc, #40]	; (8003e38 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003e0e:	4b0b      	ldr	r3, [pc, #44]	; (8003e3c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003e10:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003e12:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003e14:	d3f6      	bcc.n	8003e04 <CopyDataInit>
  ldr r2, =_sbss
 8003e16:	4a0a      	ldr	r2, [pc, #40]	; (8003e40 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003e18:	e002      	b.n	8003e20 <LoopFillZerobss>

08003e1a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003e1a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003e1c:	f842 3b04 	str.w	r3, [r2], #4

08003e20 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003e20:	4b08      	ldr	r3, [pc, #32]	; (8003e44 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003e22:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003e24:	d3f9      	bcc.n	8003e1a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003e26:	f7ff ffb7 	bl	8003d98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003e2a:	f007 fdff 	bl	800ba2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003e2e:	f7fe fb67 	bl	8002500 <main>
  bx lr
 8003e32:	4770      	bx	lr
  ldr r3, =_sidata
 8003e34:	0800d638 	.word	0x0800d638
  ldr r0, =_sdata
 8003e38:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003e3c:	200001f0 	.word	0x200001f0
  ldr r2, =_sbss
 8003e40:	200001f0 	.word	0x200001f0
  ldr r3, = _ebss
 8003e44:	20001ac4 	.word	0x20001ac4

08003e48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003e48:	e7fe      	b.n	8003e48 <ADC1_2_IRQHandler>
	...

08003e4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e50:	4b08      	ldr	r3, [pc, #32]	; (8003e74 <HAL_Init+0x28>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a07      	ldr	r2, [pc, #28]	; (8003e74 <HAL_Init+0x28>)
 8003e56:	f043 0310 	orr.w	r3, r3, #16
 8003e5a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e5c:	2003      	movs	r0, #3
 8003e5e:	f000 fb4f 	bl	8004500 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e62:	2000      	movs	r0, #0
 8003e64:	f000 f808 	bl	8003e78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003e68:	f7ff fd0e 	bl	8003888 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	40022000 	.word	0x40022000

08003e78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003e80:	4b12      	ldr	r3, [pc, #72]	; (8003ecc <HAL_InitTick+0x54>)
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	4b12      	ldr	r3, [pc, #72]	; (8003ed0 <HAL_InitTick+0x58>)
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	4619      	mov	r1, r3
 8003e8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e96:	4618      	mov	r0, r3
 8003e98:	f000 fb67 	bl	800456a <HAL_SYSTICK_Config>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d001      	beq.n	8003ea6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e00e      	b.n	8003ec4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2b0f      	cmp	r3, #15
 8003eaa:	d80a      	bhi.n	8003ec2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003eac:	2200      	movs	r2, #0
 8003eae:	6879      	ldr	r1, [r7, #4]
 8003eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8003eb4:	f000 fb2f 	bl	8004516 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003eb8:	4a06      	ldr	r2, [pc, #24]	; (8003ed4 <HAL_InitTick+0x5c>)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	e000      	b.n	8003ec4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3708      	adds	r7, #8
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	20000010 	.word	0x20000010
 8003ed0:	20000018 	.word	0x20000018
 8003ed4:	20000014 	.word	0x20000014

08003ed8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003edc:	4b05      	ldr	r3, [pc, #20]	; (8003ef4 <HAL_IncTick+0x1c>)
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	4b05      	ldr	r3, [pc, #20]	; (8003ef8 <HAL_IncTick+0x20>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	4a03      	ldr	r2, [pc, #12]	; (8003ef8 <HAL_IncTick+0x20>)
 8003eea:	6013      	str	r3, [r2, #0]
}
 8003eec:	bf00      	nop
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bc80      	pop	{r7}
 8003ef2:	4770      	bx	lr
 8003ef4:	20000018 	.word	0x20000018
 8003ef8:	20000bbc 	.word	0x20000bbc

08003efc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
  return uwTick;
 8003f00:	4b02      	ldr	r3, [pc, #8]	; (8003f0c <HAL_GetTick+0x10>)
 8003f02:	681b      	ldr	r3, [r3, #0]
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bc80      	pop	{r7}
 8003f0a:	4770      	bx	lr
 8003f0c:	20000bbc 	.word	0x20000bbc

08003f10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f18:	f7ff fff0 	bl	8003efc <HAL_GetTick>
 8003f1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f28:	d005      	beq.n	8003f36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f2a:	4b09      	ldr	r3, [pc, #36]	; (8003f50 <HAL_Delay+0x40>)
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	4413      	add	r3, r2
 8003f34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003f36:	bf00      	nop
 8003f38:	f7ff ffe0 	bl	8003efc <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d8f7      	bhi.n	8003f38 <HAL_Delay+0x28>
  {
  }
}
 8003f48:	bf00      	nop
 8003f4a:	3710      	adds	r7, #16
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	20000018 	.word	0x20000018

08003f54 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b086      	sub	sp, #24
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003f60:	2300      	movs	r3, #0
 8003f62:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003f64:	2300      	movs	r3, #0
 8003f66:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e0be      	b.n	80040f4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d109      	bne.n	8003f98 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f7ff fcaa 	bl	80038ec <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 f9ab 	bl	80042f4 <ADC_ConversionStop_Disable>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa6:	f003 0310 	and.w	r3, r3, #16
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	f040 8099 	bne.w	80040e2 <HAL_ADC_Init+0x18e>
 8003fb0:	7dfb      	ldrb	r3, [r7, #23]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	f040 8095 	bne.w	80040e2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fbc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003fc0:	f023 0302 	bic.w	r3, r3, #2
 8003fc4:	f043 0202 	orr.w	r2, r3, #2
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003fd4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	7b1b      	ldrb	r3, [r3, #12]
 8003fda:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003fdc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003fde:	68ba      	ldr	r2, [r7, #8]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fec:	d003      	beq.n	8003ff6 <HAL_ADC_Init+0xa2>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d102      	bne.n	8003ffc <HAL_ADC_Init+0xa8>
 8003ff6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ffa:	e000      	b.n	8003ffe <HAL_ADC_Init+0xaa>
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	4313      	orrs	r3, r2
 8004002:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	7d1b      	ldrb	r3, [r3, #20]
 8004008:	2b01      	cmp	r3, #1
 800400a:	d119      	bne.n	8004040 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	7b1b      	ldrb	r3, [r3, #12]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d109      	bne.n	8004028 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	3b01      	subs	r3, #1
 800401a:	035a      	lsls	r2, r3, #13
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	4313      	orrs	r3, r2
 8004020:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004024:	613b      	str	r3, [r7, #16]
 8004026:	e00b      	b.n	8004040 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800402c:	f043 0220 	orr.w	r2, r3, #32
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004038:	f043 0201 	orr.w	r2, r3, #1
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	430a      	orrs	r2, r1
 8004052:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	689a      	ldr	r2, [r3, #8]
 800405a:	4b28      	ldr	r3, [pc, #160]	; (80040fc <HAL_ADC_Init+0x1a8>)
 800405c:	4013      	ands	r3, r2
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	6812      	ldr	r2, [r2, #0]
 8004062:	68b9      	ldr	r1, [r7, #8]
 8004064:	430b      	orrs	r3, r1
 8004066:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004070:	d003      	beq.n	800407a <HAL_ADC_Init+0x126>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d104      	bne.n	8004084 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	3b01      	subs	r3, #1
 8004080:	051b      	lsls	r3, r3, #20
 8004082:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	430a      	orrs	r2, r1
 8004096:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	689a      	ldr	r2, [r3, #8]
 800409e:	4b18      	ldr	r3, [pc, #96]	; (8004100 <HAL_ADC_Init+0x1ac>)
 80040a0:	4013      	ands	r3, r2
 80040a2:	68ba      	ldr	r2, [r7, #8]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d10b      	bne.n	80040c0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b2:	f023 0303 	bic.w	r3, r3, #3
 80040b6:	f043 0201 	orr.w	r2, r3, #1
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80040be:	e018      	b.n	80040f2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c4:	f023 0312 	bic.w	r3, r3, #18
 80040c8:	f043 0210 	orr.w	r2, r3, #16
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d4:	f043 0201 	orr.w	r2, r3, #1
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80040e0:	e007      	b.n	80040f2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e6:	f043 0210 	orr.w	r2, r3, #16
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80040f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3718      	adds	r7, #24
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	ffe1f7fd 	.word	0xffe1f7fd
 8004100:	ff1f0efe 	.word	0xff1f0efe

08004104 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004104:	b480      	push	{r7}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800410e:	2300      	movs	r3, #0
 8004110:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8004112:	2300      	movs	r3, #0
 8004114:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800411c:	2b01      	cmp	r3, #1
 800411e:	d101      	bne.n	8004124 <HAL_ADC_ConfigChannel+0x20>
 8004120:	2302      	movs	r3, #2
 8004122:	e0dc      	b.n	80042de <HAL_ADC_ConfigChannel+0x1da>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	2b06      	cmp	r3, #6
 8004132:	d81c      	bhi.n	800416e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	685a      	ldr	r2, [r3, #4]
 800413e:	4613      	mov	r3, r2
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	4413      	add	r3, r2
 8004144:	3b05      	subs	r3, #5
 8004146:	221f      	movs	r2, #31
 8004148:	fa02 f303 	lsl.w	r3, r2, r3
 800414c:	43db      	mvns	r3, r3
 800414e:	4019      	ands	r1, r3
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	6818      	ldr	r0, [r3, #0]
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	685a      	ldr	r2, [r3, #4]
 8004158:	4613      	mov	r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	4413      	add	r3, r2
 800415e:	3b05      	subs	r3, #5
 8004160:	fa00 f203 	lsl.w	r2, r0, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	430a      	orrs	r2, r1
 800416a:	635a      	str	r2, [r3, #52]	; 0x34
 800416c:	e03c      	b.n	80041e8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	2b0c      	cmp	r3, #12
 8004174:	d81c      	bhi.n	80041b0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	4613      	mov	r3, r2
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	4413      	add	r3, r2
 8004186:	3b23      	subs	r3, #35	; 0x23
 8004188:	221f      	movs	r2, #31
 800418a:	fa02 f303 	lsl.w	r3, r2, r3
 800418e:	43db      	mvns	r3, r3
 8004190:	4019      	ands	r1, r3
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	6818      	ldr	r0, [r3, #0]
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	685a      	ldr	r2, [r3, #4]
 800419a:	4613      	mov	r3, r2
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	4413      	add	r3, r2
 80041a0:	3b23      	subs	r3, #35	; 0x23
 80041a2:	fa00 f203 	lsl.w	r2, r0, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	430a      	orrs	r2, r1
 80041ac:	631a      	str	r2, [r3, #48]	; 0x30
 80041ae:	e01b      	b.n	80041e8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	685a      	ldr	r2, [r3, #4]
 80041ba:	4613      	mov	r3, r2
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	4413      	add	r3, r2
 80041c0:	3b41      	subs	r3, #65	; 0x41
 80041c2:	221f      	movs	r2, #31
 80041c4:	fa02 f303 	lsl.w	r3, r2, r3
 80041c8:	43db      	mvns	r3, r3
 80041ca:	4019      	ands	r1, r3
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	6818      	ldr	r0, [r3, #0]
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	685a      	ldr	r2, [r3, #4]
 80041d4:	4613      	mov	r3, r2
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	4413      	add	r3, r2
 80041da:	3b41      	subs	r3, #65	; 0x41
 80041dc:	fa00 f203 	lsl.w	r2, r0, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	430a      	orrs	r2, r1
 80041e6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2b09      	cmp	r3, #9
 80041ee:	d91c      	bls.n	800422a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68d9      	ldr	r1, [r3, #12]
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	4613      	mov	r3, r2
 80041fc:	005b      	lsls	r3, r3, #1
 80041fe:	4413      	add	r3, r2
 8004200:	3b1e      	subs	r3, #30
 8004202:	2207      	movs	r2, #7
 8004204:	fa02 f303 	lsl.w	r3, r2, r3
 8004208:	43db      	mvns	r3, r3
 800420a:	4019      	ands	r1, r3
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	6898      	ldr	r0, [r3, #8]
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	4613      	mov	r3, r2
 8004216:	005b      	lsls	r3, r3, #1
 8004218:	4413      	add	r3, r2
 800421a:	3b1e      	subs	r3, #30
 800421c:	fa00 f203 	lsl.w	r2, r0, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	430a      	orrs	r2, r1
 8004226:	60da      	str	r2, [r3, #12]
 8004228:	e019      	b.n	800425e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	6919      	ldr	r1, [r3, #16]
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	4613      	mov	r3, r2
 8004236:	005b      	lsls	r3, r3, #1
 8004238:	4413      	add	r3, r2
 800423a:	2207      	movs	r2, #7
 800423c:	fa02 f303 	lsl.w	r3, r2, r3
 8004240:	43db      	mvns	r3, r3
 8004242:	4019      	ands	r1, r3
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	6898      	ldr	r0, [r3, #8]
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	4613      	mov	r3, r2
 800424e:	005b      	lsls	r3, r3, #1
 8004250:	4413      	add	r3, r2
 8004252:	fa00 f203 	lsl.w	r2, r0, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	430a      	orrs	r2, r1
 800425c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2b10      	cmp	r3, #16
 8004264:	d003      	beq.n	800426e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800426a:	2b11      	cmp	r3, #17
 800426c:	d132      	bne.n	80042d4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a1d      	ldr	r2, [pc, #116]	; (80042e8 <HAL_ADC_ConfigChannel+0x1e4>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d125      	bne.n	80042c4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d126      	bne.n	80042d4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	689a      	ldr	r2, [r3, #8]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004294:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2b10      	cmp	r3, #16
 800429c:	d11a      	bne.n	80042d4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800429e:	4b13      	ldr	r3, [pc, #76]	; (80042ec <HAL_ADC_ConfigChannel+0x1e8>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a13      	ldr	r2, [pc, #76]	; (80042f0 <HAL_ADC_ConfigChannel+0x1ec>)
 80042a4:	fba2 2303 	umull	r2, r3, r2, r3
 80042a8:	0c9a      	lsrs	r2, r3, #18
 80042aa:	4613      	mov	r3, r2
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	4413      	add	r3, r2
 80042b0:	005b      	lsls	r3, r3, #1
 80042b2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80042b4:	e002      	b.n	80042bc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	3b01      	subs	r3, #1
 80042ba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1f9      	bne.n	80042b6 <HAL_ADC_ConfigChannel+0x1b2>
 80042c2:	e007      	b.n	80042d4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c8:	f043 0220 	orr.w	r2, r3, #32
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80042dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3714      	adds	r7, #20
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bc80      	pop	{r7}
 80042e6:	4770      	bx	lr
 80042e8:	40012400 	.word	0x40012400
 80042ec:	20000010 	.word	0x20000010
 80042f0:	431bde83 	.word	0x431bde83

080042f4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042fc:	2300      	movs	r3, #0
 80042fe:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f003 0301 	and.w	r3, r3, #1
 800430a:	2b01      	cmp	r3, #1
 800430c:	d127      	bne.n	800435e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	689a      	ldr	r2, [r3, #8]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f022 0201 	bic.w	r2, r2, #1
 800431c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800431e:	f7ff fded 	bl	8003efc <HAL_GetTick>
 8004322:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004324:	e014      	b.n	8004350 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004326:	f7ff fde9 	bl	8003efc <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	2b02      	cmp	r3, #2
 8004332:	d90d      	bls.n	8004350 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004338:	f043 0210 	orr.w	r2, r3, #16
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004344:	f043 0201 	orr.w	r2, r3, #1
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e007      	b.n	8004360 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	2b01      	cmp	r3, #1
 800435c:	d0e3      	beq.n	8004326 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800435e:	2300      	movs	r3, #0
}
 8004360:	4618      	mov	r0, r3
 8004362:	3710      	adds	r7, #16
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f003 0307 	and.w	r3, r3, #7
 8004376:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004378:	4b0c      	ldr	r3, [pc, #48]	; (80043ac <__NVIC_SetPriorityGrouping+0x44>)
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800437e:	68ba      	ldr	r2, [r7, #8]
 8004380:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004384:	4013      	ands	r3, r2
 8004386:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004390:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004394:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004398:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800439a:	4a04      	ldr	r2, [pc, #16]	; (80043ac <__NVIC_SetPriorityGrouping+0x44>)
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	60d3      	str	r3, [r2, #12]
}
 80043a0:	bf00      	nop
 80043a2:	3714      	adds	r7, #20
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bc80      	pop	{r7}
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	e000ed00 	.word	0xe000ed00

080043b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043b0:	b480      	push	{r7}
 80043b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043b4:	4b04      	ldr	r3, [pc, #16]	; (80043c8 <__NVIC_GetPriorityGrouping+0x18>)
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	0a1b      	lsrs	r3, r3, #8
 80043ba:	f003 0307 	and.w	r3, r3, #7
}
 80043be:	4618      	mov	r0, r3
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bc80      	pop	{r7}
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	e000ed00 	.word	0xe000ed00

080043cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	4603      	mov	r3, r0
 80043d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	db0b      	blt.n	80043f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043de:	79fb      	ldrb	r3, [r7, #7]
 80043e0:	f003 021f 	and.w	r2, r3, #31
 80043e4:	4906      	ldr	r1, [pc, #24]	; (8004400 <__NVIC_EnableIRQ+0x34>)
 80043e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ea:	095b      	lsrs	r3, r3, #5
 80043ec:	2001      	movs	r0, #1
 80043ee:	fa00 f202 	lsl.w	r2, r0, r2
 80043f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80043f6:	bf00      	nop
 80043f8:	370c      	adds	r7, #12
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bc80      	pop	{r7}
 80043fe:	4770      	bx	lr
 8004400:	e000e100 	.word	0xe000e100

08004404 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	4603      	mov	r3, r0
 800440c:	6039      	str	r1, [r7, #0]
 800440e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004414:	2b00      	cmp	r3, #0
 8004416:	db0a      	blt.n	800442e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	b2da      	uxtb	r2, r3
 800441c:	490c      	ldr	r1, [pc, #48]	; (8004450 <__NVIC_SetPriority+0x4c>)
 800441e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004422:	0112      	lsls	r2, r2, #4
 8004424:	b2d2      	uxtb	r2, r2
 8004426:	440b      	add	r3, r1
 8004428:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800442c:	e00a      	b.n	8004444 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	b2da      	uxtb	r2, r3
 8004432:	4908      	ldr	r1, [pc, #32]	; (8004454 <__NVIC_SetPriority+0x50>)
 8004434:	79fb      	ldrb	r3, [r7, #7]
 8004436:	f003 030f 	and.w	r3, r3, #15
 800443a:	3b04      	subs	r3, #4
 800443c:	0112      	lsls	r2, r2, #4
 800443e:	b2d2      	uxtb	r2, r2
 8004440:	440b      	add	r3, r1
 8004442:	761a      	strb	r2, [r3, #24]
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	bc80      	pop	{r7}
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	e000e100 	.word	0xe000e100
 8004454:	e000ed00 	.word	0xe000ed00

08004458 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004458:	b480      	push	{r7}
 800445a:	b089      	sub	sp, #36	; 0x24
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f003 0307 	and.w	r3, r3, #7
 800446a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	f1c3 0307 	rsb	r3, r3, #7
 8004472:	2b04      	cmp	r3, #4
 8004474:	bf28      	it	cs
 8004476:	2304      	movcs	r3, #4
 8004478:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	3304      	adds	r3, #4
 800447e:	2b06      	cmp	r3, #6
 8004480:	d902      	bls.n	8004488 <NVIC_EncodePriority+0x30>
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	3b03      	subs	r3, #3
 8004486:	e000      	b.n	800448a <NVIC_EncodePriority+0x32>
 8004488:	2300      	movs	r3, #0
 800448a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800448c:	f04f 32ff 	mov.w	r2, #4294967295
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	fa02 f303 	lsl.w	r3, r2, r3
 8004496:	43da      	mvns	r2, r3
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	401a      	ands	r2, r3
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044a0:	f04f 31ff 	mov.w	r1, #4294967295
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	fa01 f303 	lsl.w	r3, r1, r3
 80044aa:	43d9      	mvns	r1, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044b0:	4313      	orrs	r3, r2
         );
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3724      	adds	r7, #36	; 0x24
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bc80      	pop	{r7}
 80044ba:	4770      	bx	lr

080044bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	3b01      	subs	r3, #1
 80044c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80044cc:	d301      	bcc.n	80044d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80044ce:	2301      	movs	r3, #1
 80044d0:	e00f      	b.n	80044f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044d2:	4a0a      	ldr	r2, [pc, #40]	; (80044fc <SysTick_Config+0x40>)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	3b01      	subs	r3, #1
 80044d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80044da:	210f      	movs	r1, #15
 80044dc:	f04f 30ff 	mov.w	r0, #4294967295
 80044e0:	f7ff ff90 	bl	8004404 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044e4:	4b05      	ldr	r3, [pc, #20]	; (80044fc <SysTick_Config+0x40>)
 80044e6:	2200      	movs	r2, #0
 80044e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044ea:	4b04      	ldr	r3, [pc, #16]	; (80044fc <SysTick_Config+0x40>)
 80044ec:	2207      	movs	r2, #7
 80044ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3708      	adds	r7, #8
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	e000e010 	.word	0xe000e010

08004500 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f7ff ff2d 	bl	8004368 <__NVIC_SetPriorityGrouping>
}
 800450e:	bf00      	nop
 8004510:	3708      	adds	r7, #8
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004516:	b580      	push	{r7, lr}
 8004518:	b086      	sub	sp, #24
 800451a:	af00      	add	r7, sp, #0
 800451c:	4603      	mov	r3, r0
 800451e:	60b9      	str	r1, [r7, #8]
 8004520:	607a      	str	r2, [r7, #4]
 8004522:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004524:	2300      	movs	r3, #0
 8004526:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004528:	f7ff ff42 	bl	80043b0 <__NVIC_GetPriorityGrouping>
 800452c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	68b9      	ldr	r1, [r7, #8]
 8004532:	6978      	ldr	r0, [r7, #20]
 8004534:	f7ff ff90 	bl	8004458 <NVIC_EncodePriority>
 8004538:	4602      	mov	r2, r0
 800453a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800453e:	4611      	mov	r1, r2
 8004540:	4618      	mov	r0, r3
 8004542:	f7ff ff5f 	bl	8004404 <__NVIC_SetPriority>
}
 8004546:	bf00      	nop
 8004548:	3718      	adds	r7, #24
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800454e:	b580      	push	{r7, lr}
 8004550:	b082      	sub	sp, #8
 8004552:	af00      	add	r7, sp, #0
 8004554:	4603      	mov	r3, r0
 8004556:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800455c:	4618      	mov	r0, r3
 800455e:	f7ff ff35 	bl	80043cc <__NVIC_EnableIRQ>
}
 8004562:	bf00      	nop
 8004564:	3708      	adds	r7, #8
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800456a:	b580      	push	{r7, lr}
 800456c:	b082      	sub	sp, #8
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f7ff ffa2 	bl	80044bc <SysTick_Config>
 8004578:	4603      	mov	r3, r0
}
 800457a:	4618      	mov	r0, r3
 800457c:	3708      	adds	r7, #8
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
	...

08004584 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004584:	b480      	push	{r7}
 8004586:	b08b      	sub	sp, #44	; 0x2c
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800458e:	2300      	movs	r3, #0
 8004590:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004592:	2300      	movs	r3, #0
 8004594:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004596:	e127      	b.n	80047e8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004598:	2201      	movs	r2, #1
 800459a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459c:	fa02 f303 	lsl.w	r3, r2, r3
 80045a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	69fa      	ldr	r2, [r7, #28]
 80045a8:	4013      	ands	r3, r2
 80045aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	f040 8116 	bne.w	80047e2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	2b12      	cmp	r3, #18
 80045bc:	d034      	beq.n	8004628 <HAL_GPIO_Init+0xa4>
 80045be:	2b12      	cmp	r3, #18
 80045c0:	d80d      	bhi.n	80045de <HAL_GPIO_Init+0x5a>
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d02b      	beq.n	800461e <HAL_GPIO_Init+0x9a>
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d804      	bhi.n	80045d4 <HAL_GPIO_Init+0x50>
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d031      	beq.n	8004632 <HAL_GPIO_Init+0xae>
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d01c      	beq.n	800460c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80045d2:	e048      	b.n	8004666 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80045d4:	2b03      	cmp	r3, #3
 80045d6:	d043      	beq.n	8004660 <HAL_GPIO_Init+0xdc>
 80045d8:	2b11      	cmp	r3, #17
 80045da:	d01b      	beq.n	8004614 <HAL_GPIO_Init+0x90>
          break;
 80045dc:	e043      	b.n	8004666 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80045de:	4a89      	ldr	r2, [pc, #548]	; (8004804 <HAL_GPIO_Init+0x280>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d026      	beq.n	8004632 <HAL_GPIO_Init+0xae>
 80045e4:	4a87      	ldr	r2, [pc, #540]	; (8004804 <HAL_GPIO_Init+0x280>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d806      	bhi.n	80045f8 <HAL_GPIO_Init+0x74>
 80045ea:	4a87      	ldr	r2, [pc, #540]	; (8004808 <HAL_GPIO_Init+0x284>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d020      	beq.n	8004632 <HAL_GPIO_Init+0xae>
 80045f0:	4a86      	ldr	r2, [pc, #536]	; (800480c <HAL_GPIO_Init+0x288>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d01d      	beq.n	8004632 <HAL_GPIO_Init+0xae>
          break;
 80045f6:	e036      	b.n	8004666 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80045f8:	4a85      	ldr	r2, [pc, #532]	; (8004810 <HAL_GPIO_Init+0x28c>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d019      	beq.n	8004632 <HAL_GPIO_Init+0xae>
 80045fe:	4a85      	ldr	r2, [pc, #532]	; (8004814 <HAL_GPIO_Init+0x290>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d016      	beq.n	8004632 <HAL_GPIO_Init+0xae>
 8004604:	4a84      	ldr	r2, [pc, #528]	; (8004818 <HAL_GPIO_Init+0x294>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d013      	beq.n	8004632 <HAL_GPIO_Init+0xae>
          break;
 800460a:	e02c      	b.n	8004666 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	623b      	str	r3, [r7, #32]
          break;
 8004612:	e028      	b.n	8004666 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	3304      	adds	r3, #4
 800461a:	623b      	str	r3, [r7, #32]
          break;
 800461c:	e023      	b.n	8004666 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	3308      	adds	r3, #8
 8004624:	623b      	str	r3, [r7, #32]
          break;
 8004626:	e01e      	b.n	8004666 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	330c      	adds	r3, #12
 800462e:	623b      	str	r3, [r7, #32]
          break;
 8004630:	e019      	b.n	8004666 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d102      	bne.n	8004640 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800463a:	2304      	movs	r3, #4
 800463c:	623b      	str	r3, [r7, #32]
          break;
 800463e:	e012      	b.n	8004666 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d105      	bne.n	8004654 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004648:	2308      	movs	r3, #8
 800464a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	69fa      	ldr	r2, [r7, #28]
 8004650:	611a      	str	r2, [r3, #16]
          break;
 8004652:	e008      	b.n	8004666 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004654:	2308      	movs	r3, #8
 8004656:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	69fa      	ldr	r2, [r7, #28]
 800465c:	615a      	str	r2, [r3, #20]
          break;
 800465e:	e002      	b.n	8004666 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004660:	2300      	movs	r3, #0
 8004662:	623b      	str	r3, [r7, #32]
          break;
 8004664:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	2bff      	cmp	r3, #255	; 0xff
 800466a:	d801      	bhi.n	8004670 <HAL_GPIO_Init+0xec>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	e001      	b.n	8004674 <HAL_GPIO_Init+0xf0>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	3304      	adds	r3, #4
 8004674:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	2bff      	cmp	r3, #255	; 0xff
 800467a:	d802      	bhi.n	8004682 <HAL_GPIO_Init+0xfe>
 800467c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	e002      	b.n	8004688 <HAL_GPIO_Init+0x104>
 8004682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004684:	3b08      	subs	r3, #8
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	210f      	movs	r1, #15
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	fa01 f303 	lsl.w	r3, r1, r3
 8004696:	43db      	mvns	r3, r3
 8004698:	401a      	ands	r2, r3
 800469a:	6a39      	ldr	r1, [r7, #32]
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	fa01 f303 	lsl.w	r3, r1, r3
 80046a2:	431a      	orrs	r2, r3
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f000 8096 	beq.w	80047e2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80046b6:	4b59      	ldr	r3, [pc, #356]	; (800481c <HAL_GPIO_Init+0x298>)
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	4a58      	ldr	r2, [pc, #352]	; (800481c <HAL_GPIO_Init+0x298>)
 80046bc:	f043 0301 	orr.w	r3, r3, #1
 80046c0:	6193      	str	r3, [r2, #24]
 80046c2:	4b56      	ldr	r3, [pc, #344]	; (800481c <HAL_GPIO_Init+0x298>)
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	60bb      	str	r3, [r7, #8]
 80046cc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80046ce:	4a54      	ldr	r2, [pc, #336]	; (8004820 <HAL_GPIO_Init+0x29c>)
 80046d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d2:	089b      	lsrs	r3, r3, #2
 80046d4:	3302      	adds	r3, #2
 80046d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046da:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80046dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046de:	f003 0303 	and.w	r3, r3, #3
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	220f      	movs	r2, #15
 80046e6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ea:	43db      	mvns	r3, r3
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	4013      	ands	r3, r2
 80046f0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a4b      	ldr	r2, [pc, #300]	; (8004824 <HAL_GPIO_Init+0x2a0>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d013      	beq.n	8004722 <HAL_GPIO_Init+0x19e>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a4a      	ldr	r2, [pc, #296]	; (8004828 <HAL_GPIO_Init+0x2a4>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d00d      	beq.n	800471e <HAL_GPIO_Init+0x19a>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a49      	ldr	r2, [pc, #292]	; (800482c <HAL_GPIO_Init+0x2a8>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d007      	beq.n	800471a <HAL_GPIO_Init+0x196>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a48      	ldr	r2, [pc, #288]	; (8004830 <HAL_GPIO_Init+0x2ac>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d101      	bne.n	8004716 <HAL_GPIO_Init+0x192>
 8004712:	2303      	movs	r3, #3
 8004714:	e006      	b.n	8004724 <HAL_GPIO_Init+0x1a0>
 8004716:	2304      	movs	r3, #4
 8004718:	e004      	b.n	8004724 <HAL_GPIO_Init+0x1a0>
 800471a:	2302      	movs	r3, #2
 800471c:	e002      	b.n	8004724 <HAL_GPIO_Init+0x1a0>
 800471e:	2301      	movs	r3, #1
 8004720:	e000      	b.n	8004724 <HAL_GPIO_Init+0x1a0>
 8004722:	2300      	movs	r3, #0
 8004724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004726:	f002 0203 	and.w	r2, r2, #3
 800472a:	0092      	lsls	r2, r2, #2
 800472c:	4093      	lsls	r3, r2
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	4313      	orrs	r3, r2
 8004732:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004734:	493a      	ldr	r1, [pc, #232]	; (8004820 <HAL_GPIO_Init+0x29c>)
 8004736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004738:	089b      	lsrs	r3, r3, #2
 800473a:	3302      	adds	r3, #2
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d006      	beq.n	800475c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800474e:	4b39      	ldr	r3, [pc, #228]	; (8004834 <HAL_GPIO_Init+0x2b0>)
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	4938      	ldr	r1, [pc, #224]	; (8004834 <HAL_GPIO_Init+0x2b0>)
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	4313      	orrs	r3, r2
 8004758:	600b      	str	r3, [r1, #0]
 800475a:	e006      	b.n	800476a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800475c:	4b35      	ldr	r3, [pc, #212]	; (8004834 <HAL_GPIO_Init+0x2b0>)
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	43db      	mvns	r3, r3
 8004764:	4933      	ldr	r1, [pc, #204]	; (8004834 <HAL_GPIO_Init+0x2b0>)
 8004766:	4013      	ands	r3, r2
 8004768:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d006      	beq.n	8004784 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004776:	4b2f      	ldr	r3, [pc, #188]	; (8004834 <HAL_GPIO_Init+0x2b0>)
 8004778:	685a      	ldr	r2, [r3, #4]
 800477a:	492e      	ldr	r1, [pc, #184]	; (8004834 <HAL_GPIO_Init+0x2b0>)
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	4313      	orrs	r3, r2
 8004780:	604b      	str	r3, [r1, #4]
 8004782:	e006      	b.n	8004792 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004784:	4b2b      	ldr	r3, [pc, #172]	; (8004834 <HAL_GPIO_Init+0x2b0>)
 8004786:	685a      	ldr	r2, [r3, #4]
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	43db      	mvns	r3, r3
 800478c:	4929      	ldr	r1, [pc, #164]	; (8004834 <HAL_GPIO_Init+0x2b0>)
 800478e:	4013      	ands	r3, r2
 8004790:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d006      	beq.n	80047ac <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800479e:	4b25      	ldr	r3, [pc, #148]	; (8004834 <HAL_GPIO_Init+0x2b0>)
 80047a0:	689a      	ldr	r2, [r3, #8]
 80047a2:	4924      	ldr	r1, [pc, #144]	; (8004834 <HAL_GPIO_Init+0x2b0>)
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	608b      	str	r3, [r1, #8]
 80047aa:	e006      	b.n	80047ba <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80047ac:	4b21      	ldr	r3, [pc, #132]	; (8004834 <HAL_GPIO_Init+0x2b0>)
 80047ae:	689a      	ldr	r2, [r3, #8]
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	43db      	mvns	r3, r3
 80047b4:	491f      	ldr	r1, [pc, #124]	; (8004834 <HAL_GPIO_Init+0x2b0>)
 80047b6:	4013      	ands	r3, r2
 80047b8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d006      	beq.n	80047d4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80047c6:	4b1b      	ldr	r3, [pc, #108]	; (8004834 <HAL_GPIO_Init+0x2b0>)
 80047c8:	68da      	ldr	r2, [r3, #12]
 80047ca:	491a      	ldr	r1, [pc, #104]	; (8004834 <HAL_GPIO_Init+0x2b0>)
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	60cb      	str	r3, [r1, #12]
 80047d2:	e006      	b.n	80047e2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80047d4:	4b17      	ldr	r3, [pc, #92]	; (8004834 <HAL_GPIO_Init+0x2b0>)
 80047d6:	68da      	ldr	r2, [r3, #12]
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	43db      	mvns	r3, r3
 80047dc:	4915      	ldr	r1, [pc, #84]	; (8004834 <HAL_GPIO_Init+0x2b0>)
 80047de:	4013      	ands	r3, r2
 80047e0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80047e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e4:	3301      	adds	r3, #1
 80047e6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ee:	fa22 f303 	lsr.w	r3, r2, r3
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	f47f aed0 	bne.w	8004598 <HAL_GPIO_Init+0x14>
  }
}
 80047f8:	bf00      	nop
 80047fa:	372c      	adds	r7, #44	; 0x2c
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bc80      	pop	{r7}
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	10210000 	.word	0x10210000
 8004808:	10110000 	.word	0x10110000
 800480c:	10120000 	.word	0x10120000
 8004810:	10310000 	.word	0x10310000
 8004814:	10320000 	.word	0x10320000
 8004818:	10220000 	.word	0x10220000
 800481c:	40021000 	.word	0x40021000
 8004820:	40010000 	.word	0x40010000
 8004824:	40010800 	.word	0x40010800
 8004828:	40010c00 	.word	0x40010c00
 800482c:	40011000 	.word	0x40011000
 8004830:	40011400 	.word	0x40011400
 8004834:	40010400 	.word	0x40010400

08004838 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004838:	b480      	push	{r7}
 800483a:	b089      	sub	sp, #36	; 0x24
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004842:	2300      	movs	r3, #0
 8004844:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8004846:	e09a      	b.n	800497e <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004848:	2201      	movs	r2, #1
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	fa02 f303 	lsl.w	r3, r2, r3
 8004850:	683a      	ldr	r2, [r7, #0]
 8004852:	4013      	ands	r3, r2
 8004854:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	2b00      	cmp	r3, #0
 800485a:	f000 808d 	beq.w	8004978 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800485e:	4a4e      	ldr	r2, [pc, #312]	; (8004998 <HAL_GPIO_DeInit+0x160>)
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	089b      	lsrs	r3, r3, #2
 8004864:	3302      	adds	r3, #2
 8004866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800486a:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	f003 0303 	and.w	r3, r3, #3
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	220f      	movs	r2, #15
 8004876:	fa02 f303 	lsl.w	r3, r2, r3
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	4013      	ands	r3, r2
 800487e:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4a46      	ldr	r2, [pc, #280]	; (800499c <HAL_GPIO_DeInit+0x164>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d013      	beq.n	80048b0 <HAL_GPIO_DeInit+0x78>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a45      	ldr	r2, [pc, #276]	; (80049a0 <HAL_GPIO_DeInit+0x168>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d00d      	beq.n	80048ac <HAL_GPIO_DeInit+0x74>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a44      	ldr	r2, [pc, #272]	; (80049a4 <HAL_GPIO_DeInit+0x16c>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d007      	beq.n	80048a8 <HAL_GPIO_DeInit+0x70>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4a43      	ldr	r2, [pc, #268]	; (80049a8 <HAL_GPIO_DeInit+0x170>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d101      	bne.n	80048a4 <HAL_GPIO_DeInit+0x6c>
 80048a0:	2303      	movs	r3, #3
 80048a2:	e006      	b.n	80048b2 <HAL_GPIO_DeInit+0x7a>
 80048a4:	2304      	movs	r3, #4
 80048a6:	e004      	b.n	80048b2 <HAL_GPIO_DeInit+0x7a>
 80048a8:	2302      	movs	r3, #2
 80048aa:	e002      	b.n	80048b2 <HAL_GPIO_DeInit+0x7a>
 80048ac:	2301      	movs	r3, #1
 80048ae:	e000      	b.n	80048b2 <HAL_GPIO_DeInit+0x7a>
 80048b0:	2300      	movs	r3, #0
 80048b2:	69fa      	ldr	r2, [r7, #28]
 80048b4:	f002 0203 	and.w	r2, r2, #3
 80048b8:	0092      	lsls	r2, r2, #2
 80048ba:	4093      	lsls	r3, r2
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d132      	bne.n	8004928 <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	f003 0303 	and.w	r3, r3, #3
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	220f      	movs	r2, #15
 80048cc:	fa02 f303 	lsl.w	r3, r2, r3
 80048d0:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80048d2:	4a31      	ldr	r2, [pc, #196]	; (8004998 <HAL_GPIO_DeInit+0x160>)
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	089b      	lsrs	r3, r3, #2
 80048d8:	3302      	adds	r3, #2
 80048da:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	43da      	mvns	r2, r3
 80048e2:	482d      	ldr	r0, [pc, #180]	; (8004998 <HAL_GPIO_DeInit+0x160>)
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	089b      	lsrs	r3, r3, #2
 80048e8:	400a      	ands	r2, r1
 80048ea:	3302      	adds	r3, #2
 80048ec:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80048f0:	4b2e      	ldr	r3, [pc, #184]	; (80049ac <HAL_GPIO_DeInit+0x174>)
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	43db      	mvns	r3, r3
 80048f8:	492c      	ldr	r1, [pc, #176]	; (80049ac <HAL_GPIO_DeInit+0x174>)
 80048fa:	4013      	ands	r3, r2
 80048fc:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80048fe:	4b2b      	ldr	r3, [pc, #172]	; (80049ac <HAL_GPIO_DeInit+0x174>)
 8004900:	685a      	ldr	r2, [r3, #4]
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	43db      	mvns	r3, r3
 8004906:	4929      	ldr	r1, [pc, #164]	; (80049ac <HAL_GPIO_DeInit+0x174>)
 8004908:	4013      	ands	r3, r2
 800490a:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800490c:	4b27      	ldr	r3, [pc, #156]	; (80049ac <HAL_GPIO_DeInit+0x174>)
 800490e:	689a      	ldr	r2, [r3, #8]
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	43db      	mvns	r3, r3
 8004914:	4925      	ldr	r1, [pc, #148]	; (80049ac <HAL_GPIO_DeInit+0x174>)
 8004916:	4013      	ands	r3, r2
 8004918:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800491a:	4b24      	ldr	r3, [pc, #144]	; (80049ac <HAL_GPIO_DeInit+0x174>)
 800491c:	68da      	ldr	r2, [r3, #12]
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	43db      	mvns	r3, r3
 8004922:	4922      	ldr	r1, [pc, #136]	; (80049ac <HAL_GPIO_DeInit+0x174>)
 8004924:	4013      	ands	r3, r2
 8004926:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	2bff      	cmp	r3, #255	; 0xff
 800492c:	d801      	bhi.n	8004932 <HAL_GPIO_DeInit+0xfa>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	e001      	b.n	8004936 <HAL_GPIO_DeInit+0xfe>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	3304      	adds	r3, #4
 8004936:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	2bff      	cmp	r3, #255	; 0xff
 800493c:	d802      	bhi.n	8004944 <HAL_GPIO_DeInit+0x10c>
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	e002      	b.n	800494a <HAL_GPIO_DeInit+0x112>
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	3b08      	subs	r3, #8
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	210f      	movs	r1, #15
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	fa01 f303 	lsl.w	r3, r1, r3
 8004958:	43db      	mvns	r3, r3
 800495a:	401a      	ands	r2, r3
 800495c:	2104      	movs	r1, #4
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	fa01 f303 	lsl.w	r3, r1, r3
 8004964:	431a      	orrs	r2, r3
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	68da      	ldr	r2, [r3, #12]
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	43db      	mvns	r3, r3
 8004972:	401a      	ands	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	3301      	adds	r3, #1
 800497c:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800497e:	683a      	ldr	r2, [r7, #0]
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	fa22 f303 	lsr.w	r3, r2, r3
 8004986:	2b00      	cmp	r3, #0
 8004988:	f47f af5e 	bne.w	8004848 <HAL_GPIO_DeInit+0x10>
  }
}
 800498c:	bf00      	nop
 800498e:	3724      	adds	r7, #36	; 0x24
 8004990:	46bd      	mov	sp, r7
 8004992:	bc80      	pop	{r7}
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	40010000 	.word	0x40010000
 800499c:	40010800 	.word	0x40010800
 80049a0:	40010c00 	.word	0x40010c00
 80049a4:	40011000 	.word	0x40011000
 80049a8:	40011400 	.word	0x40011400
 80049ac:	40010400 	.word	0x40010400

080049b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	460b      	mov	r3, r1
 80049ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	689a      	ldr	r2, [r3, #8]
 80049c0:	887b      	ldrh	r3, [r7, #2]
 80049c2:	4013      	ands	r3, r2
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d002      	beq.n	80049ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80049c8:	2301      	movs	r3, #1
 80049ca:	73fb      	strb	r3, [r7, #15]
 80049cc:	e001      	b.n	80049d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80049ce:	2300      	movs	r3, #0
 80049d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80049d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3714      	adds	r7, #20
 80049d8:	46bd      	mov	sp, r7
 80049da:	bc80      	pop	{r7}
 80049dc:	4770      	bx	lr

080049de <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049de:	b480      	push	{r7}
 80049e0:	b083      	sub	sp, #12
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
 80049e6:	460b      	mov	r3, r1
 80049e8:	807b      	strh	r3, [r7, #2]
 80049ea:	4613      	mov	r3, r2
 80049ec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80049ee:	787b      	ldrb	r3, [r7, #1]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d003      	beq.n	80049fc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049f4:	887a      	ldrh	r2, [r7, #2]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80049fa:	e003      	b.n	8004a04 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80049fc:	887b      	ldrh	r3, [r7, #2]
 80049fe:	041a      	lsls	r2, r3, #16
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	611a      	str	r2, [r3, #16]
}
 8004a04:	bf00      	nop
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bc80      	pop	{r7}
 8004a0c:	4770      	bx	lr

08004a0e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004a0e:	b480      	push	{r7}
 8004a10:	b083      	sub	sp, #12
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
 8004a16:	460b      	mov	r3, r1
 8004a18:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	68da      	ldr	r2, [r3, #12]
 8004a1e:	887b      	ldrh	r3, [r7, #2]
 8004a20:	4013      	ands	r3, r2
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d003      	beq.n	8004a2e <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004a26:	887a      	ldrh	r2, [r7, #2]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8004a2c:	e002      	b.n	8004a34 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004a2e:	887a      	ldrh	r2, [r7, #2]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	611a      	str	r2, [r3, #16]
}
 8004a34:	bf00      	nop
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bc80      	pop	{r7}
 8004a3c:	4770      	bx	lr
	...

08004a40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d101      	bne.n	8004a52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e10f      	b.n	8004c72 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d106      	bne.n	8004a6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f7fe ff7c 	bl	8003964 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2224      	movs	r2, #36	; 0x24
 8004a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f022 0201 	bic.w	r2, r2, #1
 8004a82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a84:	f002 fb42 	bl	800710c <HAL_RCC_GetPCLK1Freq>
 8004a88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	4a7b      	ldr	r2, [pc, #492]	; (8004c7c <HAL_I2C_Init+0x23c>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d807      	bhi.n	8004aa4 <HAL_I2C_Init+0x64>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	4a7a      	ldr	r2, [pc, #488]	; (8004c80 <HAL_I2C_Init+0x240>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	bf94      	ite	ls
 8004a9c:	2301      	movls	r3, #1
 8004a9e:	2300      	movhi	r3, #0
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	e006      	b.n	8004ab2 <HAL_I2C_Init+0x72>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	4a77      	ldr	r2, [pc, #476]	; (8004c84 <HAL_I2C_Init+0x244>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	bf94      	ite	ls
 8004aac:	2301      	movls	r3, #1
 8004aae:	2300      	movhi	r3, #0
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d001      	beq.n	8004aba <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e0db      	b.n	8004c72 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	4a72      	ldr	r2, [pc, #456]	; (8004c88 <HAL_I2C_Init+0x248>)
 8004abe:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac2:	0c9b      	lsrs	r3, r3, #18
 8004ac4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68ba      	ldr	r2, [r7, #8]
 8004ad6:	430a      	orrs	r2, r1
 8004ad8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	6a1b      	ldr	r3, [r3, #32]
 8004ae0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	4a64      	ldr	r2, [pc, #400]	; (8004c7c <HAL_I2C_Init+0x23c>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d802      	bhi.n	8004af4 <HAL_I2C_Init+0xb4>
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	3301      	adds	r3, #1
 8004af2:	e009      	b.n	8004b08 <HAL_I2C_Init+0xc8>
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004afa:	fb02 f303 	mul.w	r3, r2, r3
 8004afe:	4a63      	ldr	r2, [pc, #396]	; (8004c8c <HAL_I2C_Init+0x24c>)
 8004b00:	fba2 2303 	umull	r2, r3, r2, r3
 8004b04:	099b      	lsrs	r3, r3, #6
 8004b06:	3301      	adds	r3, #1
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	6812      	ldr	r2, [r2, #0]
 8004b0c:	430b      	orrs	r3, r1
 8004b0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	69db      	ldr	r3, [r3, #28]
 8004b16:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004b1a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	4956      	ldr	r1, [pc, #344]	; (8004c7c <HAL_I2C_Init+0x23c>)
 8004b24:	428b      	cmp	r3, r1
 8004b26:	d80d      	bhi.n	8004b44 <HAL_I2C_Init+0x104>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	1e59      	subs	r1, r3, #1
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	005b      	lsls	r3, r3, #1
 8004b32:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b36:	3301      	adds	r3, #1
 8004b38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b3c:	2b04      	cmp	r3, #4
 8004b3e:	bf38      	it	cc
 8004b40:	2304      	movcc	r3, #4
 8004b42:	e04f      	b.n	8004be4 <HAL_I2C_Init+0x1a4>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d111      	bne.n	8004b70 <HAL_I2C_Init+0x130>
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	1e58      	subs	r0, r3, #1
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6859      	ldr	r1, [r3, #4]
 8004b54:	460b      	mov	r3, r1
 8004b56:	005b      	lsls	r3, r3, #1
 8004b58:	440b      	add	r3, r1
 8004b5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b5e:	3301      	adds	r3, #1
 8004b60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	bf0c      	ite	eq
 8004b68:	2301      	moveq	r3, #1
 8004b6a:	2300      	movne	r3, #0
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	e012      	b.n	8004b96 <HAL_I2C_Init+0x156>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	1e58      	subs	r0, r3, #1
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6859      	ldr	r1, [r3, #4]
 8004b78:	460b      	mov	r3, r1
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	440b      	add	r3, r1
 8004b7e:	0099      	lsls	r1, r3, #2
 8004b80:	440b      	add	r3, r1
 8004b82:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b86:	3301      	adds	r3, #1
 8004b88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	bf0c      	ite	eq
 8004b90:	2301      	moveq	r3, #1
 8004b92:	2300      	movne	r3, #0
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d001      	beq.n	8004b9e <HAL_I2C_Init+0x15e>
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e022      	b.n	8004be4 <HAL_I2C_Init+0x1a4>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d10e      	bne.n	8004bc4 <HAL_I2C_Init+0x184>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	1e58      	subs	r0, r3, #1
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6859      	ldr	r1, [r3, #4]
 8004bae:	460b      	mov	r3, r1
 8004bb0:	005b      	lsls	r3, r3, #1
 8004bb2:	440b      	add	r3, r1
 8004bb4:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bb8:	3301      	adds	r3, #1
 8004bba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bc2:	e00f      	b.n	8004be4 <HAL_I2C_Init+0x1a4>
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	1e58      	subs	r0, r3, #1
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6859      	ldr	r1, [r3, #4]
 8004bcc:	460b      	mov	r3, r1
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	440b      	add	r3, r1
 8004bd2:	0099      	lsls	r1, r3, #2
 8004bd4:	440b      	add	r3, r1
 8004bd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bda:	3301      	adds	r3, #1
 8004bdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004be0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004be4:	6879      	ldr	r1, [r7, #4]
 8004be6:	6809      	ldr	r1, [r1, #0]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	69da      	ldr	r2, [r3, #28]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a1b      	ldr	r3, [r3, #32]
 8004bfe:	431a      	orrs	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	430a      	orrs	r2, r1
 8004c06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004c12:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	6911      	ldr	r1, [r2, #16]
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	68d2      	ldr	r2, [r2, #12]
 8004c1e:	4311      	orrs	r1, r2
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	6812      	ldr	r2, [r2, #0]
 8004c24:	430b      	orrs	r3, r1
 8004c26:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	695a      	ldr	r2, [r3, #20]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	431a      	orrs	r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	430a      	orrs	r2, r1
 8004c42:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f042 0201 	orr.w	r2, r2, #1
 8004c52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2220      	movs	r2, #32
 8004c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3710      	adds	r7, #16
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	000186a0 	.word	0x000186a0
 8004c80:	001e847f 	.word	0x001e847f
 8004c84:	003d08ff 	.word	0x003d08ff
 8004c88:	431bde83 	.word	0x431bde83
 8004c8c:	10624dd3 	.word	0x10624dd3

08004c90 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d101      	bne.n	8004ca2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e021      	b.n	8004ce6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2224      	movs	r2, #36	; 0x24
 8004ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f022 0201 	bic.w	r2, r2, #1
 8004cb8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f7fe febe 	bl	8003a3c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3708      	adds	r7, #8
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
	...

08004cf0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b088      	sub	sp, #32
 8004cf4:	af02      	add	r7, sp, #8
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	607a      	str	r2, [r7, #4]
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	460b      	mov	r3, r1
 8004cfe:	817b      	strh	r3, [r7, #10]
 8004d00:	4613      	mov	r3, r2
 8004d02:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004d04:	f7ff f8fa 	bl	8003efc <HAL_GetTick>
 8004d08:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	2b20      	cmp	r3, #32
 8004d14:	f040 80e0 	bne.w	8004ed8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	9300      	str	r3, [sp, #0]
 8004d1c:	2319      	movs	r3, #25
 8004d1e:	2201      	movs	r2, #1
 8004d20:	4970      	ldr	r1, [pc, #448]	; (8004ee4 <HAL_I2C_Master_Transmit+0x1f4>)
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	f000 fd5e 	bl	80057e4 <I2C_WaitOnFlagUntilTimeout>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d001      	beq.n	8004d32 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004d2e:	2302      	movs	r3, #2
 8004d30:	e0d3      	b.n	8004eda <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d101      	bne.n	8004d40 <HAL_I2C_Master_Transmit+0x50>
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	e0cc      	b.n	8004eda <HAL_I2C_Master_Transmit+0x1ea>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0301 	and.w	r3, r3, #1
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d007      	beq.n	8004d66 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f042 0201 	orr.w	r2, r2, #1
 8004d64:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d74:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2221      	movs	r2, #33	; 0x21
 8004d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2210      	movs	r2, #16
 8004d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	893a      	ldrh	r2, [r7, #8]
 8004d96:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d9c:	b29a      	uxth	r2, r3
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	4a50      	ldr	r2, [pc, #320]	; (8004ee8 <HAL_I2C_Master_Transmit+0x1f8>)
 8004da6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004da8:	8979      	ldrh	r1, [r7, #10]
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	6a3a      	ldr	r2, [r7, #32]
 8004dae:	68f8      	ldr	r0, [r7, #12]
 8004db0:	f000 fbec 	bl	800558c <I2C_MasterRequestWrite>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d001      	beq.n	8004dbe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e08d      	b.n	8004eda <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	613b      	str	r3, [r7, #16]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	695b      	ldr	r3, [r3, #20]
 8004dc8:	613b      	str	r3, [r7, #16]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	699b      	ldr	r3, [r3, #24]
 8004dd0:	613b      	str	r3, [r7, #16]
 8004dd2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004dd4:	e066      	b.n	8004ea4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dd6:	697a      	ldr	r2, [r7, #20]
 8004dd8:	6a39      	ldr	r1, [r7, #32]
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	f000 fdd8 	bl	8005990 <I2C_WaitOnTXEFlagUntilTimeout>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00d      	beq.n	8004e02 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dea:	2b04      	cmp	r3, #4
 8004dec:	d107      	bne.n	8004dfe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dfc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e06b      	b.n	8004eda <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e06:	781a      	ldrb	r2, [r3, #0]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e12:	1c5a      	adds	r2, r3, #1
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	b29a      	uxth	r2, r3
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	695b      	ldr	r3, [r3, #20]
 8004e38:	f003 0304 	and.w	r3, r3, #4
 8004e3c:	2b04      	cmp	r3, #4
 8004e3e:	d11b      	bne.n	8004e78 <HAL_I2C_Master_Transmit+0x188>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d017      	beq.n	8004e78 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4c:	781a      	ldrb	r2, [r3, #0]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e58:	1c5a      	adds	r2, r3, #1
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	3b01      	subs	r3, #1
 8004e66:	b29a      	uxth	r2, r3
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e70:	3b01      	subs	r3, #1
 8004e72:	b29a      	uxth	r2, r3
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e78:	697a      	ldr	r2, [r7, #20]
 8004e7a:	6a39      	ldr	r1, [r7, #32]
 8004e7c:	68f8      	ldr	r0, [r7, #12]
 8004e7e:	f000 fdc8 	bl	8005a12 <I2C_WaitOnBTFFlagUntilTimeout>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d00d      	beq.n	8004ea4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8c:	2b04      	cmp	r3, #4
 8004e8e:	d107      	bne.n	8004ea0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e9e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e01a      	b.n	8004eda <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d194      	bne.n	8004dd6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2220      	movs	r2, #32
 8004ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	e000      	b.n	8004eda <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004ed8:	2302      	movs	r3, #2
  }
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3718      	adds	r7, #24
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	00100002 	.word	0x00100002
 8004ee8:	ffff0000 	.word	0xffff0000

08004eec <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b08c      	sub	sp, #48	; 0x30
 8004ef0:	af02      	add	r7, sp, #8
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	607a      	str	r2, [r7, #4]
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	460b      	mov	r3, r1
 8004efa:	817b      	strh	r3, [r7, #10]
 8004efc:	4613      	mov	r3, r2
 8004efe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f00:	f7fe fffc 	bl	8003efc <HAL_GetTick>
 8004f04:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	2b20      	cmp	r3, #32
 8004f10:	f040 8213 	bne.w	800533a <HAL_I2C_Master_Receive+0x44e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f16:	9300      	str	r3, [sp, #0]
 8004f18:	2319      	movs	r3, #25
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	497e      	ldr	r1, [pc, #504]	; (8005118 <HAL_I2C_Master_Receive+0x22c>)
 8004f1e:	68f8      	ldr	r0, [r7, #12]
 8004f20:	f000 fc60 	bl	80057e4 <I2C_WaitOnFlagUntilTimeout>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d001      	beq.n	8004f2e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004f2a:	2302      	movs	r3, #2
 8004f2c:	e206      	b.n	800533c <HAL_I2C_Master_Receive+0x450>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d101      	bne.n	8004f3c <HAL_I2C_Master_Receive+0x50>
 8004f38:	2302      	movs	r3, #2
 8004f3a:	e1ff      	b.n	800533c <HAL_I2C_Master_Receive+0x450>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0301 	and.w	r3, r3, #1
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d007      	beq.n	8004f62 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f042 0201 	orr.w	r2, r2, #1
 8004f60:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f70:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2222      	movs	r2, #34	; 0x22
 8004f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2210      	movs	r2, #16
 8004f7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2200      	movs	r2, #0
 8004f86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	893a      	ldrh	r2, [r7, #8]
 8004f92:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f98:	b29a      	uxth	r2, r3
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	4a5e      	ldr	r2, [pc, #376]	; (800511c <HAL_I2C_Master_Receive+0x230>)
 8004fa2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004fa4:	8979      	ldrh	r1, [r7, #10]
 8004fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004faa:	68f8      	ldr	r0, [r7, #12]
 8004fac:	f000 fb64 	bl	8005678 <I2C_MasterRequestRead>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d001      	beq.n	8004fba <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e1c0      	b.n	800533c <HAL_I2C_Master_Receive+0x450>
    }

    if (hi2c->XferSize == 0U)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d113      	bne.n	8004fea <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	623b      	str	r3, [r7, #32]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	695b      	ldr	r3, [r3, #20]
 8004fcc:	623b      	str	r3, [r7, #32]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	699b      	ldr	r3, [r3, #24]
 8004fd4:	623b      	str	r3, [r7, #32]
 8004fd6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fe6:	601a      	str	r2, [r3, #0]
 8004fe8:	e194      	b.n	8005314 <HAL_I2C_Master_Receive+0x428>
    }
    else if (hi2c->XferSize == 1U)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d11d      	bne.n	800502e <HAL_I2C_Master_Receive+0x142>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005000:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005002:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005004:	2300      	movs	r3, #0
 8005006:	61fb      	str	r3, [r7, #28]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	61fb      	str	r3, [r7, #28]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	699b      	ldr	r3, [r3, #24]
 8005016:	61fb      	str	r3, [r7, #28]
 8005018:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005028:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800502a:	b662      	cpsie	i
 800502c:	e172      	b.n	8005314 <HAL_I2C_Master_Receive+0x428>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005032:	2b02      	cmp	r3, #2
 8005034:	d11d      	bne.n	8005072 <HAL_I2C_Master_Receive+0x186>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005044:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005046:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005048:	2300      	movs	r3, #0
 800504a:	61bb      	str	r3, [r7, #24]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	61bb      	str	r3, [r7, #24]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	61bb      	str	r3, [r7, #24]
 800505c:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800506c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800506e:	b662      	cpsie	i
 8005070:	e150      	b.n	8005314 <HAL_I2C_Master_Receive+0x428>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005080:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005082:	2300      	movs	r3, #0
 8005084:	617b      	str	r3, [r7, #20]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	695b      	ldr	r3, [r3, #20]
 800508c:	617b      	str	r3, [r7, #20]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	617b      	str	r3, [r7, #20]
 8005096:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005098:	e13c      	b.n	8005314 <HAL_I2C_Master_Receive+0x428>
    {
      if (hi2c->XferSize <= 3U)
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800509e:	2b03      	cmp	r3, #3
 80050a0:	f200 80f5 	bhi.w	800528e <HAL_I2C_Master_Receive+0x3a2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d123      	bne.n	80050f4 <HAL_I2C_Master_Receive+0x208>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80050b0:	68f8      	ldr	r0, [r7, #12]
 80050b2:	f000 fcef 	bl	8005a94 <I2C_WaitOnRXNEFlagUntilTimeout>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d001      	beq.n	80050c0 <HAL_I2C_Master_Receive+0x1d4>
          {
            return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e13d      	b.n	800533c <HAL_I2C_Master_Receive+0x450>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	691a      	ldr	r2, [r3, #16]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ca:	b2d2      	uxtb	r2, r2
 80050cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d2:	1c5a      	adds	r2, r3, #1
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050dc:	3b01      	subs	r3, #1
 80050de:	b29a      	uxth	r2, r3
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	3b01      	subs	r3, #1
 80050ec:	b29a      	uxth	r2, r3
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80050f2:	e10f      	b.n	8005314 <HAL_I2C_Master_Receive+0x428>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	d150      	bne.n	800519e <HAL_I2C_Master_Receive+0x2b2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80050fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fe:	9300      	str	r3, [sp, #0]
 8005100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005102:	2200      	movs	r2, #0
 8005104:	4906      	ldr	r1, [pc, #24]	; (8005120 <HAL_I2C_Master_Receive+0x234>)
 8005106:	68f8      	ldr	r0, [r7, #12]
 8005108:	f000 fb6c 	bl	80057e4 <I2C_WaitOnFlagUntilTimeout>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d008      	beq.n	8005124 <HAL_I2C_Master_Receive+0x238>
          {
            return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e112      	b.n	800533c <HAL_I2C_Master_Receive+0x450>
 8005116:	bf00      	nop
 8005118:	00100002 	.word	0x00100002
 800511c:	ffff0000 	.word	0xffff0000
 8005120:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005124:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005134:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	691a      	ldr	r2, [r3, #16]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005140:	b2d2      	uxtb	r2, r2
 8005142:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005148:	1c5a      	adds	r2, r3, #1
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005152:	3b01      	subs	r3, #1
 8005154:	b29a      	uxth	r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800515e:	b29b      	uxth	r3, r3
 8005160:	3b01      	subs	r3, #1
 8005162:	b29a      	uxth	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005168:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	691a      	ldr	r2, [r3, #16]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005174:	b2d2      	uxtb	r2, r2
 8005176:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517c:	1c5a      	adds	r2, r3, #1
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005186:	3b01      	subs	r3, #1
 8005188:	b29a      	uxth	r2, r3
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005192:	b29b      	uxth	r3, r3
 8005194:	3b01      	subs	r3, #1
 8005196:	b29a      	uxth	r2, r3
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800519c:	e0ba      	b.n	8005314 <HAL_I2C_Master_Receive+0x428>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800519e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a0:	9300      	str	r3, [sp, #0]
 80051a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a4:	2200      	movs	r2, #0
 80051a6:	4967      	ldr	r1, [pc, #412]	; (8005344 <HAL_I2C_Master_Receive+0x458>)
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f000 fb1b 	bl	80057e4 <I2C_WaitOnFlagUntilTimeout>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d001      	beq.n	80051b8 <HAL_I2C_Master_Receive+0x2cc>
          {
            return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e0c1      	b.n	800533c <HAL_I2C_Master_Receive+0x450>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051c6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80051c8:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	691a      	ldr	r2, [r3, #16]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d4:	b2d2      	uxtb	r2, r2
 80051d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051dc:	1c5a      	adds	r2, r3, #1
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051e6:	3b01      	subs	r3, #1
 80051e8:	b29a      	uxth	r2, r3
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	3b01      	subs	r3, #1
 80051f6:	b29a      	uxth	r2, r3
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fe:	9300      	str	r3, [sp, #0]
 8005200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005202:	2200      	movs	r2, #0
 8005204:	494f      	ldr	r1, [pc, #316]	; (8005344 <HAL_I2C_Master_Receive+0x458>)
 8005206:	68f8      	ldr	r0, [r7, #12]
 8005208:	f000 faec 	bl	80057e4 <I2C_WaitOnFlagUntilTimeout>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d001      	beq.n	8005216 <HAL_I2C_Master_Receive+0x32a>
          {
            return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e092      	b.n	800533c <HAL_I2C_Master_Receive+0x450>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005224:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	691a      	ldr	r2, [r3, #16]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005230:	b2d2      	uxtb	r2, r2
 8005232:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005238:	1c5a      	adds	r2, r3, #1
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005242:	3b01      	subs	r3, #1
 8005244:	b29a      	uxth	r2, r3
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800524e:	b29b      	uxth	r3, r3
 8005250:	3b01      	subs	r3, #1
 8005252:	b29a      	uxth	r2, r3
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005258:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	691a      	ldr	r2, [r3, #16]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005264:	b2d2      	uxtb	r2, r2
 8005266:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526c:	1c5a      	adds	r2, r3, #1
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005276:	3b01      	subs	r3, #1
 8005278:	b29a      	uxth	r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005282:	b29b      	uxth	r3, r3
 8005284:	3b01      	subs	r3, #1
 8005286:	b29a      	uxth	r2, r3
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800528c:	e042      	b.n	8005314 <HAL_I2C_Master_Receive+0x428>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800528e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005290:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005292:	68f8      	ldr	r0, [r7, #12]
 8005294:	f000 fbfe 	bl	8005a94 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d001      	beq.n	80052a2 <HAL_I2C_Master_Receive+0x3b6>
        {
          return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e04c      	b.n	800533c <HAL_I2C_Master_Receive+0x450>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	691a      	ldr	r2, [r3, #16]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ac:	b2d2      	uxtb	r2, r2
 80052ae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b4:	1c5a      	adds	r2, r3, #1
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052be:	3b01      	subs	r3, #1
 80052c0:	b29a      	uxth	r2, r3
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	3b01      	subs	r3, #1
 80052ce:	b29a      	uxth	r2, r3
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	f003 0304 	and.w	r3, r3, #4
 80052de:	2b04      	cmp	r3, #4
 80052e0:	d118      	bne.n	8005314 <HAL_I2C_Master_Receive+0x428>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	691a      	ldr	r2, [r3, #16]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ec:	b2d2      	uxtb	r2, r2
 80052ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f4:	1c5a      	adds	r2, r3, #1
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052fe:	3b01      	subs	r3, #1
 8005300:	b29a      	uxth	r2, r3
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800530a:	b29b      	uxth	r3, r3
 800530c:	3b01      	subs	r3, #1
 800530e:	b29a      	uxth	r2, r3
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005318:	2b00      	cmp	r3, #0
 800531a:	f47f aebe 	bne.w	800509a <HAL_I2C_Master_Receive+0x1ae>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2220      	movs	r2, #32
 8005322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005336:	2300      	movs	r3, #0
 8005338:	e000      	b.n	800533c <HAL_I2C_Master_Receive+0x450>
  }
  else
  {
    return HAL_BUSY;
 800533a:	2302      	movs	r3, #2
  }
}
 800533c:	4618      	mov	r0, r3
 800533e:	3728      	adds	r7, #40	; 0x28
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}
 8005344:	00010004 	.word	0x00010004

08005348 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b08a      	sub	sp, #40	; 0x28
 800534c:	af02      	add	r7, sp, #8
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	607a      	str	r2, [r7, #4]
 8005352:	603b      	str	r3, [r7, #0]
 8005354:	460b      	mov	r3, r1
 8005356:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005358:	f7fe fdd0 	bl	8003efc <HAL_GetTick>
 800535c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800535e:	2301      	movs	r3, #1
 8005360:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005368:	b2db      	uxtb	r3, r3
 800536a:	2b20      	cmp	r3, #32
 800536c:	f040 8105 	bne.w	800557a <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	9300      	str	r3, [sp, #0]
 8005374:	2319      	movs	r3, #25
 8005376:	2201      	movs	r2, #1
 8005378:	4982      	ldr	r1, [pc, #520]	; (8005584 <HAL_I2C_IsDeviceReady+0x23c>)
 800537a:	68f8      	ldr	r0, [r7, #12]
 800537c:	f000 fa32 	bl	80057e4 <I2C_WaitOnFlagUntilTimeout>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d001      	beq.n	800538a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005386:	2302      	movs	r3, #2
 8005388:	e0f8      	b.n	800557c <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005390:	2b01      	cmp	r3, #1
 8005392:	d101      	bne.n	8005398 <HAL_I2C_IsDeviceReady+0x50>
 8005394:	2302      	movs	r3, #2
 8005396:	e0f1      	b.n	800557c <HAL_I2C_IsDeviceReady+0x234>
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0301 	and.w	r3, r3, #1
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d007      	beq.n	80053be <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f042 0201 	orr.w	r2, r2, #1
 80053bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053cc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2224      	movs	r2, #36	; 0x24
 80053d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2200      	movs	r2, #0
 80053da:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	4a6a      	ldr	r2, [pc, #424]	; (8005588 <HAL_I2C_IsDeviceReady+0x240>)
 80053e0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053f0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	9300      	str	r3, [sp, #0]
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f000 f9f0 	bl	80057e4 <I2C_WaitOnFlagUntilTimeout>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d001      	beq.n	800540e <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e0b6      	b.n	800557c <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800540e:	897b      	ldrh	r3, [r7, #10]
 8005410:	b2db      	uxtb	r3, r3
 8005412:	461a      	mov	r2, r3
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800541c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800541e:	f7fe fd6d 	bl	8003efc <HAL_GetTick>
 8005422:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	695b      	ldr	r3, [r3, #20]
 800542a:	f003 0302 	and.w	r3, r3, #2
 800542e:	2b02      	cmp	r3, #2
 8005430:	bf0c      	ite	eq
 8005432:	2301      	moveq	r3, #1
 8005434:	2300      	movne	r3, #0
 8005436:	b2db      	uxtb	r3, r3
 8005438:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	695b      	ldr	r3, [r3, #20]
 8005440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005444:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005448:	bf0c      	ite	eq
 800544a:	2301      	moveq	r3, #1
 800544c:	2300      	movne	r3, #0
 800544e:	b2db      	uxtb	r3, r3
 8005450:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005452:	e025      	b.n	80054a0 <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005454:	f7fe fd52 	bl	8003efc <HAL_GetTick>
 8005458:	4602      	mov	r2, r0
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	683a      	ldr	r2, [r7, #0]
 8005460:	429a      	cmp	r2, r3
 8005462:	d302      	bcc.n	800546a <HAL_I2C_IsDeviceReady+0x122>
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d103      	bne.n	8005472 <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	22a0      	movs	r2, #160	; 0xa0
 800546e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	695b      	ldr	r3, [r3, #20]
 8005478:	f003 0302 	and.w	r3, r3, #2
 800547c:	2b02      	cmp	r3, #2
 800547e:	bf0c      	ite	eq
 8005480:	2301      	moveq	r3, #1
 8005482:	2300      	movne	r3, #0
 8005484:	b2db      	uxtb	r3, r3
 8005486:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	695b      	ldr	r3, [r3, #20]
 800548e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005492:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005496:	bf0c      	ite	eq
 8005498:	2301      	moveq	r3, #1
 800549a:	2300      	movne	r3, #0
 800549c:	b2db      	uxtb	r3, r3
 800549e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	2ba0      	cmp	r3, #160	; 0xa0
 80054aa:	d005      	beq.n	80054b8 <HAL_I2C_IsDeviceReady+0x170>
 80054ac:	7dfb      	ldrb	r3, [r7, #23]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d102      	bne.n	80054b8 <HAL_I2C_IsDeviceReady+0x170>
 80054b2:	7dbb      	ldrb	r3, [r7, #22]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d0cd      	beq.n	8005454 <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2220      	movs	r2, #32
 80054bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	f003 0302 	and.w	r3, r3, #2
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d129      	bne.n	8005522 <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054dc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054de:	2300      	movs	r3, #0
 80054e0:	613b      	str	r3, [r7, #16]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	695b      	ldr	r3, [r3, #20]
 80054e8:	613b      	str	r3, [r7, #16]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	699b      	ldr	r3, [r3, #24]
 80054f0:	613b      	str	r3, [r7, #16]
 80054f2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	9300      	str	r3, [sp, #0]
 80054f8:	2319      	movs	r3, #25
 80054fa:	2201      	movs	r2, #1
 80054fc:	4921      	ldr	r1, [pc, #132]	; (8005584 <HAL_I2C_IsDeviceReady+0x23c>)
 80054fe:	68f8      	ldr	r0, [r7, #12]
 8005500:	f000 f970 	bl	80057e4 <I2C_WaitOnFlagUntilTimeout>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d001      	beq.n	800550e <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e036      	b.n	800557c <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2220      	movs	r2, #32
 8005512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800551e:	2300      	movs	r3, #0
 8005520:	e02c      	b.n	800557c <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005530:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800553a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	9300      	str	r3, [sp, #0]
 8005540:	2319      	movs	r3, #25
 8005542:	2201      	movs	r2, #1
 8005544:	490f      	ldr	r1, [pc, #60]	; (8005584 <HAL_I2C_IsDeviceReady+0x23c>)
 8005546:	68f8      	ldr	r0, [r7, #12]
 8005548:	f000 f94c 	bl	80057e4 <I2C_WaitOnFlagUntilTimeout>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d001      	beq.n	8005556 <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e012      	b.n	800557c <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	3301      	adds	r3, #1
 800555a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800555c:	69ba      	ldr	r2, [r7, #24]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	429a      	cmp	r2, r3
 8005562:	f4ff af3e 	bcc.w	80053e2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2220      	movs	r2, #32
 800556a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e000      	b.n	800557c <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 800557a:	2302      	movs	r3, #2
  }
}
 800557c:	4618      	mov	r0, r3
 800557e:	3720      	adds	r7, #32
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}
 8005584:	00100002 	.word	0x00100002
 8005588:	ffff0000 	.word	0xffff0000

0800558c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b088      	sub	sp, #32
 8005590:	af02      	add	r7, sp, #8
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	607a      	str	r2, [r7, #4]
 8005596:	603b      	str	r3, [r7, #0]
 8005598:	460b      	mov	r3, r1
 800559a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	2b08      	cmp	r3, #8
 80055a6:	d006      	beq.n	80055b6 <I2C_MasterRequestWrite+0x2a>
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d003      	beq.n	80055b6 <I2C_MasterRequestWrite+0x2a>
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80055b4:	d108      	bne.n	80055c8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055c4:	601a      	str	r2, [r3, #0]
 80055c6:	e00b      	b.n	80055e0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055cc:	2b12      	cmp	r3, #18
 80055ce:	d107      	bne.n	80055e0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	9300      	str	r3, [sp, #0]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80055ec:	68f8      	ldr	r0, [r7, #12]
 80055ee:	f000 f8f9 	bl	80057e4 <I2C_WaitOnFlagUntilTimeout>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d001      	beq.n	80055fc <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	e035      	b.n	8005668 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005604:	d108      	bne.n	8005618 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005606:	897b      	ldrh	r3, [r7, #10]
 8005608:	b2db      	uxtb	r3, r3
 800560a:	461a      	mov	r2, r3
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005614:	611a      	str	r2, [r3, #16]
 8005616:	e01b      	b.n	8005650 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005618:	897b      	ldrh	r3, [r7, #10]
 800561a:	11db      	asrs	r3, r3, #7
 800561c:	b2db      	uxtb	r3, r3
 800561e:	f003 0306 	and.w	r3, r3, #6
 8005622:	b2db      	uxtb	r3, r3
 8005624:	f063 030f 	orn	r3, r3, #15
 8005628:	b2da      	uxtb	r2, r3
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	490e      	ldr	r1, [pc, #56]	; (8005670 <I2C_MasterRequestWrite+0xe4>)
 8005636:	68f8      	ldr	r0, [r7, #12]
 8005638:	f000 f92b 	bl	8005892 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d001      	beq.n	8005646 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e010      	b.n	8005668 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005646:	897b      	ldrh	r3, [r7, #10]
 8005648:	b2da      	uxtb	r2, r3
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	4907      	ldr	r1, [pc, #28]	; (8005674 <I2C_MasterRequestWrite+0xe8>)
 8005656:	68f8      	ldr	r0, [r7, #12]
 8005658:	f000 f91b 	bl	8005892 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d001      	beq.n	8005666 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e000      	b.n	8005668 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8005666:	2300      	movs	r3, #0
}
 8005668:	4618      	mov	r0, r3
 800566a:	3718      	adds	r7, #24
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}
 8005670:	00010008 	.word	0x00010008
 8005674:	00010002 	.word	0x00010002

08005678 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b088      	sub	sp, #32
 800567c:	af02      	add	r7, sp, #8
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	607a      	str	r2, [r7, #4]
 8005682:	603b      	str	r3, [r7, #0]
 8005684:	460b      	mov	r3, r1
 8005686:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800568c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800569c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	2b08      	cmp	r3, #8
 80056a2:	d006      	beq.n	80056b2 <I2C_MasterRequestRead+0x3a>
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d003      	beq.n	80056b2 <I2C_MasterRequestRead+0x3a>
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80056b0:	d108      	bne.n	80056c4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056c0:	601a      	str	r2, [r3, #0]
 80056c2:	e00b      	b.n	80056dc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c8:	2b11      	cmp	r3, #17
 80056ca:	d107      	bne.n	80056dc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	9300      	str	r3, [sp, #0]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80056e8:	68f8      	ldr	r0, [r7, #12]
 80056ea:	f000 f87b 	bl	80057e4 <I2C_WaitOnFlagUntilTimeout>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d001      	beq.n	80056f8 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e06d      	b.n	80057d4 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005700:	d108      	bne.n	8005714 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005702:	897b      	ldrh	r3, [r7, #10]
 8005704:	b2db      	uxtb	r3, r3
 8005706:	f043 0301 	orr.w	r3, r3, #1
 800570a:	b2da      	uxtb	r2, r3
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	611a      	str	r2, [r3, #16]
 8005712:	e053      	b.n	80057bc <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005714:	897b      	ldrh	r3, [r7, #10]
 8005716:	11db      	asrs	r3, r3, #7
 8005718:	b2db      	uxtb	r3, r3
 800571a:	f003 0306 	and.w	r3, r3, #6
 800571e:	b2db      	uxtb	r3, r3
 8005720:	f063 030f 	orn	r3, r3, #15
 8005724:	b2da      	uxtb	r2, r3
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	492a      	ldr	r1, [pc, #168]	; (80057dc <I2C_MasterRequestRead+0x164>)
 8005732:	68f8      	ldr	r0, [r7, #12]
 8005734:	f000 f8ad 	bl	8005892 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d001      	beq.n	8005742 <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e048      	b.n	80057d4 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005742:	897b      	ldrh	r3, [r7, #10]
 8005744:	b2da      	uxtb	r2, r3
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	4923      	ldr	r1, [pc, #140]	; (80057e0 <I2C_MasterRequestRead+0x168>)
 8005752:	68f8      	ldr	r0, [r7, #12]
 8005754:	f000 f89d 	bl	8005892 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005758:	4603      	mov	r3, r0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d001      	beq.n	8005762 <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e038      	b.n	80057d4 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005762:	2300      	movs	r3, #0
 8005764:	613b      	str	r3, [r7, #16]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	695b      	ldr	r3, [r3, #20]
 800576c:	613b      	str	r3, [r7, #16]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	699b      	ldr	r3, [r3, #24]
 8005774:	613b      	str	r3, [r7, #16]
 8005776:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005786:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	9300      	str	r3, [sp, #0]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005794:	68f8      	ldr	r0, [r7, #12]
 8005796:	f000 f825 	bl	80057e4 <I2C_WaitOnFlagUntilTimeout>
 800579a:	4603      	mov	r3, r0
 800579c:	2b00      	cmp	r3, #0
 800579e:	d001      	beq.n	80057a4 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	e017      	b.n	80057d4 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80057a4:	897b      	ldrh	r3, [r7, #10]
 80057a6:	11db      	asrs	r3, r3, #7
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	f003 0306 	and.w	r3, r3, #6
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	f063 030e 	orn	r3, r3, #14
 80057b4:	b2da      	uxtb	r2, r3
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	4907      	ldr	r1, [pc, #28]	; (80057e0 <I2C_MasterRequestRead+0x168>)
 80057c2:	68f8      	ldr	r0, [r7, #12]
 80057c4:	f000 f865 	bl	8005892 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d001      	beq.n	80057d2 <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e000      	b.n	80057d4 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 80057d2:	2300      	movs	r3, #0
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3718      	adds	r7, #24
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	00010008 	.word	0x00010008
 80057e0:	00010002 	.word	0x00010002

080057e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	60b9      	str	r1, [r7, #8]
 80057ee:	603b      	str	r3, [r7, #0]
 80057f0:	4613      	mov	r3, r2
 80057f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057f4:	e025      	b.n	8005842 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057fc:	d021      	beq.n	8005842 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057fe:	f7fe fb7d 	bl	8003efc <HAL_GetTick>
 8005802:	4602      	mov	r2, r0
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	683a      	ldr	r2, [r7, #0]
 800580a:	429a      	cmp	r2, r3
 800580c:	d302      	bcc.n	8005814 <I2C_WaitOnFlagUntilTimeout+0x30>
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d116      	bne.n	8005842 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2220      	movs	r2, #32
 800581e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2200      	movs	r2, #0
 8005826:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582e:	f043 0220 	orr.w	r2, r3, #32
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2200      	movs	r2, #0
 800583a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e023      	b.n	800588a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	0c1b      	lsrs	r3, r3, #16
 8005846:	b2db      	uxtb	r3, r3
 8005848:	2b01      	cmp	r3, #1
 800584a:	d10d      	bne.n	8005868 <I2C_WaitOnFlagUntilTimeout+0x84>
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	695b      	ldr	r3, [r3, #20]
 8005852:	43da      	mvns	r2, r3
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	4013      	ands	r3, r2
 8005858:	b29b      	uxth	r3, r3
 800585a:	2b00      	cmp	r3, #0
 800585c:	bf0c      	ite	eq
 800585e:	2301      	moveq	r3, #1
 8005860:	2300      	movne	r3, #0
 8005862:	b2db      	uxtb	r3, r3
 8005864:	461a      	mov	r2, r3
 8005866:	e00c      	b.n	8005882 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	699b      	ldr	r3, [r3, #24]
 800586e:	43da      	mvns	r2, r3
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	4013      	ands	r3, r2
 8005874:	b29b      	uxth	r3, r3
 8005876:	2b00      	cmp	r3, #0
 8005878:	bf0c      	ite	eq
 800587a:	2301      	moveq	r3, #1
 800587c:	2300      	movne	r3, #0
 800587e:	b2db      	uxtb	r3, r3
 8005880:	461a      	mov	r2, r3
 8005882:	79fb      	ldrb	r3, [r7, #7]
 8005884:	429a      	cmp	r2, r3
 8005886:	d0b6      	beq.n	80057f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3710      	adds	r7, #16
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}

08005892 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005892:	b580      	push	{r7, lr}
 8005894:	b084      	sub	sp, #16
 8005896:	af00      	add	r7, sp, #0
 8005898:	60f8      	str	r0, [r7, #12]
 800589a:	60b9      	str	r1, [r7, #8]
 800589c:	607a      	str	r2, [r7, #4]
 800589e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80058a0:	e051      	b.n	8005946 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	695b      	ldr	r3, [r3, #20]
 80058a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058b0:	d123      	bne.n	80058fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058c0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80058ca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2200      	movs	r2, #0
 80058d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2220      	movs	r2, #32
 80058d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e6:	f043 0204 	orr.w	r2, r3, #4
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e046      	b.n	8005988 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005900:	d021      	beq.n	8005946 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005902:	f7fe fafb 	bl	8003efc <HAL_GetTick>
 8005906:	4602      	mov	r2, r0
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	1ad3      	subs	r3, r2, r3
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	429a      	cmp	r2, r3
 8005910:	d302      	bcc.n	8005918 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d116      	bne.n	8005946 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2200      	movs	r2, #0
 800591c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2220      	movs	r2, #32
 8005922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2200      	movs	r2, #0
 800592a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005932:	f043 0220 	orr.w	r2, r3, #32
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2200      	movs	r2, #0
 800593e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e020      	b.n	8005988 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	0c1b      	lsrs	r3, r3, #16
 800594a:	b2db      	uxtb	r3, r3
 800594c:	2b01      	cmp	r3, #1
 800594e:	d10c      	bne.n	800596a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	695b      	ldr	r3, [r3, #20]
 8005956:	43da      	mvns	r2, r3
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	4013      	ands	r3, r2
 800595c:	b29b      	uxth	r3, r3
 800595e:	2b00      	cmp	r3, #0
 8005960:	bf14      	ite	ne
 8005962:	2301      	movne	r3, #1
 8005964:	2300      	moveq	r3, #0
 8005966:	b2db      	uxtb	r3, r3
 8005968:	e00b      	b.n	8005982 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	699b      	ldr	r3, [r3, #24]
 8005970:	43da      	mvns	r2, r3
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	4013      	ands	r3, r2
 8005976:	b29b      	uxth	r3, r3
 8005978:	2b00      	cmp	r3, #0
 800597a:	bf14      	ite	ne
 800597c:	2301      	movne	r3, #1
 800597e:	2300      	moveq	r3, #0
 8005980:	b2db      	uxtb	r3, r3
 8005982:	2b00      	cmp	r3, #0
 8005984:	d18d      	bne.n	80058a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005986:	2300      	movs	r3, #0
}
 8005988:	4618      	mov	r0, r3
 800598a:	3710      	adds	r7, #16
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800599c:	e02d      	b.n	80059fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800599e:	68f8      	ldr	r0, [r7, #12]
 80059a0:	f000 f8ce 	bl	8005b40 <I2C_IsAcknowledgeFailed>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d001      	beq.n	80059ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e02d      	b.n	8005a0a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059b4:	d021      	beq.n	80059fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059b6:	f7fe faa1 	bl	8003efc <HAL_GetTick>
 80059ba:	4602      	mov	r2, r0
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	1ad3      	subs	r3, r2, r3
 80059c0:	68ba      	ldr	r2, [r7, #8]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d302      	bcc.n	80059cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d116      	bne.n	80059fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2220      	movs	r2, #32
 80059d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2200      	movs	r2, #0
 80059de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e6:	f043 0220 	orr.w	r2, r3, #32
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e007      	b.n	8005a0a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	695b      	ldr	r3, [r3, #20]
 8005a00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a04:	2b80      	cmp	r3, #128	; 0x80
 8005a06:	d1ca      	bne.n	800599e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3710      	adds	r7, #16
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}

08005a12 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a12:	b580      	push	{r7, lr}
 8005a14:	b084      	sub	sp, #16
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	60f8      	str	r0, [r7, #12]
 8005a1a:	60b9      	str	r1, [r7, #8]
 8005a1c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a1e:	e02d      	b.n	8005a7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a20:	68f8      	ldr	r0, [r7, #12]
 8005a22:	f000 f88d 	bl	8005b40 <I2C_IsAcknowledgeFailed>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d001      	beq.n	8005a30 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e02d      	b.n	8005a8c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a36:	d021      	beq.n	8005a7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a38:	f7fe fa60 	bl	8003efc <HAL_GetTick>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	68ba      	ldr	r2, [r7, #8]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d302      	bcc.n	8005a4e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d116      	bne.n	8005a7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2200      	movs	r2, #0
 8005a52:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2220      	movs	r2, #32
 8005a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a68:	f043 0220 	orr.w	r2, r3, #32
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e007      	b.n	8005a8c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	695b      	ldr	r3, [r3, #20]
 8005a82:	f003 0304 	and.w	r3, r3, #4
 8005a86:	2b04      	cmp	r3, #4
 8005a88:	d1ca      	bne.n	8005a20 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3710      	adds	r7, #16
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005aa0:	e042      	b.n	8005b28 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	695b      	ldr	r3, [r3, #20]
 8005aa8:	f003 0310 	and.w	r3, r3, #16
 8005aac:	2b10      	cmp	r3, #16
 8005aae:	d119      	bne.n	8005ae4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f06f 0210 	mvn.w	r2, #16
 8005ab8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2200      	movs	r2, #0
 8005abe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2220      	movs	r2, #32
 8005ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2200      	movs	r2, #0
 8005adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e029      	b.n	8005b38 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ae4:	f7fe fa0a 	bl	8003efc <HAL_GetTick>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	1ad3      	subs	r3, r2, r3
 8005aee:	68ba      	ldr	r2, [r7, #8]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d302      	bcc.n	8005afa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d116      	bne.n	8005b28 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2200      	movs	r2, #0
 8005afe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2220      	movs	r2, #32
 8005b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b14:	f043 0220 	orr.w	r2, r3, #32
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	e007      	b.n	8005b38 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	695b      	ldr	r3, [r3, #20]
 8005b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b32:	2b40      	cmp	r3, #64	; 0x40
 8005b34:	d1b5      	bne.n	8005aa2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005b36:	2300      	movs	r3, #0
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3710      	adds	r7, #16
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	695b      	ldr	r3, [r3, #20]
 8005b4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b56:	d11b      	bne.n	8005b90 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b60:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2220      	movs	r2, #32
 8005b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7c:	f043 0204 	orr.w	r2, r3, #4
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e000      	b.n	8005b92 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	370c      	adds	r7, #12
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bc80      	pop	{r7}
 8005b9a:	4770      	bx	lr

08005b9c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b9e:	b08b      	sub	sp, #44	; 0x2c
 8005ba0:	af06      	add	r7, sp, #24
 8005ba2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d101      	bne.n	8005bae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e0d3      	b.n	8005d56 <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d106      	bne.n	8005bc8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f005 fc8e 	bl	800b4e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2203      	movs	r2, #3
 8005bcc:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f002 fe00 	bl	80087da <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	603b      	str	r3, [r7, #0]
 8005be0:	687e      	ldr	r6, [r7, #4]
 8005be2:	466d      	mov	r5, sp
 8005be4:	f106 0410 	add.w	r4, r6, #16
 8005be8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005bea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005bec:	6823      	ldr	r3, [r4, #0]
 8005bee:	602b      	str	r3, [r5, #0]
 8005bf0:	1d33      	adds	r3, r6, #4
 8005bf2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005bf4:	6838      	ldr	r0, [r7, #0]
 8005bf6:	f002 fdc9 	bl	800878c <USB_CoreInit>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d005      	beq.n	8005c0c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2202      	movs	r2, #2
 8005c04:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e0a4      	b.n	8005d56 <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2100      	movs	r1, #0
 8005c12:	4618      	mov	r0, r3
 8005c14:	f002 fdfd 	bl	8008812 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c18:	2300      	movs	r3, #0
 8005c1a:	73fb      	strb	r3, [r7, #15]
 8005c1c:	e035      	b.n	8005c8a <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005c1e:	7bfb      	ldrb	r3, [r7, #15]
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	015b      	lsls	r3, r3, #5
 8005c24:	4413      	add	r3, r2
 8005c26:	3329      	adds	r3, #41	; 0x29
 8005c28:	2201      	movs	r2, #1
 8005c2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005c2c:	7bfb      	ldrb	r3, [r7, #15]
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	015b      	lsls	r3, r3, #5
 8005c32:	4413      	add	r3, r2
 8005c34:	3328      	adds	r3, #40	; 0x28
 8005c36:	7bfa      	ldrb	r2, [r7, #15]
 8005c38:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005c3a:	7bfb      	ldrb	r3, [r7, #15]
 8005c3c:	7bfa      	ldrb	r2, [r7, #15]
 8005c3e:	b291      	uxth	r1, r2
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	015b      	lsls	r3, r3, #5
 8005c44:	4413      	add	r3, r2
 8005c46:	3336      	adds	r3, #54	; 0x36
 8005c48:	460a      	mov	r2, r1
 8005c4a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005c4c:	7bfb      	ldrb	r3, [r7, #15]
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	015b      	lsls	r3, r3, #5
 8005c52:	4413      	add	r3, r2
 8005c54:	332b      	adds	r3, #43	; 0x2b
 8005c56:	2200      	movs	r2, #0
 8005c58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005c5a:	7bfb      	ldrb	r3, [r7, #15]
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	015b      	lsls	r3, r3, #5
 8005c60:	4413      	add	r3, r2
 8005c62:	3338      	adds	r3, #56	; 0x38
 8005c64:	2200      	movs	r2, #0
 8005c66:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005c68:	7bfb      	ldrb	r3, [r7, #15]
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	015b      	lsls	r3, r3, #5
 8005c6e:	4413      	add	r3, r2
 8005c70:	333c      	adds	r3, #60	; 0x3c
 8005c72:	2200      	movs	r2, #0
 8005c74:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005c76:	7bfb      	ldrb	r3, [r7, #15]
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	3302      	adds	r3, #2
 8005c7c:	015b      	lsls	r3, r3, #5
 8005c7e:	4413      	add	r3, r2
 8005c80:	2200      	movs	r2, #0
 8005c82:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c84:	7bfb      	ldrb	r3, [r7, #15]
 8005c86:	3301      	adds	r3, #1
 8005c88:	73fb      	strb	r3, [r7, #15]
 8005c8a:	7bfa      	ldrb	r2, [r7, #15]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d3c4      	bcc.n	8005c1e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c94:	2300      	movs	r3, #0
 8005c96:	73fb      	strb	r3, [r7, #15]
 8005c98:	e031      	b.n	8005cfe <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005c9a:	7bfb      	ldrb	r3, [r7, #15]
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	015b      	lsls	r3, r3, #5
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f203 1329 	addw	r3, r3, #297	; 0x129
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005caa:	7bfb      	ldrb	r3, [r7, #15]
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	015b      	lsls	r3, r3, #5
 8005cb0:	4413      	add	r3, r2
 8005cb2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005cb6:	7bfa      	ldrb	r2, [r7, #15]
 8005cb8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005cba:	7bfb      	ldrb	r3, [r7, #15]
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	015b      	lsls	r3, r3, #5
 8005cc0:	4413      	add	r3, r2
 8005cc2:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005cca:	7bfb      	ldrb	r3, [r7, #15]
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	015b      	lsls	r3, r3, #5
 8005cd0:	4413      	add	r3, r2
 8005cd2:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005cda:	7bfb      	ldrb	r3, [r7, #15]
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	015b      	lsls	r3, r3, #5
 8005ce0:	4413      	add	r3, r2
 8005ce2:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005cea:	7bfb      	ldrb	r3, [r7, #15]
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	330a      	adds	r3, #10
 8005cf0:	015b      	lsls	r3, r3, #5
 8005cf2:	4413      	add	r3, r2
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005cf8:	7bfb      	ldrb	r3, [r7, #15]
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	73fb      	strb	r3, [r7, #15]
 8005cfe:	7bfa      	ldrb	r2, [r7, #15]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d3c8      	bcc.n	8005c9a <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	603b      	str	r3, [r7, #0]
 8005d0e:	687e      	ldr	r6, [r7, #4]
 8005d10:	466d      	mov	r5, sp
 8005d12:	f106 0410 	add.w	r4, r6, #16
 8005d16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d1a:	6823      	ldr	r3, [r4, #0]
 8005d1c:	602b      	str	r3, [r5, #0]
 8005d1e:	1d33      	adds	r3, r6, #4
 8005d20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005d22:	6838      	ldr	r0, [r7, #0]
 8005d24:	f002 fd81 	bl	800882a <USB_DevInit>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d005      	beq.n	8005d3a <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2202      	movs	r2, #2
 8005d32:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e00d      	b.n	8005d56 <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2201      	movs	r2, #1
 8005d46:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f003 fdbf 	bl	80098d2 <USB_DevDisconnect>

  return HAL_OK;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3714      	adds	r7, #20
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005d5e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005d5e:	b580      	push	{r7, lr}
 8005d60:	b082      	sub	sp, #8
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d101      	bne.n	8005d74 <HAL_PCD_Start+0x16>
 8005d70:	2302      	movs	r3, #2
 8005d72:	e016      	b.n	8005da2 <HAL_PCD_Start+0x44>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8005d7c:	2101      	movs	r1, #1
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f005 fe17 	bl	800b9b2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f003 fd98 	bl	80098be <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4618      	mov	r0, r3
 8005d94:	f002 fd0a 	bl	80087ac <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3708      	adds	r7, #8
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}

08005daa <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005daa:	b580      	push	{r7, lr}
 8005dac:	b082      	sub	sp, #8
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4618      	mov	r0, r3
 8005db8:	f003 fd95 	bl	80098e6 <USB_ReadInterrupts>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005dc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dc6:	d102      	bne.n	8005dce <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f000 faf3 	bl	80063b4 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f003 fd87 	bl	80098e6 <USB_ReadInterrupts>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005de2:	d112      	bne.n	8005e0a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005dec:	b29a      	uxth	r2, r3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005df6:	b292      	uxth	r2, r2
 8005df8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f005 fbe6 	bl	800b5ce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005e02:	2100      	movs	r1, #0
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f000 f8de 	bl	8005fc6 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f003 fd69 	bl	80098e6 <USB_ReadInterrupts>
 8005e14:	4603      	mov	r3, r0
 8005e16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e1e:	d10b      	bne.n	8005e38 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005e28:	b29a      	uxth	r2, r3
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005e32:	b292      	uxth	r2, r2
 8005e34:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f003 fd52 	bl	80098e6 <USB_ReadInterrupts>
 8005e42:	4603      	mov	r3, r0
 8005e44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e4c:	d10b      	bne.n	8005e66 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005e56:	b29a      	uxth	r2, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e60:	b292      	uxth	r2, r2
 8005e62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f003 fd3b 	bl	80098e6 <USB_ReadInterrupts>
 8005e70:	4603      	mov	r3, r0
 8005e72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e7a:	d126      	bne.n	8005eca <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005e84:	b29a      	uxth	r2, r3
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f022 0204 	bic.w	r2, r2, #4
 8005e8e:	b292      	uxth	r2, r2
 8005e90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005e9c:	b29a      	uxth	r2, r3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f022 0208 	bic.w	r2, r2, #8
 8005ea6:	b292      	uxth	r2, r2
 8005ea8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f005 fbc7 	bl	800b640 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005eba:	b29a      	uxth	r2, r3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005ec4:	b292      	uxth	r2, r2
 8005ec6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f003 fd09 	bl	80098e6 <USB_ReadInterrupts>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005eda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ede:	d13d      	bne.n	8005f5c <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005ee8:	b29a      	uxth	r2, r3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f042 0208 	orr.w	r2, r2, #8
 8005ef2:	b292      	uxth	r2, r2
 8005ef4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005f00:	b29a      	uxth	r2, r3
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f0a:	b292      	uxth	r2, r2
 8005f0c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005f18:	b29a      	uxth	r2, r3
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f042 0204 	orr.w	r2, r2, #4
 8005f22:	b292      	uxth	r2, r2
 8005f24:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f003 fcda 	bl	80098e6 <USB_ReadInterrupts>
 8005f32:	4603      	mov	r3, r0
 8005f34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f3c:	d10b      	bne.n	8005f56 <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005f46:	b29a      	uxth	r2, r3
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005f50:	b292      	uxth	r2, r2
 8005f52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f005 fb58 	bl	800b60c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4618      	mov	r0, r3
 8005f62:	f003 fcc0 	bl	80098e6 <USB_ReadInterrupts>
 8005f66:	4603      	mov	r3, r0
 8005f68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f70:	d10e      	bne.n	8005f90 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005f7a:	b29a      	uxth	r2, r3
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005f84:	b292      	uxth	r2, r2
 8005f86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f005 fb11 	bl	800b5b2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4618      	mov	r0, r3
 8005f96:	f003 fca6 	bl	80098e6 <USB_ReadInterrupts>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fa4:	d10b      	bne.n	8005fbe <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005fae:	b29a      	uxth	r2, r3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005fb8:	b292      	uxth	r2, r2
 8005fba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8005fbe:	bf00      	nop
 8005fc0:	3708      	adds	r7, #8
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}

08005fc6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005fc6:	b580      	push	{r7, lr}
 8005fc8:	b082      	sub	sp, #8
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
 8005fce:	460b      	mov	r3, r1
 8005fd0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d101      	bne.n	8005fe0 <HAL_PCD_SetAddress+0x1a>
 8005fdc:	2302      	movs	r3, #2
 8005fde:	e013      	b.n	8006008 <HAL_PCD_SetAddress+0x42>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	78fa      	ldrb	r2, [r7, #3]
 8005fec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	78fa      	ldrb	r2, [r7, #3]
 8005ff6:	4611      	mov	r1, r2
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f003 fc4d 	bl	8009898 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8006006:	2300      	movs	r3, #0
}
 8006008:	4618      	mov	r0, r3
 800600a:	3708      	adds	r7, #8
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	4608      	mov	r0, r1
 800601a:	4611      	mov	r1, r2
 800601c:	461a      	mov	r2, r3
 800601e:	4603      	mov	r3, r0
 8006020:	70fb      	strb	r3, [r7, #3]
 8006022:	460b      	mov	r3, r1
 8006024:	803b      	strh	r3, [r7, #0]
 8006026:	4613      	mov	r3, r2
 8006028:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800602a:	2300      	movs	r3, #0
 800602c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800602e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006032:	2b00      	cmp	r3, #0
 8006034:	da0b      	bge.n	800604e <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006036:	78fb      	ldrb	r3, [r7, #3]
 8006038:	f003 0307 	and.w	r3, r3, #7
 800603c:	015b      	lsls	r3, r3, #5
 800603e:	3328      	adds	r3, #40	; 0x28
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	4413      	add	r3, r2
 8006044:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2201      	movs	r2, #1
 800604a:	705a      	strb	r2, [r3, #1]
 800604c:	e00b      	b.n	8006066 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800604e:	78fb      	ldrb	r3, [r7, #3]
 8006050:	f003 0307 	and.w	r3, r3, #7
 8006054:	015b      	lsls	r3, r3, #5
 8006056:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	4413      	add	r3, r2
 800605e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2200      	movs	r2, #0
 8006064:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006066:	78fb      	ldrb	r3, [r7, #3]
 8006068:	f003 0307 	and.w	r3, r3, #7
 800606c:	b2da      	uxtb	r2, r3
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006072:	883a      	ldrh	r2, [r7, #0]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	78ba      	ldrb	r2, [r7, #2]
 800607c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	785b      	ldrb	r3, [r3, #1]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d004      	beq.n	8006090 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	b29a      	uxth	r2, r3
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006090:	78bb      	ldrb	r3, [r7, #2]
 8006092:	2b02      	cmp	r3, #2
 8006094:	d102      	bne.n	800609c <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2200      	movs	r2, #0
 800609a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d101      	bne.n	80060aa <HAL_PCD_EP_Open+0x9a>
 80060a6:	2302      	movs	r3, #2
 80060a8:	e00e      	b.n	80060c8 <HAL_PCD_EP_Open+0xb8>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2201      	movs	r2, #1
 80060ae:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	68f9      	ldr	r1, [r7, #12]
 80060b8:	4618      	mov	r0, r3
 80060ba:	f002 fbdb 	bl	8008874 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 80060c6:	7afb      	ldrb	r3, [r7, #11]
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3710      	adds	r7, #16
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	460b      	mov	r3, r1
 80060da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80060dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	da0b      	bge.n	80060fc <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80060e4:	78fb      	ldrb	r3, [r7, #3]
 80060e6:	f003 0307 	and.w	r3, r3, #7
 80060ea:	015b      	lsls	r3, r3, #5
 80060ec:	3328      	adds	r3, #40	; 0x28
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	4413      	add	r3, r2
 80060f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2201      	movs	r2, #1
 80060f8:	705a      	strb	r2, [r3, #1]
 80060fa:	e00b      	b.n	8006114 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80060fc:	78fb      	ldrb	r3, [r7, #3]
 80060fe:	f003 0307 	and.w	r3, r3, #7
 8006102:	015b      	lsls	r3, r3, #5
 8006104:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	4413      	add	r3, r2
 800610c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006114:	78fb      	ldrb	r3, [r7, #3]
 8006116:	f003 0307 	and.w	r3, r3, #7
 800611a:	b2da      	uxtb	r2, r3
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8006126:	2b01      	cmp	r3, #1
 8006128:	d101      	bne.n	800612e <HAL_PCD_EP_Close+0x5e>
 800612a:	2302      	movs	r3, #2
 800612c:	e00e      	b.n	800614c <HAL_PCD_EP_Close+0x7c>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2201      	movs	r2, #1
 8006132:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68f9      	ldr	r1, [r7, #12]
 800613c:	4618      	mov	r0, r3
 800613e:	f002 fe87 	bl	8008e50 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	3710      	adds	r7, #16
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b086      	sub	sp, #24
 8006158:	af00      	add	r7, sp, #0
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	607a      	str	r2, [r7, #4]
 800615e:	603b      	str	r3, [r7, #0]
 8006160:	460b      	mov	r3, r1
 8006162:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006164:	7afb      	ldrb	r3, [r7, #11]
 8006166:	f003 0307 	and.w	r3, r3, #7
 800616a:	015b      	lsls	r3, r3, #5
 800616c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	4413      	add	r3, r2
 8006174:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	683a      	ldr	r2, [r7, #0]
 8006180:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	2200      	movs	r2, #0
 8006186:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	2200      	movs	r2, #0
 800618c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800618e:	7afb      	ldrb	r3, [r7, #11]
 8006190:	f003 0307 	and.w	r3, r3, #7
 8006194:	b2da      	uxtb	r2, r3
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800619a:	7afb      	ldrb	r3, [r7, #11]
 800619c:	f003 0307 	and.w	r3, r3, #7
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d106      	bne.n	80061b2 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	6979      	ldr	r1, [r7, #20]
 80061aa:	4618      	mov	r0, r3
 80061ac:	f002 ffe6 	bl	800917c <USB_EPStartXfer>
 80061b0:	e005      	b.n	80061be <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	6979      	ldr	r1, [r7, #20]
 80061b8:	4618      	mov	r0, r3
 80061ba:	f002 ffdf 	bl	800917c <USB_EPStartXfer>
  }

  return HAL_OK;
 80061be:	2300      	movs	r3, #0
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3718      	adds	r7, #24
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}

080061c8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	460b      	mov	r3, r1
 80061d2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80061d4:	78fb      	ldrb	r3, [r7, #3]
 80061d6:	f003 0307 	and.w	r3, r3, #7
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	330a      	adds	r3, #10
 80061de:	015b      	lsls	r3, r3, #5
 80061e0:	4413      	add	r3, r2
 80061e2:	3304      	adds	r3, #4
 80061e4:	681b      	ldr	r3, [r3, #0]
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	370c      	adds	r7, #12
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bc80      	pop	{r7}
 80061ee:	4770      	bx	lr

080061f0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b086      	sub	sp, #24
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	607a      	str	r2, [r7, #4]
 80061fa:	603b      	str	r3, [r7, #0]
 80061fc:	460b      	mov	r3, r1
 80061fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006200:	7afb      	ldrb	r3, [r7, #11]
 8006202:	f003 0307 	and.w	r3, r3, #7
 8006206:	015b      	lsls	r3, r3, #5
 8006208:	3328      	adds	r3, #40	; 0x28
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	4413      	add	r3, r2
 800620e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	683a      	ldr	r2, [r7, #0]
 800621a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	2200      	movs	r2, #0
 8006220:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	2201      	movs	r2, #1
 8006226:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006228:	7afb      	ldrb	r3, [r7, #11]
 800622a:	f003 0307 	and.w	r3, r3, #7
 800622e:	b2da      	uxtb	r2, r3
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006234:	7afb      	ldrb	r3, [r7, #11]
 8006236:	f003 0307 	and.w	r3, r3, #7
 800623a:	2b00      	cmp	r3, #0
 800623c:	d106      	bne.n	800624c <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	6979      	ldr	r1, [r7, #20]
 8006244:	4618      	mov	r0, r3
 8006246:	f002 ff99 	bl	800917c <USB_EPStartXfer>
 800624a:	e005      	b.n	8006258 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	6979      	ldr	r1, [r7, #20]
 8006252:	4618      	mov	r0, r3
 8006254:	f002 ff92 	bl	800917c <USB_EPStartXfer>
  }

  return HAL_OK;
 8006258:	2300      	movs	r3, #0
}
 800625a:	4618      	mov	r0, r3
 800625c:	3718      	adds	r7, #24
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}

08006262 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006262:	b580      	push	{r7, lr}
 8006264:	b084      	sub	sp, #16
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
 800626a:	460b      	mov	r3, r1
 800626c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800626e:	78fb      	ldrb	r3, [r7, #3]
 8006270:	f003 0207 	and.w	r2, r3, #7
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	429a      	cmp	r2, r3
 800627a:	d901      	bls.n	8006280 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	e046      	b.n	800630e <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006280:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006284:	2b00      	cmp	r3, #0
 8006286:	da0b      	bge.n	80062a0 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006288:	78fb      	ldrb	r3, [r7, #3]
 800628a:	f003 0307 	and.w	r3, r3, #7
 800628e:	015b      	lsls	r3, r3, #5
 8006290:	3328      	adds	r3, #40	; 0x28
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	4413      	add	r3, r2
 8006296:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2201      	movs	r2, #1
 800629c:	705a      	strb	r2, [r3, #1]
 800629e:	e009      	b.n	80062b4 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80062a0:	78fb      	ldrb	r3, [r7, #3]
 80062a2:	015b      	lsls	r3, r3, #5
 80062a4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	4413      	add	r3, r2
 80062ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2201      	movs	r2, #1
 80062b8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80062ba:	78fb      	ldrb	r3, [r7, #3]
 80062bc:	f003 0307 	and.w	r3, r3, #7
 80062c0:	b2da      	uxtb	r2, r3
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d101      	bne.n	80062d4 <HAL_PCD_EP_SetStall+0x72>
 80062d0:	2302      	movs	r3, #2
 80062d2:	e01c      	b.n	800630e <HAL_PCD_EP_SetStall+0xac>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68f9      	ldr	r1, [r7, #12]
 80062e2:	4618      	mov	r0, r3
 80062e4:	f003 fa02 	bl	80096ec <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80062e8:	78fb      	ldrb	r3, [r7, #3]
 80062ea:	f003 0307 	and.w	r3, r3, #7
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d108      	bne.n	8006304 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80062fc:	4619      	mov	r1, r3
 80062fe:	4610      	mov	r0, r2
 8006300:	f003 fb00 	bl	8009904 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3710      	adds	r7, #16
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}

08006316 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006316:	b580      	push	{r7, lr}
 8006318:	b084      	sub	sp, #16
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
 800631e:	460b      	mov	r3, r1
 8006320:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006322:	78fb      	ldrb	r3, [r7, #3]
 8006324:	f003 020f 	and.w	r2, r3, #15
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	429a      	cmp	r2, r3
 800632e:	d901      	bls.n	8006334 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	e03a      	b.n	80063aa <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006334:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006338:	2b00      	cmp	r3, #0
 800633a:	da0b      	bge.n	8006354 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800633c:	78fb      	ldrb	r3, [r7, #3]
 800633e:	f003 0307 	and.w	r3, r3, #7
 8006342:	015b      	lsls	r3, r3, #5
 8006344:	3328      	adds	r3, #40	; 0x28
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	4413      	add	r3, r2
 800634a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2201      	movs	r2, #1
 8006350:	705a      	strb	r2, [r3, #1]
 8006352:	e00b      	b.n	800636c <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006354:	78fb      	ldrb	r3, [r7, #3]
 8006356:	f003 0307 	and.w	r3, r3, #7
 800635a:	015b      	lsls	r3, r3, #5
 800635c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	4413      	add	r3, r2
 8006364:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2200      	movs	r2, #0
 800636a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2200      	movs	r2, #0
 8006370:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006372:	78fb      	ldrb	r3, [r7, #3]
 8006374:	f003 0307 	and.w	r3, r3, #7
 8006378:	b2da      	uxtb	r2, r3
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8006384:	2b01      	cmp	r3, #1
 8006386:	d101      	bne.n	800638c <HAL_PCD_EP_ClrStall+0x76>
 8006388:	2302      	movs	r3, #2
 800638a:	e00e      	b.n	80063aa <HAL_PCD_EP_ClrStall+0x94>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	68f9      	ldr	r1, [r7, #12]
 800639a:	4618      	mov	r0, r3
 800639c:	f003 f9e8 	bl	8009770 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80063a8:	2300      	movs	r3, #0
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3710      	adds	r7, #16
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
	...

080063b4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80063b4:	b590      	push	{r4, r7, lr}
 80063b6:	b089      	sub	sp, #36	; 0x24
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80063bc:	e282      	b.n	80068c4 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80063c6:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80063c8:	8afb      	ldrh	r3, [r7, #22]
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	f003 030f 	and.w	r3, r3, #15
 80063d0:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 80063d2:	7d7b      	ldrb	r3, [r7, #21]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	f040 8142 	bne.w	800665e <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80063da:	8afb      	ldrh	r3, [r7, #22]
 80063dc:	f003 0310 	and.w	r3, r3, #16
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d151      	bne.n	8006488 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	881b      	ldrh	r3, [r3, #0]
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80063f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063f4:	b29c      	uxth	r4, r3
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80063fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006402:	b29b      	uxth	r3, r3
 8006404:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	3328      	adds	r3, #40	; 0x28
 800640a:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006414:	b29b      	uxth	r3, r3
 8006416:	461a      	mov	r2, r3
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	00db      	lsls	r3, r3, #3
 800641e:	4413      	add	r3, r2
 8006420:	3302      	adds	r3, #2
 8006422:	005b      	lsls	r3, r3, #1
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	6812      	ldr	r2, [r2, #0]
 8006428:	4413      	add	r3, r2
 800642a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800642e:	881b      	ldrh	r3, [r3, #0]
 8006430:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	695a      	ldr	r2, [r3, #20]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	69db      	ldr	r3, [r3, #28]
 8006440:	441a      	add	r2, r3
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006446:	2100      	movs	r1, #0
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f005 f89b 	bl	800b584 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006454:	b2db      	uxtb	r3, r3
 8006456:	2b00      	cmp	r3, #0
 8006458:	f000 8234 	beq.w	80068c4 <PCD_EP_ISR_Handler+0x510>
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	699b      	ldr	r3, [r3, #24]
 8006460:	2b00      	cmp	r3, #0
 8006462:	f040 822f 	bne.w	80068c4 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800646c:	b2db      	uxtb	r3, r3
 800646e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006472:	b2da      	uxtb	r2, r3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	b292      	uxth	r2, r2
 800647a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006486:	e21d      	b.n	80068c4 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800648e:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	881b      	ldrh	r3, [r3, #0]
 8006496:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006498:	8a7b      	ldrh	r3, [r7, #18]
 800649a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d033      	beq.n	800650a <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	461a      	mov	r2, r3
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	00db      	lsls	r3, r3, #3
 80064b4:	4413      	add	r3, r2
 80064b6:	3306      	adds	r3, #6
 80064b8:	005b      	lsls	r3, r3, #1
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	6812      	ldr	r2, [r2, #0]
 80064be:	4413      	add	r3, r2
 80064c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064c4:	881b      	ldrh	r3, [r3, #0]
 80064c6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6818      	ldr	r0, [r3, #0]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f503 710c 	add.w	r1, r3, #560	; 0x230
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	f003 fa5e 	bl	80099a2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	881b      	ldrh	r3, [r3, #0]
 80064ec:	b29a      	uxth	r2, r3
 80064ee:	f640 738f 	movw	r3, #3983	; 0xf8f
 80064f2:	4013      	ands	r3, r2
 80064f4:	b29c      	uxth	r4, r3
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80064fe:	b292      	uxth	r2, r2
 8006500:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f005 f814 	bl	800b530 <HAL_PCD_SetupStageCallback>
 8006508:	e1dc      	b.n	80068c4 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800650a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800650e:	2b00      	cmp	r3, #0
 8006510:	f280 81d8 	bge.w	80068c4 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	881b      	ldrh	r3, [r3, #0]
 800651a:	b29a      	uxth	r2, r3
 800651c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006520:	4013      	ands	r3, r2
 8006522:	b29c      	uxth	r4, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800652c:	b292      	uxth	r2, r2
 800652e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006538:	b29b      	uxth	r3, r3
 800653a:	461a      	mov	r2, r3
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	00db      	lsls	r3, r3, #3
 8006542:	4413      	add	r3, r2
 8006544:	3306      	adds	r3, #6
 8006546:	005b      	lsls	r3, r3, #1
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	6812      	ldr	r2, [r2, #0]
 800654c:	4413      	add	r3, r2
 800654e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006552:	881b      	ldrh	r3, [r3, #0]
 8006554:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	69db      	ldr	r3, [r3, #28]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d019      	beq.n	8006598 <PCD_EP_ISR_Handler+0x1e4>
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	695b      	ldr	r3, [r3, #20]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d015      	beq.n	8006598 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6818      	ldr	r0, [r3, #0]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6959      	ldr	r1, [r3, #20]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800657c:	b29b      	uxth	r3, r3
 800657e:	f003 fa10 	bl	80099a2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	695a      	ldr	r2, [r3, #20]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	69db      	ldr	r3, [r3, #28]
 800658a:	441a      	add	r2, r3
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006590:	2100      	movs	r1, #0
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f004 ffde 	bl	800b554 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	461c      	mov	r4, r3
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	441c      	add	r4, r3
 80065aa:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 80065ae:	461c      	mov	r4, r3
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	691b      	ldr	r3, [r3, #16]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d10e      	bne.n	80065d6 <PCD_EP_ISR_Handler+0x222>
 80065b8:	8823      	ldrh	r3, [r4, #0]
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	8023      	strh	r3, [r4, #0]
 80065c4:	8823      	ldrh	r3, [r4, #0]
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	8023      	strh	r3, [r4, #0]
 80065d4:	e02d      	b.n	8006632 <PCD_EP_ISR_Handler+0x27e>
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	2b3e      	cmp	r3, #62	; 0x3e
 80065dc:	d812      	bhi.n	8006604 <PCD_EP_ISR_Handler+0x250>
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	691b      	ldr	r3, [r3, #16]
 80065e2:	085b      	lsrs	r3, r3, #1
 80065e4:	61bb      	str	r3, [r7, #24]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	691b      	ldr	r3, [r3, #16]
 80065ea:	f003 0301 	and.w	r3, r3, #1
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d002      	beq.n	80065f8 <PCD_EP_ISR_Handler+0x244>
 80065f2:	69bb      	ldr	r3, [r7, #24]
 80065f4:	3301      	adds	r3, #1
 80065f6:	61bb      	str	r3, [r7, #24]
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	029b      	lsls	r3, r3, #10
 80065fe:	b29b      	uxth	r3, r3
 8006600:	8023      	strh	r3, [r4, #0]
 8006602:	e016      	b.n	8006632 <PCD_EP_ISR_Handler+0x27e>
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	691b      	ldr	r3, [r3, #16]
 8006608:	095b      	lsrs	r3, r3, #5
 800660a:	61bb      	str	r3, [r7, #24]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	691b      	ldr	r3, [r3, #16]
 8006610:	f003 031f 	and.w	r3, r3, #31
 8006614:	2b00      	cmp	r3, #0
 8006616:	d102      	bne.n	800661e <PCD_EP_ISR_Handler+0x26a>
 8006618:	69bb      	ldr	r3, [r7, #24]
 800661a:	3b01      	subs	r3, #1
 800661c:	61bb      	str	r3, [r7, #24]
 800661e:	69bb      	ldr	r3, [r7, #24]
 8006620:	b29b      	uxth	r3, r3
 8006622:	029b      	lsls	r3, r3, #10
 8006624:	b29b      	uxth	r3, r3
 8006626:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800662a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800662e:	b29b      	uxth	r3, r3
 8006630:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	881b      	ldrh	r3, [r3, #0]
 8006638:	b29b      	uxth	r3, r3
 800663a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800663e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006642:	b29c      	uxth	r4, r3
 8006644:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8006648:	b29c      	uxth	r4, r3
 800664a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800664e:	b29c      	uxth	r4, r3
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	4ba2      	ldr	r3, [pc, #648]	; (80068e0 <PCD_EP_ISR_Handler+0x52c>)
 8006656:	4323      	orrs	r3, r4
 8006658:	b29b      	uxth	r3, r3
 800665a:	8013      	strh	r3, [r2, #0]
 800665c:	e132      	b.n	80068c4 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	461a      	mov	r2, r3
 8006664:	7d7b      	ldrb	r3, [r7, #21]
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	4413      	add	r3, r2
 800666a:	881b      	ldrh	r3, [r3, #0]
 800666c:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800666e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006672:	2b00      	cmp	r3, #0
 8006674:	f280 80d1 	bge.w	800681a <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	461a      	mov	r2, r3
 800667e:	7d7b      	ldrb	r3, [r7, #21]
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	4413      	add	r3, r2
 8006684:	881b      	ldrh	r3, [r3, #0]
 8006686:	b29a      	uxth	r2, r3
 8006688:	f640 738f 	movw	r3, #3983	; 0xf8f
 800668c:	4013      	ands	r3, r2
 800668e:	b29c      	uxth	r4, r3
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	461a      	mov	r2, r3
 8006696:	7d7b      	ldrb	r3, [r7, #21]
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	4413      	add	r3, r2
 800669c:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80066a0:	b292      	uxth	r2, r2
 80066a2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80066a4:	7d7b      	ldrb	r3, [r7, #21]
 80066a6:	015b      	lsls	r3, r3, #5
 80066a8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	4413      	add	r3, r2
 80066b0:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	7b1b      	ldrb	r3, [r3, #12]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d121      	bne.n	80066fe <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	461a      	mov	r2, r3
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	00db      	lsls	r3, r3, #3
 80066cc:	4413      	add	r3, r2
 80066ce:	3306      	adds	r3, #6
 80066d0:	005b      	lsls	r3, r3, #1
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	6812      	ldr	r2, [r2, #0]
 80066d6:	4413      	add	r3, r2
 80066d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066dc:	881b      	ldrh	r3, [r3, #0]
 80066de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066e2:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 80066e4:	8bfb      	ldrh	r3, [r7, #30]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d072      	beq.n	80067d0 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6818      	ldr	r0, [r3, #0]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	6959      	ldr	r1, [r3, #20]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	88da      	ldrh	r2, [r3, #6]
 80066f6:	8bfb      	ldrh	r3, [r7, #30]
 80066f8:	f003 f953 	bl	80099a2 <USB_ReadPMA>
 80066fc:	e068      	b.n	80067d0 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	461a      	mov	r2, r3
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	4413      	add	r3, r2
 800670c:	881b      	ldrh	r3, [r3, #0]
 800670e:	b29b      	uxth	r3, r3
 8006710:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006714:	2b00      	cmp	r3, #0
 8006716:	d021      	beq.n	800675c <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006720:	b29b      	uxth	r3, r3
 8006722:	461a      	mov	r2, r3
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	00db      	lsls	r3, r3, #3
 800672a:	4413      	add	r3, r2
 800672c:	3302      	adds	r3, #2
 800672e:	005b      	lsls	r3, r3, #1
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	6812      	ldr	r2, [r2, #0]
 8006734:	4413      	add	r3, r2
 8006736:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800673a:	881b      	ldrh	r3, [r3, #0]
 800673c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006740:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8006742:	8bfb      	ldrh	r3, [r7, #30]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d02a      	beq.n	800679e <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6818      	ldr	r0, [r3, #0]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	6959      	ldr	r1, [r3, #20]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	891a      	ldrh	r2, [r3, #8]
 8006754:	8bfb      	ldrh	r3, [r7, #30]
 8006756:	f003 f924 	bl	80099a2 <USB_ReadPMA>
 800675a:	e020      	b.n	800679e <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006764:	b29b      	uxth	r3, r3
 8006766:	461a      	mov	r2, r3
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	00db      	lsls	r3, r3, #3
 800676e:	4413      	add	r3, r2
 8006770:	3306      	adds	r3, #6
 8006772:	005b      	lsls	r3, r3, #1
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	6812      	ldr	r2, [r2, #0]
 8006778:	4413      	add	r3, r2
 800677a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800677e:	881b      	ldrh	r3, [r3, #0]
 8006780:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006784:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8006786:	8bfb      	ldrh	r3, [r7, #30]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d008      	beq.n	800679e <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6818      	ldr	r0, [r3, #0]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	6959      	ldr	r1, [r3, #20]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	895a      	ldrh	r2, [r3, #10]
 8006798:	8bfb      	ldrh	r3, [r7, #30]
 800679a:	f003 f902 	bl	80099a2 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	461a      	mov	r2, r3
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	4413      	add	r3, r2
 80067ac:	881b      	ldrh	r3, [r3, #0]
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067b8:	b29c      	uxth	r4, r3
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	461a      	mov	r2, r3
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	441a      	add	r2, r3
 80067c8:	4b46      	ldr	r3, [pc, #280]	; (80068e4 <PCD_EP_ISR_Handler+0x530>)
 80067ca:	4323      	orrs	r3, r4
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	69da      	ldr	r2, [r3, #28]
 80067d4:	8bfb      	ldrh	r3, [r7, #30]
 80067d6:	441a      	add	r2, r3
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	695a      	ldr	r2, [r3, #20]
 80067e0:	8bfb      	ldrh	r3, [r7, #30]
 80067e2:	441a      	add	r2, r3
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	699b      	ldr	r3, [r3, #24]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d004      	beq.n	80067fa <PCD_EP_ISR_Handler+0x446>
 80067f0:	8bfa      	ldrh	r2, [r7, #30]
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	691b      	ldr	r3, [r3, #16]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d206      	bcs.n	8006808 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	4619      	mov	r1, r3
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f004 fea7 	bl	800b554 <HAL_PCD_DataOutStageCallback>
 8006806:	e008      	b.n	800681a <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	7819      	ldrb	r1, [r3, #0]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	695a      	ldr	r2, [r3, #20]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	699b      	ldr	r3, [r3, #24]
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f7ff fc9d 	bl	8006154 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800681a:	8a7b      	ldrh	r3, [r7, #18]
 800681c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006820:	2b00      	cmp	r3, #0
 8006822:	d04f      	beq.n	80068c4 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 8006824:	7d7b      	ldrb	r3, [r7, #21]
 8006826:	015b      	lsls	r3, r3, #5
 8006828:	3328      	adds	r3, #40	; 0x28
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	4413      	add	r3, r2
 800682e:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	461a      	mov	r2, r3
 8006836:	7d7b      	ldrb	r3, [r7, #21]
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	4413      	add	r3, r2
 800683c:	881b      	ldrh	r3, [r3, #0]
 800683e:	b29b      	uxth	r3, r3
 8006840:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006844:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006848:	b29c      	uxth	r4, r3
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	461a      	mov	r2, r3
 8006850:	7d7b      	ldrb	r3, [r7, #21]
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	441a      	add	r2, r3
 8006856:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800685a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800685e:	b29b      	uxth	r3, r3
 8006860:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800686a:	b29b      	uxth	r3, r3
 800686c:	461a      	mov	r2, r3
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	00db      	lsls	r3, r3, #3
 8006874:	4413      	add	r3, r2
 8006876:	3302      	adds	r3, #2
 8006878:	005b      	lsls	r3, r3, #1
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	6812      	ldr	r2, [r2, #0]
 800687e:	4413      	add	r3, r2
 8006880:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006884:	881b      	ldrh	r3, [r3, #0]
 8006886:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	695a      	ldr	r2, [r3, #20]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	69db      	ldr	r3, [r3, #28]
 8006896:	441a      	add	r2, r3
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	699b      	ldr	r3, [r3, #24]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d106      	bne.n	80068b2 <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	4619      	mov	r1, r3
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f004 fe6a 	bl	800b584 <HAL_PCD_DataInStageCallback>
 80068b0:	e008      	b.n	80068c4 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	7819      	ldrb	r1, [r3, #0]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	695a      	ldr	r2, [r3, #20]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	699b      	ldr	r3, [r3, #24]
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f7ff fc96 	bl	80061f0 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	b21b      	sxth	r3, r3
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	f6ff ad74 	blt.w	80063be <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 80068d6:	2300      	movs	r3, #0
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3724      	adds	r7, #36	; 0x24
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd90      	pop	{r4, r7, pc}
 80068e0:	ffff8080 	.word	0xffff8080
 80068e4:	ffff80c0 	.word	0xffff80c0

080068e8 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b087      	sub	sp, #28
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	607b      	str	r3, [r7, #4]
 80068f2:	460b      	mov	r3, r1
 80068f4:	817b      	strh	r3, [r7, #10]
 80068f6:	4613      	mov	r3, r2
 80068f8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80068fa:	897b      	ldrh	r3, [r7, #10]
 80068fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006900:	b29b      	uxth	r3, r3
 8006902:	2b00      	cmp	r3, #0
 8006904:	d008      	beq.n	8006918 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006906:	897b      	ldrh	r3, [r7, #10]
 8006908:	f003 0307 	and.w	r3, r3, #7
 800690c:	015b      	lsls	r3, r3, #5
 800690e:	3328      	adds	r3, #40	; 0x28
 8006910:	68fa      	ldr	r2, [r7, #12]
 8006912:	4413      	add	r3, r2
 8006914:	617b      	str	r3, [r7, #20]
 8006916:	e006      	b.n	8006926 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006918:	897b      	ldrh	r3, [r7, #10]
 800691a:	015b      	lsls	r3, r3, #5
 800691c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8006920:	68fa      	ldr	r2, [r7, #12]
 8006922:	4413      	add	r3, r2
 8006924:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006926:	893b      	ldrh	r3, [r7, #8]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d107      	bne.n	800693c <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	2200      	movs	r2, #0
 8006930:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	b29a      	uxth	r2, r3
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	80da      	strh	r2, [r3, #6]
 800693a:	e00b      	b.n	8006954 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	2201      	movs	r2, #1
 8006940:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	b29a      	uxth	r2, r3
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	0c1b      	lsrs	r3, r3, #16
 800694e:	b29a      	uxth	r2, r3
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	371c      	adds	r7, #28
 800695a:	46bd      	mov	sp, r7
 800695c:	bc80      	pop	{r7}
 800695e:	4770      	bx	lr

08006960 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b086      	sub	sp, #24
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d101      	bne.n	8006972 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	e26c      	b.n	8006e4c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f003 0301 	and.w	r3, r3, #1
 800697a:	2b00      	cmp	r3, #0
 800697c:	f000 8087 	beq.w	8006a8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006980:	4b92      	ldr	r3, [pc, #584]	; (8006bcc <HAL_RCC_OscConfig+0x26c>)
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	f003 030c 	and.w	r3, r3, #12
 8006988:	2b04      	cmp	r3, #4
 800698a:	d00c      	beq.n	80069a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800698c:	4b8f      	ldr	r3, [pc, #572]	; (8006bcc <HAL_RCC_OscConfig+0x26c>)
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	f003 030c 	and.w	r3, r3, #12
 8006994:	2b08      	cmp	r3, #8
 8006996:	d112      	bne.n	80069be <HAL_RCC_OscConfig+0x5e>
 8006998:	4b8c      	ldr	r3, [pc, #560]	; (8006bcc <HAL_RCC_OscConfig+0x26c>)
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069a4:	d10b      	bne.n	80069be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069a6:	4b89      	ldr	r3, [pc, #548]	; (8006bcc <HAL_RCC_OscConfig+0x26c>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d06c      	beq.n	8006a8c <HAL_RCC_OscConfig+0x12c>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d168      	bne.n	8006a8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e246      	b.n	8006e4c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069c6:	d106      	bne.n	80069d6 <HAL_RCC_OscConfig+0x76>
 80069c8:	4b80      	ldr	r3, [pc, #512]	; (8006bcc <HAL_RCC_OscConfig+0x26c>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a7f      	ldr	r2, [pc, #508]	; (8006bcc <HAL_RCC_OscConfig+0x26c>)
 80069ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069d2:	6013      	str	r3, [r2, #0]
 80069d4:	e02e      	b.n	8006a34 <HAL_RCC_OscConfig+0xd4>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d10c      	bne.n	80069f8 <HAL_RCC_OscConfig+0x98>
 80069de:	4b7b      	ldr	r3, [pc, #492]	; (8006bcc <HAL_RCC_OscConfig+0x26c>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a7a      	ldr	r2, [pc, #488]	; (8006bcc <HAL_RCC_OscConfig+0x26c>)
 80069e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069e8:	6013      	str	r3, [r2, #0]
 80069ea:	4b78      	ldr	r3, [pc, #480]	; (8006bcc <HAL_RCC_OscConfig+0x26c>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a77      	ldr	r2, [pc, #476]	; (8006bcc <HAL_RCC_OscConfig+0x26c>)
 80069f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069f4:	6013      	str	r3, [r2, #0]
 80069f6:	e01d      	b.n	8006a34 <HAL_RCC_OscConfig+0xd4>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a00:	d10c      	bne.n	8006a1c <HAL_RCC_OscConfig+0xbc>
 8006a02:	4b72      	ldr	r3, [pc, #456]	; (8006bcc <HAL_RCC_OscConfig+0x26c>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a71      	ldr	r2, [pc, #452]	; (8006bcc <HAL_RCC_OscConfig+0x26c>)
 8006a08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a0c:	6013      	str	r3, [r2, #0]
 8006a0e:	4b6f      	ldr	r3, [pc, #444]	; (8006bcc <HAL_RCC_OscConfig+0x26c>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a6e      	ldr	r2, [pc, #440]	; (8006bcc <HAL_RCC_OscConfig+0x26c>)
 8006a14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a18:	6013      	str	r3, [r2, #0]
 8006a1a:	e00b      	b.n	8006a34 <HAL_RCC_OscConfig+0xd4>
 8006a1c:	4b6b      	ldr	r3, [pc, #428]	; (8006bcc <HAL_RCC_OscConfig+0x26c>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a6a      	ldr	r2, [pc, #424]	; (8006bcc <HAL_RCC_OscConfig+0x26c>)
 8006a22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a26:	6013      	str	r3, [r2, #0]
 8006a28:	4b68      	ldr	r3, [pc, #416]	; (8006bcc <HAL_RCC_OscConfig+0x26c>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a67      	ldr	r2, [pc, #412]	; (8006bcc <HAL_RCC_OscConfig+0x26c>)
 8006a2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a32:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d013      	beq.n	8006a64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a3c:	f7fd fa5e 	bl	8003efc <HAL_GetTick>
 8006a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a42:	e008      	b.n	8006a56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a44:	f7fd fa5a 	bl	8003efc <HAL_GetTick>
 8006a48:	4602      	mov	r2, r0
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	1ad3      	subs	r3, r2, r3
 8006a4e:	2b64      	cmp	r3, #100	; 0x64
 8006a50:	d901      	bls.n	8006a56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006a52:	2303      	movs	r3, #3
 8006a54:	e1fa      	b.n	8006e4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a56:	4b5d      	ldr	r3, [pc, #372]	; (8006bcc <HAL_RCC_OscConfig+0x26c>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d0f0      	beq.n	8006a44 <HAL_RCC_OscConfig+0xe4>
 8006a62:	e014      	b.n	8006a8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a64:	f7fd fa4a 	bl	8003efc <HAL_GetTick>
 8006a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a6a:	e008      	b.n	8006a7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a6c:	f7fd fa46 	bl	8003efc <HAL_GetTick>
 8006a70:	4602      	mov	r2, r0
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	1ad3      	subs	r3, r2, r3
 8006a76:	2b64      	cmp	r3, #100	; 0x64
 8006a78:	d901      	bls.n	8006a7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	e1e6      	b.n	8006e4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a7e:	4b53      	ldr	r3, [pc, #332]	; (8006bcc <HAL_RCC_OscConfig+0x26c>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d1f0      	bne.n	8006a6c <HAL_RCC_OscConfig+0x10c>
 8006a8a:	e000      	b.n	8006a8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f003 0302 	and.w	r3, r3, #2
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d063      	beq.n	8006b62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006a9a:	4b4c      	ldr	r3, [pc, #304]	; (8006bcc <HAL_RCC_OscConfig+0x26c>)
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	f003 030c 	and.w	r3, r3, #12
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d00b      	beq.n	8006abe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006aa6:	4b49      	ldr	r3, [pc, #292]	; (8006bcc <HAL_RCC_OscConfig+0x26c>)
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	f003 030c 	and.w	r3, r3, #12
 8006aae:	2b08      	cmp	r3, #8
 8006ab0:	d11c      	bne.n	8006aec <HAL_RCC_OscConfig+0x18c>
 8006ab2:	4b46      	ldr	r3, [pc, #280]	; (8006bcc <HAL_RCC_OscConfig+0x26c>)
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d116      	bne.n	8006aec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006abe:	4b43      	ldr	r3, [pc, #268]	; (8006bcc <HAL_RCC_OscConfig+0x26c>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 0302 	and.w	r3, r3, #2
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d005      	beq.n	8006ad6 <HAL_RCC_OscConfig+0x176>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d001      	beq.n	8006ad6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e1ba      	b.n	8006e4c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ad6:	4b3d      	ldr	r3, [pc, #244]	; (8006bcc <HAL_RCC_OscConfig+0x26c>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	695b      	ldr	r3, [r3, #20]
 8006ae2:	00db      	lsls	r3, r3, #3
 8006ae4:	4939      	ldr	r1, [pc, #228]	; (8006bcc <HAL_RCC_OscConfig+0x26c>)
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006aea:	e03a      	b.n	8006b62 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	691b      	ldr	r3, [r3, #16]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d020      	beq.n	8006b36 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006af4:	4b36      	ldr	r3, [pc, #216]	; (8006bd0 <HAL_RCC_OscConfig+0x270>)
 8006af6:	2201      	movs	r2, #1
 8006af8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006afa:	f7fd f9ff 	bl	8003efc <HAL_GetTick>
 8006afe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b00:	e008      	b.n	8006b14 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b02:	f7fd f9fb 	bl	8003efc <HAL_GetTick>
 8006b06:	4602      	mov	r2, r0
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	1ad3      	subs	r3, r2, r3
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	d901      	bls.n	8006b14 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006b10:	2303      	movs	r3, #3
 8006b12:	e19b      	b.n	8006e4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b14:	4b2d      	ldr	r3, [pc, #180]	; (8006bcc <HAL_RCC_OscConfig+0x26c>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 0302 	and.w	r3, r3, #2
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d0f0      	beq.n	8006b02 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b20:	4b2a      	ldr	r3, [pc, #168]	; (8006bcc <HAL_RCC_OscConfig+0x26c>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	695b      	ldr	r3, [r3, #20]
 8006b2c:	00db      	lsls	r3, r3, #3
 8006b2e:	4927      	ldr	r1, [pc, #156]	; (8006bcc <HAL_RCC_OscConfig+0x26c>)
 8006b30:	4313      	orrs	r3, r2
 8006b32:	600b      	str	r3, [r1, #0]
 8006b34:	e015      	b.n	8006b62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b36:	4b26      	ldr	r3, [pc, #152]	; (8006bd0 <HAL_RCC_OscConfig+0x270>)
 8006b38:	2200      	movs	r2, #0
 8006b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b3c:	f7fd f9de 	bl	8003efc <HAL_GetTick>
 8006b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b42:	e008      	b.n	8006b56 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b44:	f7fd f9da 	bl	8003efc <HAL_GetTick>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	1ad3      	subs	r3, r2, r3
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	d901      	bls.n	8006b56 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006b52:	2303      	movs	r3, #3
 8006b54:	e17a      	b.n	8006e4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b56:	4b1d      	ldr	r3, [pc, #116]	; (8006bcc <HAL_RCC_OscConfig+0x26c>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f003 0302 	and.w	r3, r3, #2
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d1f0      	bne.n	8006b44 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 0308 	and.w	r3, r3, #8
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d03a      	beq.n	8006be4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	699b      	ldr	r3, [r3, #24]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d019      	beq.n	8006baa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b76:	4b17      	ldr	r3, [pc, #92]	; (8006bd4 <HAL_RCC_OscConfig+0x274>)
 8006b78:	2201      	movs	r2, #1
 8006b7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b7c:	f7fd f9be 	bl	8003efc <HAL_GetTick>
 8006b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b82:	e008      	b.n	8006b96 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b84:	f7fd f9ba 	bl	8003efc <HAL_GetTick>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	1ad3      	subs	r3, r2, r3
 8006b8e:	2b02      	cmp	r3, #2
 8006b90:	d901      	bls.n	8006b96 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006b92:	2303      	movs	r3, #3
 8006b94:	e15a      	b.n	8006e4c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b96:	4b0d      	ldr	r3, [pc, #52]	; (8006bcc <HAL_RCC_OscConfig+0x26c>)
 8006b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9a:	f003 0302 	and.w	r3, r3, #2
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d0f0      	beq.n	8006b84 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006ba2:	2001      	movs	r0, #1
 8006ba4:	f000 fada 	bl	800715c <RCC_Delay>
 8006ba8:	e01c      	b.n	8006be4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006baa:	4b0a      	ldr	r3, [pc, #40]	; (8006bd4 <HAL_RCC_OscConfig+0x274>)
 8006bac:	2200      	movs	r2, #0
 8006bae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006bb0:	f7fd f9a4 	bl	8003efc <HAL_GetTick>
 8006bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bb6:	e00f      	b.n	8006bd8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006bb8:	f7fd f9a0 	bl	8003efc <HAL_GetTick>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	2b02      	cmp	r3, #2
 8006bc4:	d908      	bls.n	8006bd8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006bc6:	2303      	movs	r3, #3
 8006bc8:	e140      	b.n	8006e4c <HAL_RCC_OscConfig+0x4ec>
 8006bca:	bf00      	nop
 8006bcc:	40021000 	.word	0x40021000
 8006bd0:	42420000 	.word	0x42420000
 8006bd4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bd8:	4b9e      	ldr	r3, [pc, #632]	; (8006e54 <HAL_RCC_OscConfig+0x4f4>)
 8006bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bdc:	f003 0302 	and.w	r3, r3, #2
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d1e9      	bne.n	8006bb8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f003 0304 	and.w	r3, r3, #4
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	f000 80a6 	beq.w	8006d3e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006bf6:	4b97      	ldr	r3, [pc, #604]	; (8006e54 <HAL_RCC_OscConfig+0x4f4>)
 8006bf8:	69db      	ldr	r3, [r3, #28]
 8006bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d10d      	bne.n	8006c1e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c02:	4b94      	ldr	r3, [pc, #592]	; (8006e54 <HAL_RCC_OscConfig+0x4f4>)
 8006c04:	69db      	ldr	r3, [r3, #28]
 8006c06:	4a93      	ldr	r2, [pc, #588]	; (8006e54 <HAL_RCC_OscConfig+0x4f4>)
 8006c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c0c:	61d3      	str	r3, [r2, #28]
 8006c0e:	4b91      	ldr	r3, [pc, #580]	; (8006e54 <HAL_RCC_OscConfig+0x4f4>)
 8006c10:	69db      	ldr	r3, [r3, #28]
 8006c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c16:	60bb      	str	r3, [r7, #8]
 8006c18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c1e:	4b8e      	ldr	r3, [pc, #568]	; (8006e58 <HAL_RCC_OscConfig+0x4f8>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d118      	bne.n	8006c5c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c2a:	4b8b      	ldr	r3, [pc, #556]	; (8006e58 <HAL_RCC_OscConfig+0x4f8>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a8a      	ldr	r2, [pc, #552]	; (8006e58 <HAL_RCC_OscConfig+0x4f8>)
 8006c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c36:	f7fd f961 	bl	8003efc <HAL_GetTick>
 8006c3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c3c:	e008      	b.n	8006c50 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c3e:	f7fd f95d 	bl	8003efc <HAL_GetTick>
 8006c42:	4602      	mov	r2, r0
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	1ad3      	subs	r3, r2, r3
 8006c48:	2b64      	cmp	r3, #100	; 0x64
 8006c4a:	d901      	bls.n	8006c50 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006c4c:	2303      	movs	r3, #3
 8006c4e:	e0fd      	b.n	8006e4c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c50:	4b81      	ldr	r3, [pc, #516]	; (8006e58 <HAL_RCC_OscConfig+0x4f8>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d0f0      	beq.n	8006c3e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d106      	bne.n	8006c72 <HAL_RCC_OscConfig+0x312>
 8006c64:	4b7b      	ldr	r3, [pc, #492]	; (8006e54 <HAL_RCC_OscConfig+0x4f4>)
 8006c66:	6a1b      	ldr	r3, [r3, #32]
 8006c68:	4a7a      	ldr	r2, [pc, #488]	; (8006e54 <HAL_RCC_OscConfig+0x4f4>)
 8006c6a:	f043 0301 	orr.w	r3, r3, #1
 8006c6e:	6213      	str	r3, [r2, #32]
 8006c70:	e02d      	b.n	8006cce <HAL_RCC_OscConfig+0x36e>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d10c      	bne.n	8006c94 <HAL_RCC_OscConfig+0x334>
 8006c7a:	4b76      	ldr	r3, [pc, #472]	; (8006e54 <HAL_RCC_OscConfig+0x4f4>)
 8006c7c:	6a1b      	ldr	r3, [r3, #32]
 8006c7e:	4a75      	ldr	r2, [pc, #468]	; (8006e54 <HAL_RCC_OscConfig+0x4f4>)
 8006c80:	f023 0301 	bic.w	r3, r3, #1
 8006c84:	6213      	str	r3, [r2, #32]
 8006c86:	4b73      	ldr	r3, [pc, #460]	; (8006e54 <HAL_RCC_OscConfig+0x4f4>)
 8006c88:	6a1b      	ldr	r3, [r3, #32]
 8006c8a:	4a72      	ldr	r2, [pc, #456]	; (8006e54 <HAL_RCC_OscConfig+0x4f4>)
 8006c8c:	f023 0304 	bic.w	r3, r3, #4
 8006c90:	6213      	str	r3, [r2, #32]
 8006c92:	e01c      	b.n	8006cce <HAL_RCC_OscConfig+0x36e>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	2b05      	cmp	r3, #5
 8006c9a:	d10c      	bne.n	8006cb6 <HAL_RCC_OscConfig+0x356>
 8006c9c:	4b6d      	ldr	r3, [pc, #436]	; (8006e54 <HAL_RCC_OscConfig+0x4f4>)
 8006c9e:	6a1b      	ldr	r3, [r3, #32]
 8006ca0:	4a6c      	ldr	r2, [pc, #432]	; (8006e54 <HAL_RCC_OscConfig+0x4f4>)
 8006ca2:	f043 0304 	orr.w	r3, r3, #4
 8006ca6:	6213      	str	r3, [r2, #32]
 8006ca8:	4b6a      	ldr	r3, [pc, #424]	; (8006e54 <HAL_RCC_OscConfig+0x4f4>)
 8006caa:	6a1b      	ldr	r3, [r3, #32]
 8006cac:	4a69      	ldr	r2, [pc, #420]	; (8006e54 <HAL_RCC_OscConfig+0x4f4>)
 8006cae:	f043 0301 	orr.w	r3, r3, #1
 8006cb2:	6213      	str	r3, [r2, #32]
 8006cb4:	e00b      	b.n	8006cce <HAL_RCC_OscConfig+0x36e>
 8006cb6:	4b67      	ldr	r3, [pc, #412]	; (8006e54 <HAL_RCC_OscConfig+0x4f4>)
 8006cb8:	6a1b      	ldr	r3, [r3, #32]
 8006cba:	4a66      	ldr	r2, [pc, #408]	; (8006e54 <HAL_RCC_OscConfig+0x4f4>)
 8006cbc:	f023 0301 	bic.w	r3, r3, #1
 8006cc0:	6213      	str	r3, [r2, #32]
 8006cc2:	4b64      	ldr	r3, [pc, #400]	; (8006e54 <HAL_RCC_OscConfig+0x4f4>)
 8006cc4:	6a1b      	ldr	r3, [r3, #32]
 8006cc6:	4a63      	ldr	r2, [pc, #396]	; (8006e54 <HAL_RCC_OscConfig+0x4f4>)
 8006cc8:	f023 0304 	bic.w	r3, r3, #4
 8006ccc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	68db      	ldr	r3, [r3, #12]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d015      	beq.n	8006d02 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006cd6:	f7fd f911 	bl	8003efc <HAL_GetTick>
 8006cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cdc:	e00a      	b.n	8006cf4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cde:	f7fd f90d 	bl	8003efc <HAL_GetTick>
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	1ad3      	subs	r3, r2, r3
 8006ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d901      	bls.n	8006cf4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006cf0:	2303      	movs	r3, #3
 8006cf2:	e0ab      	b.n	8006e4c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cf4:	4b57      	ldr	r3, [pc, #348]	; (8006e54 <HAL_RCC_OscConfig+0x4f4>)
 8006cf6:	6a1b      	ldr	r3, [r3, #32]
 8006cf8:	f003 0302 	and.w	r3, r3, #2
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d0ee      	beq.n	8006cde <HAL_RCC_OscConfig+0x37e>
 8006d00:	e014      	b.n	8006d2c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d02:	f7fd f8fb 	bl	8003efc <HAL_GetTick>
 8006d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d08:	e00a      	b.n	8006d20 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d0a:	f7fd f8f7 	bl	8003efc <HAL_GetTick>
 8006d0e:	4602      	mov	r2, r0
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	1ad3      	subs	r3, r2, r3
 8006d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d901      	bls.n	8006d20 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006d1c:	2303      	movs	r3, #3
 8006d1e:	e095      	b.n	8006e4c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d20:	4b4c      	ldr	r3, [pc, #304]	; (8006e54 <HAL_RCC_OscConfig+0x4f4>)
 8006d22:	6a1b      	ldr	r3, [r3, #32]
 8006d24:	f003 0302 	and.w	r3, r3, #2
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d1ee      	bne.n	8006d0a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006d2c:	7dfb      	ldrb	r3, [r7, #23]
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d105      	bne.n	8006d3e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d32:	4b48      	ldr	r3, [pc, #288]	; (8006e54 <HAL_RCC_OscConfig+0x4f4>)
 8006d34:	69db      	ldr	r3, [r3, #28]
 8006d36:	4a47      	ldr	r2, [pc, #284]	; (8006e54 <HAL_RCC_OscConfig+0x4f4>)
 8006d38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d3c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	69db      	ldr	r3, [r3, #28]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	f000 8081 	beq.w	8006e4a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006d48:	4b42      	ldr	r3, [pc, #264]	; (8006e54 <HAL_RCC_OscConfig+0x4f4>)
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	f003 030c 	and.w	r3, r3, #12
 8006d50:	2b08      	cmp	r3, #8
 8006d52:	d061      	beq.n	8006e18 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	69db      	ldr	r3, [r3, #28]
 8006d58:	2b02      	cmp	r3, #2
 8006d5a:	d146      	bne.n	8006dea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d5c:	4b3f      	ldr	r3, [pc, #252]	; (8006e5c <HAL_RCC_OscConfig+0x4fc>)
 8006d5e:	2200      	movs	r2, #0
 8006d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d62:	f7fd f8cb 	bl	8003efc <HAL_GetTick>
 8006d66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d68:	e008      	b.n	8006d7c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d6a:	f7fd f8c7 	bl	8003efc <HAL_GetTick>
 8006d6e:	4602      	mov	r2, r0
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	1ad3      	subs	r3, r2, r3
 8006d74:	2b02      	cmp	r3, #2
 8006d76:	d901      	bls.n	8006d7c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006d78:	2303      	movs	r3, #3
 8006d7a:	e067      	b.n	8006e4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d7c:	4b35      	ldr	r3, [pc, #212]	; (8006e54 <HAL_RCC_OscConfig+0x4f4>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d1f0      	bne.n	8006d6a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6a1b      	ldr	r3, [r3, #32]
 8006d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d90:	d108      	bne.n	8006da4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006d92:	4b30      	ldr	r3, [pc, #192]	; (8006e54 <HAL_RCC_OscConfig+0x4f4>)
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	492d      	ldr	r1, [pc, #180]	; (8006e54 <HAL_RCC_OscConfig+0x4f4>)
 8006da0:	4313      	orrs	r3, r2
 8006da2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006da4:	4b2b      	ldr	r3, [pc, #172]	; (8006e54 <HAL_RCC_OscConfig+0x4f4>)
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6a19      	ldr	r1, [r3, #32]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db4:	430b      	orrs	r3, r1
 8006db6:	4927      	ldr	r1, [pc, #156]	; (8006e54 <HAL_RCC_OscConfig+0x4f4>)
 8006db8:	4313      	orrs	r3, r2
 8006dba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006dbc:	4b27      	ldr	r3, [pc, #156]	; (8006e5c <HAL_RCC_OscConfig+0x4fc>)
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dc2:	f7fd f89b 	bl	8003efc <HAL_GetTick>
 8006dc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006dc8:	e008      	b.n	8006ddc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006dca:	f7fd f897 	bl	8003efc <HAL_GetTick>
 8006dce:	4602      	mov	r2, r0
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	1ad3      	subs	r3, r2, r3
 8006dd4:	2b02      	cmp	r3, #2
 8006dd6:	d901      	bls.n	8006ddc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006dd8:	2303      	movs	r3, #3
 8006dda:	e037      	b.n	8006e4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006ddc:	4b1d      	ldr	r3, [pc, #116]	; (8006e54 <HAL_RCC_OscConfig+0x4f4>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d0f0      	beq.n	8006dca <HAL_RCC_OscConfig+0x46a>
 8006de8:	e02f      	b.n	8006e4a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dea:	4b1c      	ldr	r3, [pc, #112]	; (8006e5c <HAL_RCC_OscConfig+0x4fc>)
 8006dec:	2200      	movs	r2, #0
 8006dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006df0:	f7fd f884 	bl	8003efc <HAL_GetTick>
 8006df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006df6:	e008      	b.n	8006e0a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006df8:	f7fd f880 	bl	8003efc <HAL_GetTick>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	1ad3      	subs	r3, r2, r3
 8006e02:	2b02      	cmp	r3, #2
 8006e04:	d901      	bls.n	8006e0a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006e06:	2303      	movs	r3, #3
 8006e08:	e020      	b.n	8006e4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e0a:	4b12      	ldr	r3, [pc, #72]	; (8006e54 <HAL_RCC_OscConfig+0x4f4>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d1f0      	bne.n	8006df8 <HAL_RCC_OscConfig+0x498>
 8006e16:	e018      	b.n	8006e4a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	69db      	ldr	r3, [r3, #28]
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d101      	bne.n	8006e24 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	e013      	b.n	8006e4c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006e24:	4b0b      	ldr	r3, [pc, #44]	; (8006e54 <HAL_RCC_OscConfig+0x4f4>)
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6a1b      	ldr	r3, [r3, #32]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d106      	bne.n	8006e46 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d001      	beq.n	8006e4a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	e000      	b.n	8006e4c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8006e4a:	2300      	movs	r3, #0
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3718      	adds	r7, #24
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}
 8006e54:	40021000 	.word	0x40021000
 8006e58:	40007000 	.word	0x40007000
 8006e5c:	42420060 	.word	0x42420060

08006e60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d101      	bne.n	8006e74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e70:	2301      	movs	r3, #1
 8006e72:	e0d0      	b.n	8007016 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006e74:	4b6a      	ldr	r3, [pc, #424]	; (8007020 <HAL_RCC_ClockConfig+0x1c0>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f003 0307 	and.w	r3, r3, #7
 8006e7c:	683a      	ldr	r2, [r7, #0]
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d910      	bls.n	8006ea4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e82:	4b67      	ldr	r3, [pc, #412]	; (8007020 <HAL_RCC_ClockConfig+0x1c0>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f023 0207 	bic.w	r2, r3, #7
 8006e8a:	4965      	ldr	r1, [pc, #404]	; (8007020 <HAL_RCC_ClockConfig+0x1c0>)
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e92:	4b63      	ldr	r3, [pc, #396]	; (8007020 <HAL_RCC_ClockConfig+0x1c0>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f003 0307 	and.w	r3, r3, #7
 8006e9a:	683a      	ldr	r2, [r7, #0]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d001      	beq.n	8006ea4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	e0b8      	b.n	8007016 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f003 0302 	and.w	r3, r3, #2
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d020      	beq.n	8006ef2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f003 0304 	and.w	r3, r3, #4
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d005      	beq.n	8006ec8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ebc:	4b59      	ldr	r3, [pc, #356]	; (8007024 <HAL_RCC_ClockConfig+0x1c4>)
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	4a58      	ldr	r2, [pc, #352]	; (8007024 <HAL_RCC_ClockConfig+0x1c4>)
 8006ec2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006ec6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f003 0308 	and.w	r3, r3, #8
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d005      	beq.n	8006ee0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ed4:	4b53      	ldr	r3, [pc, #332]	; (8007024 <HAL_RCC_ClockConfig+0x1c4>)
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	4a52      	ldr	r2, [pc, #328]	; (8007024 <HAL_RCC_ClockConfig+0x1c4>)
 8006eda:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006ede:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ee0:	4b50      	ldr	r3, [pc, #320]	; (8007024 <HAL_RCC_ClockConfig+0x1c4>)
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	494d      	ldr	r1, [pc, #308]	; (8007024 <HAL_RCC_ClockConfig+0x1c4>)
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f003 0301 	and.w	r3, r3, #1
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d040      	beq.n	8006f80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d107      	bne.n	8006f16 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f06:	4b47      	ldr	r3, [pc, #284]	; (8007024 <HAL_RCC_ClockConfig+0x1c4>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d115      	bne.n	8006f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	e07f      	b.n	8007016 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	2b02      	cmp	r3, #2
 8006f1c:	d107      	bne.n	8006f2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f1e:	4b41      	ldr	r3, [pc, #260]	; (8007024 <HAL_RCC_ClockConfig+0x1c4>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d109      	bne.n	8006f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e073      	b.n	8007016 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f2e:	4b3d      	ldr	r3, [pc, #244]	; (8007024 <HAL_RCC_ClockConfig+0x1c4>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f003 0302 	and.w	r3, r3, #2
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d101      	bne.n	8006f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	e06b      	b.n	8007016 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f3e:	4b39      	ldr	r3, [pc, #228]	; (8007024 <HAL_RCC_ClockConfig+0x1c4>)
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	f023 0203 	bic.w	r2, r3, #3
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	4936      	ldr	r1, [pc, #216]	; (8007024 <HAL_RCC_ClockConfig+0x1c4>)
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006f50:	f7fc ffd4 	bl	8003efc <HAL_GetTick>
 8006f54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f56:	e00a      	b.n	8006f6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f58:	f7fc ffd0 	bl	8003efc <HAL_GetTick>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	1ad3      	subs	r3, r2, r3
 8006f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d901      	bls.n	8006f6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006f6a:	2303      	movs	r3, #3
 8006f6c:	e053      	b.n	8007016 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f6e:	4b2d      	ldr	r3, [pc, #180]	; (8007024 <HAL_RCC_ClockConfig+0x1c4>)
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	f003 020c 	and.w	r2, r3, #12
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d1eb      	bne.n	8006f58 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006f80:	4b27      	ldr	r3, [pc, #156]	; (8007020 <HAL_RCC_ClockConfig+0x1c0>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f003 0307 	and.w	r3, r3, #7
 8006f88:	683a      	ldr	r2, [r7, #0]
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d210      	bcs.n	8006fb0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f8e:	4b24      	ldr	r3, [pc, #144]	; (8007020 <HAL_RCC_ClockConfig+0x1c0>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f023 0207 	bic.w	r2, r3, #7
 8006f96:	4922      	ldr	r1, [pc, #136]	; (8007020 <HAL_RCC_ClockConfig+0x1c0>)
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f9e:	4b20      	ldr	r3, [pc, #128]	; (8007020 <HAL_RCC_ClockConfig+0x1c0>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f003 0307 	and.w	r3, r3, #7
 8006fa6:	683a      	ldr	r2, [r7, #0]
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d001      	beq.n	8006fb0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	e032      	b.n	8007016 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f003 0304 	and.w	r3, r3, #4
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d008      	beq.n	8006fce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006fbc:	4b19      	ldr	r3, [pc, #100]	; (8007024 <HAL_RCC_ClockConfig+0x1c4>)
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	4916      	ldr	r1, [pc, #88]	; (8007024 <HAL_RCC_ClockConfig+0x1c4>)
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f003 0308 	and.w	r3, r3, #8
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d009      	beq.n	8006fee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006fda:	4b12      	ldr	r3, [pc, #72]	; (8007024 <HAL_RCC_ClockConfig+0x1c4>)
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	00db      	lsls	r3, r3, #3
 8006fe8:	490e      	ldr	r1, [pc, #56]	; (8007024 <HAL_RCC_ClockConfig+0x1c4>)
 8006fea:	4313      	orrs	r3, r2
 8006fec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006fee:	f000 f821 	bl	8007034 <HAL_RCC_GetSysClockFreq>
 8006ff2:	4601      	mov	r1, r0
 8006ff4:	4b0b      	ldr	r3, [pc, #44]	; (8007024 <HAL_RCC_ClockConfig+0x1c4>)
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	091b      	lsrs	r3, r3, #4
 8006ffa:	f003 030f 	and.w	r3, r3, #15
 8006ffe:	4a0a      	ldr	r2, [pc, #40]	; (8007028 <HAL_RCC_ClockConfig+0x1c8>)
 8007000:	5cd3      	ldrb	r3, [r2, r3]
 8007002:	fa21 f303 	lsr.w	r3, r1, r3
 8007006:	4a09      	ldr	r2, [pc, #36]	; (800702c <HAL_RCC_ClockConfig+0x1cc>)
 8007008:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800700a:	4b09      	ldr	r3, [pc, #36]	; (8007030 <HAL_RCC_ClockConfig+0x1d0>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4618      	mov	r0, r3
 8007010:	f7fc ff32 	bl	8003e78 <HAL_InitTick>

  return HAL_OK;
 8007014:	2300      	movs	r3, #0
}
 8007016:	4618      	mov	r0, r3
 8007018:	3710      	adds	r7, #16
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
 800701e:	bf00      	nop
 8007020:	40022000 	.word	0x40022000
 8007024:	40021000 	.word	0x40021000
 8007028:	0800d5e4 	.word	0x0800d5e4
 800702c:	20000010 	.word	0x20000010
 8007030:	20000014 	.word	0x20000014

08007034 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007034:	b490      	push	{r4, r7}
 8007036:	b08a      	sub	sp, #40	; 0x28
 8007038:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800703a:	4b2a      	ldr	r3, [pc, #168]	; (80070e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800703c:	1d3c      	adds	r4, r7, #4
 800703e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007040:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007044:	4b28      	ldr	r3, [pc, #160]	; (80070e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007046:	881b      	ldrh	r3, [r3, #0]
 8007048:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800704a:	2300      	movs	r3, #0
 800704c:	61fb      	str	r3, [r7, #28]
 800704e:	2300      	movs	r3, #0
 8007050:	61bb      	str	r3, [r7, #24]
 8007052:	2300      	movs	r3, #0
 8007054:	627b      	str	r3, [r7, #36]	; 0x24
 8007056:	2300      	movs	r3, #0
 8007058:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800705a:	2300      	movs	r3, #0
 800705c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800705e:	4b23      	ldr	r3, [pc, #140]	; (80070ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	f003 030c 	and.w	r3, r3, #12
 800706a:	2b04      	cmp	r3, #4
 800706c:	d002      	beq.n	8007074 <HAL_RCC_GetSysClockFreq+0x40>
 800706e:	2b08      	cmp	r3, #8
 8007070:	d003      	beq.n	800707a <HAL_RCC_GetSysClockFreq+0x46>
 8007072:	e02d      	b.n	80070d0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007074:	4b1e      	ldr	r3, [pc, #120]	; (80070f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007076:	623b      	str	r3, [r7, #32]
      break;
 8007078:	e02d      	b.n	80070d6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800707a:	69fb      	ldr	r3, [r7, #28]
 800707c:	0c9b      	lsrs	r3, r3, #18
 800707e:	f003 030f 	and.w	r3, r3, #15
 8007082:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007086:	4413      	add	r3, r2
 8007088:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800708c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800708e:	69fb      	ldr	r3, [r7, #28]
 8007090:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007094:	2b00      	cmp	r3, #0
 8007096:	d013      	beq.n	80070c0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007098:	4b14      	ldr	r3, [pc, #80]	; (80070ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	0c5b      	lsrs	r3, r3, #17
 800709e:	f003 0301 	and.w	r3, r3, #1
 80070a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80070a6:	4413      	add	r3, r2
 80070a8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80070ac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	4a0f      	ldr	r2, [pc, #60]	; (80070f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80070b2:	fb02 f203 	mul.w	r2, r2, r3
 80070b6:	69bb      	ldr	r3, [r7, #24]
 80070b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80070bc:	627b      	str	r3, [r7, #36]	; 0x24
 80070be:	e004      	b.n	80070ca <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	4a0c      	ldr	r2, [pc, #48]	; (80070f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 80070c4:	fb02 f303 	mul.w	r3, r2, r3
 80070c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80070ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070cc:	623b      	str	r3, [r7, #32]
      break;
 80070ce:	e002      	b.n	80070d6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80070d0:	4b07      	ldr	r3, [pc, #28]	; (80070f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80070d2:	623b      	str	r3, [r7, #32]
      break;
 80070d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80070d6:	6a3b      	ldr	r3, [r7, #32]
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3728      	adds	r7, #40	; 0x28
 80070dc:	46bd      	mov	sp, r7
 80070de:	bc90      	pop	{r4, r7}
 80070e0:	4770      	bx	lr
 80070e2:	bf00      	nop
 80070e4:	0800c81c 	.word	0x0800c81c
 80070e8:	0800c82c 	.word	0x0800c82c
 80070ec:	40021000 	.word	0x40021000
 80070f0:	007a1200 	.word	0x007a1200
 80070f4:	003d0900 	.word	0x003d0900

080070f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070f8:	b480      	push	{r7}
 80070fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80070fc:	4b02      	ldr	r3, [pc, #8]	; (8007108 <HAL_RCC_GetHCLKFreq+0x10>)
 80070fe:	681b      	ldr	r3, [r3, #0]
}
 8007100:	4618      	mov	r0, r3
 8007102:	46bd      	mov	sp, r7
 8007104:	bc80      	pop	{r7}
 8007106:	4770      	bx	lr
 8007108:	20000010 	.word	0x20000010

0800710c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007110:	f7ff fff2 	bl	80070f8 <HAL_RCC_GetHCLKFreq>
 8007114:	4601      	mov	r1, r0
 8007116:	4b05      	ldr	r3, [pc, #20]	; (800712c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	0a1b      	lsrs	r3, r3, #8
 800711c:	f003 0307 	and.w	r3, r3, #7
 8007120:	4a03      	ldr	r2, [pc, #12]	; (8007130 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007122:	5cd3      	ldrb	r3, [r2, r3]
 8007124:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007128:	4618      	mov	r0, r3
 800712a:	bd80      	pop	{r7, pc}
 800712c:	40021000 	.word	0x40021000
 8007130:	0800d5f4 	.word	0x0800d5f4

08007134 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007138:	f7ff ffde 	bl	80070f8 <HAL_RCC_GetHCLKFreq>
 800713c:	4601      	mov	r1, r0
 800713e:	4b05      	ldr	r3, [pc, #20]	; (8007154 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	0adb      	lsrs	r3, r3, #11
 8007144:	f003 0307 	and.w	r3, r3, #7
 8007148:	4a03      	ldr	r2, [pc, #12]	; (8007158 <HAL_RCC_GetPCLK2Freq+0x24>)
 800714a:	5cd3      	ldrb	r3, [r2, r3]
 800714c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007150:	4618      	mov	r0, r3
 8007152:	bd80      	pop	{r7, pc}
 8007154:	40021000 	.word	0x40021000
 8007158:	0800d5f4 	.word	0x0800d5f4

0800715c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800715c:	b480      	push	{r7}
 800715e:	b085      	sub	sp, #20
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007164:	4b0a      	ldr	r3, [pc, #40]	; (8007190 <RCC_Delay+0x34>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a0a      	ldr	r2, [pc, #40]	; (8007194 <RCC_Delay+0x38>)
 800716a:	fba2 2303 	umull	r2, r3, r2, r3
 800716e:	0a5b      	lsrs	r3, r3, #9
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	fb02 f303 	mul.w	r3, r2, r3
 8007176:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007178:	bf00      	nop
  }
  while (Delay --);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	1e5a      	subs	r2, r3, #1
 800717e:	60fa      	str	r2, [r7, #12]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d1f9      	bne.n	8007178 <RCC_Delay+0x1c>
}
 8007184:	bf00      	nop
 8007186:	3714      	adds	r7, #20
 8007188:	46bd      	mov	sp, r7
 800718a:	bc80      	pop	{r7}
 800718c:	4770      	bx	lr
 800718e:	bf00      	nop
 8007190:	20000010 	.word	0x20000010
 8007194:	10624dd3 	.word	0x10624dd3

08007198 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b086      	sub	sp, #24
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80071a0:	2300      	movs	r3, #0
 80071a2:	613b      	str	r3, [r7, #16]
 80071a4:	2300      	movs	r3, #0
 80071a6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f003 0301 	and.w	r3, r3, #1
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d07d      	beq.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80071b4:	2300      	movs	r3, #0
 80071b6:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80071b8:	4b4f      	ldr	r3, [pc, #316]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071ba:	69db      	ldr	r3, [r3, #28]
 80071bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d10d      	bne.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80071c4:	4b4c      	ldr	r3, [pc, #304]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071c6:	69db      	ldr	r3, [r3, #28]
 80071c8:	4a4b      	ldr	r2, [pc, #300]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071ce:	61d3      	str	r3, [r2, #28]
 80071d0:	4b49      	ldr	r3, [pc, #292]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071d2:	69db      	ldr	r3, [r3, #28]
 80071d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071d8:	60bb      	str	r3, [r7, #8]
 80071da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80071dc:	2301      	movs	r3, #1
 80071de:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071e0:	4b46      	ldr	r3, [pc, #280]	; (80072fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d118      	bne.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80071ec:	4b43      	ldr	r3, [pc, #268]	; (80072fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a42      	ldr	r2, [pc, #264]	; (80072fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80071f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80071f8:	f7fc fe80 	bl	8003efc <HAL_GetTick>
 80071fc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071fe:	e008      	b.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007200:	f7fc fe7c 	bl	8003efc <HAL_GetTick>
 8007204:	4602      	mov	r2, r0
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	1ad3      	subs	r3, r2, r3
 800720a:	2b64      	cmp	r3, #100	; 0x64
 800720c:	d901      	bls.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800720e:	2303      	movs	r3, #3
 8007210:	e06d      	b.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007212:	4b3a      	ldr	r3, [pc, #232]	; (80072fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800721a:	2b00      	cmp	r3, #0
 800721c:	d0f0      	beq.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800721e:	4b36      	ldr	r3, [pc, #216]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007220:	6a1b      	ldr	r3, [r3, #32]
 8007222:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007226:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d02e      	beq.n	800728c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007236:	68fa      	ldr	r2, [r7, #12]
 8007238:	429a      	cmp	r2, r3
 800723a:	d027      	beq.n	800728c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800723c:	4b2e      	ldr	r3, [pc, #184]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800723e:	6a1b      	ldr	r3, [r3, #32]
 8007240:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007244:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007246:	4b2e      	ldr	r3, [pc, #184]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007248:	2201      	movs	r2, #1
 800724a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800724c:	4b2c      	ldr	r3, [pc, #176]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800724e:	2200      	movs	r2, #0
 8007250:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007252:	4a29      	ldr	r2, [pc, #164]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f003 0301 	and.w	r3, r3, #1
 800725e:	2b00      	cmp	r3, #0
 8007260:	d014      	beq.n	800728c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007262:	f7fc fe4b 	bl	8003efc <HAL_GetTick>
 8007266:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007268:	e00a      	b.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800726a:	f7fc fe47 	bl	8003efc <HAL_GetTick>
 800726e:	4602      	mov	r2, r0
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	1ad3      	subs	r3, r2, r3
 8007274:	f241 3288 	movw	r2, #5000	; 0x1388
 8007278:	4293      	cmp	r3, r2
 800727a:	d901      	bls.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800727c:	2303      	movs	r3, #3
 800727e:	e036      	b.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007280:	4b1d      	ldr	r3, [pc, #116]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007282:	6a1b      	ldr	r3, [r3, #32]
 8007284:	f003 0302 	and.w	r3, r3, #2
 8007288:	2b00      	cmp	r3, #0
 800728a:	d0ee      	beq.n	800726a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800728c:	4b1a      	ldr	r3, [pc, #104]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800728e:	6a1b      	ldr	r3, [r3, #32]
 8007290:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	4917      	ldr	r1, [pc, #92]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800729a:	4313      	orrs	r3, r2
 800729c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800729e:	7dfb      	ldrb	r3, [r7, #23]
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d105      	bne.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072a4:	4b14      	ldr	r3, [pc, #80]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072a6:	69db      	ldr	r3, [r3, #28]
 80072a8:	4a13      	ldr	r2, [pc, #76]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072ae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f003 0302 	and.w	r3, r3, #2
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d008      	beq.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80072bc:	4b0e      	ldr	r3, [pc, #56]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	490b      	ldr	r1, [pc, #44]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072ca:	4313      	orrs	r3, r2
 80072cc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f003 0310 	and.w	r3, r3, #16
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d008      	beq.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80072da:	4b07      	ldr	r3, [pc, #28]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	68db      	ldr	r3, [r3, #12]
 80072e6:	4904      	ldr	r1, [pc, #16]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072e8:	4313      	orrs	r3, r2
 80072ea:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80072ec:	2300      	movs	r3, #0
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3718      	adds	r7, #24
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	bf00      	nop
 80072f8:	40021000 	.word	0x40021000
 80072fc:	40007000 	.word	0x40007000
 8007300:	42420440 	.word	0x42420440

08007304 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d101      	bne.n	8007316 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007312:	2301      	movs	r3, #1
 8007314:	e053      	b.n	80073be <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007322:	b2db      	uxtb	r3, r3
 8007324:	2b00      	cmp	r3, #0
 8007326:	d106      	bne.n	8007336 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2200      	movs	r2, #0
 800732c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f7fc fbb3 	bl	8003a9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2202      	movs	r2, #2
 800733a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800734c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	685a      	ldr	r2, [r3, #4]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	431a      	orrs	r2, r3
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	68db      	ldr	r3, [r3, #12]
 800735c:	431a      	orrs	r2, r3
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	691b      	ldr	r3, [r3, #16]
 8007362:	431a      	orrs	r2, r3
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	695b      	ldr	r3, [r3, #20]
 8007368:	431a      	orrs	r2, r3
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	699b      	ldr	r3, [r3, #24]
 800736e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007372:	431a      	orrs	r2, r3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	69db      	ldr	r3, [r3, #28]
 8007378:	431a      	orrs	r2, r3
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6a1b      	ldr	r3, [r3, #32]
 800737e:	ea42 0103 	orr.w	r1, r2, r3
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	430a      	orrs	r2, r1
 800738c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	699b      	ldr	r3, [r3, #24]
 8007392:	0c1a      	lsrs	r2, r3, #16
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f002 0204 	and.w	r2, r2, #4
 800739c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	69da      	ldr	r2, [r3, #28]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80073ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2200      	movs	r2, #0
 80073b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2201      	movs	r2, #1
 80073b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80073bc:	2300      	movs	r3, #0
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3708      	adds	r7, #8
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}

080073c6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073c6:	b580      	push	{r7, lr}
 80073c8:	b088      	sub	sp, #32
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	60f8      	str	r0, [r7, #12]
 80073ce:	60b9      	str	r1, [r7, #8]
 80073d0:	603b      	str	r3, [r7, #0]
 80073d2:	4613      	mov	r3, r2
 80073d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80073d6:	2300      	movs	r3, #0
 80073d8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d101      	bne.n	80073e8 <HAL_SPI_Transmit+0x22>
 80073e4:	2302      	movs	r3, #2
 80073e6:	e11e      	b.n	8007626 <HAL_SPI_Transmit+0x260>
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2201      	movs	r2, #1
 80073ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80073f0:	f7fc fd84 	bl	8003efc <HAL_GetTick>
 80073f4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80073f6:	88fb      	ldrh	r3, [r7, #6]
 80073f8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007400:	b2db      	uxtb	r3, r3
 8007402:	2b01      	cmp	r3, #1
 8007404:	d002      	beq.n	800740c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007406:	2302      	movs	r3, #2
 8007408:	77fb      	strb	r3, [r7, #31]
    goto error;
 800740a:	e103      	b.n	8007614 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d002      	beq.n	8007418 <HAL_SPI_Transmit+0x52>
 8007412:	88fb      	ldrh	r3, [r7, #6]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d102      	bne.n	800741e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007418:	2301      	movs	r3, #1
 800741a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800741c:	e0fa      	b.n	8007614 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2203      	movs	r2, #3
 8007422:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2200      	movs	r2, #0
 800742a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	68ba      	ldr	r2, [r7, #8]
 8007430:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	88fa      	ldrh	r2, [r7, #6]
 8007436:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	88fa      	ldrh	r2, [r7, #6]
 800743c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2200      	movs	r2, #0
 8007442:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2200      	movs	r2, #0
 8007448:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2200      	movs	r2, #0
 800744e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2200      	movs	r2, #0
 8007454:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2200      	movs	r2, #0
 800745a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007464:	d107      	bne.n	8007476 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007474:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007480:	2b40      	cmp	r3, #64	; 0x40
 8007482:	d007      	beq.n	8007494 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007492:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	68db      	ldr	r3, [r3, #12]
 8007498:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800749c:	d14b      	bne.n	8007536 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d002      	beq.n	80074ac <HAL_SPI_Transmit+0xe6>
 80074a6:	8afb      	ldrh	r3, [r7, #22]
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d13e      	bne.n	800752a <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074b0:	881a      	ldrh	r2, [r3, #0]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074bc:	1c9a      	adds	r2, r3, #2
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	3b01      	subs	r3, #1
 80074ca:	b29a      	uxth	r2, r3
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80074d0:	e02b      	b.n	800752a <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	f003 0302 	and.w	r3, r3, #2
 80074dc:	2b02      	cmp	r3, #2
 80074de:	d112      	bne.n	8007506 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e4:	881a      	ldrh	r2, [r3, #0]
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074f0:	1c9a      	adds	r2, r3, #2
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	3b01      	subs	r3, #1
 80074fe:	b29a      	uxth	r2, r3
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	86da      	strh	r2, [r3, #54]	; 0x36
 8007504:	e011      	b.n	800752a <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007506:	f7fc fcf9 	bl	8003efc <HAL_GetTick>
 800750a:	4602      	mov	r2, r0
 800750c:	69bb      	ldr	r3, [r7, #24]
 800750e:	1ad3      	subs	r3, r2, r3
 8007510:	683a      	ldr	r2, [r7, #0]
 8007512:	429a      	cmp	r2, r3
 8007514:	d803      	bhi.n	800751e <HAL_SPI_Transmit+0x158>
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800751c:	d102      	bne.n	8007524 <HAL_SPI_Transmit+0x15e>
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d102      	bne.n	800752a <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8007524:	2303      	movs	r3, #3
 8007526:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007528:	e074      	b.n	8007614 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800752e:	b29b      	uxth	r3, r3
 8007530:	2b00      	cmp	r3, #0
 8007532:	d1ce      	bne.n	80074d2 <HAL_SPI_Transmit+0x10c>
 8007534:	e04c      	b.n	80075d0 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d002      	beq.n	8007544 <HAL_SPI_Transmit+0x17e>
 800753e:	8afb      	ldrh	r3, [r7, #22]
 8007540:	2b01      	cmp	r3, #1
 8007542:	d140      	bne.n	80075c6 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	330c      	adds	r3, #12
 800754e:	7812      	ldrb	r2, [r2, #0]
 8007550:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007556:	1c5a      	adds	r2, r3, #1
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007560:	b29b      	uxth	r3, r3
 8007562:	3b01      	subs	r3, #1
 8007564:	b29a      	uxth	r2, r3
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800756a:	e02c      	b.n	80075c6 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	f003 0302 	and.w	r3, r3, #2
 8007576:	2b02      	cmp	r3, #2
 8007578:	d113      	bne.n	80075a2 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	330c      	adds	r3, #12
 8007584:	7812      	ldrb	r2, [r2, #0]
 8007586:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800758c:	1c5a      	adds	r2, r3, #1
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007596:	b29b      	uxth	r3, r3
 8007598:	3b01      	subs	r3, #1
 800759a:	b29a      	uxth	r2, r3
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	86da      	strh	r2, [r3, #54]	; 0x36
 80075a0:	e011      	b.n	80075c6 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075a2:	f7fc fcab 	bl	8003efc <HAL_GetTick>
 80075a6:	4602      	mov	r2, r0
 80075a8:	69bb      	ldr	r3, [r7, #24]
 80075aa:	1ad3      	subs	r3, r2, r3
 80075ac:	683a      	ldr	r2, [r7, #0]
 80075ae:	429a      	cmp	r2, r3
 80075b0:	d803      	bhi.n	80075ba <HAL_SPI_Transmit+0x1f4>
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075b8:	d102      	bne.n	80075c0 <HAL_SPI_Transmit+0x1fa>
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d102      	bne.n	80075c6 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80075c0:	2303      	movs	r3, #3
 80075c2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80075c4:	e026      	b.n	8007614 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d1cd      	bne.n	800756c <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80075d0:	69ba      	ldr	r2, [r7, #24]
 80075d2:	6839      	ldr	r1, [r7, #0]
 80075d4:	68f8      	ldr	r0, [r7, #12]
 80075d6:	f000 fb91 	bl	8007cfc <SPI_EndRxTxTransaction>
 80075da:	4603      	mov	r3, r0
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d002      	beq.n	80075e6 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2220      	movs	r2, #32
 80075e4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d10a      	bne.n	8007604 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80075ee:	2300      	movs	r3, #0
 80075f0:	613b      	str	r3, [r7, #16]
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	68db      	ldr	r3, [r3, #12]
 80075f8:	613b      	str	r3, [r7, #16]
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	613b      	str	r3, [r7, #16]
 8007602:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007608:	2b00      	cmp	r3, #0
 800760a:	d002      	beq.n	8007612 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	77fb      	strb	r3, [r7, #31]
 8007610:	e000      	b.n	8007614 <HAL_SPI_Transmit+0x24e>
  }

error:
 8007612:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2201      	movs	r2, #1
 8007618:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2200      	movs	r2, #0
 8007620:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007624:	7ffb      	ldrb	r3, [r7, #31]
}
 8007626:	4618      	mov	r0, r3
 8007628:	3720      	adds	r7, #32
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}

0800762e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800762e:	b580      	push	{r7, lr}
 8007630:	b088      	sub	sp, #32
 8007632:	af02      	add	r7, sp, #8
 8007634:	60f8      	str	r0, [r7, #12]
 8007636:	60b9      	str	r1, [r7, #8]
 8007638:	603b      	str	r3, [r7, #0]
 800763a:	4613      	mov	r3, r2
 800763c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800763e:	2300      	movs	r3, #0
 8007640:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800764a:	d112      	bne.n	8007672 <HAL_SPI_Receive+0x44>
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d10e      	bne.n	8007672 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2204      	movs	r2, #4
 8007658:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800765c:	88fa      	ldrh	r2, [r7, #6]
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	9300      	str	r3, [sp, #0]
 8007662:	4613      	mov	r3, r2
 8007664:	68ba      	ldr	r2, [r7, #8]
 8007666:	68b9      	ldr	r1, [r7, #8]
 8007668:	68f8      	ldr	r0, [r7, #12]
 800766a:	f000 f8e9 	bl	8007840 <HAL_SPI_TransmitReceive>
 800766e:	4603      	mov	r3, r0
 8007670:	e0e2      	b.n	8007838 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007678:	2b01      	cmp	r3, #1
 800767a:	d101      	bne.n	8007680 <HAL_SPI_Receive+0x52>
 800767c:	2302      	movs	r3, #2
 800767e:	e0db      	b.n	8007838 <HAL_SPI_Receive+0x20a>
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2201      	movs	r2, #1
 8007684:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007688:	f7fc fc38 	bl	8003efc <HAL_GetTick>
 800768c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007694:	b2db      	uxtb	r3, r3
 8007696:	2b01      	cmp	r3, #1
 8007698:	d002      	beq.n	80076a0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800769a:	2302      	movs	r3, #2
 800769c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800769e:	e0c2      	b.n	8007826 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d002      	beq.n	80076ac <HAL_SPI_Receive+0x7e>
 80076a6:	88fb      	ldrh	r3, [r7, #6]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d102      	bne.n	80076b2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80076ac:	2301      	movs	r3, #1
 80076ae:	75fb      	strb	r3, [r7, #23]
    goto error;
 80076b0:	e0b9      	b.n	8007826 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2204      	movs	r2, #4
 80076b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2200      	movs	r2, #0
 80076be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	68ba      	ldr	r2, [r7, #8]
 80076c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	88fa      	ldrh	r2, [r7, #6]
 80076ca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	88fa      	ldrh	r2, [r7, #6]
 80076d0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2200      	movs	r2, #0
 80076d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2200      	movs	r2, #0
 80076dc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2200      	movs	r2, #0
 80076e2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2200      	movs	r2, #0
 80076e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2200      	movs	r2, #0
 80076ee:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076f8:	d107      	bne.n	800770a <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007708:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007714:	2b40      	cmp	r3, #64	; 0x40
 8007716:	d007      	beq.n	8007728 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	681a      	ldr	r2, [r3, #0]
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007726:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d162      	bne.n	80077f6 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007730:	e02e      	b.n	8007790 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	f003 0301 	and.w	r3, r3, #1
 800773c:	2b01      	cmp	r3, #1
 800773e:	d115      	bne.n	800776c <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f103 020c 	add.w	r2, r3, #12
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800774c:	7812      	ldrb	r2, [r2, #0]
 800774e:	b2d2      	uxtb	r2, r2
 8007750:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007756:	1c5a      	adds	r2, r3, #1
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007760:	b29b      	uxth	r3, r3
 8007762:	3b01      	subs	r3, #1
 8007764:	b29a      	uxth	r2, r3
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	87da      	strh	r2, [r3, #62]	; 0x3e
 800776a:	e011      	b.n	8007790 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800776c:	f7fc fbc6 	bl	8003efc <HAL_GetTick>
 8007770:	4602      	mov	r2, r0
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	1ad3      	subs	r3, r2, r3
 8007776:	683a      	ldr	r2, [r7, #0]
 8007778:	429a      	cmp	r2, r3
 800777a:	d803      	bhi.n	8007784 <HAL_SPI_Receive+0x156>
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007782:	d102      	bne.n	800778a <HAL_SPI_Receive+0x15c>
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d102      	bne.n	8007790 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800778a:	2303      	movs	r3, #3
 800778c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800778e:	e04a      	b.n	8007826 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007794:	b29b      	uxth	r3, r3
 8007796:	2b00      	cmp	r3, #0
 8007798:	d1cb      	bne.n	8007732 <HAL_SPI_Receive+0x104>
 800779a:	e031      	b.n	8007800 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	f003 0301 	and.w	r3, r3, #1
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d113      	bne.n	80077d2 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	68da      	ldr	r2, [r3, #12]
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077b4:	b292      	uxth	r2, r2
 80077b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077bc:	1c9a      	adds	r2, r3, #2
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	3b01      	subs	r3, #1
 80077ca:	b29a      	uxth	r2, r3
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80077d0:	e011      	b.n	80077f6 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077d2:	f7fc fb93 	bl	8003efc <HAL_GetTick>
 80077d6:	4602      	mov	r2, r0
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	1ad3      	subs	r3, r2, r3
 80077dc:	683a      	ldr	r2, [r7, #0]
 80077de:	429a      	cmp	r2, r3
 80077e0:	d803      	bhi.n	80077ea <HAL_SPI_Receive+0x1bc>
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077e8:	d102      	bne.n	80077f0 <HAL_SPI_Receive+0x1c2>
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d102      	bne.n	80077f6 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80077f0:	2303      	movs	r3, #3
 80077f2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80077f4:	e017      	b.n	8007826 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d1cd      	bne.n	800779c <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007800:	693a      	ldr	r2, [r7, #16]
 8007802:	6839      	ldr	r1, [r7, #0]
 8007804:	68f8      	ldr	r0, [r7, #12]
 8007806:	f000 fa27 	bl	8007c58 <SPI_EndRxTransaction>
 800780a:	4603      	mov	r3, r0
 800780c:	2b00      	cmp	r3, #0
 800780e:	d002      	beq.n	8007816 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2220      	movs	r2, #32
 8007814:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800781a:	2b00      	cmp	r3, #0
 800781c:	d002      	beq.n	8007824 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	75fb      	strb	r3, [r7, #23]
 8007822:	e000      	b.n	8007826 <HAL_SPI_Receive+0x1f8>
  }

error :
 8007824:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2201      	movs	r2, #1
 800782a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2200      	movs	r2, #0
 8007832:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007836:	7dfb      	ldrb	r3, [r7, #23]
}
 8007838:	4618      	mov	r0, r3
 800783a:	3718      	adds	r7, #24
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b08c      	sub	sp, #48	; 0x30
 8007844:	af00      	add	r7, sp, #0
 8007846:	60f8      	str	r0, [r7, #12]
 8007848:	60b9      	str	r1, [r7, #8]
 800784a:	607a      	str	r2, [r7, #4]
 800784c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800784e:	2301      	movs	r3, #1
 8007850:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007852:	2300      	movs	r3, #0
 8007854:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800785e:	2b01      	cmp	r3, #1
 8007860:	d101      	bne.n	8007866 <HAL_SPI_TransmitReceive+0x26>
 8007862:	2302      	movs	r3, #2
 8007864:	e18a      	b.n	8007b7c <HAL_SPI_TransmitReceive+0x33c>
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2201      	movs	r2, #1
 800786a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800786e:	f7fc fb45 	bl	8003efc <HAL_GetTick>
 8007872:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800787a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007884:	887b      	ldrh	r3, [r7, #2]
 8007886:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007888:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800788c:	2b01      	cmp	r3, #1
 800788e:	d00f      	beq.n	80078b0 <HAL_SPI_TransmitReceive+0x70>
 8007890:	69fb      	ldr	r3, [r7, #28]
 8007892:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007896:	d107      	bne.n	80078a8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d103      	bne.n	80078a8 <HAL_SPI_TransmitReceive+0x68>
 80078a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80078a4:	2b04      	cmp	r3, #4
 80078a6:	d003      	beq.n	80078b0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80078a8:	2302      	movs	r3, #2
 80078aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80078ae:	e15b      	b.n	8007b68 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d005      	beq.n	80078c2 <HAL_SPI_TransmitReceive+0x82>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d002      	beq.n	80078c2 <HAL_SPI_TransmitReceive+0x82>
 80078bc:	887b      	ldrh	r3, [r7, #2]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d103      	bne.n	80078ca <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80078c2:	2301      	movs	r3, #1
 80078c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80078c8:	e14e      	b.n	8007b68 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	2b04      	cmp	r3, #4
 80078d4:	d003      	beq.n	80078de <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2205      	movs	r2, #5
 80078da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2200      	movs	r2, #0
 80078e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	687a      	ldr	r2, [r7, #4]
 80078e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	887a      	ldrh	r2, [r7, #2]
 80078ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	887a      	ldrh	r2, [r7, #2]
 80078f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	68ba      	ldr	r2, [r7, #8]
 80078fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	887a      	ldrh	r2, [r7, #2]
 8007900:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	887a      	ldrh	r2, [r7, #2]
 8007906:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2200      	movs	r2, #0
 800790c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2200      	movs	r2, #0
 8007912:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800791e:	2b40      	cmp	r3, #64	; 0x40
 8007920:	d007      	beq.n	8007932 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	681a      	ldr	r2, [r3, #0]
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007930:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	68db      	ldr	r3, [r3, #12]
 8007936:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800793a:	d178      	bne.n	8007a2e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d002      	beq.n	800794a <HAL_SPI_TransmitReceive+0x10a>
 8007944:	8b7b      	ldrh	r3, [r7, #26]
 8007946:	2b01      	cmp	r3, #1
 8007948:	d166      	bne.n	8007a18 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800794e:	881a      	ldrh	r2, [r3, #0]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800795a:	1c9a      	adds	r2, r3, #2
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007964:	b29b      	uxth	r3, r3
 8007966:	3b01      	subs	r3, #1
 8007968:	b29a      	uxth	r2, r3
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800796e:	e053      	b.n	8007a18 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	f003 0302 	and.w	r3, r3, #2
 800797a:	2b02      	cmp	r3, #2
 800797c:	d11b      	bne.n	80079b6 <HAL_SPI_TransmitReceive+0x176>
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007982:	b29b      	uxth	r3, r3
 8007984:	2b00      	cmp	r3, #0
 8007986:	d016      	beq.n	80079b6 <HAL_SPI_TransmitReceive+0x176>
 8007988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800798a:	2b01      	cmp	r3, #1
 800798c:	d113      	bne.n	80079b6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007992:	881a      	ldrh	r2, [r3, #0]
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800799e:	1c9a      	adds	r2, r3, #2
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	3b01      	subs	r3, #1
 80079ac:	b29a      	uxth	r2, r3
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80079b2:	2300      	movs	r3, #0
 80079b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	f003 0301 	and.w	r3, r3, #1
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d119      	bne.n	80079f8 <HAL_SPI_TransmitReceive+0x1b8>
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d014      	beq.n	80079f8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	68da      	ldr	r2, [r3, #12]
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079d8:	b292      	uxth	r2, r2
 80079da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e0:	1c9a      	adds	r2, r3, #2
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	3b01      	subs	r3, #1
 80079ee:	b29a      	uxth	r2, r3
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80079f4:	2301      	movs	r3, #1
 80079f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80079f8:	f7fc fa80 	bl	8003efc <HAL_GetTick>
 80079fc:	4602      	mov	r2, r0
 80079fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a00:	1ad3      	subs	r3, r2, r3
 8007a02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d807      	bhi.n	8007a18 <HAL_SPI_TransmitReceive+0x1d8>
 8007a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a0e:	d003      	beq.n	8007a18 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007a10:	2303      	movs	r3, #3
 8007a12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007a16:	e0a7      	b.n	8007b68 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d1a6      	bne.n	8007970 <HAL_SPI_TransmitReceive+0x130>
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d1a1      	bne.n	8007970 <HAL_SPI_TransmitReceive+0x130>
 8007a2c:	e07c      	b.n	8007b28 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d002      	beq.n	8007a3c <HAL_SPI_TransmitReceive+0x1fc>
 8007a36:	8b7b      	ldrh	r3, [r7, #26]
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d16b      	bne.n	8007b14 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	330c      	adds	r3, #12
 8007a46:	7812      	ldrb	r2, [r2, #0]
 8007a48:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a4e:	1c5a      	adds	r2, r3, #1
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	3b01      	subs	r3, #1
 8007a5c:	b29a      	uxth	r2, r3
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a62:	e057      	b.n	8007b14 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	f003 0302 	and.w	r3, r3, #2
 8007a6e:	2b02      	cmp	r3, #2
 8007a70:	d11c      	bne.n	8007aac <HAL_SPI_TransmitReceive+0x26c>
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d017      	beq.n	8007aac <HAL_SPI_TransmitReceive+0x26c>
 8007a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	d114      	bne.n	8007aac <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	330c      	adds	r3, #12
 8007a8c:	7812      	ldrb	r2, [r2, #0]
 8007a8e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a94:	1c5a      	adds	r2, r3, #1
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	3b01      	subs	r3, #1
 8007aa2:	b29a      	uxth	r2, r3
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	f003 0301 	and.w	r3, r3, #1
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d119      	bne.n	8007aee <HAL_SPI_TransmitReceive+0x2ae>
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d014      	beq.n	8007aee <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	68da      	ldr	r2, [r3, #12]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ace:	b2d2      	uxtb	r2, r2
 8007ad0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad6:	1c5a      	adds	r2, r3, #1
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	3b01      	subs	r3, #1
 8007ae4:	b29a      	uxth	r2, r3
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007aea:	2301      	movs	r3, #1
 8007aec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007aee:	f7fc fa05 	bl	8003efc <HAL_GetTick>
 8007af2:	4602      	mov	r2, r0
 8007af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af6:	1ad3      	subs	r3, r2, r3
 8007af8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d803      	bhi.n	8007b06 <HAL_SPI_TransmitReceive+0x2c6>
 8007afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b04:	d102      	bne.n	8007b0c <HAL_SPI_TransmitReceive+0x2cc>
 8007b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d103      	bne.n	8007b14 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007b0c:	2303      	movs	r3, #3
 8007b0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007b12:	e029      	b.n	8007b68 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d1a2      	bne.n	8007a64 <HAL_SPI_TransmitReceive+0x224>
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d19d      	bne.n	8007a64 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007b2c:	68f8      	ldr	r0, [r7, #12]
 8007b2e:	f000 f8e5 	bl	8007cfc <SPI_EndRxTxTransaction>
 8007b32:	4603      	mov	r3, r0
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d006      	beq.n	8007b46 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2220      	movs	r2, #32
 8007b42:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007b44:	e010      	b.n	8007b68 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d10b      	bne.n	8007b66 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b4e:	2300      	movs	r3, #0
 8007b50:	617b      	str	r3, [r7, #20]
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	68db      	ldr	r3, [r3, #12]
 8007b58:	617b      	str	r3, [r7, #20]
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	617b      	str	r3, [r7, #20]
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	e000      	b.n	8007b68 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007b66:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2200      	movs	r2, #0
 8007b74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007b78:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3730      	adds	r7, #48	; 0x30
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b084      	sub	sp, #16
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	60f8      	str	r0, [r7, #12]
 8007b8c:	60b9      	str	r1, [r7, #8]
 8007b8e:	603b      	str	r3, [r7, #0]
 8007b90:	4613      	mov	r3, r2
 8007b92:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b94:	e04c      	b.n	8007c30 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b9c:	d048      	beq.n	8007c30 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8007b9e:	f7fc f9ad 	bl	8003efc <HAL_GetTick>
 8007ba2:	4602      	mov	r2, r0
 8007ba4:	69bb      	ldr	r3, [r7, #24]
 8007ba6:	1ad3      	subs	r3, r2, r3
 8007ba8:	683a      	ldr	r2, [r7, #0]
 8007baa:	429a      	cmp	r2, r3
 8007bac:	d902      	bls.n	8007bb4 <SPI_WaitFlagStateUntilTimeout+0x30>
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d13d      	bne.n	8007c30 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	685a      	ldr	r2, [r3, #4]
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007bc2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007bcc:	d111      	bne.n	8007bf2 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bd6:	d004      	beq.n	8007be2 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007be0:	d107      	bne.n	8007bf2 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	681a      	ldr	r2, [r3, #0]
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bf0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bfa:	d10f      	bne.n	8007c1c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c0a:	601a      	str	r2, [r3, #0]
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	681a      	ldr	r2, [r3, #0]
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c1a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2200      	movs	r2, #0
 8007c28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007c2c:	2303      	movs	r3, #3
 8007c2e:	e00f      	b.n	8007c50 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	689a      	ldr	r2, [r3, #8]
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	4013      	ands	r3, r2
 8007c3a:	68ba      	ldr	r2, [r7, #8]
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	bf0c      	ite	eq
 8007c40:	2301      	moveq	r3, #1
 8007c42:	2300      	movne	r3, #0
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	461a      	mov	r2, r3
 8007c48:	79fb      	ldrb	r3, [r7, #7]
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d1a3      	bne.n	8007b96 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8007c4e:	2300      	movs	r3, #0
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3710      	adds	r7, #16
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b086      	sub	sp, #24
 8007c5c:	af02      	add	r7, sp, #8
 8007c5e:	60f8      	str	r0, [r7, #12]
 8007c60:	60b9      	str	r1, [r7, #8]
 8007c62:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c6c:	d111      	bne.n	8007c92 <SPI_EndRxTransaction+0x3a>
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	689b      	ldr	r3, [r3, #8]
 8007c72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c76:	d004      	beq.n	8007c82 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c80:	d107      	bne.n	8007c92 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c90:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c9a:	d117      	bne.n	8007ccc <SPI_EndRxTransaction+0x74>
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	689b      	ldr	r3, [r3, #8]
 8007ca0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ca4:	d112      	bne.n	8007ccc <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	9300      	str	r3, [sp, #0]
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	2200      	movs	r2, #0
 8007cae:	2101      	movs	r1, #1
 8007cb0:	68f8      	ldr	r0, [r7, #12]
 8007cb2:	f7ff ff67 	bl	8007b84 <SPI_WaitFlagStateUntilTimeout>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d01a      	beq.n	8007cf2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cc0:	f043 0220 	orr.w	r2, r3, #32
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007cc8:	2303      	movs	r3, #3
 8007cca:	e013      	b.n	8007cf4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	9300      	str	r3, [sp, #0]
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	2180      	movs	r1, #128	; 0x80
 8007cd6:	68f8      	ldr	r0, [r7, #12]
 8007cd8:	f7ff ff54 	bl	8007b84 <SPI_WaitFlagStateUntilTimeout>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d007      	beq.n	8007cf2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ce6:	f043 0220 	orr.w	r2, r3, #32
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007cee:	2303      	movs	r3, #3
 8007cf0:	e000      	b.n	8007cf4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8007cf2:	2300      	movs	r3, #0
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3710      	adds	r7, #16
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}

08007cfc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b086      	sub	sp, #24
 8007d00:	af02      	add	r7, sp, #8
 8007d02:	60f8      	str	r0, [r7, #12]
 8007d04:	60b9      	str	r1, [r7, #8]
 8007d06:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	9300      	str	r3, [sp, #0]
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	2180      	movs	r1, #128	; 0x80
 8007d12:	68f8      	ldr	r0, [r7, #12]
 8007d14:	f7ff ff36 	bl	8007b84 <SPI_WaitFlagStateUntilTimeout>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d007      	beq.n	8007d2e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d22:	f043 0220 	orr.w	r2, r3, #32
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8007d2a:	2303      	movs	r3, #3
 8007d2c:	e000      	b.n	8007d30 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8007d2e:	2300      	movs	r3, #0
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3710      	adds	r7, #16
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b082      	sub	sp, #8
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d101      	bne.n	8007d4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007d46:	2301      	movs	r3, #1
 8007d48:	e01d      	b.n	8007d86 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d106      	bne.n	8007d64 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f7fb fee6 	bl	8003b30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2202      	movs	r2, #2
 8007d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	3304      	adds	r3, #4
 8007d74:	4619      	mov	r1, r3
 8007d76:	4610      	mov	r0, r2
 8007d78:	f000 f8d0 	bl	8007f1c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d84:	2300      	movs	r3, #0
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3708      	adds	r7, #8
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}
	...

08007d90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b084      	sub	sp, #16
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	60f8      	str	r0, [r7, #12]
 8007d98:	60b9      	str	r1, [r7, #8]
 8007d9a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007da2:	2b01      	cmp	r3, #1
 8007da4:	d101      	bne.n	8007daa <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007da6:	2302      	movs	r3, #2
 8007da8:	e0b4      	b.n	8007f14 <HAL_TIM_PWM_ConfigChannel+0x184>
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2201      	movs	r2, #1
 8007dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2202      	movs	r2, #2
 8007db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2b0c      	cmp	r3, #12
 8007dbe:	f200 809f 	bhi.w	8007f00 <HAL_TIM_PWM_ConfigChannel+0x170>
 8007dc2:	a201      	add	r2, pc, #4	; (adr r2, 8007dc8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dc8:	08007dfd 	.word	0x08007dfd
 8007dcc:	08007f01 	.word	0x08007f01
 8007dd0:	08007f01 	.word	0x08007f01
 8007dd4:	08007f01 	.word	0x08007f01
 8007dd8:	08007e3d 	.word	0x08007e3d
 8007ddc:	08007f01 	.word	0x08007f01
 8007de0:	08007f01 	.word	0x08007f01
 8007de4:	08007f01 	.word	0x08007f01
 8007de8:	08007e7f 	.word	0x08007e7f
 8007dec:	08007f01 	.word	0x08007f01
 8007df0:	08007f01 	.word	0x08007f01
 8007df4:	08007f01 	.word	0x08007f01
 8007df8:	08007ebf 	.word	0x08007ebf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	68b9      	ldr	r1, [r7, #8]
 8007e02:	4618      	mov	r0, r3
 8007e04:	f000 f8ec 	bl	8007fe0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	699a      	ldr	r2, [r3, #24]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f042 0208 	orr.w	r2, r2, #8
 8007e16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	699a      	ldr	r2, [r3, #24]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f022 0204 	bic.w	r2, r2, #4
 8007e26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	6999      	ldr	r1, [r3, #24]
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	691a      	ldr	r2, [r3, #16]
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	430a      	orrs	r2, r1
 8007e38:	619a      	str	r2, [r3, #24]
      break;
 8007e3a:	e062      	b.n	8007f02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	68b9      	ldr	r1, [r7, #8]
 8007e42:	4618      	mov	r0, r3
 8007e44:	f000 f932 	bl	80080ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	699a      	ldr	r2, [r3, #24]
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	699a      	ldr	r2, [r3, #24]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	6999      	ldr	r1, [r3, #24]
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	691b      	ldr	r3, [r3, #16]
 8007e72:	021a      	lsls	r2, r3, #8
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	430a      	orrs	r2, r1
 8007e7a:	619a      	str	r2, [r3, #24]
      break;
 8007e7c:	e041      	b.n	8007f02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	68b9      	ldr	r1, [r7, #8]
 8007e84:	4618      	mov	r0, r3
 8007e86:	f000 f97b 	bl	8008180 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	69da      	ldr	r2, [r3, #28]
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f042 0208 	orr.w	r2, r2, #8
 8007e98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	69da      	ldr	r2, [r3, #28]
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f022 0204 	bic.w	r2, r2, #4
 8007ea8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	69d9      	ldr	r1, [r3, #28]
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	691a      	ldr	r2, [r3, #16]
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	430a      	orrs	r2, r1
 8007eba:	61da      	str	r2, [r3, #28]
      break;
 8007ebc:	e021      	b.n	8007f02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	68b9      	ldr	r1, [r7, #8]
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f000 f9c5 	bl	8008254 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	69da      	ldr	r2, [r3, #28]
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ed8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	69da      	ldr	r2, [r3, #28]
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ee8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	69d9      	ldr	r1, [r3, #28]
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	691b      	ldr	r3, [r3, #16]
 8007ef4:	021a      	lsls	r2, r3, #8
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	430a      	orrs	r2, r1
 8007efc:	61da      	str	r2, [r3, #28]
      break;
 8007efe:	e000      	b.n	8007f02 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8007f00:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2201      	movs	r2, #1
 8007f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f12:	2300      	movs	r3, #0
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3710      	adds	r7, #16
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b085      	sub	sp, #20
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	4a29      	ldr	r2, [pc, #164]	; (8007fd4 <TIM_Base_SetConfig+0xb8>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d00b      	beq.n	8007f4c <TIM_Base_SetConfig+0x30>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f3a:	d007      	beq.n	8007f4c <TIM_Base_SetConfig+0x30>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	4a26      	ldr	r2, [pc, #152]	; (8007fd8 <TIM_Base_SetConfig+0xbc>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d003      	beq.n	8007f4c <TIM_Base_SetConfig+0x30>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	4a25      	ldr	r2, [pc, #148]	; (8007fdc <TIM_Base_SetConfig+0xc0>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d108      	bne.n	8007f5e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	68fa      	ldr	r2, [r7, #12]
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	4a1c      	ldr	r2, [pc, #112]	; (8007fd4 <TIM_Base_SetConfig+0xb8>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d00b      	beq.n	8007f7e <TIM_Base_SetConfig+0x62>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f6c:	d007      	beq.n	8007f7e <TIM_Base_SetConfig+0x62>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	4a19      	ldr	r2, [pc, #100]	; (8007fd8 <TIM_Base_SetConfig+0xbc>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d003      	beq.n	8007f7e <TIM_Base_SetConfig+0x62>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	4a18      	ldr	r2, [pc, #96]	; (8007fdc <TIM_Base_SetConfig+0xc0>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d108      	bne.n	8007f90 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	68db      	ldr	r3, [r3, #12]
 8007f8a:	68fa      	ldr	r2, [r7, #12]
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	695b      	ldr	r3, [r3, #20]
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	68fa      	ldr	r2, [r7, #12]
 8007fa2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	689a      	ldr	r2, [r3, #8]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	681a      	ldr	r2, [r3, #0]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	4a07      	ldr	r2, [pc, #28]	; (8007fd4 <TIM_Base_SetConfig+0xb8>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d103      	bne.n	8007fc4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	691a      	ldr	r2, [r3, #16]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	615a      	str	r2, [r3, #20]
}
 8007fca:	bf00      	nop
 8007fcc:	3714      	adds	r7, #20
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bc80      	pop	{r7}
 8007fd2:	4770      	bx	lr
 8007fd4:	40012c00 	.word	0x40012c00
 8007fd8:	40000400 	.word	0x40000400
 8007fdc:	40000800 	.word	0x40000800

08007fe0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b087      	sub	sp, #28
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6a1b      	ldr	r3, [r3, #32]
 8007fee:	f023 0201 	bic.w	r2, r3, #1
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6a1b      	ldr	r3, [r3, #32]
 8007ffa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	699b      	ldr	r3, [r3, #24]
 8008006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800800e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f023 0303 	bic.w	r3, r3, #3
 8008016:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	68fa      	ldr	r2, [r7, #12]
 800801e:	4313      	orrs	r3, r2
 8008020:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	f023 0302 	bic.w	r3, r3, #2
 8008028:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	689b      	ldr	r3, [r3, #8]
 800802e:	697a      	ldr	r2, [r7, #20]
 8008030:	4313      	orrs	r3, r2
 8008032:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	4a1c      	ldr	r2, [pc, #112]	; (80080a8 <TIM_OC1_SetConfig+0xc8>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d10c      	bne.n	8008056 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	f023 0308 	bic.w	r3, r3, #8
 8008042:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	68db      	ldr	r3, [r3, #12]
 8008048:	697a      	ldr	r2, [r7, #20]
 800804a:	4313      	orrs	r3, r2
 800804c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	f023 0304 	bic.w	r3, r3, #4
 8008054:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	4a13      	ldr	r2, [pc, #76]	; (80080a8 <TIM_OC1_SetConfig+0xc8>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d111      	bne.n	8008082 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008064:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800806c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	695b      	ldr	r3, [r3, #20]
 8008072:	693a      	ldr	r2, [r7, #16]
 8008074:	4313      	orrs	r3, r2
 8008076:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	699b      	ldr	r3, [r3, #24]
 800807c:	693a      	ldr	r2, [r7, #16]
 800807e:	4313      	orrs	r3, r2
 8008080:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	693a      	ldr	r2, [r7, #16]
 8008086:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	68fa      	ldr	r2, [r7, #12]
 800808c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	685a      	ldr	r2, [r3, #4]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	697a      	ldr	r2, [r7, #20]
 800809a:	621a      	str	r2, [r3, #32]
}
 800809c:	bf00      	nop
 800809e:	371c      	adds	r7, #28
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bc80      	pop	{r7}
 80080a4:	4770      	bx	lr
 80080a6:	bf00      	nop
 80080a8:	40012c00 	.word	0x40012c00

080080ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b087      	sub	sp, #28
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6a1b      	ldr	r3, [r3, #32]
 80080ba:	f023 0210 	bic.w	r2, r3, #16
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6a1b      	ldr	r3, [r3, #32]
 80080c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	699b      	ldr	r3, [r3, #24]
 80080d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	021b      	lsls	r3, r3, #8
 80080ea:	68fa      	ldr	r2, [r7, #12]
 80080ec:	4313      	orrs	r3, r2
 80080ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	f023 0320 	bic.w	r3, r3, #32
 80080f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	689b      	ldr	r3, [r3, #8]
 80080fc:	011b      	lsls	r3, r3, #4
 80080fe:	697a      	ldr	r2, [r7, #20]
 8008100:	4313      	orrs	r3, r2
 8008102:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	4a1d      	ldr	r2, [pc, #116]	; (800817c <TIM_OC2_SetConfig+0xd0>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d10d      	bne.n	8008128 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008112:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	68db      	ldr	r3, [r3, #12]
 8008118:	011b      	lsls	r3, r3, #4
 800811a:	697a      	ldr	r2, [r7, #20]
 800811c:	4313      	orrs	r3, r2
 800811e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008126:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	4a14      	ldr	r2, [pc, #80]	; (800817c <TIM_OC2_SetConfig+0xd0>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d113      	bne.n	8008158 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008136:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800813e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	695b      	ldr	r3, [r3, #20]
 8008144:	009b      	lsls	r3, r3, #2
 8008146:	693a      	ldr	r2, [r7, #16]
 8008148:	4313      	orrs	r3, r2
 800814a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	699b      	ldr	r3, [r3, #24]
 8008150:	009b      	lsls	r3, r3, #2
 8008152:	693a      	ldr	r2, [r7, #16]
 8008154:	4313      	orrs	r3, r2
 8008156:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	693a      	ldr	r2, [r7, #16]
 800815c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	68fa      	ldr	r2, [r7, #12]
 8008162:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	685a      	ldr	r2, [r3, #4]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	697a      	ldr	r2, [r7, #20]
 8008170:	621a      	str	r2, [r3, #32]
}
 8008172:	bf00      	nop
 8008174:	371c      	adds	r7, #28
 8008176:	46bd      	mov	sp, r7
 8008178:	bc80      	pop	{r7}
 800817a:	4770      	bx	lr
 800817c:	40012c00 	.word	0x40012c00

08008180 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008180:	b480      	push	{r7}
 8008182:	b087      	sub	sp, #28
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6a1b      	ldr	r3, [r3, #32]
 800818e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6a1b      	ldr	r3, [r3, #32]
 800819a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	69db      	ldr	r3, [r3, #28]
 80081a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f023 0303 	bic.w	r3, r3, #3
 80081b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	68fa      	ldr	r2, [r7, #12]
 80081be:	4313      	orrs	r3, r2
 80081c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80081c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	021b      	lsls	r3, r3, #8
 80081d0:	697a      	ldr	r2, [r7, #20]
 80081d2:	4313      	orrs	r3, r2
 80081d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	4a1d      	ldr	r2, [pc, #116]	; (8008250 <TIM_OC3_SetConfig+0xd0>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d10d      	bne.n	80081fa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80081e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	68db      	ldr	r3, [r3, #12]
 80081ea:	021b      	lsls	r3, r3, #8
 80081ec:	697a      	ldr	r2, [r7, #20]
 80081ee:	4313      	orrs	r3, r2
 80081f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80081f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	4a14      	ldr	r2, [pc, #80]	; (8008250 <TIM_OC3_SetConfig+0xd0>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d113      	bne.n	800822a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008208:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008210:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	695b      	ldr	r3, [r3, #20]
 8008216:	011b      	lsls	r3, r3, #4
 8008218:	693a      	ldr	r2, [r7, #16]
 800821a:	4313      	orrs	r3, r2
 800821c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	699b      	ldr	r3, [r3, #24]
 8008222:	011b      	lsls	r3, r3, #4
 8008224:	693a      	ldr	r2, [r7, #16]
 8008226:	4313      	orrs	r3, r2
 8008228:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	693a      	ldr	r2, [r7, #16]
 800822e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	68fa      	ldr	r2, [r7, #12]
 8008234:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	685a      	ldr	r2, [r3, #4]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	697a      	ldr	r2, [r7, #20]
 8008242:	621a      	str	r2, [r3, #32]
}
 8008244:	bf00      	nop
 8008246:	371c      	adds	r7, #28
 8008248:	46bd      	mov	sp, r7
 800824a:	bc80      	pop	{r7}
 800824c:	4770      	bx	lr
 800824e:	bf00      	nop
 8008250:	40012c00 	.word	0x40012c00

08008254 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008254:	b480      	push	{r7}
 8008256:	b087      	sub	sp, #28
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6a1b      	ldr	r3, [r3, #32]
 8008262:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6a1b      	ldr	r3, [r3, #32]
 800826e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	69db      	ldr	r3, [r3, #28]
 800827a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008282:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800828a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	021b      	lsls	r3, r3, #8
 8008292:	68fa      	ldr	r2, [r7, #12]
 8008294:	4313      	orrs	r3, r2
 8008296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800829e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	689b      	ldr	r3, [r3, #8]
 80082a4:	031b      	lsls	r3, r3, #12
 80082a6:	693a      	ldr	r2, [r7, #16]
 80082a8:	4313      	orrs	r3, r2
 80082aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	4a0f      	ldr	r2, [pc, #60]	; (80082ec <TIM_OC4_SetConfig+0x98>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d109      	bne.n	80082c8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80082ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	695b      	ldr	r3, [r3, #20]
 80082c0:	019b      	lsls	r3, r3, #6
 80082c2:	697a      	ldr	r2, [r7, #20]
 80082c4:	4313      	orrs	r3, r2
 80082c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	697a      	ldr	r2, [r7, #20]
 80082cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	68fa      	ldr	r2, [r7, #12]
 80082d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	685a      	ldr	r2, [r3, #4]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	693a      	ldr	r2, [r7, #16]
 80082e0:	621a      	str	r2, [r3, #32]
}
 80082e2:	bf00      	nop
 80082e4:	371c      	adds	r7, #28
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bc80      	pop	{r7}
 80082ea:	4770      	bx	lr
 80082ec:	40012c00 	.word	0x40012c00

080082f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b085      	sub	sp, #20
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008300:	2b01      	cmp	r3, #1
 8008302:	d101      	bne.n	8008308 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008304:	2302      	movs	r3, #2
 8008306:	e032      	b.n	800836e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2201      	movs	r2, #1
 800830c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2202      	movs	r2, #2
 8008314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	689b      	ldr	r3, [r3, #8]
 8008326:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800832e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	68fa      	ldr	r2, [r7, #12]
 8008336:	4313      	orrs	r3, r2
 8008338:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008340:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	68ba      	ldr	r2, [r7, #8]
 8008348:	4313      	orrs	r3, r2
 800834a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	68fa      	ldr	r2, [r7, #12]
 8008352:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	68ba      	ldr	r2, [r7, #8]
 800835a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2201      	movs	r2, #1
 8008360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2200      	movs	r2, #0
 8008368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800836c:	2300      	movs	r3, #0
}
 800836e:	4618      	mov	r0, r3
 8008370:	3714      	adds	r7, #20
 8008372:	46bd      	mov	sp, r7
 8008374:	bc80      	pop	{r7}
 8008376:	4770      	bx	lr

08008378 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d101      	bne.n	800838a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008386:	2301      	movs	r3, #1
 8008388:	e03f      	b.n	800840a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008390:	b2db      	uxtb	r3, r3
 8008392:	2b00      	cmp	r3, #0
 8008394:	d106      	bne.n	80083a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2200      	movs	r2, #0
 800839a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f7fb fc16 	bl	8003bd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2224      	movs	r2, #36	; 0x24
 80083a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	68da      	ldr	r2, [r3, #12]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80083ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f000 f90b 	bl	80085d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	691a      	ldr	r2, [r3, #16]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80083d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	695a      	ldr	r2, [r3, #20]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80083e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	68da      	ldr	r2, [r3, #12]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80083f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2200      	movs	r2, #0
 80083f6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2220      	movs	r2, #32
 80083fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2220      	movs	r2, #32
 8008404:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008408:	2300      	movs	r3, #0
}
 800840a:	4618      	mov	r0, r3
 800840c:	3708      	adds	r7, #8
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}

08008412 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008412:	b580      	push	{r7, lr}
 8008414:	b088      	sub	sp, #32
 8008416:	af02      	add	r7, sp, #8
 8008418:	60f8      	str	r0, [r7, #12]
 800841a:	60b9      	str	r1, [r7, #8]
 800841c:	603b      	str	r3, [r7, #0]
 800841e:	4613      	mov	r3, r2
 8008420:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8008422:	2300      	movs	r3, #0
 8008424:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800842c:	b2db      	uxtb	r3, r3
 800842e:	2b20      	cmp	r3, #32
 8008430:	f040 8083 	bne.w	800853a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d002      	beq.n	8008440 <HAL_UART_Transmit+0x2e>
 800843a:	88fb      	ldrh	r3, [r7, #6]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d101      	bne.n	8008444 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8008440:	2301      	movs	r3, #1
 8008442:	e07b      	b.n	800853c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800844a:	2b01      	cmp	r3, #1
 800844c:	d101      	bne.n	8008452 <HAL_UART_Transmit+0x40>
 800844e:	2302      	movs	r3, #2
 8008450:	e074      	b.n	800853c <HAL_UART_Transmit+0x12a>
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2201      	movs	r2, #1
 8008456:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2200      	movs	r2, #0
 800845e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	2221      	movs	r2, #33	; 0x21
 8008464:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008468:	f7fb fd48 	bl	8003efc <HAL_GetTick>
 800846c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	88fa      	ldrh	r2, [r7, #6]
 8008472:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	88fa      	ldrh	r2, [r7, #6]
 8008478:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800847a:	e042      	b.n	8008502 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008480:	b29b      	uxth	r3, r3
 8008482:	3b01      	subs	r3, #1
 8008484:	b29a      	uxth	r2, r3
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	689b      	ldr	r3, [r3, #8]
 800848e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008492:	d122      	bne.n	80084da <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	9300      	str	r3, [sp, #0]
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	2200      	movs	r2, #0
 800849c:	2180      	movs	r1, #128	; 0x80
 800849e:	68f8      	ldr	r0, [r7, #12]
 80084a0:	f000 f850 	bl	8008544 <UART_WaitOnFlagUntilTimeout>
 80084a4:	4603      	mov	r3, r0
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d001      	beq.n	80084ae <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80084aa:	2303      	movs	r3, #3
 80084ac:	e046      	b.n	800853c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	881b      	ldrh	r3, [r3, #0]
 80084b6:	461a      	mov	r2, r3
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80084c0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	691b      	ldr	r3, [r3, #16]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d103      	bne.n	80084d2 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	3302      	adds	r3, #2
 80084ce:	60bb      	str	r3, [r7, #8]
 80084d0:	e017      	b.n	8008502 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	3301      	adds	r3, #1
 80084d6:	60bb      	str	r3, [r7, #8]
 80084d8:	e013      	b.n	8008502 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	9300      	str	r3, [sp, #0]
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	2200      	movs	r2, #0
 80084e2:	2180      	movs	r1, #128	; 0x80
 80084e4:	68f8      	ldr	r0, [r7, #12]
 80084e6:	f000 f82d 	bl	8008544 <UART_WaitOnFlagUntilTimeout>
 80084ea:	4603      	mov	r3, r0
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d001      	beq.n	80084f4 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80084f0:	2303      	movs	r3, #3
 80084f2:	e023      	b.n	800853c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	1c5a      	adds	r2, r3, #1
 80084f8:	60ba      	str	r2, [r7, #8]
 80084fa:	781a      	ldrb	r2, [r3, #0]
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008506:	b29b      	uxth	r3, r3
 8008508:	2b00      	cmp	r3, #0
 800850a:	d1b7      	bne.n	800847c <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	9300      	str	r3, [sp, #0]
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	2200      	movs	r2, #0
 8008514:	2140      	movs	r1, #64	; 0x40
 8008516:	68f8      	ldr	r0, [r7, #12]
 8008518:	f000 f814 	bl	8008544 <UART_WaitOnFlagUntilTimeout>
 800851c:	4603      	mov	r3, r0
 800851e:	2b00      	cmp	r3, #0
 8008520:	d001      	beq.n	8008526 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8008522:	2303      	movs	r3, #3
 8008524:	e00a      	b.n	800853c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2220      	movs	r2, #32
 800852a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2200      	movs	r2, #0
 8008532:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8008536:	2300      	movs	r3, #0
 8008538:	e000      	b.n	800853c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800853a:	2302      	movs	r3, #2
  }
}
 800853c:	4618      	mov	r0, r3
 800853e:	3718      	adds	r7, #24
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b084      	sub	sp, #16
 8008548:	af00      	add	r7, sp, #0
 800854a:	60f8      	str	r0, [r7, #12]
 800854c:	60b9      	str	r1, [r7, #8]
 800854e:	603b      	str	r3, [r7, #0]
 8008550:	4613      	mov	r3, r2
 8008552:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008554:	e02c      	b.n	80085b0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008556:	69bb      	ldr	r3, [r7, #24]
 8008558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800855c:	d028      	beq.n	80085b0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800855e:	69bb      	ldr	r3, [r7, #24]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d007      	beq.n	8008574 <UART_WaitOnFlagUntilTimeout+0x30>
 8008564:	f7fb fcca 	bl	8003efc <HAL_GetTick>
 8008568:	4602      	mov	r2, r0
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	1ad3      	subs	r3, r2, r3
 800856e:	69ba      	ldr	r2, [r7, #24]
 8008570:	429a      	cmp	r2, r3
 8008572:	d21d      	bcs.n	80085b0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	68da      	ldr	r2, [r3, #12]
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008582:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	695a      	ldr	r2, [r3, #20]
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f022 0201 	bic.w	r2, r2, #1
 8008592:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2220      	movs	r2, #32
 8008598:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2220      	movs	r2, #32
 80085a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2200      	movs	r2, #0
 80085a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80085ac:	2303      	movs	r3, #3
 80085ae:	e00f      	b.n	80085d0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	4013      	ands	r3, r2
 80085ba:	68ba      	ldr	r2, [r7, #8]
 80085bc:	429a      	cmp	r2, r3
 80085be:	bf0c      	ite	eq
 80085c0:	2301      	moveq	r3, #1
 80085c2:	2300      	movne	r3, #0
 80085c4:	b2db      	uxtb	r3, r3
 80085c6:	461a      	mov	r2, r3
 80085c8:	79fb      	ldrb	r3, [r7, #7]
 80085ca:	429a      	cmp	r2, r3
 80085cc:	d0c3      	beq.n	8008556 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80085ce:	2300      	movs	r3, #0
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3710      	adds	r7, #16
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b084      	sub	sp, #16
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	691b      	ldr	r3, [r3, #16]
 80085e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	68da      	ldr	r2, [r3, #12]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	430a      	orrs	r2, r1
 80085f4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	689a      	ldr	r2, [r3, #8]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	691b      	ldr	r3, [r3, #16]
 80085fe:	431a      	orrs	r2, r3
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	695b      	ldr	r3, [r3, #20]
 8008604:	4313      	orrs	r3, r2
 8008606:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	68db      	ldr	r3, [r3, #12]
 800860e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008612:	f023 030c 	bic.w	r3, r3, #12
 8008616:	687a      	ldr	r2, [r7, #4]
 8008618:	6812      	ldr	r2, [r2, #0]
 800861a:	68f9      	ldr	r1, [r7, #12]
 800861c:	430b      	orrs	r3, r1
 800861e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	695b      	ldr	r3, [r3, #20]
 8008626:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	699a      	ldr	r2, [r3, #24]
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	430a      	orrs	r2, r1
 8008634:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4a52      	ldr	r2, [pc, #328]	; (8008784 <UART_SetConfig+0x1ac>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d14e      	bne.n	80086de <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008640:	f7fe fd78 	bl	8007134 <HAL_RCC_GetPCLK2Freq>
 8008644:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008646:	68ba      	ldr	r2, [r7, #8]
 8008648:	4613      	mov	r3, r2
 800864a:	009b      	lsls	r3, r3, #2
 800864c:	4413      	add	r3, r2
 800864e:	009a      	lsls	r2, r3, #2
 8008650:	441a      	add	r2, r3
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	009b      	lsls	r3, r3, #2
 8008658:	fbb2 f3f3 	udiv	r3, r2, r3
 800865c:	4a4a      	ldr	r2, [pc, #296]	; (8008788 <UART_SetConfig+0x1b0>)
 800865e:	fba2 2303 	umull	r2, r3, r2, r3
 8008662:	095b      	lsrs	r3, r3, #5
 8008664:	0119      	lsls	r1, r3, #4
 8008666:	68ba      	ldr	r2, [r7, #8]
 8008668:	4613      	mov	r3, r2
 800866a:	009b      	lsls	r3, r3, #2
 800866c:	4413      	add	r3, r2
 800866e:	009a      	lsls	r2, r3, #2
 8008670:	441a      	add	r2, r3
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	009b      	lsls	r3, r3, #2
 8008678:	fbb2 f2f3 	udiv	r2, r2, r3
 800867c:	4b42      	ldr	r3, [pc, #264]	; (8008788 <UART_SetConfig+0x1b0>)
 800867e:	fba3 0302 	umull	r0, r3, r3, r2
 8008682:	095b      	lsrs	r3, r3, #5
 8008684:	2064      	movs	r0, #100	; 0x64
 8008686:	fb00 f303 	mul.w	r3, r0, r3
 800868a:	1ad3      	subs	r3, r2, r3
 800868c:	011b      	lsls	r3, r3, #4
 800868e:	3332      	adds	r3, #50	; 0x32
 8008690:	4a3d      	ldr	r2, [pc, #244]	; (8008788 <UART_SetConfig+0x1b0>)
 8008692:	fba2 2303 	umull	r2, r3, r2, r3
 8008696:	095b      	lsrs	r3, r3, #5
 8008698:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800869c:	4419      	add	r1, r3
 800869e:	68ba      	ldr	r2, [r7, #8]
 80086a0:	4613      	mov	r3, r2
 80086a2:	009b      	lsls	r3, r3, #2
 80086a4:	4413      	add	r3, r2
 80086a6:	009a      	lsls	r2, r3, #2
 80086a8:	441a      	add	r2, r3
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	009b      	lsls	r3, r3, #2
 80086b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80086b4:	4b34      	ldr	r3, [pc, #208]	; (8008788 <UART_SetConfig+0x1b0>)
 80086b6:	fba3 0302 	umull	r0, r3, r3, r2
 80086ba:	095b      	lsrs	r3, r3, #5
 80086bc:	2064      	movs	r0, #100	; 0x64
 80086be:	fb00 f303 	mul.w	r3, r0, r3
 80086c2:	1ad3      	subs	r3, r2, r3
 80086c4:	011b      	lsls	r3, r3, #4
 80086c6:	3332      	adds	r3, #50	; 0x32
 80086c8:	4a2f      	ldr	r2, [pc, #188]	; (8008788 <UART_SetConfig+0x1b0>)
 80086ca:	fba2 2303 	umull	r2, r3, r2, r3
 80086ce:	095b      	lsrs	r3, r3, #5
 80086d0:	f003 020f 	and.w	r2, r3, #15
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	440a      	add	r2, r1
 80086da:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80086dc:	e04d      	b.n	800877a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80086de:	f7fe fd15 	bl	800710c <HAL_RCC_GetPCLK1Freq>
 80086e2:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80086e4:	68ba      	ldr	r2, [r7, #8]
 80086e6:	4613      	mov	r3, r2
 80086e8:	009b      	lsls	r3, r3, #2
 80086ea:	4413      	add	r3, r2
 80086ec:	009a      	lsls	r2, r3, #2
 80086ee:	441a      	add	r2, r3
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80086fa:	4a23      	ldr	r2, [pc, #140]	; (8008788 <UART_SetConfig+0x1b0>)
 80086fc:	fba2 2303 	umull	r2, r3, r2, r3
 8008700:	095b      	lsrs	r3, r3, #5
 8008702:	0119      	lsls	r1, r3, #4
 8008704:	68ba      	ldr	r2, [r7, #8]
 8008706:	4613      	mov	r3, r2
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	4413      	add	r3, r2
 800870c:	009a      	lsls	r2, r3, #2
 800870e:	441a      	add	r2, r3
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	009b      	lsls	r3, r3, #2
 8008716:	fbb2 f2f3 	udiv	r2, r2, r3
 800871a:	4b1b      	ldr	r3, [pc, #108]	; (8008788 <UART_SetConfig+0x1b0>)
 800871c:	fba3 0302 	umull	r0, r3, r3, r2
 8008720:	095b      	lsrs	r3, r3, #5
 8008722:	2064      	movs	r0, #100	; 0x64
 8008724:	fb00 f303 	mul.w	r3, r0, r3
 8008728:	1ad3      	subs	r3, r2, r3
 800872a:	011b      	lsls	r3, r3, #4
 800872c:	3332      	adds	r3, #50	; 0x32
 800872e:	4a16      	ldr	r2, [pc, #88]	; (8008788 <UART_SetConfig+0x1b0>)
 8008730:	fba2 2303 	umull	r2, r3, r2, r3
 8008734:	095b      	lsrs	r3, r3, #5
 8008736:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800873a:	4419      	add	r1, r3
 800873c:	68ba      	ldr	r2, [r7, #8]
 800873e:	4613      	mov	r3, r2
 8008740:	009b      	lsls	r3, r3, #2
 8008742:	4413      	add	r3, r2
 8008744:	009a      	lsls	r2, r3, #2
 8008746:	441a      	add	r2, r3
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	009b      	lsls	r3, r3, #2
 800874e:	fbb2 f2f3 	udiv	r2, r2, r3
 8008752:	4b0d      	ldr	r3, [pc, #52]	; (8008788 <UART_SetConfig+0x1b0>)
 8008754:	fba3 0302 	umull	r0, r3, r3, r2
 8008758:	095b      	lsrs	r3, r3, #5
 800875a:	2064      	movs	r0, #100	; 0x64
 800875c:	fb00 f303 	mul.w	r3, r0, r3
 8008760:	1ad3      	subs	r3, r2, r3
 8008762:	011b      	lsls	r3, r3, #4
 8008764:	3332      	adds	r3, #50	; 0x32
 8008766:	4a08      	ldr	r2, [pc, #32]	; (8008788 <UART_SetConfig+0x1b0>)
 8008768:	fba2 2303 	umull	r2, r3, r2, r3
 800876c:	095b      	lsrs	r3, r3, #5
 800876e:	f003 020f 	and.w	r2, r3, #15
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	440a      	add	r2, r1
 8008778:	609a      	str	r2, [r3, #8]
}
 800877a:	bf00      	nop
 800877c:	3710      	adds	r7, #16
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}
 8008782:	bf00      	nop
 8008784:	40013800 	.word	0x40013800
 8008788:	51eb851f 	.word	0x51eb851f

0800878c <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800878c:	b084      	sub	sp, #16
 800878e:	b480      	push	{r7}
 8008790:	b083      	sub	sp, #12
 8008792:	af00      	add	r7, sp, #0
 8008794:	6078      	str	r0, [r7, #4]
 8008796:	f107 0014 	add.w	r0, r7, #20
 800879a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800879e:	2300      	movs	r3, #0
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	370c      	adds	r7, #12
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bc80      	pop	{r7}
 80087a8:	b004      	add	sp, #16
 80087aa:	4770      	bx	lr

080087ac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b085      	sub	sp, #20
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80087b4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80087b8:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80087c0:	b29a      	uxth	r2, r3
 80087c2:	89fb      	ldrh	r3, [r7, #14]
 80087c4:	4313      	orrs	r3, r2
 80087c6:	b29a      	uxth	r2, r3
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80087ce:	2300      	movs	r3, #0
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3714      	adds	r7, #20
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bc80      	pop	{r7}
 80087d8:	4770      	bx	lr

080087da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80087da:	b480      	push	{r7}
 80087dc:	b085      	sub	sp, #20
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80087e2:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80087e6:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80087ee:	b29b      	uxth	r3, r3
 80087f0:	b21a      	sxth	r2, r3
 80087f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80087f6:	43db      	mvns	r3, r3
 80087f8:	b21b      	sxth	r3, r3
 80087fa:	4013      	ands	r3, r2
 80087fc:	b21b      	sxth	r3, r3
 80087fe:	b29a      	uxth	r2, r3
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008806:	2300      	movs	r3, #0
}
 8008808:	4618      	mov	r0, r3
 800880a:	3714      	adds	r7, #20
 800880c:	46bd      	mov	sp, r7
 800880e:	bc80      	pop	{r7}
 8008810:	4770      	bx	lr

08008812 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8008812:	b480      	push	{r7}
 8008814:	b083      	sub	sp, #12
 8008816:	af00      	add	r7, sp, #0
 8008818:	6078      	str	r0, [r7, #4]
 800881a:	460b      	mov	r3, r1
 800881c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800881e:	2300      	movs	r3, #0
}
 8008820:	4618      	mov	r0, r3
 8008822:	370c      	adds	r7, #12
 8008824:	46bd      	mov	sp, r7
 8008826:	bc80      	pop	{r7}
 8008828:	4770      	bx	lr

0800882a <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800882a:	b084      	sub	sp, #16
 800882c:	b580      	push	{r7, lr}
 800882e:	b082      	sub	sp, #8
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	f107 0014 	add.w	r0, r7, #20
 8008838:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2201      	movs	r2, #1
 8008840:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2200      	movs	r2, #0
 8008848:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2200      	movs	r2, #0
 8008850:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2200      	movs	r2, #0
 8008858:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f7ff ffa5 	bl	80087ac <USB_EnableGlobalInt>

  return HAL_OK;
 8008862:	2300      	movs	r3, #0
}
 8008864:	4618      	mov	r0, r3
 8008866:	3708      	adds	r7, #8
 8008868:	46bd      	mov	sp, r7
 800886a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800886e:	b004      	add	sp, #16
 8008870:	4770      	bx	lr
	...

08008874 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008874:	b490      	push	{r4, r7}
 8008876:	b084      	sub	sp, #16
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800887e:	2300      	movs	r3, #0
 8008880:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	781b      	ldrb	r3, [r3, #0]
 8008888:	009b      	lsls	r3, r3, #2
 800888a:	4413      	add	r3, r2
 800888c:	881b      	ldrh	r3, [r3, #0]
 800888e:	b29b      	uxth	r3, r3
 8008890:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8008894:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008898:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	78db      	ldrb	r3, [r3, #3]
 800889e:	2b03      	cmp	r3, #3
 80088a0:	d819      	bhi.n	80088d6 <USB_ActivateEndpoint+0x62>
 80088a2:	a201      	add	r2, pc, #4	; (adr r2, 80088a8 <USB_ActivateEndpoint+0x34>)
 80088a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088a8:	080088b9 	.word	0x080088b9
 80088ac:	080088cd 	.word	0x080088cd
 80088b0:	080088dd 	.word	0x080088dd
 80088b4:	080088c3 	.word	0x080088c3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80088b8:	89bb      	ldrh	r3, [r7, #12]
 80088ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80088be:	81bb      	strh	r3, [r7, #12]
      break;
 80088c0:	e00d      	b.n	80088de <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80088c2:	89bb      	ldrh	r3, [r7, #12]
 80088c4:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80088c8:	81bb      	strh	r3, [r7, #12]
      break;
 80088ca:	e008      	b.n	80088de <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80088cc:	89bb      	ldrh	r3, [r7, #12]
 80088ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80088d2:	81bb      	strh	r3, [r7, #12]
      break;
 80088d4:	e003      	b.n	80088de <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 80088d6:	2301      	movs	r3, #1
 80088d8:	73fb      	strb	r3, [r7, #15]
      break;
 80088da:	e000      	b.n	80088de <USB_ActivateEndpoint+0x6a>
      break;
 80088dc:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 80088de:	687a      	ldr	r2, [r7, #4]
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	781b      	ldrb	r3, [r3, #0]
 80088e4:	009b      	lsls	r3, r3, #2
 80088e6:	441a      	add	r2, r3
 80088e8:	89bb      	ldrh	r3, [r7, #12]
 80088ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088fa:	b29b      	uxth	r3, r3
 80088fc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80088fe:	687a      	ldr	r2, [r7, #4]
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	781b      	ldrb	r3, [r3, #0]
 8008904:	009b      	lsls	r3, r3, #2
 8008906:	4413      	add	r3, r2
 8008908:	881b      	ldrh	r3, [r3, #0]
 800890a:	b29b      	uxth	r3, r3
 800890c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008910:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008914:	b29a      	uxth	r2, r3
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	781b      	ldrb	r3, [r3, #0]
 800891a:	b29b      	uxth	r3, r3
 800891c:	4313      	orrs	r3, r2
 800891e:	b29c      	uxth	r4, r3
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	781b      	ldrb	r3, [r3, #0]
 8008926:	009b      	lsls	r3, r3, #2
 8008928:	441a      	add	r2, r3
 800892a:	4b8a      	ldr	r3, [pc, #552]	; (8008b54 <USB_ActivateEndpoint+0x2e0>)
 800892c:	4323      	orrs	r3, r4
 800892e:	b29b      	uxth	r3, r3
 8008930:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	7b1b      	ldrb	r3, [r3, #12]
 8008936:	2b00      	cmp	r3, #0
 8008938:	f040 8112 	bne.w	8008b60 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	785b      	ldrb	r3, [r3, #1]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d067      	beq.n	8008a14 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008944:	687c      	ldr	r4, [r7, #4]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800894c:	b29b      	uxth	r3, r3
 800894e:	441c      	add	r4, r3
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	781b      	ldrb	r3, [r3, #0]
 8008954:	011b      	lsls	r3, r3, #4
 8008956:	4423      	add	r3, r4
 8008958:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800895c:	461c      	mov	r4, r3
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	88db      	ldrh	r3, [r3, #6]
 8008962:	085b      	lsrs	r3, r3, #1
 8008964:	b29b      	uxth	r3, r3
 8008966:	005b      	lsls	r3, r3, #1
 8008968:	b29b      	uxth	r3, r3
 800896a:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800896c:	687a      	ldr	r2, [r7, #4]
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	781b      	ldrb	r3, [r3, #0]
 8008972:	009b      	lsls	r3, r3, #2
 8008974:	4413      	add	r3, r2
 8008976:	881b      	ldrh	r3, [r3, #0]
 8008978:	b29c      	uxth	r4, r3
 800897a:	4623      	mov	r3, r4
 800897c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008980:	2b00      	cmp	r3, #0
 8008982:	d014      	beq.n	80089ae <USB_ActivateEndpoint+0x13a>
 8008984:	687a      	ldr	r2, [r7, #4]
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	781b      	ldrb	r3, [r3, #0]
 800898a:	009b      	lsls	r3, r3, #2
 800898c:	4413      	add	r3, r2
 800898e:	881b      	ldrh	r3, [r3, #0]
 8008990:	b29b      	uxth	r3, r3
 8008992:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800899a:	b29c      	uxth	r4, r3
 800899c:	687a      	ldr	r2, [r7, #4]
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	781b      	ldrb	r3, [r3, #0]
 80089a2:	009b      	lsls	r3, r3, #2
 80089a4:	441a      	add	r2, r3
 80089a6:	4b6c      	ldr	r3, [pc, #432]	; (8008b58 <USB_ActivateEndpoint+0x2e4>)
 80089a8:	4323      	orrs	r3, r4
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	78db      	ldrb	r3, [r3, #3]
 80089b2:	2b01      	cmp	r3, #1
 80089b4:	d018      	beq.n	80089e8 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80089b6:	687a      	ldr	r2, [r7, #4]
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	781b      	ldrb	r3, [r3, #0]
 80089bc:	009b      	lsls	r3, r3, #2
 80089be:	4413      	add	r3, r2
 80089c0:	881b      	ldrh	r3, [r3, #0]
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089cc:	b29c      	uxth	r4, r3
 80089ce:	f084 0320 	eor.w	r3, r4, #32
 80089d2:	b29c      	uxth	r4, r3
 80089d4:	687a      	ldr	r2, [r7, #4]
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	781b      	ldrb	r3, [r3, #0]
 80089da:	009b      	lsls	r3, r3, #2
 80089dc:	441a      	add	r2, r3
 80089de:	4b5d      	ldr	r3, [pc, #372]	; (8008b54 <USB_ActivateEndpoint+0x2e0>)
 80089e0:	4323      	orrs	r3, r4
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	8013      	strh	r3, [r2, #0]
 80089e6:	e22b      	b.n	8008e40 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80089e8:	687a      	ldr	r2, [r7, #4]
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	781b      	ldrb	r3, [r3, #0]
 80089ee:	009b      	lsls	r3, r3, #2
 80089f0:	4413      	add	r3, r2
 80089f2:	881b      	ldrh	r3, [r3, #0]
 80089f4:	b29b      	uxth	r3, r3
 80089f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089fe:	b29c      	uxth	r4, r3
 8008a00:	687a      	ldr	r2, [r7, #4]
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	781b      	ldrb	r3, [r3, #0]
 8008a06:	009b      	lsls	r3, r3, #2
 8008a08:	441a      	add	r2, r3
 8008a0a:	4b52      	ldr	r3, [pc, #328]	; (8008b54 <USB_ActivateEndpoint+0x2e0>)
 8008a0c:	4323      	orrs	r3, r4
 8008a0e:	b29b      	uxth	r3, r3
 8008a10:	8013      	strh	r3, [r2, #0]
 8008a12:	e215      	b.n	8008e40 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008a14:	687c      	ldr	r4, [r7, #4]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	441c      	add	r4, r3
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	781b      	ldrb	r3, [r3, #0]
 8008a24:	011b      	lsls	r3, r3, #4
 8008a26:	4423      	add	r3, r4
 8008a28:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008a2c:	461c      	mov	r4, r3
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	88db      	ldrh	r3, [r3, #6]
 8008a32:	085b      	lsrs	r3, r3, #1
 8008a34:	b29b      	uxth	r3, r3
 8008a36:	005b      	lsls	r3, r3, #1
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008a3c:	687c      	ldr	r4, [r7, #4]
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a44:	b29b      	uxth	r3, r3
 8008a46:	441c      	add	r4, r3
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	781b      	ldrb	r3, [r3, #0]
 8008a4c:	011b      	lsls	r3, r3, #4
 8008a4e:	4423      	add	r3, r4
 8008a50:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008a54:	461c      	mov	r4, r3
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	691b      	ldr	r3, [r3, #16]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d10e      	bne.n	8008a7c <USB_ActivateEndpoint+0x208>
 8008a5e:	8823      	ldrh	r3, [r4, #0]
 8008a60:	b29b      	uxth	r3, r3
 8008a62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	8023      	strh	r3, [r4, #0]
 8008a6a:	8823      	ldrh	r3, [r4, #0]
 8008a6c:	b29b      	uxth	r3, r3
 8008a6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a76:	b29b      	uxth	r3, r3
 8008a78:	8023      	strh	r3, [r4, #0]
 8008a7a:	e02d      	b.n	8008ad8 <USB_ActivateEndpoint+0x264>
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	691b      	ldr	r3, [r3, #16]
 8008a80:	2b3e      	cmp	r3, #62	; 0x3e
 8008a82:	d812      	bhi.n	8008aaa <USB_ActivateEndpoint+0x236>
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	691b      	ldr	r3, [r3, #16]
 8008a88:	085b      	lsrs	r3, r3, #1
 8008a8a:	60bb      	str	r3, [r7, #8]
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	691b      	ldr	r3, [r3, #16]
 8008a90:	f003 0301 	and.w	r3, r3, #1
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d002      	beq.n	8008a9e <USB_ActivateEndpoint+0x22a>
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	60bb      	str	r3, [r7, #8]
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	b29b      	uxth	r3, r3
 8008aa2:	029b      	lsls	r3, r3, #10
 8008aa4:	b29b      	uxth	r3, r3
 8008aa6:	8023      	strh	r3, [r4, #0]
 8008aa8:	e016      	b.n	8008ad8 <USB_ActivateEndpoint+0x264>
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	691b      	ldr	r3, [r3, #16]
 8008aae:	095b      	lsrs	r3, r3, #5
 8008ab0:	60bb      	str	r3, [r7, #8]
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	691b      	ldr	r3, [r3, #16]
 8008ab6:	f003 031f 	and.w	r3, r3, #31
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d102      	bne.n	8008ac4 <USB_ActivateEndpoint+0x250>
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	3b01      	subs	r3, #1
 8008ac2:	60bb      	str	r3, [r7, #8]
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	b29b      	uxth	r3, r3
 8008ac8:	029b      	lsls	r3, r3, #10
 8008aca:	b29b      	uxth	r3, r3
 8008acc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ad0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ad4:	b29b      	uxth	r3, r3
 8008ad6:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008ad8:	687a      	ldr	r2, [r7, #4]
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	781b      	ldrb	r3, [r3, #0]
 8008ade:	009b      	lsls	r3, r3, #2
 8008ae0:	4413      	add	r3, r2
 8008ae2:	881b      	ldrh	r3, [r3, #0]
 8008ae4:	b29c      	uxth	r4, r3
 8008ae6:	4623      	mov	r3, r4
 8008ae8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d014      	beq.n	8008b1a <USB_ActivateEndpoint+0x2a6>
 8008af0:	687a      	ldr	r2, [r7, #4]
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	781b      	ldrb	r3, [r3, #0]
 8008af6:	009b      	lsls	r3, r3, #2
 8008af8:	4413      	add	r3, r2
 8008afa:	881b      	ldrh	r3, [r3, #0]
 8008afc:	b29b      	uxth	r3, r3
 8008afe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b06:	b29c      	uxth	r4, r3
 8008b08:	687a      	ldr	r2, [r7, #4]
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	781b      	ldrb	r3, [r3, #0]
 8008b0e:	009b      	lsls	r3, r3, #2
 8008b10:	441a      	add	r2, r3
 8008b12:	4b12      	ldr	r3, [pc, #72]	; (8008b5c <USB_ActivateEndpoint+0x2e8>)
 8008b14:	4323      	orrs	r3, r4
 8008b16:	b29b      	uxth	r3, r3
 8008b18:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008b1a:	687a      	ldr	r2, [r7, #4]
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	781b      	ldrb	r3, [r3, #0]
 8008b20:	009b      	lsls	r3, r3, #2
 8008b22:	4413      	add	r3, r2
 8008b24:	881b      	ldrh	r3, [r3, #0]
 8008b26:	b29b      	uxth	r3, r3
 8008b28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b30:	b29c      	uxth	r4, r3
 8008b32:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8008b36:	b29c      	uxth	r4, r3
 8008b38:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8008b3c:	b29c      	uxth	r4, r3
 8008b3e:	687a      	ldr	r2, [r7, #4]
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	781b      	ldrb	r3, [r3, #0]
 8008b44:	009b      	lsls	r3, r3, #2
 8008b46:	441a      	add	r2, r3
 8008b48:	4b02      	ldr	r3, [pc, #8]	; (8008b54 <USB_ActivateEndpoint+0x2e0>)
 8008b4a:	4323      	orrs	r3, r4
 8008b4c:	b29b      	uxth	r3, r3
 8008b4e:	8013      	strh	r3, [r2, #0]
 8008b50:	e176      	b.n	8008e40 <USB_ActivateEndpoint+0x5cc>
 8008b52:	bf00      	nop
 8008b54:	ffff8080 	.word	0xffff8080
 8008b58:	ffff80c0 	.word	0xffff80c0
 8008b5c:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8008b60:	687a      	ldr	r2, [r7, #4]
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	781b      	ldrb	r3, [r3, #0]
 8008b66:	009b      	lsls	r3, r3, #2
 8008b68:	4413      	add	r3, r2
 8008b6a:	881b      	ldrh	r3, [r3, #0]
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b76:	b29c      	uxth	r4, r3
 8008b78:	687a      	ldr	r2, [r7, #4]
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	781b      	ldrb	r3, [r3, #0]
 8008b7e:	009b      	lsls	r3, r3, #2
 8008b80:	441a      	add	r2, r3
 8008b82:	4b96      	ldr	r3, [pc, #600]	; (8008ddc <USB_ActivateEndpoint+0x568>)
 8008b84:	4323      	orrs	r3, r4
 8008b86:	b29b      	uxth	r3, r3
 8008b88:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008b8a:	687c      	ldr	r4, [r7, #4]
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b92:	b29b      	uxth	r3, r3
 8008b94:	441c      	add	r4, r3
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	781b      	ldrb	r3, [r3, #0]
 8008b9a:	011b      	lsls	r3, r3, #4
 8008b9c:	4423      	add	r3, r4
 8008b9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ba2:	461c      	mov	r4, r3
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	891b      	ldrh	r3, [r3, #8]
 8008ba8:	085b      	lsrs	r3, r3, #1
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	005b      	lsls	r3, r3, #1
 8008bae:	b29b      	uxth	r3, r3
 8008bb0:	8023      	strh	r3, [r4, #0]
 8008bb2:	687c      	ldr	r4, [r7, #4]
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008bba:	b29b      	uxth	r3, r3
 8008bbc:	441c      	add	r4, r3
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	781b      	ldrb	r3, [r3, #0]
 8008bc2:	011b      	lsls	r3, r3, #4
 8008bc4:	4423      	add	r3, r4
 8008bc6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008bca:	461c      	mov	r4, r3
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	895b      	ldrh	r3, [r3, #10]
 8008bd0:	085b      	lsrs	r3, r3, #1
 8008bd2:	b29b      	uxth	r3, r3
 8008bd4:	005b      	lsls	r3, r3, #1
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	785b      	ldrb	r3, [r3, #1]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	f040 8088 	bne.w	8008cf4 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008be4:	687a      	ldr	r2, [r7, #4]
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	781b      	ldrb	r3, [r3, #0]
 8008bea:	009b      	lsls	r3, r3, #2
 8008bec:	4413      	add	r3, r2
 8008bee:	881b      	ldrh	r3, [r3, #0]
 8008bf0:	b29c      	uxth	r4, r3
 8008bf2:	4623      	mov	r3, r4
 8008bf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d014      	beq.n	8008c26 <USB_ActivateEndpoint+0x3b2>
 8008bfc:	687a      	ldr	r2, [r7, #4]
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	781b      	ldrb	r3, [r3, #0]
 8008c02:	009b      	lsls	r3, r3, #2
 8008c04:	4413      	add	r3, r2
 8008c06:	881b      	ldrh	r3, [r3, #0]
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c12:	b29c      	uxth	r4, r3
 8008c14:	687a      	ldr	r2, [r7, #4]
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	009b      	lsls	r3, r3, #2
 8008c1c:	441a      	add	r2, r3
 8008c1e:	4b70      	ldr	r3, [pc, #448]	; (8008de0 <USB_ActivateEndpoint+0x56c>)
 8008c20:	4323      	orrs	r3, r4
 8008c22:	b29b      	uxth	r3, r3
 8008c24:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008c26:	687a      	ldr	r2, [r7, #4]
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	781b      	ldrb	r3, [r3, #0]
 8008c2c:	009b      	lsls	r3, r3, #2
 8008c2e:	4413      	add	r3, r2
 8008c30:	881b      	ldrh	r3, [r3, #0]
 8008c32:	b29c      	uxth	r4, r3
 8008c34:	4623      	mov	r3, r4
 8008c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d014      	beq.n	8008c68 <USB_ActivateEndpoint+0x3f4>
 8008c3e:	687a      	ldr	r2, [r7, #4]
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	781b      	ldrb	r3, [r3, #0]
 8008c44:	009b      	lsls	r3, r3, #2
 8008c46:	4413      	add	r3, r2
 8008c48:	881b      	ldrh	r3, [r3, #0]
 8008c4a:	b29b      	uxth	r3, r3
 8008c4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c54:	b29c      	uxth	r4, r3
 8008c56:	687a      	ldr	r2, [r7, #4]
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	781b      	ldrb	r3, [r3, #0]
 8008c5c:	009b      	lsls	r3, r3, #2
 8008c5e:	441a      	add	r2, r3
 8008c60:	4b60      	ldr	r3, [pc, #384]	; (8008de4 <USB_ActivateEndpoint+0x570>)
 8008c62:	4323      	orrs	r3, r4
 8008c64:	b29b      	uxth	r3, r3
 8008c66:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8008c68:	687a      	ldr	r2, [r7, #4]
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	781b      	ldrb	r3, [r3, #0]
 8008c6e:	009b      	lsls	r3, r3, #2
 8008c70:	4413      	add	r3, r2
 8008c72:	881b      	ldrh	r3, [r3, #0]
 8008c74:	b29b      	uxth	r3, r3
 8008c76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c7e:	b29c      	uxth	r4, r3
 8008c80:	687a      	ldr	r2, [r7, #4]
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	781b      	ldrb	r3, [r3, #0]
 8008c86:	009b      	lsls	r3, r3, #2
 8008c88:	441a      	add	r2, r3
 8008c8a:	4b56      	ldr	r3, [pc, #344]	; (8008de4 <USB_ActivateEndpoint+0x570>)
 8008c8c:	4323      	orrs	r3, r4
 8008c8e:	b29b      	uxth	r3, r3
 8008c90:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	781b      	ldrb	r3, [r3, #0]
 8008c98:	009b      	lsls	r3, r3, #2
 8008c9a:	4413      	add	r3, r2
 8008c9c:	881b      	ldrh	r3, [r3, #0]
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ca4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ca8:	b29c      	uxth	r4, r3
 8008caa:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8008cae:	b29c      	uxth	r4, r3
 8008cb0:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8008cb4:	b29c      	uxth	r4, r3
 8008cb6:	687a      	ldr	r2, [r7, #4]
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	781b      	ldrb	r3, [r3, #0]
 8008cbc:	009b      	lsls	r3, r3, #2
 8008cbe:	441a      	add	r2, r3
 8008cc0:	4b49      	ldr	r3, [pc, #292]	; (8008de8 <USB_ActivateEndpoint+0x574>)
 8008cc2:	4323      	orrs	r3, r4
 8008cc4:	b29b      	uxth	r3, r3
 8008cc6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008cc8:	687a      	ldr	r2, [r7, #4]
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	781b      	ldrb	r3, [r3, #0]
 8008cce:	009b      	lsls	r3, r3, #2
 8008cd0:	4413      	add	r3, r2
 8008cd2:	881b      	ldrh	r3, [r3, #0]
 8008cd4:	b29b      	uxth	r3, r3
 8008cd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cde:	b29c      	uxth	r4, r3
 8008ce0:	687a      	ldr	r2, [r7, #4]
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	781b      	ldrb	r3, [r3, #0]
 8008ce6:	009b      	lsls	r3, r3, #2
 8008ce8:	441a      	add	r2, r3
 8008cea:	4b3f      	ldr	r3, [pc, #252]	; (8008de8 <USB_ActivateEndpoint+0x574>)
 8008cec:	4323      	orrs	r3, r4
 8008cee:	b29b      	uxth	r3, r3
 8008cf0:	8013      	strh	r3, [r2, #0]
 8008cf2:	e0a5      	b.n	8008e40 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	781b      	ldrb	r3, [r3, #0]
 8008cfa:	009b      	lsls	r3, r3, #2
 8008cfc:	4413      	add	r3, r2
 8008cfe:	881b      	ldrh	r3, [r3, #0]
 8008d00:	b29c      	uxth	r4, r3
 8008d02:	4623      	mov	r3, r4
 8008d04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d014      	beq.n	8008d36 <USB_ActivateEndpoint+0x4c2>
 8008d0c:	687a      	ldr	r2, [r7, #4]
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	781b      	ldrb	r3, [r3, #0]
 8008d12:	009b      	lsls	r3, r3, #2
 8008d14:	4413      	add	r3, r2
 8008d16:	881b      	ldrh	r3, [r3, #0]
 8008d18:	b29b      	uxth	r3, r3
 8008d1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d22:	b29c      	uxth	r4, r3
 8008d24:	687a      	ldr	r2, [r7, #4]
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	781b      	ldrb	r3, [r3, #0]
 8008d2a:	009b      	lsls	r3, r3, #2
 8008d2c:	441a      	add	r2, r3
 8008d2e:	4b2c      	ldr	r3, [pc, #176]	; (8008de0 <USB_ActivateEndpoint+0x56c>)
 8008d30:	4323      	orrs	r3, r4
 8008d32:	b29b      	uxth	r3, r3
 8008d34:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008d36:	687a      	ldr	r2, [r7, #4]
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	781b      	ldrb	r3, [r3, #0]
 8008d3c:	009b      	lsls	r3, r3, #2
 8008d3e:	4413      	add	r3, r2
 8008d40:	881b      	ldrh	r3, [r3, #0]
 8008d42:	b29c      	uxth	r4, r3
 8008d44:	4623      	mov	r3, r4
 8008d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d014      	beq.n	8008d78 <USB_ActivateEndpoint+0x504>
 8008d4e:	687a      	ldr	r2, [r7, #4]
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	781b      	ldrb	r3, [r3, #0]
 8008d54:	009b      	lsls	r3, r3, #2
 8008d56:	4413      	add	r3, r2
 8008d58:	881b      	ldrh	r3, [r3, #0]
 8008d5a:	b29b      	uxth	r3, r3
 8008d5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d64:	b29c      	uxth	r4, r3
 8008d66:	687a      	ldr	r2, [r7, #4]
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	441a      	add	r2, r3
 8008d70:	4b1c      	ldr	r3, [pc, #112]	; (8008de4 <USB_ActivateEndpoint+0x570>)
 8008d72:	4323      	orrs	r3, r4
 8008d74:	b29b      	uxth	r3, r3
 8008d76:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008d78:	687a      	ldr	r2, [r7, #4]
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	781b      	ldrb	r3, [r3, #0]
 8008d7e:	009b      	lsls	r3, r3, #2
 8008d80:	4413      	add	r3, r2
 8008d82:	881b      	ldrh	r3, [r3, #0]
 8008d84:	b29b      	uxth	r3, r3
 8008d86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d8e:	b29c      	uxth	r4, r3
 8008d90:	687a      	ldr	r2, [r7, #4]
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	781b      	ldrb	r3, [r3, #0]
 8008d96:	009b      	lsls	r3, r3, #2
 8008d98:	441a      	add	r2, r3
 8008d9a:	4b11      	ldr	r3, [pc, #68]	; (8008de0 <USB_ActivateEndpoint+0x56c>)
 8008d9c:	4323      	orrs	r3, r4
 8008d9e:	b29b      	uxth	r3, r3
 8008da0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	78db      	ldrb	r3, [r3, #3]
 8008da6:	2b01      	cmp	r3, #1
 8008da8:	d020      	beq.n	8008dec <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008daa:	687a      	ldr	r2, [r7, #4]
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	009b      	lsls	r3, r3, #2
 8008db2:	4413      	add	r3, r2
 8008db4:	881b      	ldrh	r3, [r3, #0]
 8008db6:	b29b      	uxth	r3, r3
 8008db8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008dc0:	b29c      	uxth	r4, r3
 8008dc2:	f084 0320 	eor.w	r3, r4, #32
 8008dc6:	b29c      	uxth	r4, r3
 8008dc8:	687a      	ldr	r2, [r7, #4]
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	781b      	ldrb	r3, [r3, #0]
 8008dce:	009b      	lsls	r3, r3, #2
 8008dd0:	441a      	add	r2, r3
 8008dd2:	4b05      	ldr	r3, [pc, #20]	; (8008de8 <USB_ActivateEndpoint+0x574>)
 8008dd4:	4323      	orrs	r3, r4
 8008dd6:	b29b      	uxth	r3, r3
 8008dd8:	8013      	strh	r3, [r2, #0]
 8008dda:	e01c      	b.n	8008e16 <USB_ActivateEndpoint+0x5a2>
 8008ddc:	ffff8180 	.word	0xffff8180
 8008de0:	ffffc080 	.word	0xffffc080
 8008de4:	ffff80c0 	.word	0xffff80c0
 8008de8:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008dec:	687a      	ldr	r2, [r7, #4]
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	781b      	ldrb	r3, [r3, #0]
 8008df2:	009b      	lsls	r3, r3, #2
 8008df4:	4413      	add	r3, r2
 8008df6:	881b      	ldrh	r3, [r3, #0]
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e02:	b29c      	uxth	r4, r3
 8008e04:	687a      	ldr	r2, [r7, #4]
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	781b      	ldrb	r3, [r3, #0]
 8008e0a:	009b      	lsls	r3, r3, #2
 8008e0c:	441a      	add	r2, r3
 8008e0e:	4b0f      	ldr	r3, [pc, #60]	; (8008e4c <USB_ActivateEndpoint+0x5d8>)
 8008e10:	4323      	orrs	r3, r4
 8008e12:	b29b      	uxth	r3, r3
 8008e14:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	781b      	ldrb	r3, [r3, #0]
 8008e1c:	009b      	lsls	r3, r3, #2
 8008e1e:	4413      	add	r3, r2
 8008e20:	881b      	ldrh	r3, [r3, #0]
 8008e22:	b29b      	uxth	r3, r3
 8008e24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e2c:	b29c      	uxth	r4, r3
 8008e2e:	687a      	ldr	r2, [r7, #4]
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	781b      	ldrb	r3, [r3, #0]
 8008e34:	009b      	lsls	r3, r3, #2
 8008e36:	441a      	add	r2, r3
 8008e38:	4b04      	ldr	r3, [pc, #16]	; (8008e4c <USB_ActivateEndpoint+0x5d8>)
 8008e3a:	4323      	orrs	r3, r4
 8008e3c:	b29b      	uxth	r3, r3
 8008e3e:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8008e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3710      	adds	r7, #16
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bc90      	pop	{r4, r7}
 8008e4a:	4770      	bx	lr
 8008e4c:	ffff8080 	.word	0xffff8080

08008e50 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008e50:	b490      	push	{r4, r7}
 8008e52:	b082      	sub	sp, #8
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
 8008e58:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	7b1b      	ldrb	r3, [r3, #12]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d171      	bne.n	8008f46 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	785b      	ldrb	r3, [r3, #1]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d036      	beq.n	8008ed8 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008e6a:	687a      	ldr	r2, [r7, #4]
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	781b      	ldrb	r3, [r3, #0]
 8008e70:	009b      	lsls	r3, r3, #2
 8008e72:	4413      	add	r3, r2
 8008e74:	881b      	ldrh	r3, [r3, #0]
 8008e76:	b29c      	uxth	r4, r3
 8008e78:	4623      	mov	r3, r4
 8008e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d014      	beq.n	8008eac <USB_DeactivateEndpoint+0x5c>
 8008e82:	687a      	ldr	r2, [r7, #4]
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	781b      	ldrb	r3, [r3, #0]
 8008e88:	009b      	lsls	r3, r3, #2
 8008e8a:	4413      	add	r3, r2
 8008e8c:	881b      	ldrh	r3, [r3, #0]
 8008e8e:	b29b      	uxth	r3, r3
 8008e90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e98:	b29c      	uxth	r4, r3
 8008e9a:	687a      	ldr	r2, [r7, #4]
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	781b      	ldrb	r3, [r3, #0]
 8008ea0:	009b      	lsls	r3, r3, #2
 8008ea2:	441a      	add	r2, r3
 8008ea4:	4b6b      	ldr	r3, [pc, #428]	; (8009054 <USB_DeactivateEndpoint+0x204>)
 8008ea6:	4323      	orrs	r3, r4
 8008ea8:	b29b      	uxth	r3, r3
 8008eaa:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008eac:	687a      	ldr	r2, [r7, #4]
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	781b      	ldrb	r3, [r3, #0]
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	4413      	add	r3, r2
 8008eb6:	881b      	ldrh	r3, [r3, #0]
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ebe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ec2:	b29c      	uxth	r4, r3
 8008ec4:	687a      	ldr	r2, [r7, #4]
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	781b      	ldrb	r3, [r3, #0]
 8008eca:	009b      	lsls	r3, r3, #2
 8008ecc:	441a      	add	r2, r3
 8008ece:	4b62      	ldr	r3, [pc, #392]	; (8009058 <USB_DeactivateEndpoint+0x208>)
 8008ed0:	4323      	orrs	r3, r4
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	8013      	strh	r3, [r2, #0]
 8008ed6:	e144      	b.n	8009162 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008ed8:	687a      	ldr	r2, [r7, #4]
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	781b      	ldrb	r3, [r3, #0]
 8008ede:	009b      	lsls	r3, r3, #2
 8008ee0:	4413      	add	r3, r2
 8008ee2:	881b      	ldrh	r3, [r3, #0]
 8008ee4:	b29c      	uxth	r4, r3
 8008ee6:	4623      	mov	r3, r4
 8008ee8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d014      	beq.n	8008f1a <USB_DeactivateEndpoint+0xca>
 8008ef0:	687a      	ldr	r2, [r7, #4]
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	781b      	ldrb	r3, [r3, #0]
 8008ef6:	009b      	lsls	r3, r3, #2
 8008ef8:	4413      	add	r3, r2
 8008efa:	881b      	ldrh	r3, [r3, #0]
 8008efc:	b29b      	uxth	r3, r3
 8008efe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f06:	b29c      	uxth	r4, r3
 8008f08:	687a      	ldr	r2, [r7, #4]
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	781b      	ldrb	r3, [r3, #0]
 8008f0e:	009b      	lsls	r3, r3, #2
 8008f10:	441a      	add	r2, r3
 8008f12:	4b52      	ldr	r3, [pc, #328]	; (800905c <USB_DeactivateEndpoint+0x20c>)
 8008f14:	4323      	orrs	r3, r4
 8008f16:	b29b      	uxth	r3, r3
 8008f18:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008f1a:	687a      	ldr	r2, [r7, #4]
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	781b      	ldrb	r3, [r3, #0]
 8008f20:	009b      	lsls	r3, r3, #2
 8008f22:	4413      	add	r3, r2
 8008f24:	881b      	ldrh	r3, [r3, #0]
 8008f26:	b29b      	uxth	r3, r3
 8008f28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f30:	b29c      	uxth	r4, r3
 8008f32:	687a      	ldr	r2, [r7, #4]
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	781b      	ldrb	r3, [r3, #0]
 8008f38:	009b      	lsls	r3, r3, #2
 8008f3a:	441a      	add	r2, r3
 8008f3c:	4b46      	ldr	r3, [pc, #280]	; (8009058 <USB_DeactivateEndpoint+0x208>)
 8008f3e:	4323      	orrs	r3, r4
 8008f40:	b29b      	uxth	r3, r3
 8008f42:	8013      	strh	r3, [r2, #0]
 8008f44:	e10d      	b.n	8009162 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	785b      	ldrb	r3, [r3, #1]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	f040 8088 	bne.w	8009060 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008f50:	687a      	ldr	r2, [r7, #4]
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	781b      	ldrb	r3, [r3, #0]
 8008f56:	009b      	lsls	r3, r3, #2
 8008f58:	4413      	add	r3, r2
 8008f5a:	881b      	ldrh	r3, [r3, #0]
 8008f5c:	b29c      	uxth	r4, r3
 8008f5e:	4623      	mov	r3, r4
 8008f60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d014      	beq.n	8008f92 <USB_DeactivateEndpoint+0x142>
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	781b      	ldrb	r3, [r3, #0]
 8008f6e:	009b      	lsls	r3, r3, #2
 8008f70:	4413      	add	r3, r2
 8008f72:	881b      	ldrh	r3, [r3, #0]
 8008f74:	b29b      	uxth	r3, r3
 8008f76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f7e:	b29c      	uxth	r4, r3
 8008f80:	687a      	ldr	r2, [r7, #4]
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	781b      	ldrb	r3, [r3, #0]
 8008f86:	009b      	lsls	r3, r3, #2
 8008f88:	441a      	add	r2, r3
 8008f8a:	4b34      	ldr	r3, [pc, #208]	; (800905c <USB_DeactivateEndpoint+0x20c>)
 8008f8c:	4323      	orrs	r3, r4
 8008f8e:	b29b      	uxth	r3, r3
 8008f90:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008f92:	687a      	ldr	r2, [r7, #4]
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	781b      	ldrb	r3, [r3, #0]
 8008f98:	009b      	lsls	r3, r3, #2
 8008f9a:	4413      	add	r3, r2
 8008f9c:	881b      	ldrh	r3, [r3, #0]
 8008f9e:	b29c      	uxth	r4, r3
 8008fa0:	4623      	mov	r3, r4
 8008fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d014      	beq.n	8008fd4 <USB_DeactivateEndpoint+0x184>
 8008faa:	687a      	ldr	r2, [r7, #4]
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	781b      	ldrb	r3, [r3, #0]
 8008fb0:	009b      	lsls	r3, r3, #2
 8008fb2:	4413      	add	r3, r2
 8008fb4:	881b      	ldrh	r3, [r3, #0]
 8008fb6:	b29b      	uxth	r3, r3
 8008fb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fc0:	b29c      	uxth	r4, r3
 8008fc2:	687a      	ldr	r2, [r7, #4]
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	781b      	ldrb	r3, [r3, #0]
 8008fc8:	009b      	lsls	r3, r3, #2
 8008fca:	441a      	add	r2, r3
 8008fcc:	4b21      	ldr	r3, [pc, #132]	; (8009054 <USB_DeactivateEndpoint+0x204>)
 8008fce:	4323      	orrs	r3, r4
 8008fd0:	b29b      	uxth	r3, r3
 8008fd2:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008fd4:	687a      	ldr	r2, [r7, #4]
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	781b      	ldrb	r3, [r3, #0]
 8008fda:	009b      	lsls	r3, r3, #2
 8008fdc:	4413      	add	r3, r2
 8008fde:	881b      	ldrh	r3, [r3, #0]
 8008fe0:	b29b      	uxth	r3, r3
 8008fe2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fea:	b29c      	uxth	r4, r3
 8008fec:	687a      	ldr	r2, [r7, #4]
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	781b      	ldrb	r3, [r3, #0]
 8008ff2:	009b      	lsls	r3, r3, #2
 8008ff4:	441a      	add	r2, r3
 8008ff6:	4b17      	ldr	r3, [pc, #92]	; (8009054 <USB_DeactivateEndpoint+0x204>)
 8008ff8:	4323      	orrs	r3, r4
 8008ffa:	b29b      	uxth	r3, r3
 8008ffc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008ffe:	687a      	ldr	r2, [r7, #4]
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	781b      	ldrb	r3, [r3, #0]
 8009004:	009b      	lsls	r3, r3, #2
 8009006:	4413      	add	r3, r2
 8009008:	881b      	ldrh	r3, [r3, #0]
 800900a:	b29b      	uxth	r3, r3
 800900c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009010:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009014:	b29c      	uxth	r4, r3
 8009016:	687a      	ldr	r2, [r7, #4]
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	781b      	ldrb	r3, [r3, #0]
 800901c:	009b      	lsls	r3, r3, #2
 800901e:	441a      	add	r2, r3
 8009020:	4b0d      	ldr	r3, [pc, #52]	; (8009058 <USB_DeactivateEndpoint+0x208>)
 8009022:	4323      	orrs	r3, r4
 8009024:	b29b      	uxth	r3, r3
 8009026:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009028:	687a      	ldr	r2, [r7, #4]
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	781b      	ldrb	r3, [r3, #0]
 800902e:	009b      	lsls	r3, r3, #2
 8009030:	4413      	add	r3, r2
 8009032:	881b      	ldrh	r3, [r3, #0]
 8009034:	b29b      	uxth	r3, r3
 8009036:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800903a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800903e:	b29c      	uxth	r4, r3
 8009040:	687a      	ldr	r2, [r7, #4]
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	781b      	ldrb	r3, [r3, #0]
 8009046:	009b      	lsls	r3, r3, #2
 8009048:	441a      	add	r2, r3
 800904a:	4b03      	ldr	r3, [pc, #12]	; (8009058 <USB_DeactivateEndpoint+0x208>)
 800904c:	4323      	orrs	r3, r4
 800904e:	b29b      	uxth	r3, r3
 8009050:	8013      	strh	r3, [r2, #0]
 8009052:	e086      	b.n	8009162 <USB_DeactivateEndpoint+0x312>
 8009054:	ffff80c0 	.word	0xffff80c0
 8009058:	ffff8080 	.word	0xffff8080
 800905c:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009060:	687a      	ldr	r2, [r7, #4]
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	781b      	ldrb	r3, [r3, #0]
 8009066:	009b      	lsls	r3, r3, #2
 8009068:	4413      	add	r3, r2
 800906a:	881b      	ldrh	r3, [r3, #0]
 800906c:	b29c      	uxth	r4, r3
 800906e:	4623      	mov	r3, r4
 8009070:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009074:	2b00      	cmp	r3, #0
 8009076:	d014      	beq.n	80090a2 <USB_DeactivateEndpoint+0x252>
 8009078:	687a      	ldr	r2, [r7, #4]
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	781b      	ldrb	r3, [r3, #0]
 800907e:	009b      	lsls	r3, r3, #2
 8009080:	4413      	add	r3, r2
 8009082:	881b      	ldrh	r3, [r3, #0]
 8009084:	b29b      	uxth	r3, r3
 8009086:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800908a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800908e:	b29c      	uxth	r4, r3
 8009090:	687a      	ldr	r2, [r7, #4]
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	781b      	ldrb	r3, [r3, #0]
 8009096:	009b      	lsls	r3, r3, #2
 8009098:	441a      	add	r2, r3
 800909a:	4b35      	ldr	r3, [pc, #212]	; (8009170 <USB_DeactivateEndpoint+0x320>)
 800909c:	4323      	orrs	r3, r4
 800909e:	b29b      	uxth	r3, r3
 80090a0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80090a2:	687a      	ldr	r2, [r7, #4]
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	781b      	ldrb	r3, [r3, #0]
 80090a8:	009b      	lsls	r3, r3, #2
 80090aa:	4413      	add	r3, r2
 80090ac:	881b      	ldrh	r3, [r3, #0]
 80090ae:	b29c      	uxth	r4, r3
 80090b0:	4623      	mov	r3, r4
 80090b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d014      	beq.n	80090e4 <USB_DeactivateEndpoint+0x294>
 80090ba:	687a      	ldr	r2, [r7, #4]
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	781b      	ldrb	r3, [r3, #0]
 80090c0:	009b      	lsls	r3, r3, #2
 80090c2:	4413      	add	r3, r2
 80090c4:	881b      	ldrh	r3, [r3, #0]
 80090c6:	b29b      	uxth	r3, r3
 80090c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090d0:	b29c      	uxth	r4, r3
 80090d2:	687a      	ldr	r2, [r7, #4]
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	781b      	ldrb	r3, [r3, #0]
 80090d8:	009b      	lsls	r3, r3, #2
 80090da:	441a      	add	r2, r3
 80090dc:	4b25      	ldr	r3, [pc, #148]	; (8009174 <USB_DeactivateEndpoint+0x324>)
 80090de:	4323      	orrs	r3, r4
 80090e0:	b29b      	uxth	r3, r3
 80090e2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80090e4:	687a      	ldr	r2, [r7, #4]
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	781b      	ldrb	r3, [r3, #0]
 80090ea:	009b      	lsls	r3, r3, #2
 80090ec:	4413      	add	r3, r2
 80090ee:	881b      	ldrh	r3, [r3, #0]
 80090f0:	b29b      	uxth	r3, r3
 80090f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090fa:	b29c      	uxth	r4, r3
 80090fc:	687a      	ldr	r2, [r7, #4]
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	781b      	ldrb	r3, [r3, #0]
 8009102:	009b      	lsls	r3, r3, #2
 8009104:	441a      	add	r2, r3
 8009106:	4b1a      	ldr	r3, [pc, #104]	; (8009170 <USB_DeactivateEndpoint+0x320>)
 8009108:	4323      	orrs	r3, r4
 800910a:	b29b      	uxth	r3, r3
 800910c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800910e:	687a      	ldr	r2, [r7, #4]
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	781b      	ldrb	r3, [r3, #0]
 8009114:	009b      	lsls	r3, r3, #2
 8009116:	4413      	add	r3, r2
 8009118:	881b      	ldrh	r3, [r3, #0]
 800911a:	b29b      	uxth	r3, r3
 800911c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009120:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009124:	b29c      	uxth	r4, r3
 8009126:	687a      	ldr	r2, [r7, #4]
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	781b      	ldrb	r3, [r3, #0]
 800912c:	009b      	lsls	r3, r3, #2
 800912e:	441a      	add	r2, r3
 8009130:	4b11      	ldr	r3, [pc, #68]	; (8009178 <USB_DeactivateEndpoint+0x328>)
 8009132:	4323      	orrs	r3, r4
 8009134:	b29b      	uxth	r3, r3
 8009136:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009138:	687a      	ldr	r2, [r7, #4]
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	781b      	ldrb	r3, [r3, #0]
 800913e:	009b      	lsls	r3, r3, #2
 8009140:	4413      	add	r3, r2
 8009142:	881b      	ldrh	r3, [r3, #0]
 8009144:	b29b      	uxth	r3, r3
 8009146:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800914a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800914e:	b29c      	uxth	r4, r3
 8009150:	687a      	ldr	r2, [r7, #4]
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	781b      	ldrb	r3, [r3, #0]
 8009156:	009b      	lsls	r3, r3, #2
 8009158:	441a      	add	r2, r3
 800915a:	4b07      	ldr	r3, [pc, #28]	; (8009178 <USB_DeactivateEndpoint+0x328>)
 800915c:	4323      	orrs	r3, r4
 800915e:	b29b      	uxth	r3, r3
 8009160:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009162:	2300      	movs	r3, #0
}
 8009164:	4618      	mov	r0, r3
 8009166:	3708      	adds	r7, #8
 8009168:	46bd      	mov	sp, r7
 800916a:	bc90      	pop	{r4, r7}
 800916c:	4770      	bx	lr
 800916e:	bf00      	nop
 8009170:	ffffc080 	.word	0xffffc080
 8009174:	ffff80c0 	.word	0xffff80c0
 8009178:	ffff8080 	.word	0xffff8080

0800917c <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800917c:	b590      	push	{r4, r7, lr}
 800917e:	b08d      	sub	sp, #52	; 0x34
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
 8009184:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	785b      	ldrb	r3, [r3, #1]
 800918a:	2b01      	cmp	r3, #1
 800918c:	f040 8160 	bne.w	8009450 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	699a      	ldr	r2, [r3, #24]
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	691b      	ldr	r3, [r3, #16]
 8009198:	429a      	cmp	r2, r3
 800919a:	d909      	bls.n	80091b0 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	691b      	ldr	r3, [r3, #16]
 80091a0:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	699a      	ldr	r2, [r3, #24]
 80091a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091a8:	1ad2      	subs	r2, r2, r3
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	619a      	str	r2, [r3, #24]
 80091ae:	e005      	b.n	80091bc <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	699b      	ldr	r3, [r3, #24]
 80091b4:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	2200      	movs	r2, #0
 80091ba:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	7b1b      	ldrb	r3, [r3, #12]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d119      	bne.n	80091f8 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	6959      	ldr	r1, [r3, #20]
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	88da      	ldrh	r2, [r3, #6]
 80091cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ce:	b29b      	uxth	r3, r3
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f000 fba2 	bl	800991a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80091d6:	687c      	ldr	r4, [r7, #4]
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091de:	b29b      	uxth	r3, r3
 80091e0:	441c      	add	r4, r3
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	781b      	ldrb	r3, [r3, #0]
 80091e6:	011b      	lsls	r3, r3, #4
 80091e8:	4423      	add	r3, r4
 80091ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80091ee:	461c      	mov	r4, r3
 80091f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	8023      	strh	r3, [r4, #0]
 80091f6:	e10f      	b.n	8009418 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80091f8:	687a      	ldr	r2, [r7, #4]
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	781b      	ldrb	r3, [r3, #0]
 80091fe:	009b      	lsls	r3, r3, #2
 8009200:	4413      	add	r3, r2
 8009202:	881b      	ldrh	r3, [r3, #0]
 8009204:	b29b      	uxth	r3, r3
 8009206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800920a:	2b00      	cmp	r3, #0
 800920c:	d065      	beq.n	80092da <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800920e:	687c      	ldr	r4, [r7, #4]
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	785b      	ldrb	r3, [r3, #1]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d148      	bne.n	80092aa <USB_EPStartXfer+0x12e>
 8009218:	687c      	ldr	r4, [r7, #4]
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009220:	b29b      	uxth	r3, r3
 8009222:	441c      	add	r4, r3
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	781b      	ldrb	r3, [r3, #0]
 8009228:	011b      	lsls	r3, r3, #4
 800922a:	4423      	add	r3, r4
 800922c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009230:	461c      	mov	r4, r3
 8009232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009234:	2b00      	cmp	r3, #0
 8009236:	d10e      	bne.n	8009256 <USB_EPStartXfer+0xda>
 8009238:	8823      	ldrh	r3, [r4, #0]
 800923a:	b29b      	uxth	r3, r3
 800923c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009240:	b29b      	uxth	r3, r3
 8009242:	8023      	strh	r3, [r4, #0]
 8009244:	8823      	ldrh	r3, [r4, #0]
 8009246:	b29b      	uxth	r3, r3
 8009248:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800924c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009250:	b29b      	uxth	r3, r3
 8009252:	8023      	strh	r3, [r4, #0]
 8009254:	e03d      	b.n	80092d2 <USB_EPStartXfer+0x156>
 8009256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009258:	2b3e      	cmp	r3, #62	; 0x3e
 800925a:	d810      	bhi.n	800927e <USB_EPStartXfer+0x102>
 800925c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800925e:	085b      	lsrs	r3, r3, #1
 8009260:	627b      	str	r3, [r7, #36]	; 0x24
 8009262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009264:	f003 0301 	and.w	r3, r3, #1
 8009268:	2b00      	cmp	r3, #0
 800926a:	d002      	beq.n	8009272 <USB_EPStartXfer+0xf6>
 800926c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800926e:	3301      	adds	r3, #1
 8009270:	627b      	str	r3, [r7, #36]	; 0x24
 8009272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009274:	b29b      	uxth	r3, r3
 8009276:	029b      	lsls	r3, r3, #10
 8009278:	b29b      	uxth	r3, r3
 800927a:	8023      	strh	r3, [r4, #0]
 800927c:	e029      	b.n	80092d2 <USB_EPStartXfer+0x156>
 800927e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009280:	095b      	lsrs	r3, r3, #5
 8009282:	627b      	str	r3, [r7, #36]	; 0x24
 8009284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009286:	f003 031f 	and.w	r3, r3, #31
 800928a:	2b00      	cmp	r3, #0
 800928c:	d102      	bne.n	8009294 <USB_EPStartXfer+0x118>
 800928e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009290:	3b01      	subs	r3, #1
 8009292:	627b      	str	r3, [r7, #36]	; 0x24
 8009294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009296:	b29b      	uxth	r3, r3
 8009298:	029b      	lsls	r3, r3, #10
 800929a:	b29b      	uxth	r3, r3
 800929c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092a4:	b29b      	uxth	r3, r3
 80092a6:	8023      	strh	r3, [r4, #0]
 80092a8:	e013      	b.n	80092d2 <USB_EPStartXfer+0x156>
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	785b      	ldrb	r3, [r3, #1]
 80092ae:	2b01      	cmp	r3, #1
 80092b0:	d10f      	bne.n	80092d2 <USB_EPStartXfer+0x156>
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092b8:	b29b      	uxth	r3, r3
 80092ba:	441c      	add	r4, r3
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	781b      	ldrb	r3, [r3, #0]
 80092c0:	011b      	lsls	r3, r3, #4
 80092c2:	4423      	add	r3, r4
 80092c4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80092c8:	60fb      	str	r3, [r7, #12]
 80092ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092cc:	b29a      	uxth	r2, r3
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	895b      	ldrh	r3, [r3, #10]
 80092d6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80092d8:	e063      	b.n	80093a2 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	785b      	ldrb	r3, [r3, #1]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d148      	bne.n	8009374 <USB_EPStartXfer+0x1f8>
 80092e2:	687c      	ldr	r4, [r7, #4]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092ea:	b29b      	uxth	r3, r3
 80092ec:	441c      	add	r4, r3
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	781b      	ldrb	r3, [r3, #0]
 80092f2:	011b      	lsls	r3, r3, #4
 80092f4:	4423      	add	r3, r4
 80092f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80092fa:	461c      	mov	r4, r3
 80092fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d10e      	bne.n	8009320 <USB_EPStartXfer+0x1a4>
 8009302:	8823      	ldrh	r3, [r4, #0]
 8009304:	b29b      	uxth	r3, r3
 8009306:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800930a:	b29b      	uxth	r3, r3
 800930c:	8023      	strh	r3, [r4, #0]
 800930e:	8823      	ldrh	r3, [r4, #0]
 8009310:	b29b      	uxth	r3, r3
 8009312:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009316:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800931a:	b29b      	uxth	r3, r3
 800931c:	8023      	strh	r3, [r4, #0]
 800931e:	e03d      	b.n	800939c <USB_EPStartXfer+0x220>
 8009320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009322:	2b3e      	cmp	r3, #62	; 0x3e
 8009324:	d810      	bhi.n	8009348 <USB_EPStartXfer+0x1cc>
 8009326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009328:	085b      	lsrs	r3, r3, #1
 800932a:	623b      	str	r3, [r7, #32]
 800932c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800932e:	f003 0301 	and.w	r3, r3, #1
 8009332:	2b00      	cmp	r3, #0
 8009334:	d002      	beq.n	800933c <USB_EPStartXfer+0x1c0>
 8009336:	6a3b      	ldr	r3, [r7, #32]
 8009338:	3301      	adds	r3, #1
 800933a:	623b      	str	r3, [r7, #32]
 800933c:	6a3b      	ldr	r3, [r7, #32]
 800933e:	b29b      	uxth	r3, r3
 8009340:	029b      	lsls	r3, r3, #10
 8009342:	b29b      	uxth	r3, r3
 8009344:	8023      	strh	r3, [r4, #0]
 8009346:	e029      	b.n	800939c <USB_EPStartXfer+0x220>
 8009348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800934a:	095b      	lsrs	r3, r3, #5
 800934c:	623b      	str	r3, [r7, #32]
 800934e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009350:	f003 031f 	and.w	r3, r3, #31
 8009354:	2b00      	cmp	r3, #0
 8009356:	d102      	bne.n	800935e <USB_EPStartXfer+0x1e2>
 8009358:	6a3b      	ldr	r3, [r7, #32]
 800935a:	3b01      	subs	r3, #1
 800935c:	623b      	str	r3, [r7, #32]
 800935e:	6a3b      	ldr	r3, [r7, #32]
 8009360:	b29b      	uxth	r3, r3
 8009362:	029b      	lsls	r3, r3, #10
 8009364:	b29b      	uxth	r3, r3
 8009366:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800936a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800936e:	b29b      	uxth	r3, r3
 8009370:	8023      	strh	r3, [r4, #0]
 8009372:	e013      	b.n	800939c <USB_EPStartXfer+0x220>
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	785b      	ldrb	r3, [r3, #1]
 8009378:	2b01      	cmp	r3, #1
 800937a:	d10f      	bne.n	800939c <USB_EPStartXfer+0x220>
 800937c:	687c      	ldr	r4, [r7, #4]
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009384:	b29b      	uxth	r3, r3
 8009386:	441c      	add	r4, r3
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	781b      	ldrb	r3, [r3, #0]
 800938c:	011b      	lsls	r3, r3, #4
 800938e:	4423      	add	r3, r4
 8009390:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009394:	461c      	mov	r4, r3
 8009396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009398:	b29b      	uxth	r3, r3
 800939a:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	891b      	ldrh	r3, [r3, #8]
 80093a0:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	6959      	ldr	r1, [r3, #20]
 80093a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093a8:	b29b      	uxth	r3, r3
 80093aa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f000 fab4 	bl	800991a <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	785b      	ldrb	r3, [r3, #1]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d115      	bne.n	80093e6 <USB_EPStartXfer+0x26a>
 80093ba:	687a      	ldr	r2, [r7, #4]
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	781b      	ldrb	r3, [r3, #0]
 80093c0:	009b      	lsls	r3, r3, #2
 80093c2:	4413      	add	r3, r2
 80093c4:	881b      	ldrh	r3, [r3, #0]
 80093c6:	b29b      	uxth	r3, r3
 80093c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093d0:	b29c      	uxth	r4, r3
 80093d2:	687a      	ldr	r2, [r7, #4]
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	781b      	ldrb	r3, [r3, #0]
 80093d8:	009b      	lsls	r3, r3, #2
 80093da:	441a      	add	r2, r3
 80093dc:	4b9a      	ldr	r3, [pc, #616]	; (8009648 <USB_EPStartXfer+0x4cc>)
 80093de:	4323      	orrs	r3, r4
 80093e0:	b29b      	uxth	r3, r3
 80093e2:	8013      	strh	r3, [r2, #0]
 80093e4:	e018      	b.n	8009418 <USB_EPStartXfer+0x29c>
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	785b      	ldrb	r3, [r3, #1]
 80093ea:	2b01      	cmp	r3, #1
 80093ec:	d114      	bne.n	8009418 <USB_EPStartXfer+0x29c>
 80093ee:	687a      	ldr	r2, [r7, #4]
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	781b      	ldrb	r3, [r3, #0]
 80093f4:	009b      	lsls	r3, r3, #2
 80093f6:	4413      	add	r3, r2
 80093f8:	881b      	ldrh	r3, [r3, #0]
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009400:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009404:	b29c      	uxth	r4, r3
 8009406:	687a      	ldr	r2, [r7, #4]
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	781b      	ldrb	r3, [r3, #0]
 800940c:	009b      	lsls	r3, r3, #2
 800940e:	441a      	add	r2, r3
 8009410:	4b8e      	ldr	r3, [pc, #568]	; (800964c <USB_EPStartXfer+0x4d0>)
 8009412:	4323      	orrs	r3, r4
 8009414:	b29b      	uxth	r3, r3
 8009416:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009418:	687a      	ldr	r2, [r7, #4]
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	781b      	ldrb	r3, [r3, #0]
 800941e:	009b      	lsls	r3, r3, #2
 8009420:	4413      	add	r3, r2
 8009422:	881b      	ldrh	r3, [r3, #0]
 8009424:	b29b      	uxth	r3, r3
 8009426:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800942a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800942e:	b29c      	uxth	r4, r3
 8009430:	f084 0310 	eor.w	r3, r4, #16
 8009434:	b29c      	uxth	r4, r3
 8009436:	f084 0320 	eor.w	r3, r4, #32
 800943a:	b29c      	uxth	r4, r3
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	781b      	ldrb	r3, [r3, #0]
 8009442:	009b      	lsls	r3, r3, #2
 8009444:	441a      	add	r2, r3
 8009446:	4b82      	ldr	r3, [pc, #520]	; (8009650 <USB_EPStartXfer+0x4d4>)
 8009448:	4323      	orrs	r3, r4
 800944a:	b29b      	uxth	r3, r3
 800944c:	8013      	strh	r3, [r2, #0]
 800944e:	e146      	b.n	80096de <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	699a      	ldr	r2, [r3, #24]
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	691b      	ldr	r3, [r3, #16]
 8009458:	429a      	cmp	r2, r3
 800945a:	d909      	bls.n	8009470 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	691b      	ldr	r3, [r3, #16]
 8009460:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	699a      	ldr	r2, [r3, #24]
 8009466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009468:	1ad2      	subs	r2, r2, r3
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	619a      	str	r2, [r3, #24]
 800946e:	e005      	b.n	800947c <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	699b      	ldr	r3, [r3, #24]
 8009474:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	2200      	movs	r2, #0
 800947a:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	7b1b      	ldrb	r3, [r3, #12]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d148      	bne.n	8009516 <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009484:	687c      	ldr	r4, [r7, #4]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800948c:	b29b      	uxth	r3, r3
 800948e:	441c      	add	r4, r3
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	781b      	ldrb	r3, [r3, #0]
 8009494:	011b      	lsls	r3, r3, #4
 8009496:	4423      	add	r3, r4
 8009498:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800949c:	461c      	mov	r4, r3
 800949e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d10e      	bne.n	80094c2 <USB_EPStartXfer+0x346>
 80094a4:	8823      	ldrh	r3, [r4, #0]
 80094a6:	b29b      	uxth	r3, r3
 80094a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80094ac:	b29b      	uxth	r3, r3
 80094ae:	8023      	strh	r3, [r4, #0]
 80094b0:	8823      	ldrh	r3, [r4, #0]
 80094b2:	b29b      	uxth	r3, r3
 80094b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094bc:	b29b      	uxth	r3, r3
 80094be:	8023      	strh	r3, [r4, #0]
 80094c0:	e0f2      	b.n	80096a8 <USB_EPStartXfer+0x52c>
 80094c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094c4:	2b3e      	cmp	r3, #62	; 0x3e
 80094c6:	d810      	bhi.n	80094ea <USB_EPStartXfer+0x36e>
 80094c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ca:	085b      	lsrs	r3, r3, #1
 80094cc:	61fb      	str	r3, [r7, #28]
 80094ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094d0:	f003 0301 	and.w	r3, r3, #1
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d002      	beq.n	80094de <USB_EPStartXfer+0x362>
 80094d8:	69fb      	ldr	r3, [r7, #28]
 80094da:	3301      	adds	r3, #1
 80094dc:	61fb      	str	r3, [r7, #28]
 80094de:	69fb      	ldr	r3, [r7, #28]
 80094e0:	b29b      	uxth	r3, r3
 80094e2:	029b      	lsls	r3, r3, #10
 80094e4:	b29b      	uxth	r3, r3
 80094e6:	8023      	strh	r3, [r4, #0]
 80094e8:	e0de      	b.n	80096a8 <USB_EPStartXfer+0x52c>
 80094ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ec:	095b      	lsrs	r3, r3, #5
 80094ee:	61fb      	str	r3, [r7, #28]
 80094f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094f2:	f003 031f 	and.w	r3, r3, #31
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d102      	bne.n	8009500 <USB_EPStartXfer+0x384>
 80094fa:	69fb      	ldr	r3, [r7, #28]
 80094fc:	3b01      	subs	r3, #1
 80094fe:	61fb      	str	r3, [r7, #28]
 8009500:	69fb      	ldr	r3, [r7, #28]
 8009502:	b29b      	uxth	r3, r3
 8009504:	029b      	lsls	r3, r3, #10
 8009506:	b29b      	uxth	r3, r3
 8009508:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800950c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009510:	b29b      	uxth	r3, r3
 8009512:	8023      	strh	r3, [r4, #0]
 8009514:	e0c8      	b.n	80096a8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	785b      	ldrb	r3, [r3, #1]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d148      	bne.n	80095b0 <USB_EPStartXfer+0x434>
 800951e:	687c      	ldr	r4, [r7, #4]
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009526:	b29b      	uxth	r3, r3
 8009528:	441c      	add	r4, r3
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	781b      	ldrb	r3, [r3, #0]
 800952e:	011b      	lsls	r3, r3, #4
 8009530:	4423      	add	r3, r4
 8009532:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009536:	461c      	mov	r4, r3
 8009538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800953a:	2b00      	cmp	r3, #0
 800953c:	d10e      	bne.n	800955c <USB_EPStartXfer+0x3e0>
 800953e:	8823      	ldrh	r3, [r4, #0]
 8009540:	b29b      	uxth	r3, r3
 8009542:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009546:	b29b      	uxth	r3, r3
 8009548:	8023      	strh	r3, [r4, #0]
 800954a:	8823      	ldrh	r3, [r4, #0]
 800954c:	b29b      	uxth	r3, r3
 800954e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009552:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009556:	b29b      	uxth	r3, r3
 8009558:	8023      	strh	r3, [r4, #0]
 800955a:	e03d      	b.n	80095d8 <USB_EPStartXfer+0x45c>
 800955c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800955e:	2b3e      	cmp	r3, #62	; 0x3e
 8009560:	d810      	bhi.n	8009584 <USB_EPStartXfer+0x408>
 8009562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009564:	085b      	lsrs	r3, r3, #1
 8009566:	61bb      	str	r3, [r7, #24]
 8009568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800956a:	f003 0301 	and.w	r3, r3, #1
 800956e:	2b00      	cmp	r3, #0
 8009570:	d002      	beq.n	8009578 <USB_EPStartXfer+0x3fc>
 8009572:	69bb      	ldr	r3, [r7, #24]
 8009574:	3301      	adds	r3, #1
 8009576:	61bb      	str	r3, [r7, #24]
 8009578:	69bb      	ldr	r3, [r7, #24]
 800957a:	b29b      	uxth	r3, r3
 800957c:	029b      	lsls	r3, r3, #10
 800957e:	b29b      	uxth	r3, r3
 8009580:	8023      	strh	r3, [r4, #0]
 8009582:	e029      	b.n	80095d8 <USB_EPStartXfer+0x45c>
 8009584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009586:	095b      	lsrs	r3, r3, #5
 8009588:	61bb      	str	r3, [r7, #24]
 800958a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800958c:	f003 031f 	and.w	r3, r3, #31
 8009590:	2b00      	cmp	r3, #0
 8009592:	d102      	bne.n	800959a <USB_EPStartXfer+0x41e>
 8009594:	69bb      	ldr	r3, [r7, #24]
 8009596:	3b01      	subs	r3, #1
 8009598:	61bb      	str	r3, [r7, #24]
 800959a:	69bb      	ldr	r3, [r7, #24]
 800959c:	b29b      	uxth	r3, r3
 800959e:	029b      	lsls	r3, r3, #10
 80095a0:	b29b      	uxth	r3, r3
 80095a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095aa:	b29b      	uxth	r3, r3
 80095ac:	8023      	strh	r3, [r4, #0]
 80095ae:	e013      	b.n	80095d8 <USB_EPStartXfer+0x45c>
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	785b      	ldrb	r3, [r3, #1]
 80095b4:	2b01      	cmp	r3, #1
 80095b6:	d10f      	bne.n	80095d8 <USB_EPStartXfer+0x45c>
 80095b8:	687c      	ldr	r4, [r7, #4]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095c0:	b29b      	uxth	r3, r3
 80095c2:	441c      	add	r4, r3
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	781b      	ldrb	r3, [r3, #0]
 80095c8:	011b      	lsls	r3, r3, #4
 80095ca:	4423      	add	r3, r4
 80095cc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80095d0:	461c      	mov	r4, r3
 80095d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d4:	b29b      	uxth	r3, r3
 80095d6:	8023      	strh	r3, [r4, #0]
 80095d8:	687c      	ldr	r4, [r7, #4]
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	785b      	ldrb	r3, [r3, #1]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d14e      	bne.n	8009680 <USB_EPStartXfer+0x504>
 80095e2:	687c      	ldr	r4, [r7, #4]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095ea:	b29b      	uxth	r3, r3
 80095ec:	441c      	add	r4, r3
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	781b      	ldrb	r3, [r3, #0]
 80095f2:	011b      	lsls	r3, r3, #4
 80095f4:	4423      	add	r3, r4
 80095f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80095fa:	461c      	mov	r4, r3
 80095fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d10e      	bne.n	8009620 <USB_EPStartXfer+0x4a4>
 8009602:	8823      	ldrh	r3, [r4, #0]
 8009604:	b29b      	uxth	r3, r3
 8009606:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800960a:	b29b      	uxth	r3, r3
 800960c:	8023      	strh	r3, [r4, #0]
 800960e:	8823      	ldrh	r3, [r4, #0]
 8009610:	b29b      	uxth	r3, r3
 8009612:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009616:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800961a:	b29b      	uxth	r3, r3
 800961c:	8023      	strh	r3, [r4, #0]
 800961e:	e043      	b.n	80096a8 <USB_EPStartXfer+0x52c>
 8009620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009622:	2b3e      	cmp	r3, #62	; 0x3e
 8009624:	d816      	bhi.n	8009654 <USB_EPStartXfer+0x4d8>
 8009626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009628:	085b      	lsrs	r3, r3, #1
 800962a:	617b      	str	r3, [r7, #20]
 800962c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800962e:	f003 0301 	and.w	r3, r3, #1
 8009632:	2b00      	cmp	r3, #0
 8009634:	d002      	beq.n	800963c <USB_EPStartXfer+0x4c0>
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	3301      	adds	r3, #1
 800963a:	617b      	str	r3, [r7, #20]
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	b29b      	uxth	r3, r3
 8009640:	029b      	lsls	r3, r3, #10
 8009642:	b29b      	uxth	r3, r3
 8009644:	8023      	strh	r3, [r4, #0]
 8009646:	e02f      	b.n	80096a8 <USB_EPStartXfer+0x52c>
 8009648:	ffff80c0 	.word	0xffff80c0
 800964c:	ffffc080 	.word	0xffffc080
 8009650:	ffff8080 	.word	0xffff8080
 8009654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009656:	095b      	lsrs	r3, r3, #5
 8009658:	617b      	str	r3, [r7, #20]
 800965a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800965c:	f003 031f 	and.w	r3, r3, #31
 8009660:	2b00      	cmp	r3, #0
 8009662:	d102      	bne.n	800966a <USB_EPStartXfer+0x4ee>
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	3b01      	subs	r3, #1
 8009668:	617b      	str	r3, [r7, #20]
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	b29b      	uxth	r3, r3
 800966e:	029b      	lsls	r3, r3, #10
 8009670:	b29b      	uxth	r3, r3
 8009672:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009676:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800967a:	b29b      	uxth	r3, r3
 800967c:	8023      	strh	r3, [r4, #0]
 800967e:	e013      	b.n	80096a8 <USB_EPStartXfer+0x52c>
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	785b      	ldrb	r3, [r3, #1]
 8009684:	2b01      	cmp	r3, #1
 8009686:	d10f      	bne.n	80096a8 <USB_EPStartXfer+0x52c>
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800968e:	b29b      	uxth	r3, r3
 8009690:	441c      	add	r4, r3
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	781b      	ldrb	r3, [r3, #0]
 8009696:	011b      	lsls	r3, r3, #4
 8009698:	4423      	add	r3, r4
 800969a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800969e:	613b      	str	r3, [r7, #16]
 80096a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a2:	b29a      	uxth	r2, r3
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80096a8:	687a      	ldr	r2, [r7, #4]
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	781b      	ldrb	r3, [r3, #0]
 80096ae:	009b      	lsls	r3, r3, #2
 80096b0:	4413      	add	r3, r2
 80096b2:	881b      	ldrh	r3, [r3, #0]
 80096b4:	b29b      	uxth	r3, r3
 80096b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80096ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096be:	b29c      	uxth	r4, r3
 80096c0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80096c4:	b29c      	uxth	r4, r3
 80096c6:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80096ca:	b29c      	uxth	r4, r3
 80096cc:	687a      	ldr	r2, [r7, #4]
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	781b      	ldrb	r3, [r3, #0]
 80096d2:	009b      	lsls	r3, r3, #2
 80096d4:	441a      	add	r2, r3
 80096d6:	4b04      	ldr	r3, [pc, #16]	; (80096e8 <USB_EPStartXfer+0x56c>)
 80096d8:	4323      	orrs	r3, r4
 80096da:	b29b      	uxth	r3, r3
 80096dc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80096de:	2300      	movs	r3, #0
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	3734      	adds	r7, #52	; 0x34
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd90      	pop	{r4, r7, pc}
 80096e8:	ffff8080 	.word	0xffff8080

080096ec <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80096ec:	b490      	push	{r4, r7}
 80096ee:	b082      	sub	sp, #8
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
 80096f4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	785b      	ldrb	r3, [r3, #1]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d018      	beq.n	8009730 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80096fe:	687a      	ldr	r2, [r7, #4]
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	781b      	ldrb	r3, [r3, #0]
 8009704:	009b      	lsls	r3, r3, #2
 8009706:	4413      	add	r3, r2
 8009708:	881b      	ldrh	r3, [r3, #0]
 800970a:	b29b      	uxth	r3, r3
 800970c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009710:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009714:	b29c      	uxth	r4, r3
 8009716:	f084 0310 	eor.w	r3, r4, #16
 800971a:	b29c      	uxth	r4, r3
 800971c:	687a      	ldr	r2, [r7, #4]
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	781b      	ldrb	r3, [r3, #0]
 8009722:	009b      	lsls	r3, r3, #2
 8009724:	441a      	add	r2, r3
 8009726:	4b11      	ldr	r3, [pc, #68]	; (800976c <USB_EPSetStall+0x80>)
 8009728:	4323      	orrs	r3, r4
 800972a:	b29b      	uxth	r3, r3
 800972c:	8013      	strh	r3, [r2, #0]
 800972e:	e017      	b.n	8009760 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009730:	687a      	ldr	r2, [r7, #4]
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	781b      	ldrb	r3, [r3, #0]
 8009736:	009b      	lsls	r3, r3, #2
 8009738:	4413      	add	r3, r2
 800973a:	881b      	ldrh	r3, [r3, #0]
 800973c:	b29b      	uxth	r3, r3
 800973e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009746:	b29c      	uxth	r4, r3
 8009748:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800974c:	b29c      	uxth	r4, r3
 800974e:	687a      	ldr	r2, [r7, #4]
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	781b      	ldrb	r3, [r3, #0]
 8009754:	009b      	lsls	r3, r3, #2
 8009756:	441a      	add	r2, r3
 8009758:	4b04      	ldr	r3, [pc, #16]	; (800976c <USB_EPSetStall+0x80>)
 800975a:	4323      	orrs	r3, r4
 800975c:	b29b      	uxth	r3, r3
 800975e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009760:	2300      	movs	r3, #0
}
 8009762:	4618      	mov	r0, r3
 8009764:	3708      	adds	r7, #8
 8009766:	46bd      	mov	sp, r7
 8009768:	bc90      	pop	{r4, r7}
 800976a:	4770      	bx	lr
 800976c:	ffff8080 	.word	0xffff8080

08009770 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009770:	b490      	push	{r4, r7}
 8009772:	b082      	sub	sp, #8
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
 8009778:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	7b1b      	ldrb	r3, [r3, #12]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d17d      	bne.n	800987e <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	785b      	ldrb	r3, [r3, #1]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d03d      	beq.n	8009806 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800978a:	687a      	ldr	r2, [r7, #4]
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	781b      	ldrb	r3, [r3, #0]
 8009790:	009b      	lsls	r3, r3, #2
 8009792:	4413      	add	r3, r2
 8009794:	881b      	ldrh	r3, [r3, #0]
 8009796:	b29c      	uxth	r4, r3
 8009798:	4623      	mov	r3, r4
 800979a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d014      	beq.n	80097cc <USB_EPClearStall+0x5c>
 80097a2:	687a      	ldr	r2, [r7, #4]
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	781b      	ldrb	r3, [r3, #0]
 80097a8:	009b      	lsls	r3, r3, #2
 80097aa:	4413      	add	r3, r2
 80097ac:	881b      	ldrh	r3, [r3, #0]
 80097ae:	b29b      	uxth	r3, r3
 80097b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097b8:	b29c      	uxth	r4, r3
 80097ba:	687a      	ldr	r2, [r7, #4]
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	781b      	ldrb	r3, [r3, #0]
 80097c0:	009b      	lsls	r3, r3, #2
 80097c2:	441a      	add	r2, r3
 80097c4:	4b31      	ldr	r3, [pc, #196]	; (800988c <USB_EPClearStall+0x11c>)
 80097c6:	4323      	orrs	r3, r4
 80097c8:	b29b      	uxth	r3, r3
 80097ca:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	78db      	ldrb	r3, [r3, #3]
 80097d0:	2b01      	cmp	r3, #1
 80097d2:	d054      	beq.n	800987e <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80097d4:	687a      	ldr	r2, [r7, #4]
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	781b      	ldrb	r3, [r3, #0]
 80097da:	009b      	lsls	r3, r3, #2
 80097dc:	4413      	add	r3, r2
 80097de:	881b      	ldrh	r3, [r3, #0]
 80097e0:	b29b      	uxth	r3, r3
 80097e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097ea:	b29c      	uxth	r4, r3
 80097ec:	f084 0320 	eor.w	r3, r4, #32
 80097f0:	b29c      	uxth	r4, r3
 80097f2:	687a      	ldr	r2, [r7, #4]
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	781b      	ldrb	r3, [r3, #0]
 80097f8:	009b      	lsls	r3, r3, #2
 80097fa:	441a      	add	r2, r3
 80097fc:	4b24      	ldr	r3, [pc, #144]	; (8009890 <USB_EPClearStall+0x120>)
 80097fe:	4323      	orrs	r3, r4
 8009800:	b29b      	uxth	r3, r3
 8009802:	8013      	strh	r3, [r2, #0]
 8009804:	e03b      	b.n	800987e <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009806:	687a      	ldr	r2, [r7, #4]
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	781b      	ldrb	r3, [r3, #0]
 800980c:	009b      	lsls	r3, r3, #2
 800980e:	4413      	add	r3, r2
 8009810:	881b      	ldrh	r3, [r3, #0]
 8009812:	b29c      	uxth	r4, r3
 8009814:	4623      	mov	r3, r4
 8009816:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800981a:	2b00      	cmp	r3, #0
 800981c:	d014      	beq.n	8009848 <USB_EPClearStall+0xd8>
 800981e:	687a      	ldr	r2, [r7, #4]
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	781b      	ldrb	r3, [r3, #0]
 8009824:	009b      	lsls	r3, r3, #2
 8009826:	4413      	add	r3, r2
 8009828:	881b      	ldrh	r3, [r3, #0]
 800982a:	b29b      	uxth	r3, r3
 800982c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009830:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009834:	b29c      	uxth	r4, r3
 8009836:	687a      	ldr	r2, [r7, #4]
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	781b      	ldrb	r3, [r3, #0]
 800983c:	009b      	lsls	r3, r3, #2
 800983e:	441a      	add	r2, r3
 8009840:	4b14      	ldr	r3, [pc, #80]	; (8009894 <USB_EPClearStall+0x124>)
 8009842:	4323      	orrs	r3, r4
 8009844:	b29b      	uxth	r3, r3
 8009846:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009848:	687a      	ldr	r2, [r7, #4]
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	781b      	ldrb	r3, [r3, #0]
 800984e:	009b      	lsls	r3, r3, #2
 8009850:	4413      	add	r3, r2
 8009852:	881b      	ldrh	r3, [r3, #0]
 8009854:	b29b      	uxth	r3, r3
 8009856:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800985a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800985e:	b29c      	uxth	r4, r3
 8009860:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8009864:	b29c      	uxth	r4, r3
 8009866:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800986a:	b29c      	uxth	r4, r3
 800986c:	687a      	ldr	r2, [r7, #4]
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	781b      	ldrb	r3, [r3, #0]
 8009872:	009b      	lsls	r3, r3, #2
 8009874:	441a      	add	r2, r3
 8009876:	4b06      	ldr	r3, [pc, #24]	; (8009890 <USB_EPClearStall+0x120>)
 8009878:	4323      	orrs	r3, r4
 800987a:	b29b      	uxth	r3, r3
 800987c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800987e:	2300      	movs	r3, #0
}
 8009880:	4618      	mov	r0, r3
 8009882:	3708      	adds	r7, #8
 8009884:	46bd      	mov	sp, r7
 8009886:	bc90      	pop	{r4, r7}
 8009888:	4770      	bx	lr
 800988a:	bf00      	nop
 800988c:	ffff80c0 	.word	0xffff80c0
 8009890:	ffff8080 	.word	0xffff8080
 8009894:	ffffc080 	.word	0xffffc080

08009898 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009898:	b480      	push	{r7}
 800989a:	b083      	sub	sp, #12
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
 80098a0:	460b      	mov	r3, r1
 80098a2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80098a4:	78fb      	ldrb	r3, [r7, #3]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d103      	bne.n	80098b2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2280      	movs	r2, #128	; 0x80
 80098ae:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80098b2:	2300      	movs	r3, #0
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	370c      	adds	r7, #12
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bc80      	pop	{r7}
 80098bc:	4770      	bx	lr

080098be <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80098be:	b480      	push	{r7}
 80098c0:	b083      	sub	sp, #12
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80098c6:	2300      	movs	r3, #0
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	370c      	adds	r7, #12
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bc80      	pop	{r7}
 80098d0:	4770      	bx	lr

080098d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80098d2:	b480      	push	{r7}
 80098d4:	b083      	sub	sp, #12
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80098da:	2300      	movs	r3, #0
}
 80098dc:	4618      	mov	r0, r3
 80098de:	370c      	adds	r7, #12
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bc80      	pop	{r7}
 80098e4:	4770      	bx	lr

080098e6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80098e6:	b480      	push	{r7}
 80098e8:	b085      	sub	sp, #20
 80098ea:	af00      	add	r7, sp, #0
 80098ec:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80098f4:	b29b      	uxth	r3, r3
 80098f6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80098f8:	68fb      	ldr	r3, [r7, #12]
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3714      	adds	r7, #20
 80098fe:	46bd      	mov	sp, r7
 8009900:	bc80      	pop	{r7}
 8009902:	4770      	bx	lr

08009904 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8009904:	b480      	push	{r7}
 8009906:	b083      	sub	sp, #12
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
 800990c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800990e:	2300      	movs	r3, #0
}
 8009910:	4618      	mov	r0, r3
 8009912:	370c      	adds	r7, #12
 8009914:	46bd      	mov	sp, r7
 8009916:	bc80      	pop	{r7}
 8009918:	4770      	bx	lr

0800991a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800991a:	b480      	push	{r7}
 800991c:	b08d      	sub	sp, #52	; 0x34
 800991e:	af00      	add	r7, sp, #0
 8009920:	60f8      	str	r0, [r7, #12]
 8009922:	60b9      	str	r1, [r7, #8]
 8009924:	4611      	mov	r1, r2
 8009926:	461a      	mov	r2, r3
 8009928:	460b      	mov	r3, r1
 800992a:	80fb      	strh	r3, [r7, #6]
 800992c:	4613      	mov	r3, r2
 800992e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009930:	88bb      	ldrh	r3, [r7, #4]
 8009932:	3301      	adds	r3, #1
 8009934:	085b      	lsrs	r3, r3, #1
 8009936:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009940:	88fb      	ldrh	r3, [r7, #6]
 8009942:	005a      	lsls	r2, r3, #1
 8009944:	69fb      	ldr	r3, [r7, #28]
 8009946:	4413      	add	r3, r2
 8009948:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800994c:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800994e:	6a3b      	ldr	r3, [r7, #32]
 8009950:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009952:	e01e      	b.n	8009992 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8009954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009956:	781b      	ldrb	r3, [r3, #0]
 8009958:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800995a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800995c:	3301      	adds	r3, #1
 800995e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8009960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009962:	781b      	ldrb	r3, [r3, #0]
 8009964:	b29b      	uxth	r3, r3
 8009966:	021b      	lsls	r3, r3, #8
 8009968:	b29b      	uxth	r3, r3
 800996a:	461a      	mov	r2, r3
 800996c:	69bb      	ldr	r3, [r7, #24]
 800996e:	4313      	orrs	r3, r2
 8009970:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8009972:	697b      	ldr	r3, [r7, #20]
 8009974:	b29a      	uxth	r2, r3
 8009976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009978:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800997a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800997c:	3302      	adds	r3, #2
 800997e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8009980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009982:	3302      	adds	r3, #2
 8009984:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8009986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009988:	3301      	adds	r3, #1
 800998a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800998c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800998e:	3b01      	subs	r3, #1
 8009990:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009994:	2b00      	cmp	r3, #0
 8009996:	d1dd      	bne.n	8009954 <USB_WritePMA+0x3a>
  }
}
 8009998:	bf00      	nop
 800999a:	3734      	adds	r7, #52	; 0x34
 800999c:	46bd      	mov	sp, r7
 800999e:	bc80      	pop	{r7}
 80099a0:	4770      	bx	lr

080099a2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80099a2:	b480      	push	{r7}
 80099a4:	b08b      	sub	sp, #44	; 0x2c
 80099a6:	af00      	add	r7, sp, #0
 80099a8:	60f8      	str	r0, [r7, #12]
 80099aa:	60b9      	str	r1, [r7, #8]
 80099ac:	4611      	mov	r1, r2
 80099ae:	461a      	mov	r2, r3
 80099b0:	460b      	mov	r3, r1
 80099b2:	80fb      	strh	r3, [r7, #6]
 80099b4:	4613      	mov	r3, r2
 80099b6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80099b8:	88bb      	ldrh	r3, [r7, #4]
 80099ba:	085b      	lsrs	r3, r3, #1
 80099bc:	b29b      	uxth	r3, r3
 80099be:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80099c8:	88fb      	ldrh	r3, [r7, #6]
 80099ca:	005a      	lsls	r2, r3, #1
 80099cc:	697b      	ldr	r3, [r7, #20]
 80099ce:	4413      	add	r3, r2
 80099d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80099d4:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80099d6:	69bb      	ldr	r3, [r7, #24]
 80099d8:	627b      	str	r3, [r7, #36]	; 0x24
 80099da:	e01b      	b.n	8009a14 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80099dc:	6a3b      	ldr	r3, [r7, #32]
 80099de:	881b      	ldrh	r3, [r3, #0]
 80099e0:	b29b      	uxth	r3, r3
 80099e2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80099e4:	6a3b      	ldr	r3, [r7, #32]
 80099e6:	3302      	adds	r3, #2
 80099e8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80099ea:	693b      	ldr	r3, [r7, #16]
 80099ec:	b2da      	uxtb	r2, r3
 80099ee:	69fb      	ldr	r3, [r7, #28]
 80099f0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80099f2:	69fb      	ldr	r3, [r7, #28]
 80099f4:	3301      	adds	r3, #1
 80099f6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	0a1b      	lsrs	r3, r3, #8
 80099fc:	b2da      	uxtb	r2, r3
 80099fe:	69fb      	ldr	r3, [r7, #28]
 8009a00:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009a02:	69fb      	ldr	r3, [r7, #28]
 8009a04:	3301      	adds	r3, #1
 8009a06:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009a08:	6a3b      	ldr	r3, [r7, #32]
 8009a0a:	3302      	adds	r3, #2
 8009a0c:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8009a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a10:	3b01      	subs	r3, #1
 8009a12:	627b      	str	r3, [r7, #36]	; 0x24
 8009a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d1e0      	bne.n	80099dc <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8009a1a:	88bb      	ldrh	r3, [r7, #4]
 8009a1c:	f003 0301 	and.w	r3, r3, #1
 8009a20:	b29b      	uxth	r3, r3
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d007      	beq.n	8009a36 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8009a26:	6a3b      	ldr	r3, [r7, #32]
 8009a28:	881b      	ldrh	r3, [r3, #0]
 8009a2a:	b29b      	uxth	r3, r3
 8009a2c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009a2e:	693b      	ldr	r3, [r7, #16]
 8009a30:	b2da      	uxtb	r2, r3
 8009a32:	69fb      	ldr	r3, [r7, #28]
 8009a34:	701a      	strb	r2, [r3, #0]
  }
}
 8009a36:	bf00      	nop
 8009a38:	372c      	adds	r7, #44	; 0x2c
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bc80      	pop	{r7}
 8009a3e:	4770      	bx	lr

08009a40 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b084      	sub	sp, #16
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	460b      	mov	r3, r1
 8009a4a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	7c1b      	ldrb	r3, [r3, #16]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d115      	bne.n	8009a84 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009a58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a5c:	2202      	movs	r2, #2
 8009a5e:	2181      	movs	r1, #129	; 0x81
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f001 fe70 	bl	800b746 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2201      	movs	r2, #1
 8009a6a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009a6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a70:	2202      	movs	r2, #2
 8009a72:	2101      	movs	r1, #1
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f001 fe66 	bl	800b746 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2201      	movs	r2, #1
 8009a7e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8009a82:	e012      	b.n	8009aaa <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009a84:	2340      	movs	r3, #64	; 0x40
 8009a86:	2202      	movs	r2, #2
 8009a88:	2181      	movs	r1, #129	; 0x81
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f001 fe5b 	bl	800b746 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2201      	movs	r2, #1
 8009a94:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009a96:	2340      	movs	r3, #64	; 0x40
 8009a98:	2202      	movs	r2, #2
 8009a9a:	2101      	movs	r1, #1
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f001 fe52 	bl	800b746 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2201      	movs	r2, #1
 8009aa6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009aaa:	2308      	movs	r3, #8
 8009aac:	2203      	movs	r2, #3
 8009aae:	2182      	movs	r1, #130	; 0x82
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f001 fe48 	bl	800b746 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2201      	movs	r2, #1
 8009aba:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009abc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009ac0:	f001 ff62 	bl	800b988 <USBD_static_malloc>
 8009ac4:	4602      	mov	r2, r0
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d102      	bne.n	8009adc <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	73fb      	strb	r3, [r7, #15]
 8009ada:	e026      	b.n	8009b2a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ae2:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	2200      	movs	r2, #0
 8009af2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	2200      	movs	r2, #0
 8009afa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	7c1b      	ldrb	r3, [r3, #16]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d109      	bne.n	8009b1a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009b0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009b10:	2101      	movs	r1, #1
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f001 ff01 	bl	800b91a <USBD_LL_PrepareReceive>
 8009b18:	e007      	b.n	8009b2a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009b20:	2340      	movs	r3, #64	; 0x40
 8009b22:	2101      	movs	r1, #1
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f001 fef8 	bl	800b91a <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3710      	adds	r7, #16
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}

08009b34 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b084      	sub	sp, #16
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
 8009b3c:	460b      	mov	r3, r1
 8009b3e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009b40:	2300      	movs	r3, #0
 8009b42:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009b44:	2181      	movs	r1, #129	; 0x81
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f001 fe23 	bl	800b792 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009b52:	2101      	movs	r1, #1
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f001 fe1c 	bl	800b792 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009b62:	2182      	movs	r1, #130	; 0x82
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f001 fe14 	bl	800b792 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d00e      	beq.n	8009b98 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b80:	685b      	ldr	r3, [r3, #4]
 8009b82:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f001 ff08 	bl	800b9a0 <USBD_static_free>
    pdev->pClassData = NULL;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2200      	movs	r2, #0
 8009b94:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8009b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3710      	adds	r7, #16
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}

08009ba2 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009ba2:	b580      	push	{r7, lr}
 8009ba4:	b086      	sub	sp, #24
 8009ba6:	af00      	add	r7, sp, #0
 8009ba8:	6078      	str	r0, [r7, #4]
 8009baa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bb2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009bb8:	2300      	movs	r3, #0
 8009bba:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	781b      	ldrb	r3, [r3, #0]
 8009bc4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d039      	beq.n	8009c40 <USBD_CDC_Setup+0x9e>
 8009bcc:	2b20      	cmp	r3, #32
 8009bce:	d17c      	bne.n	8009cca <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	88db      	ldrh	r3, [r3, #6]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d029      	beq.n	8009c2c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	781b      	ldrb	r3, [r3, #0]
 8009bdc:	b25b      	sxtb	r3, r3
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	da11      	bge.n	8009c06 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009be8:	689b      	ldr	r3, [r3, #8]
 8009bea:	683a      	ldr	r2, [r7, #0]
 8009bec:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009bee:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009bf0:	683a      	ldr	r2, [r7, #0]
 8009bf2:	88d2      	ldrh	r2, [r2, #6]
 8009bf4:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009bf6:	6939      	ldr	r1, [r7, #16]
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	88db      	ldrh	r3, [r3, #6]
 8009bfc:	461a      	mov	r2, r3
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f001 f9f6 	bl	800aff0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8009c04:	e068      	b.n	8009cd8 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	785a      	ldrb	r2, [r3, #1]
 8009c0a:	693b      	ldr	r3, [r7, #16]
 8009c0c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	88db      	ldrh	r3, [r3, #6]
 8009c14:	b2da      	uxtb	r2, r3
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009c1c:	6939      	ldr	r1, [r7, #16]
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	88db      	ldrh	r3, [r3, #6]
 8009c22:	461a      	mov	r2, r3
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f001 fa11 	bl	800b04c <USBD_CtlPrepareRx>
      break;
 8009c2a:	e055      	b.n	8009cd8 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009c32:	689b      	ldr	r3, [r3, #8]
 8009c34:	683a      	ldr	r2, [r7, #0]
 8009c36:	7850      	ldrb	r0, [r2, #1]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	6839      	ldr	r1, [r7, #0]
 8009c3c:	4798      	blx	r3
      break;
 8009c3e:	e04b      	b.n	8009cd8 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	785b      	ldrb	r3, [r3, #1]
 8009c44:	2b0a      	cmp	r3, #10
 8009c46:	d017      	beq.n	8009c78 <USBD_CDC_Setup+0xd6>
 8009c48:	2b0b      	cmp	r3, #11
 8009c4a:	d029      	beq.n	8009ca0 <USBD_CDC_Setup+0xfe>
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d133      	bne.n	8009cb8 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c56:	2b03      	cmp	r3, #3
 8009c58:	d107      	bne.n	8009c6a <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009c5a:	f107 030c 	add.w	r3, r7, #12
 8009c5e:	2202      	movs	r2, #2
 8009c60:	4619      	mov	r1, r3
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f001 f9c4 	bl	800aff0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009c68:	e02e      	b.n	8009cc8 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8009c6a:	6839      	ldr	r1, [r7, #0]
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f001 f955 	bl	800af1c <USBD_CtlError>
            ret = USBD_FAIL;
 8009c72:	2302      	movs	r3, #2
 8009c74:	75fb      	strb	r3, [r7, #23]
          break;
 8009c76:	e027      	b.n	8009cc8 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c7e:	2b03      	cmp	r3, #3
 8009c80:	d107      	bne.n	8009c92 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009c82:	f107 030f 	add.w	r3, r7, #15
 8009c86:	2201      	movs	r2, #1
 8009c88:	4619      	mov	r1, r3
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f001 f9b0 	bl	800aff0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009c90:	e01a      	b.n	8009cc8 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8009c92:	6839      	ldr	r1, [r7, #0]
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f001 f941 	bl	800af1c <USBD_CtlError>
            ret = USBD_FAIL;
 8009c9a:	2302      	movs	r3, #2
 8009c9c:	75fb      	strb	r3, [r7, #23]
          break;
 8009c9e:	e013      	b.n	8009cc8 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ca6:	2b03      	cmp	r3, #3
 8009ca8:	d00d      	beq.n	8009cc6 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8009caa:	6839      	ldr	r1, [r7, #0]
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f001 f935 	bl	800af1c <USBD_CtlError>
            ret = USBD_FAIL;
 8009cb2:	2302      	movs	r3, #2
 8009cb4:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009cb6:	e006      	b.n	8009cc6 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8009cb8:	6839      	ldr	r1, [r7, #0]
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f001 f92e 	bl	800af1c <USBD_CtlError>
          ret = USBD_FAIL;
 8009cc0:	2302      	movs	r3, #2
 8009cc2:	75fb      	strb	r3, [r7, #23]
          break;
 8009cc4:	e000      	b.n	8009cc8 <USBD_CDC_Setup+0x126>
          break;
 8009cc6:	bf00      	nop
      }
      break;
 8009cc8:	e006      	b.n	8009cd8 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8009cca:	6839      	ldr	r1, [r7, #0]
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f001 f925 	bl	800af1c <USBD_CtlError>
      ret = USBD_FAIL;
 8009cd2:	2302      	movs	r3, #2
 8009cd4:	75fb      	strb	r3, [r7, #23]
      break;
 8009cd6:	bf00      	nop
  }

  return ret;
 8009cd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3718      	adds	r7, #24
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}

08009ce2 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009ce2:	b580      	push	{r7, lr}
 8009ce4:	b084      	sub	sp, #16
 8009ce6:	af00      	add	r7, sp, #0
 8009ce8:	6078      	str	r0, [r7, #4]
 8009cea:	460b      	mov	r3, r1
 8009cec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cf4:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009cfc:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d037      	beq.n	8009d78 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009d08:	78fa      	ldrb	r2, [r7, #3]
 8009d0a:	6879      	ldr	r1, [r7, #4]
 8009d0c:	4613      	mov	r3, r2
 8009d0e:	009b      	lsls	r3, r3, #2
 8009d10:	4413      	add	r3, r2
 8009d12:	009b      	lsls	r3, r3, #2
 8009d14:	440b      	add	r3, r1
 8009d16:	331c      	adds	r3, #28
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d026      	beq.n	8009d6c <USBD_CDC_DataIn+0x8a>
 8009d1e:	78fa      	ldrb	r2, [r7, #3]
 8009d20:	6879      	ldr	r1, [r7, #4]
 8009d22:	4613      	mov	r3, r2
 8009d24:	009b      	lsls	r3, r3, #2
 8009d26:	4413      	add	r3, r2
 8009d28:	009b      	lsls	r3, r3, #2
 8009d2a:	440b      	add	r3, r1
 8009d2c:	331c      	adds	r3, #28
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	78fa      	ldrb	r2, [r7, #3]
 8009d32:	68b9      	ldr	r1, [r7, #8]
 8009d34:	0152      	lsls	r2, r2, #5
 8009d36:	440a      	add	r2, r1
 8009d38:	3238      	adds	r2, #56	; 0x38
 8009d3a:	6812      	ldr	r2, [r2, #0]
 8009d3c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009d40:	fb02 f201 	mul.w	r2, r2, r1
 8009d44:	1a9b      	subs	r3, r3, r2
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d110      	bne.n	8009d6c <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009d4a:	78fa      	ldrb	r2, [r7, #3]
 8009d4c:	6879      	ldr	r1, [r7, #4]
 8009d4e:	4613      	mov	r3, r2
 8009d50:	009b      	lsls	r3, r3, #2
 8009d52:	4413      	add	r3, r2
 8009d54:	009b      	lsls	r3, r3, #2
 8009d56:	440b      	add	r3, r1
 8009d58:	331c      	adds	r3, #28
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009d5e:	78f9      	ldrb	r1, [r7, #3]
 8009d60:	2300      	movs	r3, #0
 8009d62:	2200      	movs	r2, #0
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f001 fdb5 	bl	800b8d4 <USBD_LL_Transmit>
 8009d6a:	e003      	b.n	8009d74 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8009d74:	2300      	movs	r3, #0
 8009d76:	e000      	b.n	8009d7a <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8009d78:	2302      	movs	r3, #2
  }
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3710      	adds	r7, #16
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}

08009d82 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009d82:	b580      	push	{r7, lr}
 8009d84:	b084      	sub	sp, #16
 8009d86:	af00      	add	r7, sp, #0
 8009d88:	6078      	str	r0, [r7, #4]
 8009d8a:	460b      	mov	r3, r1
 8009d8c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d94:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009d96:	78fb      	ldrb	r3, [r7, #3]
 8009d98:	4619      	mov	r1, r3
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f001 fde0 	bl	800b960 <USBD_LL_GetRxDataSize>
 8009da0:	4602      	mov	r2, r0
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d00d      	beq.n	8009dce <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009db8:	68db      	ldr	r3, [r3, #12]
 8009dba:	68fa      	ldr	r2, [r7, #12]
 8009dbc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009dc0:	68fa      	ldr	r2, [r7, #12]
 8009dc2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009dc6:	4611      	mov	r1, r2
 8009dc8:	4798      	blx	r3

    return USBD_OK;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	e000      	b.n	8009dd0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009dce:	2302      	movs	r3, #2
  }
}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	3710      	adds	r7, #16
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}

08009dd8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b084      	sub	sp, #16
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009de6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d015      	beq.n	8009e1e <USBD_CDC_EP0_RxReady+0x46>
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009df8:	2bff      	cmp	r3, #255	; 0xff
 8009dfa:	d010      	beq.n	8009e1e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009e02:	689b      	ldr	r3, [r3, #8]
 8009e04:	68fa      	ldr	r2, [r7, #12]
 8009e06:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8009e0a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009e0c:	68fa      	ldr	r2, [r7, #12]
 8009e0e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009e12:	b292      	uxth	r2, r2
 8009e14:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	22ff      	movs	r2, #255	; 0xff
 8009e1a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8009e1e:	2300      	movs	r3, #0
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3710      	adds	r7, #16
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}

08009e28 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009e28:	b480      	push	{r7}
 8009e2a:	b083      	sub	sp, #12
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2243      	movs	r2, #67	; 0x43
 8009e34:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8009e36:	4b03      	ldr	r3, [pc, #12]	; (8009e44 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	370c      	adds	r7, #12
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bc80      	pop	{r7}
 8009e40:	4770      	bx	lr
 8009e42:	bf00      	nop
 8009e44:	200000a4 	.word	0x200000a4

08009e48 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009e48:	b480      	push	{r7}
 8009e4a:	b083      	sub	sp, #12
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2243      	movs	r2, #67	; 0x43
 8009e54:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009e56:	4b03      	ldr	r3, [pc, #12]	; (8009e64 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	370c      	adds	r7, #12
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bc80      	pop	{r7}
 8009e60:	4770      	bx	lr
 8009e62:	bf00      	nop
 8009e64:	20000060 	.word	0x20000060

08009e68 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009e68:	b480      	push	{r7}
 8009e6a:	b083      	sub	sp, #12
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2243      	movs	r2, #67	; 0x43
 8009e74:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009e76:	4b03      	ldr	r3, [pc, #12]	; (8009e84 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	370c      	adds	r7, #12
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bc80      	pop	{r7}
 8009e80:	4770      	bx	lr
 8009e82:	bf00      	nop
 8009e84:	200000e8 	.word	0x200000e8

08009e88 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009e88:	b480      	push	{r7}
 8009e8a:	b083      	sub	sp, #12
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	220a      	movs	r2, #10
 8009e94:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009e96:	4b03      	ldr	r3, [pc, #12]	; (8009ea4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	370c      	adds	r7, #12
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bc80      	pop	{r7}
 8009ea0:	4770      	bx	lr
 8009ea2:	bf00      	nop
 8009ea4:	2000001c 	.word	0x2000001c

08009ea8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b085      	sub	sp, #20
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
 8009eb0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009eb2:	2302      	movs	r3, #2
 8009eb4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d005      	beq.n	8009ec8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	683a      	ldr	r2, [r7, #0]
 8009ec0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3714      	adds	r7, #20
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bc80      	pop	{r7}
 8009ed2:	4770      	bx	lr

08009ed4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b087      	sub	sp, #28
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	60f8      	str	r0, [r7, #12]
 8009edc:	60b9      	str	r1, [r7, #8]
 8009ede:	4613      	mov	r3, r2
 8009ee0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ee8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009eea:	697b      	ldr	r3, [r7, #20]
 8009eec:	68ba      	ldr	r2, [r7, #8]
 8009eee:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009ef2:	88fa      	ldrh	r2, [r7, #6]
 8009ef4:	697b      	ldr	r3, [r7, #20]
 8009ef6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8009efa:	2300      	movs	r3, #0
}
 8009efc:	4618      	mov	r0, r3
 8009efe:	371c      	adds	r7, #28
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bc80      	pop	{r7}
 8009f04:	4770      	bx	lr

08009f06 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8009f06:	b480      	push	{r7}
 8009f08:	b085      	sub	sp, #20
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	6078      	str	r0, [r7, #4]
 8009f0e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f16:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	683a      	ldr	r2, [r7, #0]
 8009f1c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8009f20:	2300      	movs	r3, #0
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3714      	adds	r7, #20
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bc80      	pop	{r7}
 8009f2a:	4770      	bx	lr

08009f2c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b084      	sub	sp, #16
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f3a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d01c      	beq.n	8009f80 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d115      	bne.n	8009f7c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	2201      	movs	r2, #1
 8009f54:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009f6e:	b29b      	uxth	r3, r3
 8009f70:	2181      	movs	r1, #129	; 0x81
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f001 fcae 	bl	800b8d4 <USBD_LL_Transmit>

      return USBD_OK;
 8009f78:	2300      	movs	r3, #0
 8009f7a:	e002      	b.n	8009f82 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	e000      	b.n	8009f82 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8009f80:	2302      	movs	r3, #2
  }
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	3710      	adds	r7, #16
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}

08009f8a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009f8a:	b580      	push	{r7, lr}
 8009f8c:	b084      	sub	sp, #16
 8009f8e:	af00      	add	r7, sp, #0
 8009f90:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f98:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d017      	beq.n	8009fd4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	7c1b      	ldrb	r3, [r3, #16]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d109      	bne.n	8009fc0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009fb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009fb6:	2101      	movs	r1, #1
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	f001 fcae 	bl	800b91a <USBD_LL_PrepareReceive>
 8009fbe:	e007      	b.n	8009fd0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009fc6:	2340      	movs	r3, #64	; 0x40
 8009fc8:	2101      	movs	r1, #1
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f001 fca5 	bl	800b91a <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	e000      	b.n	8009fd6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009fd4:	2302      	movs	r3, #2
  }
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3710      	adds	r7, #16
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}

08009fde <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009fde:	b580      	push	{r7, lr}
 8009fe0:	b084      	sub	sp, #16
 8009fe2:	af00      	add	r7, sp, #0
 8009fe4:	60f8      	str	r0, [r7, #12]
 8009fe6:	60b9      	str	r1, [r7, #8]
 8009fe8:	4613      	mov	r3, r2
 8009fea:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d101      	bne.n	8009ff6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009ff2:	2302      	movs	r3, #2
 8009ff4:	e01a      	b.n	800a02c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d003      	beq.n	800a008 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	2200      	movs	r2, #0
 800a004:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d003      	beq.n	800a016 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	68ba      	ldr	r2, [r7, #8]
 800a012:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	2201      	movs	r2, #1
 800a01a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	79fa      	ldrb	r2, [r7, #7]
 800a022:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a024:	68f8      	ldr	r0, [r7, #12]
 800a026:	f001 fb19 	bl	800b65c <USBD_LL_Init>

  return USBD_OK;
 800a02a:	2300      	movs	r3, #0
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	3710      	adds	r7, #16
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}

0800a034 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a034:	b480      	push	{r7}
 800a036:	b085      	sub	sp, #20
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
 800a03c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800a03e:	2300      	movs	r3, #0
 800a040:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d006      	beq.n	800a056 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	683a      	ldr	r2, [r7, #0]
 800a04c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800a050:	2300      	movs	r3, #0
 800a052:	73fb      	strb	r3, [r7, #15]
 800a054:	e001      	b.n	800a05a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a056:	2302      	movs	r3, #2
 800a058:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a05a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	3714      	adds	r7, #20
 800a060:	46bd      	mov	sp, r7
 800a062:	bc80      	pop	{r7}
 800a064:	4770      	bx	lr

0800a066 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a066:	b580      	push	{r7, lr}
 800a068:	b082      	sub	sp, #8
 800a06a:	af00      	add	r7, sp, #0
 800a06c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f001 fb4e 	bl	800b710 <USBD_LL_Start>

  return USBD_OK;
 800a074:	2300      	movs	r3, #0
}
 800a076:	4618      	mov	r0, r3
 800a078:	3708      	adds	r7, #8
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}

0800a07e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a07e:	b480      	push	{r7}
 800a080:	b083      	sub	sp, #12
 800a082:	af00      	add	r7, sp, #0
 800a084:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a086:	2300      	movs	r3, #0
}
 800a088:	4618      	mov	r0, r3
 800a08a:	370c      	adds	r7, #12
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bc80      	pop	{r7}
 800a090:	4770      	bx	lr

0800a092 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a092:	b580      	push	{r7, lr}
 800a094:	b084      	sub	sp, #16
 800a096:	af00      	add	r7, sp, #0
 800a098:	6078      	str	r0, [r7, #4]
 800a09a:	460b      	mov	r3, r1
 800a09c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a09e:	2302      	movs	r3, #2
 800a0a0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d00c      	beq.n	800a0c6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	78fa      	ldrb	r2, [r7, #3]
 800a0b6:	4611      	mov	r1, r2
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	4798      	blx	r3
 800a0bc:	4603      	mov	r3, r0
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d101      	bne.n	800a0c6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a0c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	3710      	adds	r7, #16
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd80      	pop	{r7, pc}

0800a0d0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b082      	sub	sp, #8
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
 800a0d8:	460b      	mov	r3, r1
 800a0da:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0e2:	685b      	ldr	r3, [r3, #4]
 800a0e4:	78fa      	ldrb	r2, [r7, #3]
 800a0e6:	4611      	mov	r1, r2
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	4798      	blx	r3

  return USBD_OK;
 800a0ec:	2300      	movs	r3, #0
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3708      	adds	r7, #8
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}

0800a0f6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a0f6:	b580      	push	{r7, lr}
 800a0f8:	b082      	sub	sp, #8
 800a0fa:	af00      	add	r7, sp, #0
 800a0fc:	6078      	str	r0, [r7, #4]
 800a0fe:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a106:	6839      	ldr	r1, [r7, #0]
 800a108:	4618      	mov	r0, r3
 800a10a:	f000 fecb 	bl	800aea4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2201      	movs	r2, #1
 800a112:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a11c:	461a      	mov	r2, r3
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a12a:	f003 031f 	and.w	r3, r3, #31
 800a12e:	2b01      	cmp	r3, #1
 800a130:	d00c      	beq.n	800a14c <USBD_LL_SetupStage+0x56>
 800a132:	2b01      	cmp	r3, #1
 800a134:	d302      	bcc.n	800a13c <USBD_LL_SetupStage+0x46>
 800a136:	2b02      	cmp	r3, #2
 800a138:	d010      	beq.n	800a15c <USBD_LL_SetupStage+0x66>
 800a13a:	e017      	b.n	800a16c <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a142:	4619      	mov	r1, r3
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f000 f9cb 	bl	800a4e0 <USBD_StdDevReq>
      break;
 800a14a:	e01a      	b.n	800a182 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a152:	4619      	mov	r1, r3
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f000 fa2d 	bl	800a5b4 <USBD_StdItfReq>
      break;
 800a15a:	e012      	b.n	800a182 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a162:	4619      	mov	r1, r3
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f000 fa6b 	bl	800a640 <USBD_StdEPReq>
      break;
 800a16a:	e00a      	b.n	800a182 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a172:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a176:	b2db      	uxtb	r3, r3
 800a178:	4619      	mov	r1, r3
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f001 fb28 	bl	800b7d0 <USBD_LL_StallEP>
      break;
 800a180:	bf00      	nop
  }

  return USBD_OK;
 800a182:	2300      	movs	r3, #0
}
 800a184:	4618      	mov	r0, r3
 800a186:	3708      	adds	r7, #8
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}

0800a18c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b086      	sub	sp, #24
 800a190:	af00      	add	r7, sp, #0
 800a192:	60f8      	str	r0, [r7, #12]
 800a194:	460b      	mov	r3, r1
 800a196:	607a      	str	r2, [r7, #4]
 800a198:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a19a:	7afb      	ldrb	r3, [r7, #11]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d14b      	bne.n	800a238 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a1a6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a1ae:	2b03      	cmp	r3, #3
 800a1b0:	d134      	bne.n	800a21c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	68da      	ldr	r2, [r3, #12]
 800a1b6:	697b      	ldr	r3, [r7, #20]
 800a1b8:	691b      	ldr	r3, [r3, #16]
 800a1ba:	429a      	cmp	r2, r3
 800a1bc:	d919      	bls.n	800a1f2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800a1be:	697b      	ldr	r3, [r7, #20]
 800a1c0:	68da      	ldr	r2, [r3, #12]
 800a1c2:	697b      	ldr	r3, [r7, #20]
 800a1c4:	691b      	ldr	r3, [r3, #16]
 800a1c6:	1ad2      	subs	r2, r2, r3
 800a1c8:	697b      	ldr	r3, [r7, #20]
 800a1ca:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a1cc:	697b      	ldr	r3, [r7, #20]
 800a1ce:	68da      	ldr	r2, [r3, #12]
 800a1d0:	697b      	ldr	r3, [r7, #20]
 800a1d2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	d203      	bcs.n	800a1e0 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a1d8:	697b      	ldr	r3, [r7, #20]
 800a1da:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800a1dc:	b29b      	uxth	r3, r3
 800a1de:	e002      	b.n	800a1e6 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a1e4:	b29b      	uxth	r3, r3
 800a1e6:	461a      	mov	r2, r3
 800a1e8:	6879      	ldr	r1, [r7, #4]
 800a1ea:	68f8      	ldr	r0, [r7, #12]
 800a1ec:	f000 ff4c 	bl	800b088 <USBD_CtlContinueRx>
 800a1f0:	e038      	b.n	800a264 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1f8:	691b      	ldr	r3, [r3, #16]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d00a      	beq.n	800a214 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a204:	2b03      	cmp	r3, #3
 800a206:	d105      	bne.n	800a214 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a20e:	691b      	ldr	r3, [r3, #16]
 800a210:	68f8      	ldr	r0, [r7, #12]
 800a212:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a214:	68f8      	ldr	r0, [r7, #12]
 800a216:	f000 ff49 	bl	800b0ac <USBD_CtlSendStatus>
 800a21a:	e023      	b.n	800a264 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a222:	2b05      	cmp	r3, #5
 800a224:	d11e      	bne.n	800a264 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	2200      	movs	r2, #0
 800a22a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800a22e:	2100      	movs	r1, #0
 800a230:	68f8      	ldr	r0, [r7, #12]
 800a232:	f001 facd 	bl	800b7d0 <USBD_LL_StallEP>
 800a236:	e015      	b.n	800a264 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a23e:	699b      	ldr	r3, [r3, #24]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d00d      	beq.n	800a260 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a24a:	2b03      	cmp	r3, #3
 800a24c:	d108      	bne.n	800a260 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a254:	699b      	ldr	r3, [r3, #24]
 800a256:	7afa      	ldrb	r2, [r7, #11]
 800a258:	4611      	mov	r1, r2
 800a25a:	68f8      	ldr	r0, [r7, #12]
 800a25c:	4798      	blx	r3
 800a25e:	e001      	b.n	800a264 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a260:	2302      	movs	r3, #2
 800a262:	e000      	b.n	800a266 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800a264:	2300      	movs	r3, #0
}
 800a266:	4618      	mov	r0, r3
 800a268:	3718      	adds	r7, #24
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}

0800a26e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a26e:	b580      	push	{r7, lr}
 800a270:	b086      	sub	sp, #24
 800a272:	af00      	add	r7, sp, #0
 800a274:	60f8      	str	r0, [r7, #12]
 800a276:	460b      	mov	r3, r1
 800a278:	607a      	str	r2, [r7, #4]
 800a27a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a27c:	7afb      	ldrb	r3, [r7, #11]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d17f      	bne.n	800a382 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	3314      	adds	r3, #20
 800a286:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a28e:	2b02      	cmp	r3, #2
 800a290:	d15c      	bne.n	800a34c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	68da      	ldr	r2, [r3, #12]
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	691b      	ldr	r3, [r3, #16]
 800a29a:	429a      	cmp	r2, r3
 800a29c:	d915      	bls.n	800a2ca <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800a29e:	697b      	ldr	r3, [r7, #20]
 800a2a0:	68da      	ldr	r2, [r3, #12]
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	691b      	ldr	r3, [r3, #16]
 800a2a6:	1ad2      	subs	r2, r2, r3
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800a2ac:	697b      	ldr	r3, [r7, #20]
 800a2ae:	68db      	ldr	r3, [r3, #12]
 800a2b0:	b29b      	uxth	r3, r3
 800a2b2:	461a      	mov	r2, r3
 800a2b4:	6879      	ldr	r1, [r7, #4]
 800a2b6:	68f8      	ldr	r0, [r7, #12]
 800a2b8:	f000 feb6 	bl	800b028 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a2bc:	2300      	movs	r3, #0
 800a2be:	2200      	movs	r2, #0
 800a2c0:	2100      	movs	r1, #0
 800a2c2:	68f8      	ldr	r0, [r7, #12]
 800a2c4:	f001 fb29 	bl	800b91a <USBD_LL_PrepareReceive>
 800a2c8:	e04e      	b.n	800a368 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	689b      	ldr	r3, [r3, #8]
 800a2ce:	697a      	ldr	r2, [r7, #20]
 800a2d0:	6912      	ldr	r2, [r2, #16]
 800a2d2:	fbb3 f1f2 	udiv	r1, r3, r2
 800a2d6:	fb02 f201 	mul.w	r2, r2, r1
 800a2da:	1a9b      	subs	r3, r3, r2
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d11c      	bne.n	800a31a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800a2e0:	697b      	ldr	r3, [r7, #20]
 800a2e2:	689a      	ldr	r2, [r3, #8]
 800a2e4:	697b      	ldr	r3, [r7, #20]
 800a2e6:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	d316      	bcc.n	800a31a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800a2ec:	697b      	ldr	r3, [r7, #20]
 800a2ee:	689a      	ldr	r2, [r3, #8]
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a2f6:	429a      	cmp	r2, r3
 800a2f8:	d20f      	bcs.n	800a31a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	2100      	movs	r1, #0
 800a2fe:	68f8      	ldr	r0, [r7, #12]
 800a300:	f000 fe92 	bl	800b028 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	2200      	movs	r2, #0
 800a308:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a30c:	2300      	movs	r3, #0
 800a30e:	2200      	movs	r2, #0
 800a310:	2100      	movs	r1, #0
 800a312:	68f8      	ldr	r0, [r7, #12]
 800a314:	f001 fb01 	bl	800b91a <USBD_LL_PrepareReceive>
 800a318:	e026      	b.n	800a368 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a320:	68db      	ldr	r3, [r3, #12]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d00a      	beq.n	800a33c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a32c:	2b03      	cmp	r3, #3
 800a32e:	d105      	bne.n	800a33c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a336:	68db      	ldr	r3, [r3, #12]
 800a338:	68f8      	ldr	r0, [r7, #12]
 800a33a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a33c:	2180      	movs	r1, #128	; 0x80
 800a33e:	68f8      	ldr	r0, [r7, #12]
 800a340:	f001 fa46 	bl	800b7d0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a344:	68f8      	ldr	r0, [r7, #12]
 800a346:	f000 fec4 	bl	800b0d2 <USBD_CtlReceiveStatus>
 800a34a:	e00d      	b.n	800a368 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a352:	2b04      	cmp	r3, #4
 800a354:	d004      	beq.n	800a360 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d103      	bne.n	800a368 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a360:	2180      	movs	r1, #128	; 0x80
 800a362:	68f8      	ldr	r0, [r7, #12]
 800a364:	f001 fa34 	bl	800b7d0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a36e:	2b01      	cmp	r3, #1
 800a370:	d11d      	bne.n	800a3ae <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a372:	68f8      	ldr	r0, [r7, #12]
 800a374:	f7ff fe83 	bl	800a07e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	2200      	movs	r2, #0
 800a37c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a380:	e015      	b.n	800a3ae <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a388:	695b      	ldr	r3, [r3, #20]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d00d      	beq.n	800a3aa <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a394:	2b03      	cmp	r3, #3
 800a396:	d108      	bne.n	800a3aa <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a39e:	695b      	ldr	r3, [r3, #20]
 800a3a0:	7afa      	ldrb	r2, [r7, #11]
 800a3a2:	4611      	mov	r1, r2
 800a3a4:	68f8      	ldr	r0, [r7, #12]
 800a3a6:	4798      	blx	r3
 800a3a8:	e001      	b.n	800a3ae <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a3aa:	2302      	movs	r3, #2
 800a3ac:	e000      	b.n	800a3b0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a3ae:	2300      	movs	r3, #0
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3718      	adds	r7, #24
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}

0800a3b8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b082      	sub	sp, #8
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a3c0:	2340      	movs	r3, #64	; 0x40
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	2100      	movs	r1, #0
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f001 f9bd 	bl	800b746 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2201      	movs	r2, #1
 800a3d0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2240      	movs	r2, #64	; 0x40
 800a3d8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a3dc:	2340      	movs	r3, #64	; 0x40
 800a3de:	2200      	movs	r2, #0
 800a3e0:	2180      	movs	r1, #128	; 0x80
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f001 f9af 	bl	800b746 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2201      	movs	r2, #1
 800a3ec:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2240      	movs	r2, #64	; 0x40
 800a3f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2201      	movs	r2, #1
 800a3f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2200      	movs	r2, #0
 800a400:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2200      	movs	r2, #0
 800a408:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2200      	movs	r2, #0
 800a40e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d009      	beq.n	800a430 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a422:	685b      	ldr	r3, [r3, #4]
 800a424:	687a      	ldr	r2, [r7, #4]
 800a426:	6852      	ldr	r2, [r2, #4]
 800a428:	b2d2      	uxtb	r2, r2
 800a42a:	4611      	mov	r1, r2
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	4798      	blx	r3
  }

  return USBD_OK;
 800a430:	2300      	movs	r3, #0
}
 800a432:	4618      	mov	r0, r3
 800a434:	3708      	adds	r7, #8
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}

0800a43a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a43a:	b480      	push	{r7}
 800a43c:	b083      	sub	sp, #12
 800a43e:	af00      	add	r7, sp, #0
 800a440:	6078      	str	r0, [r7, #4]
 800a442:	460b      	mov	r3, r1
 800a444:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	78fa      	ldrb	r2, [r7, #3]
 800a44a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a44c:	2300      	movs	r3, #0
}
 800a44e:	4618      	mov	r0, r3
 800a450:	370c      	adds	r7, #12
 800a452:	46bd      	mov	sp, r7
 800a454:	bc80      	pop	{r7}
 800a456:	4770      	bx	lr

0800a458 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a458:	b480      	push	{r7}
 800a45a:	b083      	sub	sp, #12
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2204      	movs	r2, #4
 800a470:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a474:	2300      	movs	r3, #0
}
 800a476:	4618      	mov	r0, r3
 800a478:	370c      	adds	r7, #12
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bc80      	pop	{r7}
 800a47e:	4770      	bx	lr

0800a480 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a480:	b480      	push	{r7}
 800a482:	b083      	sub	sp, #12
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a48e:	2b04      	cmp	r3, #4
 800a490:	d105      	bne.n	800a49e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a49e:	2300      	movs	r3, #0
}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	370c      	adds	r7, #12
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bc80      	pop	{r7}
 800a4a8:	4770      	bx	lr

0800a4aa <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a4aa:	b580      	push	{r7, lr}
 800a4ac:	b082      	sub	sp, #8
 800a4ae:	af00      	add	r7, sp, #0
 800a4b0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4b8:	2b03      	cmp	r3, #3
 800a4ba:	d10b      	bne.n	800a4d4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4c2:	69db      	ldr	r3, [r3, #28]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d005      	beq.n	800a4d4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4ce:	69db      	ldr	r3, [r3, #28]
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a4d4:	2300      	movs	r3, #0
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3708      	adds	r7, #8
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}
	...

0800a4e0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b084      	sub	sp, #16
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
 800a4e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	781b      	ldrb	r3, [r3, #0]
 800a4f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a4f6:	2b20      	cmp	r3, #32
 800a4f8:	d004      	beq.n	800a504 <USBD_StdDevReq+0x24>
 800a4fa:	2b40      	cmp	r3, #64	; 0x40
 800a4fc:	d002      	beq.n	800a504 <USBD_StdDevReq+0x24>
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d008      	beq.n	800a514 <USBD_StdDevReq+0x34>
 800a502:	e04c      	b.n	800a59e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a50a:	689b      	ldr	r3, [r3, #8]
 800a50c:	6839      	ldr	r1, [r7, #0]
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	4798      	blx	r3
      break;
 800a512:	e049      	b.n	800a5a8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	785b      	ldrb	r3, [r3, #1]
 800a518:	2b09      	cmp	r3, #9
 800a51a:	d83a      	bhi.n	800a592 <USBD_StdDevReq+0xb2>
 800a51c:	a201      	add	r2, pc, #4	; (adr r2, 800a524 <USBD_StdDevReq+0x44>)
 800a51e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a522:	bf00      	nop
 800a524:	0800a575 	.word	0x0800a575
 800a528:	0800a589 	.word	0x0800a589
 800a52c:	0800a593 	.word	0x0800a593
 800a530:	0800a57f 	.word	0x0800a57f
 800a534:	0800a593 	.word	0x0800a593
 800a538:	0800a557 	.word	0x0800a557
 800a53c:	0800a54d 	.word	0x0800a54d
 800a540:	0800a593 	.word	0x0800a593
 800a544:	0800a56b 	.word	0x0800a56b
 800a548:	0800a561 	.word	0x0800a561
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a54c:	6839      	ldr	r1, [r7, #0]
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f000 f9d4 	bl	800a8fc <USBD_GetDescriptor>
          break;
 800a554:	e022      	b.n	800a59c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a556:	6839      	ldr	r1, [r7, #0]
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	f000 fb37 	bl	800abcc <USBD_SetAddress>
          break;
 800a55e:	e01d      	b.n	800a59c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a560:	6839      	ldr	r1, [r7, #0]
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f000 fb74 	bl	800ac50 <USBD_SetConfig>
          break;
 800a568:	e018      	b.n	800a59c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a56a:	6839      	ldr	r1, [r7, #0]
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f000 fbfd 	bl	800ad6c <USBD_GetConfig>
          break;
 800a572:	e013      	b.n	800a59c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a574:	6839      	ldr	r1, [r7, #0]
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f000 fc2c 	bl	800add4 <USBD_GetStatus>
          break;
 800a57c:	e00e      	b.n	800a59c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a57e:	6839      	ldr	r1, [r7, #0]
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f000 fc5a 	bl	800ae3a <USBD_SetFeature>
          break;
 800a586:	e009      	b.n	800a59c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a588:	6839      	ldr	r1, [r7, #0]
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f000 fc69 	bl	800ae62 <USBD_ClrFeature>
          break;
 800a590:	e004      	b.n	800a59c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800a592:	6839      	ldr	r1, [r7, #0]
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	f000 fcc1 	bl	800af1c <USBD_CtlError>
          break;
 800a59a:	bf00      	nop
      }
      break;
 800a59c:	e004      	b.n	800a5a8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800a59e:	6839      	ldr	r1, [r7, #0]
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f000 fcbb 	bl	800af1c <USBD_CtlError>
      break;
 800a5a6:	bf00      	nop
  }

  return ret;
 800a5a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	3710      	adds	r7, #16
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}
 800a5b2:	bf00      	nop

0800a5b4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b084      	sub	sp, #16
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
 800a5bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a5be:	2300      	movs	r3, #0
 800a5c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	781b      	ldrb	r3, [r3, #0]
 800a5c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a5ca:	2b20      	cmp	r3, #32
 800a5cc:	d003      	beq.n	800a5d6 <USBD_StdItfReq+0x22>
 800a5ce:	2b40      	cmp	r3, #64	; 0x40
 800a5d0:	d001      	beq.n	800a5d6 <USBD_StdItfReq+0x22>
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d12a      	bne.n	800a62c <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5dc:	3b01      	subs	r3, #1
 800a5de:	2b02      	cmp	r3, #2
 800a5e0:	d81d      	bhi.n	800a61e <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	889b      	ldrh	r3, [r3, #4]
 800a5e6:	b2db      	uxtb	r3, r3
 800a5e8:	2b01      	cmp	r3, #1
 800a5ea:	d813      	bhi.n	800a614 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5f2:	689b      	ldr	r3, [r3, #8]
 800a5f4:	6839      	ldr	r1, [r7, #0]
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	4798      	blx	r3
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	88db      	ldrh	r3, [r3, #6]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d110      	bne.n	800a628 <USBD_StdItfReq+0x74>
 800a606:	7bfb      	ldrb	r3, [r7, #15]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d10d      	bne.n	800a628 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f000 fd4d 	bl	800b0ac <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a612:	e009      	b.n	800a628 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 800a614:	6839      	ldr	r1, [r7, #0]
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	f000 fc80 	bl	800af1c <USBD_CtlError>
          break;
 800a61c:	e004      	b.n	800a628 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800a61e:	6839      	ldr	r1, [r7, #0]
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f000 fc7b 	bl	800af1c <USBD_CtlError>
          break;
 800a626:	e000      	b.n	800a62a <USBD_StdItfReq+0x76>
          break;
 800a628:	bf00      	nop
      }
      break;
 800a62a:	e004      	b.n	800a636 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 800a62c:	6839      	ldr	r1, [r7, #0]
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f000 fc74 	bl	800af1c <USBD_CtlError>
      break;
 800a634:	bf00      	nop
  }

  return USBD_OK;
 800a636:	2300      	movs	r3, #0
}
 800a638:	4618      	mov	r0, r3
 800a63a:	3710      	adds	r7, #16
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd80      	pop	{r7, pc}

0800a640 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b084      	sub	sp, #16
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
 800a648:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a64a:	2300      	movs	r3, #0
 800a64c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	889b      	ldrh	r3, [r3, #4]
 800a652:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	781b      	ldrb	r3, [r3, #0]
 800a658:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a65c:	2b20      	cmp	r3, #32
 800a65e:	d004      	beq.n	800a66a <USBD_StdEPReq+0x2a>
 800a660:	2b40      	cmp	r3, #64	; 0x40
 800a662:	d002      	beq.n	800a66a <USBD_StdEPReq+0x2a>
 800a664:	2b00      	cmp	r3, #0
 800a666:	d008      	beq.n	800a67a <USBD_StdEPReq+0x3a>
 800a668:	e13d      	b.n	800a8e6 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a670:	689b      	ldr	r3, [r3, #8]
 800a672:	6839      	ldr	r1, [r7, #0]
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	4798      	blx	r3
      break;
 800a678:	e13a      	b.n	800a8f0 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	781b      	ldrb	r3, [r3, #0]
 800a67e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a682:	2b20      	cmp	r3, #32
 800a684:	d10a      	bne.n	800a69c <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a68c:	689b      	ldr	r3, [r3, #8]
 800a68e:	6839      	ldr	r1, [r7, #0]
 800a690:	6878      	ldr	r0, [r7, #4]
 800a692:	4798      	blx	r3
 800a694:	4603      	mov	r3, r0
 800a696:	73fb      	strb	r3, [r7, #15]

        return ret;
 800a698:	7bfb      	ldrb	r3, [r7, #15]
 800a69a:	e12a      	b.n	800a8f2 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	785b      	ldrb	r3, [r3, #1]
 800a6a0:	2b01      	cmp	r3, #1
 800a6a2:	d03e      	beq.n	800a722 <USBD_StdEPReq+0xe2>
 800a6a4:	2b03      	cmp	r3, #3
 800a6a6:	d002      	beq.n	800a6ae <USBD_StdEPReq+0x6e>
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d070      	beq.n	800a78e <USBD_StdEPReq+0x14e>
 800a6ac:	e115      	b.n	800a8da <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6b4:	2b02      	cmp	r3, #2
 800a6b6:	d002      	beq.n	800a6be <USBD_StdEPReq+0x7e>
 800a6b8:	2b03      	cmp	r3, #3
 800a6ba:	d015      	beq.n	800a6e8 <USBD_StdEPReq+0xa8>
 800a6bc:	e02b      	b.n	800a716 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a6be:	7bbb      	ldrb	r3, [r7, #14]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d00c      	beq.n	800a6de <USBD_StdEPReq+0x9e>
 800a6c4:	7bbb      	ldrb	r3, [r7, #14]
 800a6c6:	2b80      	cmp	r3, #128	; 0x80
 800a6c8:	d009      	beq.n	800a6de <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a6ca:	7bbb      	ldrb	r3, [r7, #14]
 800a6cc:	4619      	mov	r1, r3
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	f001 f87e 	bl	800b7d0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a6d4:	2180      	movs	r1, #128	; 0x80
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f001 f87a 	bl	800b7d0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a6dc:	e020      	b.n	800a720 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800a6de:	6839      	ldr	r1, [r7, #0]
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	f000 fc1b 	bl	800af1c <USBD_CtlError>
              break;
 800a6e6:	e01b      	b.n	800a720 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	885b      	ldrh	r3, [r3, #2]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d10e      	bne.n	800a70e <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 800a6f0:	7bbb      	ldrb	r3, [r7, #14]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d00b      	beq.n	800a70e <USBD_StdEPReq+0xce>
 800a6f6:	7bbb      	ldrb	r3, [r7, #14]
 800a6f8:	2b80      	cmp	r3, #128	; 0x80
 800a6fa:	d008      	beq.n	800a70e <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	88db      	ldrh	r3, [r3, #6]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d104      	bne.n	800a70e <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800a704:	7bbb      	ldrb	r3, [r7, #14]
 800a706:	4619      	mov	r1, r3
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	f001 f861 	bl	800b7d0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f000 fccc 	bl	800b0ac <USBD_CtlSendStatus>

              break;
 800a714:	e004      	b.n	800a720 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800a716:	6839      	ldr	r1, [r7, #0]
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	f000 fbff 	bl	800af1c <USBD_CtlError>
              break;
 800a71e:	bf00      	nop
          }
          break;
 800a720:	e0e0      	b.n	800a8e4 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a728:	2b02      	cmp	r3, #2
 800a72a:	d002      	beq.n	800a732 <USBD_StdEPReq+0xf2>
 800a72c:	2b03      	cmp	r3, #3
 800a72e:	d015      	beq.n	800a75c <USBD_StdEPReq+0x11c>
 800a730:	e026      	b.n	800a780 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a732:	7bbb      	ldrb	r3, [r7, #14]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d00c      	beq.n	800a752 <USBD_StdEPReq+0x112>
 800a738:	7bbb      	ldrb	r3, [r7, #14]
 800a73a:	2b80      	cmp	r3, #128	; 0x80
 800a73c:	d009      	beq.n	800a752 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a73e:	7bbb      	ldrb	r3, [r7, #14]
 800a740:	4619      	mov	r1, r3
 800a742:	6878      	ldr	r0, [r7, #4]
 800a744:	f001 f844 	bl	800b7d0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a748:	2180      	movs	r1, #128	; 0x80
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	f001 f840 	bl	800b7d0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a750:	e01c      	b.n	800a78c <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800a752:	6839      	ldr	r1, [r7, #0]
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f000 fbe1 	bl	800af1c <USBD_CtlError>
              break;
 800a75a:	e017      	b.n	800a78c <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	885b      	ldrh	r3, [r3, #2]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d112      	bne.n	800a78a <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a764:	7bbb      	ldrb	r3, [r7, #14]
 800a766:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d004      	beq.n	800a778 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a76e:	7bbb      	ldrb	r3, [r7, #14]
 800a770:	4619      	mov	r1, r3
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f001 f84b 	bl	800b80e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	f000 fc97 	bl	800b0ac <USBD_CtlSendStatus>
              }
              break;
 800a77e:	e004      	b.n	800a78a <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 800a780:	6839      	ldr	r1, [r7, #0]
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f000 fbca 	bl	800af1c <USBD_CtlError>
              break;
 800a788:	e000      	b.n	800a78c <USBD_StdEPReq+0x14c>
              break;
 800a78a:	bf00      	nop
          }
          break;
 800a78c:	e0aa      	b.n	800a8e4 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a794:	2b02      	cmp	r3, #2
 800a796:	d002      	beq.n	800a79e <USBD_StdEPReq+0x15e>
 800a798:	2b03      	cmp	r3, #3
 800a79a:	d032      	beq.n	800a802 <USBD_StdEPReq+0x1c2>
 800a79c:	e097      	b.n	800a8ce <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a79e:	7bbb      	ldrb	r3, [r7, #14]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d007      	beq.n	800a7b4 <USBD_StdEPReq+0x174>
 800a7a4:	7bbb      	ldrb	r3, [r7, #14]
 800a7a6:	2b80      	cmp	r3, #128	; 0x80
 800a7a8:	d004      	beq.n	800a7b4 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800a7aa:	6839      	ldr	r1, [r7, #0]
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f000 fbb5 	bl	800af1c <USBD_CtlError>
                break;
 800a7b2:	e091      	b.n	800a8d8 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a7b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	da0b      	bge.n	800a7d4 <USBD_StdEPReq+0x194>
 800a7bc:	7bbb      	ldrb	r3, [r7, #14]
 800a7be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a7c2:	4613      	mov	r3, r2
 800a7c4:	009b      	lsls	r3, r3, #2
 800a7c6:	4413      	add	r3, r2
 800a7c8:	009b      	lsls	r3, r3, #2
 800a7ca:	3310      	adds	r3, #16
 800a7cc:	687a      	ldr	r2, [r7, #4]
 800a7ce:	4413      	add	r3, r2
 800a7d0:	3304      	adds	r3, #4
 800a7d2:	e00b      	b.n	800a7ec <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a7d4:	7bbb      	ldrb	r3, [r7, #14]
 800a7d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a7da:	4613      	mov	r3, r2
 800a7dc:	009b      	lsls	r3, r3, #2
 800a7de:	4413      	add	r3, r2
 800a7e0:	009b      	lsls	r3, r3, #2
 800a7e2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a7e6:	687a      	ldr	r2, [r7, #4]
 800a7e8:	4413      	add	r3, r2
 800a7ea:	3304      	adds	r3, #4
 800a7ec:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a7f4:	68bb      	ldr	r3, [r7, #8]
 800a7f6:	2202      	movs	r2, #2
 800a7f8:	4619      	mov	r1, r3
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f000 fbf8 	bl	800aff0 <USBD_CtlSendData>
              break;
 800a800:	e06a      	b.n	800a8d8 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a802:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a806:	2b00      	cmp	r3, #0
 800a808:	da11      	bge.n	800a82e <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a80a:	7bbb      	ldrb	r3, [r7, #14]
 800a80c:	f003 020f 	and.w	r2, r3, #15
 800a810:	6879      	ldr	r1, [r7, #4]
 800a812:	4613      	mov	r3, r2
 800a814:	009b      	lsls	r3, r3, #2
 800a816:	4413      	add	r3, r2
 800a818:	009b      	lsls	r3, r3, #2
 800a81a:	440b      	add	r3, r1
 800a81c:	3318      	adds	r3, #24
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d117      	bne.n	800a854 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800a824:	6839      	ldr	r1, [r7, #0]
 800a826:	6878      	ldr	r0, [r7, #4]
 800a828:	f000 fb78 	bl	800af1c <USBD_CtlError>
                  break;
 800a82c:	e054      	b.n	800a8d8 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a82e:	7bbb      	ldrb	r3, [r7, #14]
 800a830:	f003 020f 	and.w	r2, r3, #15
 800a834:	6879      	ldr	r1, [r7, #4]
 800a836:	4613      	mov	r3, r2
 800a838:	009b      	lsls	r3, r3, #2
 800a83a:	4413      	add	r3, r2
 800a83c:	009b      	lsls	r3, r3, #2
 800a83e:	440b      	add	r3, r1
 800a840:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d104      	bne.n	800a854 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800a84a:	6839      	ldr	r1, [r7, #0]
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f000 fb65 	bl	800af1c <USBD_CtlError>
                  break;
 800a852:	e041      	b.n	800a8d8 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a854:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	da0b      	bge.n	800a874 <USBD_StdEPReq+0x234>
 800a85c:	7bbb      	ldrb	r3, [r7, #14]
 800a85e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a862:	4613      	mov	r3, r2
 800a864:	009b      	lsls	r3, r3, #2
 800a866:	4413      	add	r3, r2
 800a868:	009b      	lsls	r3, r3, #2
 800a86a:	3310      	adds	r3, #16
 800a86c:	687a      	ldr	r2, [r7, #4]
 800a86e:	4413      	add	r3, r2
 800a870:	3304      	adds	r3, #4
 800a872:	e00b      	b.n	800a88c <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a874:	7bbb      	ldrb	r3, [r7, #14]
 800a876:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a87a:	4613      	mov	r3, r2
 800a87c:	009b      	lsls	r3, r3, #2
 800a87e:	4413      	add	r3, r2
 800a880:	009b      	lsls	r3, r3, #2
 800a882:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a886:	687a      	ldr	r2, [r7, #4]
 800a888:	4413      	add	r3, r2
 800a88a:	3304      	adds	r3, #4
 800a88c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a88e:	7bbb      	ldrb	r3, [r7, #14]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d002      	beq.n	800a89a <USBD_StdEPReq+0x25a>
 800a894:	7bbb      	ldrb	r3, [r7, #14]
 800a896:	2b80      	cmp	r3, #128	; 0x80
 800a898:	d103      	bne.n	800a8a2 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800a89a:	68bb      	ldr	r3, [r7, #8]
 800a89c:	2200      	movs	r2, #0
 800a89e:	601a      	str	r2, [r3, #0]
 800a8a0:	e00e      	b.n	800a8c0 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a8a2:	7bbb      	ldrb	r3, [r7, #14]
 800a8a4:	4619      	mov	r1, r3
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	f000 ffd0 	bl	800b84c <USBD_LL_IsStallEP>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d003      	beq.n	800a8ba <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	2201      	movs	r2, #1
 800a8b6:	601a      	str	r2, [r3, #0]
 800a8b8:	e002      	b.n	800a8c0 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	2200      	movs	r2, #0
 800a8be:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a8c0:	68bb      	ldr	r3, [r7, #8]
 800a8c2:	2202      	movs	r2, #2
 800a8c4:	4619      	mov	r1, r3
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	f000 fb92 	bl	800aff0 <USBD_CtlSendData>
              break;
 800a8cc:	e004      	b.n	800a8d8 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800a8ce:	6839      	ldr	r1, [r7, #0]
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f000 fb23 	bl	800af1c <USBD_CtlError>
              break;
 800a8d6:	bf00      	nop
          }
          break;
 800a8d8:	e004      	b.n	800a8e4 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800a8da:	6839      	ldr	r1, [r7, #0]
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f000 fb1d 	bl	800af1c <USBD_CtlError>
          break;
 800a8e2:	bf00      	nop
      }
      break;
 800a8e4:	e004      	b.n	800a8f0 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800a8e6:	6839      	ldr	r1, [r7, #0]
 800a8e8:	6878      	ldr	r0, [r7, #4]
 800a8ea:	f000 fb17 	bl	800af1c <USBD_CtlError>
      break;
 800a8ee:	bf00      	nop
  }

  return ret;
 800a8f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	3710      	adds	r7, #16
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}
	...

0800a8fc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b084      	sub	sp, #16
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
 800a904:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a906:	2300      	movs	r3, #0
 800a908:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a90a:	2300      	movs	r3, #0
 800a90c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a90e:	2300      	movs	r3, #0
 800a910:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	885b      	ldrh	r3, [r3, #2]
 800a916:	0a1b      	lsrs	r3, r3, #8
 800a918:	b29b      	uxth	r3, r3
 800a91a:	3b01      	subs	r3, #1
 800a91c:	2b06      	cmp	r3, #6
 800a91e:	f200 8128 	bhi.w	800ab72 <USBD_GetDescriptor+0x276>
 800a922:	a201      	add	r2, pc, #4	; (adr r2, 800a928 <USBD_GetDescriptor+0x2c>)
 800a924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a928:	0800a945 	.word	0x0800a945
 800a92c:	0800a95d 	.word	0x0800a95d
 800a930:	0800a99d 	.word	0x0800a99d
 800a934:	0800ab73 	.word	0x0800ab73
 800a938:	0800ab73 	.word	0x0800ab73
 800a93c:	0800ab13 	.word	0x0800ab13
 800a940:	0800ab3f 	.word	0x0800ab3f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	687a      	ldr	r2, [r7, #4]
 800a94e:	7c12      	ldrb	r2, [r2, #16]
 800a950:	f107 0108 	add.w	r1, r7, #8
 800a954:	4610      	mov	r0, r2
 800a956:	4798      	blx	r3
 800a958:	60f8      	str	r0, [r7, #12]
      break;
 800a95a:	e112      	b.n	800ab82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	7c1b      	ldrb	r3, [r3, #16]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d10d      	bne.n	800a980 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a96a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a96c:	f107 0208 	add.w	r2, r7, #8
 800a970:	4610      	mov	r0, r2
 800a972:	4798      	blx	r3
 800a974:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	3301      	adds	r3, #1
 800a97a:	2202      	movs	r2, #2
 800a97c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a97e:	e100      	b.n	800ab82 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a988:	f107 0208 	add.w	r2, r7, #8
 800a98c:	4610      	mov	r0, r2
 800a98e:	4798      	blx	r3
 800a990:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	3301      	adds	r3, #1
 800a996:	2202      	movs	r2, #2
 800a998:	701a      	strb	r2, [r3, #0]
      break;
 800a99a:	e0f2      	b.n	800ab82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	885b      	ldrh	r3, [r3, #2]
 800a9a0:	b2db      	uxtb	r3, r3
 800a9a2:	2b05      	cmp	r3, #5
 800a9a4:	f200 80ac 	bhi.w	800ab00 <USBD_GetDescriptor+0x204>
 800a9a8:	a201      	add	r2, pc, #4	; (adr r2, 800a9b0 <USBD_GetDescriptor+0xb4>)
 800a9aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9ae:	bf00      	nop
 800a9b0:	0800a9c9 	.word	0x0800a9c9
 800a9b4:	0800a9fd 	.word	0x0800a9fd
 800a9b8:	0800aa31 	.word	0x0800aa31
 800a9bc:	0800aa65 	.word	0x0800aa65
 800a9c0:	0800aa99 	.word	0x0800aa99
 800a9c4:	0800aacd 	.word	0x0800aacd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a9ce:	685b      	ldr	r3, [r3, #4]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d00b      	beq.n	800a9ec <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a9da:	685b      	ldr	r3, [r3, #4]
 800a9dc:	687a      	ldr	r2, [r7, #4]
 800a9de:	7c12      	ldrb	r2, [r2, #16]
 800a9e0:	f107 0108 	add.w	r1, r7, #8
 800a9e4:	4610      	mov	r0, r2
 800a9e6:	4798      	blx	r3
 800a9e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a9ea:	e091      	b.n	800ab10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a9ec:	6839      	ldr	r1, [r7, #0]
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f000 fa94 	bl	800af1c <USBD_CtlError>
            err++;
 800a9f4:	7afb      	ldrb	r3, [r7, #11]
 800a9f6:	3301      	adds	r3, #1
 800a9f8:	72fb      	strb	r3, [r7, #11]
          break;
 800a9fa:	e089      	b.n	800ab10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aa02:	689b      	ldr	r3, [r3, #8]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d00b      	beq.n	800aa20 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aa0e:	689b      	ldr	r3, [r3, #8]
 800aa10:	687a      	ldr	r2, [r7, #4]
 800aa12:	7c12      	ldrb	r2, [r2, #16]
 800aa14:	f107 0108 	add.w	r1, r7, #8
 800aa18:	4610      	mov	r0, r2
 800aa1a:	4798      	blx	r3
 800aa1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa1e:	e077      	b.n	800ab10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aa20:	6839      	ldr	r1, [r7, #0]
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f000 fa7a 	bl	800af1c <USBD_CtlError>
            err++;
 800aa28:	7afb      	ldrb	r3, [r7, #11]
 800aa2a:	3301      	adds	r3, #1
 800aa2c:	72fb      	strb	r3, [r7, #11]
          break;
 800aa2e:	e06f      	b.n	800ab10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aa36:	68db      	ldr	r3, [r3, #12]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d00b      	beq.n	800aa54 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aa42:	68db      	ldr	r3, [r3, #12]
 800aa44:	687a      	ldr	r2, [r7, #4]
 800aa46:	7c12      	ldrb	r2, [r2, #16]
 800aa48:	f107 0108 	add.w	r1, r7, #8
 800aa4c:	4610      	mov	r0, r2
 800aa4e:	4798      	blx	r3
 800aa50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa52:	e05d      	b.n	800ab10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aa54:	6839      	ldr	r1, [r7, #0]
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f000 fa60 	bl	800af1c <USBD_CtlError>
            err++;
 800aa5c:	7afb      	ldrb	r3, [r7, #11]
 800aa5e:	3301      	adds	r3, #1
 800aa60:	72fb      	strb	r3, [r7, #11]
          break;
 800aa62:	e055      	b.n	800ab10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aa6a:	691b      	ldr	r3, [r3, #16]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d00b      	beq.n	800aa88 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aa76:	691b      	ldr	r3, [r3, #16]
 800aa78:	687a      	ldr	r2, [r7, #4]
 800aa7a:	7c12      	ldrb	r2, [r2, #16]
 800aa7c:	f107 0108 	add.w	r1, r7, #8
 800aa80:	4610      	mov	r0, r2
 800aa82:	4798      	blx	r3
 800aa84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa86:	e043      	b.n	800ab10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aa88:	6839      	ldr	r1, [r7, #0]
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f000 fa46 	bl	800af1c <USBD_CtlError>
            err++;
 800aa90:	7afb      	ldrb	r3, [r7, #11]
 800aa92:	3301      	adds	r3, #1
 800aa94:	72fb      	strb	r3, [r7, #11]
          break;
 800aa96:	e03b      	b.n	800ab10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aa9e:	695b      	ldr	r3, [r3, #20]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d00b      	beq.n	800aabc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aaaa:	695b      	ldr	r3, [r3, #20]
 800aaac:	687a      	ldr	r2, [r7, #4]
 800aaae:	7c12      	ldrb	r2, [r2, #16]
 800aab0:	f107 0108 	add.w	r1, r7, #8
 800aab4:	4610      	mov	r0, r2
 800aab6:	4798      	blx	r3
 800aab8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aaba:	e029      	b.n	800ab10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aabc:	6839      	ldr	r1, [r7, #0]
 800aabe:	6878      	ldr	r0, [r7, #4]
 800aac0:	f000 fa2c 	bl	800af1c <USBD_CtlError>
            err++;
 800aac4:	7afb      	ldrb	r3, [r7, #11]
 800aac6:	3301      	adds	r3, #1
 800aac8:	72fb      	strb	r3, [r7, #11]
          break;
 800aaca:	e021      	b.n	800ab10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aad2:	699b      	ldr	r3, [r3, #24]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d00b      	beq.n	800aaf0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aade:	699b      	ldr	r3, [r3, #24]
 800aae0:	687a      	ldr	r2, [r7, #4]
 800aae2:	7c12      	ldrb	r2, [r2, #16]
 800aae4:	f107 0108 	add.w	r1, r7, #8
 800aae8:	4610      	mov	r0, r2
 800aaea:	4798      	blx	r3
 800aaec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aaee:	e00f      	b.n	800ab10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aaf0:	6839      	ldr	r1, [r7, #0]
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	f000 fa12 	bl	800af1c <USBD_CtlError>
            err++;
 800aaf8:	7afb      	ldrb	r3, [r7, #11]
 800aafa:	3301      	adds	r3, #1
 800aafc:	72fb      	strb	r3, [r7, #11]
          break;
 800aafe:	e007      	b.n	800ab10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800ab00:	6839      	ldr	r1, [r7, #0]
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f000 fa0a 	bl	800af1c <USBD_CtlError>
          err++;
 800ab08:	7afb      	ldrb	r3, [r7, #11]
 800ab0a:	3301      	adds	r3, #1
 800ab0c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800ab0e:	e038      	b.n	800ab82 <USBD_GetDescriptor+0x286>
 800ab10:	e037      	b.n	800ab82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	7c1b      	ldrb	r3, [r3, #16]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d109      	bne.n	800ab2e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab22:	f107 0208 	add.w	r2, r7, #8
 800ab26:	4610      	mov	r0, r2
 800ab28:	4798      	blx	r3
 800ab2a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ab2c:	e029      	b.n	800ab82 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ab2e:	6839      	ldr	r1, [r7, #0]
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f000 f9f3 	bl	800af1c <USBD_CtlError>
        err++;
 800ab36:	7afb      	ldrb	r3, [r7, #11]
 800ab38:	3301      	adds	r3, #1
 800ab3a:	72fb      	strb	r3, [r7, #11]
      break;
 800ab3c:	e021      	b.n	800ab82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	7c1b      	ldrb	r3, [r3, #16]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d10d      	bne.n	800ab62 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab4e:	f107 0208 	add.w	r2, r7, #8
 800ab52:	4610      	mov	r0, r2
 800ab54:	4798      	blx	r3
 800ab56:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	3301      	adds	r3, #1
 800ab5c:	2207      	movs	r2, #7
 800ab5e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ab60:	e00f      	b.n	800ab82 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ab62:	6839      	ldr	r1, [r7, #0]
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f000 f9d9 	bl	800af1c <USBD_CtlError>
        err++;
 800ab6a:	7afb      	ldrb	r3, [r7, #11]
 800ab6c:	3301      	adds	r3, #1
 800ab6e:	72fb      	strb	r3, [r7, #11]
      break;
 800ab70:	e007      	b.n	800ab82 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ab72:	6839      	ldr	r1, [r7, #0]
 800ab74:	6878      	ldr	r0, [r7, #4]
 800ab76:	f000 f9d1 	bl	800af1c <USBD_CtlError>
      err++;
 800ab7a:	7afb      	ldrb	r3, [r7, #11]
 800ab7c:	3301      	adds	r3, #1
 800ab7e:	72fb      	strb	r3, [r7, #11]
      break;
 800ab80:	bf00      	nop
  }

  if (err != 0U)
 800ab82:	7afb      	ldrb	r3, [r7, #11]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d11c      	bne.n	800abc2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800ab88:	893b      	ldrh	r3, [r7, #8]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d011      	beq.n	800abb2 <USBD_GetDescriptor+0x2b6>
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	88db      	ldrh	r3, [r3, #6]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d00d      	beq.n	800abb2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	88da      	ldrh	r2, [r3, #6]
 800ab9a:	893b      	ldrh	r3, [r7, #8]
 800ab9c:	4293      	cmp	r3, r2
 800ab9e:	bf28      	it	cs
 800aba0:	4613      	movcs	r3, r2
 800aba2:	b29b      	uxth	r3, r3
 800aba4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800aba6:	893b      	ldrh	r3, [r7, #8]
 800aba8:	461a      	mov	r2, r3
 800abaa:	68f9      	ldr	r1, [r7, #12]
 800abac:	6878      	ldr	r0, [r7, #4]
 800abae:	f000 fa1f 	bl	800aff0 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	88db      	ldrh	r3, [r3, #6]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d104      	bne.n	800abc4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f000 fa76 	bl	800b0ac <USBD_CtlSendStatus>
 800abc0:	e000      	b.n	800abc4 <USBD_GetDescriptor+0x2c8>
    return;
 800abc2:	bf00      	nop
    }
  }
}
 800abc4:	3710      	adds	r7, #16
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}
 800abca:	bf00      	nop

0800abcc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b084      	sub	sp, #16
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
 800abd4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	889b      	ldrh	r3, [r3, #4]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d130      	bne.n	800ac40 <USBD_SetAddress+0x74>
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	88db      	ldrh	r3, [r3, #6]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d12c      	bne.n	800ac40 <USBD_SetAddress+0x74>
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	885b      	ldrh	r3, [r3, #2]
 800abea:	2b7f      	cmp	r3, #127	; 0x7f
 800abec:	d828      	bhi.n	800ac40 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	885b      	ldrh	r3, [r3, #2]
 800abf2:	b2db      	uxtb	r3, r3
 800abf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abf8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac00:	2b03      	cmp	r3, #3
 800ac02:	d104      	bne.n	800ac0e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800ac04:	6839      	ldr	r1, [r7, #0]
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f000 f988 	bl	800af1c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac0c:	e01c      	b.n	800ac48 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	7bfa      	ldrb	r2, [r7, #15]
 800ac12:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ac16:	7bfb      	ldrb	r3, [r7, #15]
 800ac18:	4619      	mov	r1, r3
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f000 fe3b 	bl	800b896 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	f000 fa43 	bl	800b0ac <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ac26:	7bfb      	ldrb	r3, [r7, #15]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d004      	beq.n	800ac36 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2202      	movs	r2, #2
 800ac30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac34:	e008      	b.n	800ac48 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2201      	movs	r2, #1
 800ac3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac3e:	e003      	b.n	800ac48 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ac40:	6839      	ldr	r1, [r7, #0]
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f000 f96a 	bl	800af1c <USBD_CtlError>
  }
}
 800ac48:	bf00      	nop
 800ac4a:	3710      	adds	r7, #16
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}

0800ac50 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b082      	sub	sp, #8
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
 800ac58:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	885b      	ldrh	r3, [r3, #2]
 800ac5e:	b2da      	uxtb	r2, r3
 800ac60:	4b41      	ldr	r3, [pc, #260]	; (800ad68 <USBD_SetConfig+0x118>)
 800ac62:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ac64:	4b40      	ldr	r3, [pc, #256]	; (800ad68 <USBD_SetConfig+0x118>)
 800ac66:	781b      	ldrb	r3, [r3, #0]
 800ac68:	2b01      	cmp	r3, #1
 800ac6a:	d904      	bls.n	800ac76 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800ac6c:	6839      	ldr	r1, [r7, #0]
 800ac6e:	6878      	ldr	r0, [r7, #4]
 800ac70:	f000 f954 	bl	800af1c <USBD_CtlError>
 800ac74:	e075      	b.n	800ad62 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac7c:	2b02      	cmp	r3, #2
 800ac7e:	d002      	beq.n	800ac86 <USBD_SetConfig+0x36>
 800ac80:	2b03      	cmp	r3, #3
 800ac82:	d023      	beq.n	800accc <USBD_SetConfig+0x7c>
 800ac84:	e062      	b.n	800ad4c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800ac86:	4b38      	ldr	r3, [pc, #224]	; (800ad68 <USBD_SetConfig+0x118>)
 800ac88:	781b      	ldrb	r3, [r3, #0]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d01a      	beq.n	800acc4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800ac8e:	4b36      	ldr	r3, [pc, #216]	; (800ad68 <USBD_SetConfig+0x118>)
 800ac90:	781b      	ldrb	r3, [r3, #0]
 800ac92:	461a      	mov	r2, r3
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2203      	movs	r2, #3
 800ac9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800aca0:	4b31      	ldr	r3, [pc, #196]	; (800ad68 <USBD_SetConfig+0x118>)
 800aca2:	781b      	ldrb	r3, [r3, #0]
 800aca4:	4619      	mov	r1, r3
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f7ff f9f3 	bl	800a092 <USBD_SetClassConfig>
 800acac:	4603      	mov	r3, r0
 800acae:	2b02      	cmp	r3, #2
 800acb0:	d104      	bne.n	800acbc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800acb2:	6839      	ldr	r1, [r7, #0]
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	f000 f931 	bl	800af1c <USBD_CtlError>
            return;
 800acba:	e052      	b.n	800ad62 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	f000 f9f5 	bl	800b0ac <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800acc2:	e04e      	b.n	800ad62 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800acc4:	6878      	ldr	r0, [r7, #4]
 800acc6:	f000 f9f1 	bl	800b0ac <USBD_CtlSendStatus>
        break;
 800acca:	e04a      	b.n	800ad62 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800accc:	4b26      	ldr	r3, [pc, #152]	; (800ad68 <USBD_SetConfig+0x118>)
 800acce:	781b      	ldrb	r3, [r3, #0]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d112      	bne.n	800acfa <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2202      	movs	r2, #2
 800acd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800acdc:	4b22      	ldr	r3, [pc, #136]	; (800ad68 <USBD_SetConfig+0x118>)
 800acde:	781b      	ldrb	r3, [r3, #0]
 800ace0:	461a      	mov	r2, r3
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800ace6:	4b20      	ldr	r3, [pc, #128]	; (800ad68 <USBD_SetConfig+0x118>)
 800ace8:	781b      	ldrb	r3, [r3, #0]
 800acea:	4619      	mov	r1, r3
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f7ff f9ef 	bl	800a0d0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f000 f9da 	bl	800b0ac <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800acf8:	e033      	b.n	800ad62 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800acfa:	4b1b      	ldr	r3, [pc, #108]	; (800ad68 <USBD_SetConfig+0x118>)
 800acfc:	781b      	ldrb	r3, [r3, #0]
 800acfe:	461a      	mov	r2, r3
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	685b      	ldr	r3, [r3, #4]
 800ad04:	429a      	cmp	r2, r3
 800ad06:	d01d      	beq.n	800ad44 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	685b      	ldr	r3, [r3, #4]
 800ad0c:	b2db      	uxtb	r3, r3
 800ad0e:	4619      	mov	r1, r3
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	f7ff f9dd 	bl	800a0d0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800ad16:	4b14      	ldr	r3, [pc, #80]	; (800ad68 <USBD_SetConfig+0x118>)
 800ad18:	781b      	ldrb	r3, [r3, #0]
 800ad1a:	461a      	mov	r2, r3
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ad20:	4b11      	ldr	r3, [pc, #68]	; (800ad68 <USBD_SetConfig+0x118>)
 800ad22:	781b      	ldrb	r3, [r3, #0]
 800ad24:	4619      	mov	r1, r3
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f7ff f9b3 	bl	800a092 <USBD_SetClassConfig>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	2b02      	cmp	r3, #2
 800ad30:	d104      	bne.n	800ad3c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800ad32:	6839      	ldr	r1, [r7, #0]
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f000 f8f1 	bl	800af1c <USBD_CtlError>
            return;
 800ad3a:	e012      	b.n	800ad62 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f000 f9b5 	bl	800b0ac <USBD_CtlSendStatus>
        break;
 800ad42:	e00e      	b.n	800ad62 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ad44:	6878      	ldr	r0, [r7, #4]
 800ad46:	f000 f9b1 	bl	800b0ac <USBD_CtlSendStatus>
        break;
 800ad4a:	e00a      	b.n	800ad62 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800ad4c:	6839      	ldr	r1, [r7, #0]
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f000 f8e4 	bl	800af1c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800ad54:	4b04      	ldr	r3, [pc, #16]	; (800ad68 <USBD_SetConfig+0x118>)
 800ad56:	781b      	ldrb	r3, [r3, #0]
 800ad58:	4619      	mov	r1, r3
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	f7ff f9b8 	bl	800a0d0 <USBD_ClrClassConfig>
        break;
 800ad60:	bf00      	nop
    }
  }
}
 800ad62:	3708      	adds	r7, #8
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd80      	pop	{r7, pc}
 800ad68:	20000734 	.word	0x20000734

0800ad6c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b082      	sub	sp, #8
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
 800ad74:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	88db      	ldrh	r3, [r3, #6]
 800ad7a:	2b01      	cmp	r3, #1
 800ad7c:	d004      	beq.n	800ad88 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ad7e:	6839      	ldr	r1, [r7, #0]
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f000 f8cb 	bl	800af1c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ad86:	e021      	b.n	800adcc <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad8e:	2b01      	cmp	r3, #1
 800ad90:	db17      	blt.n	800adc2 <USBD_GetConfig+0x56>
 800ad92:	2b02      	cmp	r3, #2
 800ad94:	dd02      	ble.n	800ad9c <USBD_GetConfig+0x30>
 800ad96:	2b03      	cmp	r3, #3
 800ad98:	d00b      	beq.n	800adb2 <USBD_GetConfig+0x46>
 800ad9a:	e012      	b.n	800adc2 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2200      	movs	r2, #0
 800ada0:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	3308      	adds	r3, #8
 800ada6:	2201      	movs	r2, #1
 800ada8:	4619      	mov	r1, r3
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f000 f920 	bl	800aff0 <USBD_CtlSendData>
        break;
 800adb0:	e00c      	b.n	800adcc <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	3304      	adds	r3, #4
 800adb6:	2201      	movs	r2, #1
 800adb8:	4619      	mov	r1, r3
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	f000 f918 	bl	800aff0 <USBD_CtlSendData>
        break;
 800adc0:	e004      	b.n	800adcc <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800adc2:	6839      	ldr	r1, [r7, #0]
 800adc4:	6878      	ldr	r0, [r7, #4]
 800adc6:	f000 f8a9 	bl	800af1c <USBD_CtlError>
        break;
 800adca:	bf00      	nop
}
 800adcc:	bf00      	nop
 800adce:	3708      	adds	r7, #8
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}

0800add4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b082      	sub	sp, #8
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
 800addc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ade4:	3b01      	subs	r3, #1
 800ade6:	2b02      	cmp	r3, #2
 800ade8:	d81e      	bhi.n	800ae28 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	88db      	ldrh	r3, [r3, #6]
 800adee:	2b02      	cmp	r3, #2
 800adf0:	d004      	beq.n	800adfc <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800adf2:	6839      	ldr	r1, [r7, #0]
 800adf4:	6878      	ldr	r0, [r7, #4]
 800adf6:	f000 f891 	bl	800af1c <USBD_CtlError>
        break;
 800adfa:	e01a      	b.n	800ae32 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2201      	movs	r2, #1
 800ae00:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d005      	beq.n	800ae18 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	68db      	ldr	r3, [r3, #12]
 800ae10:	f043 0202 	orr.w	r2, r3, #2
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	330c      	adds	r3, #12
 800ae1c:	2202      	movs	r2, #2
 800ae1e:	4619      	mov	r1, r3
 800ae20:	6878      	ldr	r0, [r7, #4]
 800ae22:	f000 f8e5 	bl	800aff0 <USBD_CtlSendData>
      break;
 800ae26:	e004      	b.n	800ae32 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800ae28:	6839      	ldr	r1, [r7, #0]
 800ae2a:	6878      	ldr	r0, [r7, #4]
 800ae2c:	f000 f876 	bl	800af1c <USBD_CtlError>
      break;
 800ae30:	bf00      	nop
  }
}
 800ae32:	bf00      	nop
 800ae34:	3708      	adds	r7, #8
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd80      	pop	{r7, pc}

0800ae3a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ae3a:	b580      	push	{r7, lr}
 800ae3c:	b082      	sub	sp, #8
 800ae3e:	af00      	add	r7, sp, #0
 800ae40:	6078      	str	r0, [r7, #4]
 800ae42:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	885b      	ldrh	r3, [r3, #2]
 800ae48:	2b01      	cmp	r3, #1
 800ae4a:	d106      	bne.n	800ae5a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2201      	movs	r2, #1
 800ae50:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f000 f929 	bl	800b0ac <USBD_CtlSendStatus>
  }
}
 800ae5a:	bf00      	nop
 800ae5c:	3708      	adds	r7, #8
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}

0800ae62 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ae62:	b580      	push	{r7, lr}
 800ae64:	b082      	sub	sp, #8
 800ae66:	af00      	add	r7, sp, #0
 800ae68:	6078      	str	r0, [r7, #4]
 800ae6a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae72:	3b01      	subs	r3, #1
 800ae74:	2b02      	cmp	r3, #2
 800ae76:	d80b      	bhi.n	800ae90 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	885b      	ldrh	r3, [r3, #2]
 800ae7c:	2b01      	cmp	r3, #1
 800ae7e:	d10c      	bne.n	800ae9a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2200      	movs	r2, #0
 800ae84:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800ae88:	6878      	ldr	r0, [r7, #4]
 800ae8a:	f000 f90f 	bl	800b0ac <USBD_CtlSendStatus>
      }
      break;
 800ae8e:	e004      	b.n	800ae9a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800ae90:	6839      	ldr	r1, [r7, #0]
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f000 f842 	bl	800af1c <USBD_CtlError>
      break;
 800ae98:	e000      	b.n	800ae9c <USBD_ClrFeature+0x3a>
      break;
 800ae9a:	bf00      	nop
  }
}
 800ae9c:	bf00      	nop
 800ae9e:	3708      	adds	r7, #8
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}

0800aea4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800aea4:	b480      	push	{r7}
 800aea6:	b083      	sub	sp, #12
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
 800aeac:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	781a      	ldrb	r2, [r3, #0]
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	785a      	ldrb	r2, [r3, #1]
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	3302      	adds	r3, #2
 800aec2:	781b      	ldrb	r3, [r3, #0]
 800aec4:	b29a      	uxth	r2, r3
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	3303      	adds	r3, #3
 800aeca:	781b      	ldrb	r3, [r3, #0]
 800aecc:	b29b      	uxth	r3, r3
 800aece:	021b      	lsls	r3, r3, #8
 800aed0:	b29b      	uxth	r3, r3
 800aed2:	4413      	add	r3, r2
 800aed4:	b29a      	uxth	r2, r3
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	3304      	adds	r3, #4
 800aede:	781b      	ldrb	r3, [r3, #0]
 800aee0:	b29a      	uxth	r2, r3
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	3305      	adds	r3, #5
 800aee6:	781b      	ldrb	r3, [r3, #0]
 800aee8:	b29b      	uxth	r3, r3
 800aeea:	021b      	lsls	r3, r3, #8
 800aeec:	b29b      	uxth	r3, r3
 800aeee:	4413      	add	r3, r2
 800aef0:	b29a      	uxth	r2, r3
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	3306      	adds	r3, #6
 800aefa:	781b      	ldrb	r3, [r3, #0]
 800aefc:	b29a      	uxth	r2, r3
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	3307      	adds	r3, #7
 800af02:	781b      	ldrb	r3, [r3, #0]
 800af04:	b29b      	uxth	r3, r3
 800af06:	021b      	lsls	r3, r3, #8
 800af08:	b29b      	uxth	r3, r3
 800af0a:	4413      	add	r3, r2
 800af0c:	b29a      	uxth	r2, r3
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	80da      	strh	r2, [r3, #6]

}
 800af12:	bf00      	nop
 800af14:	370c      	adds	r7, #12
 800af16:	46bd      	mov	sp, r7
 800af18:	bc80      	pop	{r7}
 800af1a:	4770      	bx	lr

0800af1c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b082      	sub	sp, #8
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
 800af24:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800af26:	2180      	movs	r1, #128	; 0x80
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	f000 fc51 	bl	800b7d0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800af2e:	2100      	movs	r1, #0
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f000 fc4d 	bl	800b7d0 <USBD_LL_StallEP>
}
 800af36:	bf00      	nop
 800af38:	3708      	adds	r7, #8
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bd80      	pop	{r7, pc}

0800af3e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800af3e:	b580      	push	{r7, lr}
 800af40:	b086      	sub	sp, #24
 800af42:	af00      	add	r7, sp, #0
 800af44:	60f8      	str	r0, [r7, #12]
 800af46:	60b9      	str	r1, [r7, #8]
 800af48:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800af4a:	2300      	movs	r3, #0
 800af4c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d032      	beq.n	800afba <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800af54:	68f8      	ldr	r0, [r7, #12]
 800af56:	f000 f834 	bl	800afc2 <USBD_GetLen>
 800af5a:	4603      	mov	r3, r0
 800af5c:	3301      	adds	r3, #1
 800af5e:	b29b      	uxth	r3, r3
 800af60:	005b      	lsls	r3, r3, #1
 800af62:	b29a      	uxth	r2, r3
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800af68:	7dfb      	ldrb	r3, [r7, #23]
 800af6a:	1c5a      	adds	r2, r3, #1
 800af6c:	75fa      	strb	r2, [r7, #23]
 800af6e:	461a      	mov	r2, r3
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	4413      	add	r3, r2
 800af74:	687a      	ldr	r2, [r7, #4]
 800af76:	7812      	ldrb	r2, [r2, #0]
 800af78:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800af7a:	7dfb      	ldrb	r3, [r7, #23]
 800af7c:	1c5a      	adds	r2, r3, #1
 800af7e:	75fa      	strb	r2, [r7, #23]
 800af80:	461a      	mov	r2, r3
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	4413      	add	r3, r2
 800af86:	2203      	movs	r2, #3
 800af88:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800af8a:	e012      	b.n	800afb2 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	1c5a      	adds	r2, r3, #1
 800af90:	60fa      	str	r2, [r7, #12]
 800af92:	7dfa      	ldrb	r2, [r7, #23]
 800af94:	1c51      	adds	r1, r2, #1
 800af96:	75f9      	strb	r1, [r7, #23]
 800af98:	4611      	mov	r1, r2
 800af9a:	68ba      	ldr	r2, [r7, #8]
 800af9c:	440a      	add	r2, r1
 800af9e:	781b      	ldrb	r3, [r3, #0]
 800afa0:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800afa2:	7dfb      	ldrb	r3, [r7, #23]
 800afa4:	1c5a      	adds	r2, r3, #1
 800afa6:	75fa      	strb	r2, [r7, #23]
 800afa8:	461a      	mov	r2, r3
 800afaa:	68bb      	ldr	r3, [r7, #8]
 800afac:	4413      	add	r3, r2
 800afae:	2200      	movs	r2, #0
 800afb0:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	781b      	ldrb	r3, [r3, #0]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d1e8      	bne.n	800af8c <USBD_GetString+0x4e>
    }
  }
}
 800afba:	bf00      	nop
 800afbc:	3718      	adds	r7, #24
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bd80      	pop	{r7, pc}

0800afc2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800afc2:	b480      	push	{r7}
 800afc4:	b085      	sub	sp, #20
 800afc6:	af00      	add	r7, sp, #0
 800afc8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800afca:	2300      	movs	r3, #0
 800afcc:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800afce:	e005      	b.n	800afdc <USBD_GetLen+0x1a>
  {
    len++;
 800afd0:	7bfb      	ldrb	r3, [r7, #15]
 800afd2:	3301      	adds	r3, #1
 800afd4:	73fb      	strb	r3, [r7, #15]
    buf++;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	3301      	adds	r3, #1
 800afda:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	781b      	ldrb	r3, [r3, #0]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d1f5      	bne.n	800afd0 <USBD_GetLen+0xe>
  }

  return len;
 800afe4:	7bfb      	ldrb	r3, [r7, #15]
}
 800afe6:	4618      	mov	r0, r3
 800afe8:	3714      	adds	r7, #20
 800afea:	46bd      	mov	sp, r7
 800afec:	bc80      	pop	{r7}
 800afee:	4770      	bx	lr

0800aff0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b084      	sub	sp, #16
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	60f8      	str	r0, [r7, #12]
 800aff8:	60b9      	str	r1, [r7, #8]
 800affa:	4613      	mov	r3, r2
 800affc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	2202      	movs	r2, #2
 800b002:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b006:	88fa      	ldrh	r2, [r7, #6]
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b00c:	88fa      	ldrh	r2, [r7, #6]
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b012:	88fb      	ldrh	r3, [r7, #6]
 800b014:	68ba      	ldr	r2, [r7, #8]
 800b016:	2100      	movs	r1, #0
 800b018:	68f8      	ldr	r0, [r7, #12]
 800b01a:	f000 fc5b 	bl	800b8d4 <USBD_LL_Transmit>

  return USBD_OK;
 800b01e:	2300      	movs	r3, #0
}
 800b020:	4618      	mov	r0, r3
 800b022:	3710      	adds	r7, #16
 800b024:	46bd      	mov	sp, r7
 800b026:	bd80      	pop	{r7, pc}

0800b028 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b084      	sub	sp, #16
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	60f8      	str	r0, [r7, #12]
 800b030:	60b9      	str	r1, [r7, #8]
 800b032:	4613      	mov	r3, r2
 800b034:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b036:	88fb      	ldrh	r3, [r7, #6]
 800b038:	68ba      	ldr	r2, [r7, #8]
 800b03a:	2100      	movs	r1, #0
 800b03c:	68f8      	ldr	r0, [r7, #12]
 800b03e:	f000 fc49 	bl	800b8d4 <USBD_LL_Transmit>

  return USBD_OK;
 800b042:	2300      	movs	r3, #0
}
 800b044:	4618      	mov	r0, r3
 800b046:	3710      	adds	r7, #16
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd80      	pop	{r7, pc}

0800b04c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b084      	sub	sp, #16
 800b050:	af00      	add	r7, sp, #0
 800b052:	60f8      	str	r0, [r7, #12]
 800b054:	60b9      	str	r1, [r7, #8]
 800b056:	4613      	mov	r3, r2
 800b058:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	2203      	movs	r2, #3
 800b05e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b062:	88fa      	ldrh	r2, [r7, #6]
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800b06a:	88fa      	ldrh	r2, [r7, #6]
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b072:	88fb      	ldrh	r3, [r7, #6]
 800b074:	68ba      	ldr	r2, [r7, #8]
 800b076:	2100      	movs	r1, #0
 800b078:	68f8      	ldr	r0, [r7, #12]
 800b07a:	f000 fc4e 	bl	800b91a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b07e:	2300      	movs	r3, #0
}
 800b080:	4618      	mov	r0, r3
 800b082:	3710      	adds	r7, #16
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}

0800b088 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b084      	sub	sp, #16
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	60f8      	str	r0, [r7, #12]
 800b090:	60b9      	str	r1, [r7, #8]
 800b092:	4613      	mov	r3, r2
 800b094:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b096:	88fb      	ldrh	r3, [r7, #6]
 800b098:	68ba      	ldr	r2, [r7, #8]
 800b09a:	2100      	movs	r1, #0
 800b09c:	68f8      	ldr	r0, [r7, #12]
 800b09e:	f000 fc3c 	bl	800b91a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b0a2:	2300      	movs	r3, #0
}
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	3710      	adds	r7, #16
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	bd80      	pop	{r7, pc}

0800b0ac <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b082      	sub	sp, #8
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2204      	movs	r2, #4
 800b0b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b0bc:	2300      	movs	r3, #0
 800b0be:	2200      	movs	r2, #0
 800b0c0:	2100      	movs	r1, #0
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	f000 fc06 	bl	800b8d4 <USBD_LL_Transmit>

  return USBD_OK;
 800b0c8:	2300      	movs	r3, #0
}
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	3708      	adds	r7, #8
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}

0800b0d2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b0d2:	b580      	push	{r7, lr}
 800b0d4:	b082      	sub	sp, #8
 800b0d6:	af00      	add	r7, sp, #0
 800b0d8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2205      	movs	r2, #5
 800b0de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	2100      	movs	r1, #0
 800b0e8:	6878      	ldr	r0, [r7, #4]
 800b0ea:	f000 fc16 	bl	800b91a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b0ee:	2300      	movs	r3, #0
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	3708      	adds	r7, #8
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}

0800b0f8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	4912      	ldr	r1, [pc, #72]	; (800b148 <MX_USB_DEVICE_Init+0x50>)
 800b100:	4812      	ldr	r0, [pc, #72]	; (800b14c <MX_USB_DEVICE_Init+0x54>)
 800b102:	f7fe ff6c 	bl	8009fde <USBD_Init>
 800b106:	4603      	mov	r3, r0
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d001      	beq.n	800b110 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b10c:	f7f8 f90c 	bl	8003328 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b110:	490f      	ldr	r1, [pc, #60]	; (800b150 <MX_USB_DEVICE_Init+0x58>)
 800b112:	480e      	ldr	r0, [pc, #56]	; (800b14c <MX_USB_DEVICE_Init+0x54>)
 800b114:	f7fe ff8e 	bl	800a034 <USBD_RegisterClass>
 800b118:	4603      	mov	r3, r0
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d001      	beq.n	800b122 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b11e:	f7f8 f903 	bl	8003328 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b122:	490c      	ldr	r1, [pc, #48]	; (800b154 <MX_USB_DEVICE_Init+0x5c>)
 800b124:	4809      	ldr	r0, [pc, #36]	; (800b14c <MX_USB_DEVICE_Init+0x54>)
 800b126:	f7fe febf 	bl	8009ea8 <USBD_CDC_RegisterInterface>
 800b12a:	4603      	mov	r3, r0
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d001      	beq.n	800b134 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b130:	f7f8 f8fa 	bl	8003328 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b134:	4805      	ldr	r0, [pc, #20]	; (800b14c <MX_USB_DEVICE_Init+0x54>)
 800b136:	f7fe ff96 	bl	800a066 <USBD_Start>
 800b13a:	4603      	mov	r3, r0
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d001      	beq.n	800b144 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b140:	f7f8 f8f2 	bl	8003328 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b144:	bf00      	nop
 800b146:	bd80      	pop	{r7, pc}
 800b148:	2000013c 	.word	0x2000013c
 800b14c:	20000bc0 	.word	0x20000bc0
 800b150:	20000028 	.word	0x20000028
 800b154:	2000012c 	.word	0x2000012c

0800b158 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b15c:	2200      	movs	r2, #0
 800b15e:	4905      	ldr	r1, [pc, #20]	; (800b174 <CDC_Init_FS+0x1c>)
 800b160:	4805      	ldr	r0, [pc, #20]	; (800b178 <CDC_Init_FS+0x20>)
 800b162:	f7fe feb7 	bl	8009ed4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b166:	4905      	ldr	r1, [pc, #20]	; (800b17c <CDC_Init_FS+0x24>)
 800b168:	4803      	ldr	r0, [pc, #12]	; (800b178 <CDC_Init_FS+0x20>)
 800b16a:	f7fe fecc 	bl	8009f06 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b16e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b170:	4618      	mov	r0, r3
 800b172:	bd80      	pop	{r7, pc}
 800b174:	2000126c 	.word	0x2000126c
 800b178:	20000bc0 	.word	0x20000bc0
 800b17c:	20000e84 	.word	0x20000e84

0800b180 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b180:	b480      	push	{r7}
 800b182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b184:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b186:	4618      	mov	r0, r3
 800b188:	46bd      	mov	sp, r7
 800b18a:	bc80      	pop	{r7}
 800b18c:	4770      	bx	lr
	...

0800b190 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b190:	b480      	push	{r7}
 800b192:	b083      	sub	sp, #12
 800b194:	af00      	add	r7, sp, #0
 800b196:	4603      	mov	r3, r0
 800b198:	6039      	str	r1, [r7, #0]
 800b19a:	71fb      	strb	r3, [r7, #7]
 800b19c:	4613      	mov	r3, r2
 800b19e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b1a0:	79fb      	ldrb	r3, [r7, #7]
 800b1a2:	2b23      	cmp	r3, #35	; 0x23
 800b1a4:	d84a      	bhi.n	800b23c <CDC_Control_FS+0xac>
 800b1a6:	a201      	add	r2, pc, #4	; (adr r2, 800b1ac <CDC_Control_FS+0x1c>)
 800b1a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1ac:	0800b23d 	.word	0x0800b23d
 800b1b0:	0800b23d 	.word	0x0800b23d
 800b1b4:	0800b23d 	.word	0x0800b23d
 800b1b8:	0800b23d 	.word	0x0800b23d
 800b1bc:	0800b23d 	.word	0x0800b23d
 800b1c0:	0800b23d 	.word	0x0800b23d
 800b1c4:	0800b23d 	.word	0x0800b23d
 800b1c8:	0800b23d 	.word	0x0800b23d
 800b1cc:	0800b23d 	.word	0x0800b23d
 800b1d0:	0800b23d 	.word	0x0800b23d
 800b1d4:	0800b23d 	.word	0x0800b23d
 800b1d8:	0800b23d 	.word	0x0800b23d
 800b1dc:	0800b23d 	.word	0x0800b23d
 800b1e0:	0800b23d 	.word	0x0800b23d
 800b1e4:	0800b23d 	.word	0x0800b23d
 800b1e8:	0800b23d 	.word	0x0800b23d
 800b1ec:	0800b23d 	.word	0x0800b23d
 800b1f0:	0800b23d 	.word	0x0800b23d
 800b1f4:	0800b23d 	.word	0x0800b23d
 800b1f8:	0800b23d 	.word	0x0800b23d
 800b1fc:	0800b23d 	.word	0x0800b23d
 800b200:	0800b23d 	.word	0x0800b23d
 800b204:	0800b23d 	.word	0x0800b23d
 800b208:	0800b23d 	.word	0x0800b23d
 800b20c:	0800b23d 	.word	0x0800b23d
 800b210:	0800b23d 	.word	0x0800b23d
 800b214:	0800b23d 	.word	0x0800b23d
 800b218:	0800b23d 	.word	0x0800b23d
 800b21c:	0800b23d 	.word	0x0800b23d
 800b220:	0800b23d 	.word	0x0800b23d
 800b224:	0800b23d 	.word	0x0800b23d
 800b228:	0800b23d 	.word	0x0800b23d
 800b22c:	0800b23d 	.word	0x0800b23d
 800b230:	0800b23d 	.word	0x0800b23d
 800b234:	0800b23d 	.word	0x0800b23d
 800b238:	0800b23d 	.word	0x0800b23d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b23c:	bf00      	nop
  }

  return (USBD_OK);
 800b23e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b240:	4618      	mov	r0, r3
 800b242:	370c      	adds	r7, #12
 800b244:	46bd      	mov	sp, r7
 800b246:	bc80      	pop	{r7}
 800b248:	4770      	bx	lr
 800b24a:	bf00      	nop

0800b24c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b082      	sub	sp, #8
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
 800b254:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	Serial_Recived(Buf, Len);
 800b256:	6839      	ldr	r1, [r7, #0]
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	f7f6 feaf 	bl	8001fbc <Serial_Recived>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b25e:	6879      	ldr	r1, [r7, #4]
 800b260:	4805      	ldr	r0, [pc, #20]	; (800b278 <CDC_Receive_FS+0x2c>)
 800b262:	f7fe fe50 	bl	8009f06 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b266:	4804      	ldr	r0, [pc, #16]	; (800b278 <CDC_Receive_FS+0x2c>)
 800b268:	f7fe fe8f 	bl	8009f8a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b26c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b26e:	4618      	mov	r0, r3
 800b270:	3708      	adds	r7, #8
 800b272:	46bd      	mov	sp, r7
 800b274:	bd80      	pop	{r7, pc}
 800b276:	bf00      	nop
 800b278:	20000bc0 	.word	0x20000bc0

0800b27c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b084      	sub	sp, #16
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
 800b284:	460b      	mov	r3, r1
 800b286:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b288:	2300      	movs	r3, #0
 800b28a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b28c:	4b0d      	ldr	r3, [pc, #52]	; (800b2c4 <CDC_Transmit_FS+0x48>)
 800b28e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b292:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b294:	68bb      	ldr	r3, [r7, #8]
 800b296:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d001      	beq.n	800b2a2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b29e:	2301      	movs	r3, #1
 800b2a0:	e00b      	b.n	800b2ba <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b2a2:	887b      	ldrh	r3, [r7, #2]
 800b2a4:	461a      	mov	r2, r3
 800b2a6:	6879      	ldr	r1, [r7, #4]
 800b2a8:	4806      	ldr	r0, [pc, #24]	; (800b2c4 <CDC_Transmit_FS+0x48>)
 800b2aa:	f7fe fe13 	bl	8009ed4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b2ae:	4805      	ldr	r0, [pc, #20]	; (800b2c4 <CDC_Transmit_FS+0x48>)
 800b2b0:	f7fe fe3c 	bl	8009f2c <USBD_CDC_TransmitPacket>
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b2b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	3710      	adds	r7, #16
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bd80      	pop	{r7, pc}
 800b2c2:	bf00      	nop
 800b2c4:	20000bc0 	.word	0x20000bc0

0800b2c8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	b083      	sub	sp, #12
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	6039      	str	r1, [r7, #0]
 800b2d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	2212      	movs	r2, #18
 800b2d8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b2da:	4b03      	ldr	r3, [pc, #12]	; (800b2e8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	370c      	adds	r7, #12
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bc80      	pop	{r7}
 800b2e4:	4770      	bx	lr
 800b2e6:	bf00      	nop
 800b2e8:	20000158 	.word	0x20000158

0800b2ec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2ec:	b480      	push	{r7}
 800b2ee:	b083      	sub	sp, #12
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	6039      	str	r1, [r7, #0]
 800b2f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	2204      	movs	r2, #4
 800b2fc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b2fe:	4b03      	ldr	r3, [pc, #12]	; (800b30c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b300:	4618      	mov	r0, r3
 800b302:	370c      	adds	r7, #12
 800b304:	46bd      	mov	sp, r7
 800b306:	bc80      	pop	{r7}
 800b308:	4770      	bx	lr
 800b30a:	bf00      	nop
 800b30c:	2000016c 	.word	0x2000016c

0800b310 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b082      	sub	sp, #8
 800b314:	af00      	add	r7, sp, #0
 800b316:	4603      	mov	r3, r0
 800b318:	6039      	str	r1, [r7, #0]
 800b31a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b31c:	79fb      	ldrb	r3, [r7, #7]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d105      	bne.n	800b32e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b322:	683a      	ldr	r2, [r7, #0]
 800b324:	4907      	ldr	r1, [pc, #28]	; (800b344 <USBD_FS_ProductStrDescriptor+0x34>)
 800b326:	4808      	ldr	r0, [pc, #32]	; (800b348 <USBD_FS_ProductStrDescriptor+0x38>)
 800b328:	f7ff fe09 	bl	800af3e <USBD_GetString>
 800b32c:	e004      	b.n	800b338 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b32e:	683a      	ldr	r2, [r7, #0]
 800b330:	4904      	ldr	r1, [pc, #16]	; (800b344 <USBD_FS_ProductStrDescriptor+0x34>)
 800b332:	4805      	ldr	r0, [pc, #20]	; (800b348 <USBD_FS_ProductStrDescriptor+0x38>)
 800b334:	f7ff fe03 	bl	800af3e <USBD_GetString>
  }
  return USBD_StrDesc;
 800b338:	4b02      	ldr	r3, [pc, #8]	; (800b344 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	3708      	adds	r7, #8
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}
 800b342:	bf00      	nop
 800b344:	20001654 	.word	0x20001654
 800b348:	0800c830 	.word	0x0800c830

0800b34c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b082      	sub	sp, #8
 800b350:	af00      	add	r7, sp, #0
 800b352:	4603      	mov	r3, r0
 800b354:	6039      	str	r1, [r7, #0]
 800b356:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b358:	683a      	ldr	r2, [r7, #0]
 800b35a:	4904      	ldr	r1, [pc, #16]	; (800b36c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b35c:	4804      	ldr	r0, [pc, #16]	; (800b370 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b35e:	f7ff fdee 	bl	800af3e <USBD_GetString>
  return USBD_StrDesc;
 800b362:	4b02      	ldr	r3, [pc, #8]	; (800b36c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b364:	4618      	mov	r0, r3
 800b366:	3708      	adds	r7, #8
 800b368:	46bd      	mov	sp, r7
 800b36a:	bd80      	pop	{r7, pc}
 800b36c:	20001654 	.word	0x20001654
 800b370:	0800c848 	.word	0x0800c848

0800b374 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b082      	sub	sp, #8
 800b378:	af00      	add	r7, sp, #0
 800b37a:	4603      	mov	r3, r0
 800b37c:	6039      	str	r1, [r7, #0]
 800b37e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	221a      	movs	r2, #26
 800b384:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b386:	f000 f843 	bl	800b410 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b38a:	4b02      	ldr	r3, [pc, #8]	; (800b394 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b38c:	4618      	mov	r0, r3
 800b38e:	3708      	adds	r7, #8
 800b390:	46bd      	mov	sp, r7
 800b392:	bd80      	pop	{r7, pc}
 800b394:	20000170 	.word	0x20000170

0800b398 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b082      	sub	sp, #8
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	4603      	mov	r3, r0
 800b3a0:	6039      	str	r1, [r7, #0]
 800b3a2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b3a4:	79fb      	ldrb	r3, [r7, #7]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d105      	bne.n	800b3b6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b3aa:	683a      	ldr	r2, [r7, #0]
 800b3ac:	4907      	ldr	r1, [pc, #28]	; (800b3cc <USBD_FS_ConfigStrDescriptor+0x34>)
 800b3ae:	4808      	ldr	r0, [pc, #32]	; (800b3d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b3b0:	f7ff fdc5 	bl	800af3e <USBD_GetString>
 800b3b4:	e004      	b.n	800b3c0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b3b6:	683a      	ldr	r2, [r7, #0]
 800b3b8:	4904      	ldr	r1, [pc, #16]	; (800b3cc <USBD_FS_ConfigStrDescriptor+0x34>)
 800b3ba:	4805      	ldr	r0, [pc, #20]	; (800b3d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b3bc:	f7ff fdbf 	bl	800af3e <USBD_GetString>
  }
  return USBD_StrDesc;
 800b3c0:	4b02      	ldr	r3, [pc, #8]	; (800b3cc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	3708      	adds	r7, #8
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}
 800b3ca:	bf00      	nop
 800b3cc:	20001654 	.word	0x20001654
 800b3d0:	0800c85c 	.word	0x0800c85c

0800b3d4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b082      	sub	sp, #8
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	4603      	mov	r3, r0
 800b3dc:	6039      	str	r1, [r7, #0]
 800b3de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b3e0:	79fb      	ldrb	r3, [r7, #7]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d105      	bne.n	800b3f2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b3e6:	683a      	ldr	r2, [r7, #0]
 800b3e8:	4907      	ldr	r1, [pc, #28]	; (800b408 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b3ea:	4808      	ldr	r0, [pc, #32]	; (800b40c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b3ec:	f7ff fda7 	bl	800af3e <USBD_GetString>
 800b3f0:	e004      	b.n	800b3fc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b3f2:	683a      	ldr	r2, [r7, #0]
 800b3f4:	4904      	ldr	r1, [pc, #16]	; (800b408 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b3f6:	4805      	ldr	r0, [pc, #20]	; (800b40c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b3f8:	f7ff fda1 	bl	800af3e <USBD_GetString>
  }
  return USBD_StrDesc;
 800b3fc:	4b02      	ldr	r3, [pc, #8]	; (800b408 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b3fe:	4618      	mov	r0, r3
 800b400:	3708      	adds	r7, #8
 800b402:	46bd      	mov	sp, r7
 800b404:	bd80      	pop	{r7, pc}
 800b406:	bf00      	nop
 800b408:	20001654 	.word	0x20001654
 800b40c:	0800c868 	.word	0x0800c868

0800b410 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b084      	sub	sp, #16
 800b414:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b416:	4b0f      	ldr	r3, [pc, #60]	; (800b454 <Get_SerialNum+0x44>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b41c:	4b0e      	ldr	r3, [pc, #56]	; (800b458 <Get_SerialNum+0x48>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b422:	4b0e      	ldr	r3, [pc, #56]	; (800b45c <Get_SerialNum+0x4c>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b428:	68fa      	ldr	r2, [r7, #12]
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	4413      	add	r3, r2
 800b42e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d009      	beq.n	800b44a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b436:	2208      	movs	r2, #8
 800b438:	4909      	ldr	r1, [pc, #36]	; (800b460 <Get_SerialNum+0x50>)
 800b43a:	68f8      	ldr	r0, [r7, #12]
 800b43c:	f000 f814 	bl	800b468 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b440:	2204      	movs	r2, #4
 800b442:	4908      	ldr	r1, [pc, #32]	; (800b464 <Get_SerialNum+0x54>)
 800b444:	68b8      	ldr	r0, [r7, #8]
 800b446:	f000 f80f 	bl	800b468 <IntToUnicode>
  }
}
 800b44a:	bf00      	nop
 800b44c:	3710      	adds	r7, #16
 800b44e:	46bd      	mov	sp, r7
 800b450:	bd80      	pop	{r7, pc}
 800b452:	bf00      	nop
 800b454:	1ffff7e8 	.word	0x1ffff7e8
 800b458:	1ffff7ec 	.word	0x1ffff7ec
 800b45c:	1ffff7f0 	.word	0x1ffff7f0
 800b460:	20000172 	.word	0x20000172
 800b464:	20000182 	.word	0x20000182

0800b468 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b468:	b480      	push	{r7}
 800b46a:	b087      	sub	sp, #28
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	60f8      	str	r0, [r7, #12]
 800b470:	60b9      	str	r1, [r7, #8]
 800b472:	4613      	mov	r3, r2
 800b474:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b476:	2300      	movs	r3, #0
 800b478:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b47a:	2300      	movs	r3, #0
 800b47c:	75fb      	strb	r3, [r7, #23]
 800b47e:	e027      	b.n	800b4d0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	0f1b      	lsrs	r3, r3, #28
 800b484:	2b09      	cmp	r3, #9
 800b486:	d80b      	bhi.n	800b4a0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	0f1b      	lsrs	r3, r3, #28
 800b48c:	b2da      	uxtb	r2, r3
 800b48e:	7dfb      	ldrb	r3, [r7, #23]
 800b490:	005b      	lsls	r3, r3, #1
 800b492:	4619      	mov	r1, r3
 800b494:	68bb      	ldr	r3, [r7, #8]
 800b496:	440b      	add	r3, r1
 800b498:	3230      	adds	r2, #48	; 0x30
 800b49a:	b2d2      	uxtb	r2, r2
 800b49c:	701a      	strb	r2, [r3, #0]
 800b49e:	e00a      	b.n	800b4b6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	0f1b      	lsrs	r3, r3, #28
 800b4a4:	b2da      	uxtb	r2, r3
 800b4a6:	7dfb      	ldrb	r3, [r7, #23]
 800b4a8:	005b      	lsls	r3, r3, #1
 800b4aa:	4619      	mov	r1, r3
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	440b      	add	r3, r1
 800b4b0:	3237      	adds	r2, #55	; 0x37
 800b4b2:	b2d2      	uxtb	r2, r2
 800b4b4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	011b      	lsls	r3, r3, #4
 800b4ba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b4bc:	7dfb      	ldrb	r3, [r7, #23]
 800b4be:	005b      	lsls	r3, r3, #1
 800b4c0:	3301      	adds	r3, #1
 800b4c2:	68ba      	ldr	r2, [r7, #8]
 800b4c4:	4413      	add	r3, r2
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b4ca:	7dfb      	ldrb	r3, [r7, #23]
 800b4cc:	3301      	adds	r3, #1
 800b4ce:	75fb      	strb	r3, [r7, #23]
 800b4d0:	7dfa      	ldrb	r2, [r7, #23]
 800b4d2:	79fb      	ldrb	r3, [r7, #7]
 800b4d4:	429a      	cmp	r2, r3
 800b4d6:	d3d3      	bcc.n	800b480 <IntToUnicode+0x18>
  }
}
 800b4d8:	bf00      	nop
 800b4da:	371c      	adds	r7, #28
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bc80      	pop	{r7}
 800b4e0:	4770      	bx	lr
	...

0800b4e4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b084      	sub	sp, #16
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	4a0d      	ldr	r2, [pc, #52]	; (800b528 <HAL_PCD_MspInit+0x44>)
 800b4f2:	4293      	cmp	r3, r2
 800b4f4:	d113      	bne.n	800b51e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b4f6:	4b0d      	ldr	r3, [pc, #52]	; (800b52c <HAL_PCD_MspInit+0x48>)
 800b4f8:	69db      	ldr	r3, [r3, #28]
 800b4fa:	4a0c      	ldr	r2, [pc, #48]	; (800b52c <HAL_PCD_MspInit+0x48>)
 800b4fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b500:	61d3      	str	r3, [r2, #28]
 800b502:	4b0a      	ldr	r3, [pc, #40]	; (800b52c <HAL_PCD_MspInit+0x48>)
 800b504:	69db      	ldr	r3, [r3, #28]
 800b506:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b50a:	60fb      	str	r3, [r7, #12]
 800b50c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800b50e:	2200      	movs	r2, #0
 800b510:	2100      	movs	r1, #0
 800b512:	2014      	movs	r0, #20
 800b514:	f7f8 ffff 	bl	8004516 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800b518:	2014      	movs	r0, #20
 800b51a:	f7f9 f818 	bl	800454e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b51e:	bf00      	nop
 800b520:	3710      	adds	r7, #16
 800b522:	46bd      	mov	sp, r7
 800b524:	bd80      	pop	{r7, pc}
 800b526:	bf00      	nop
 800b528:	40005c00 	.word	0x40005c00
 800b52c:	40021000 	.word	0x40021000

0800b530 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b082      	sub	sp, #8
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800b544:	4619      	mov	r1, r3
 800b546:	4610      	mov	r0, r2
 800b548:	f7fe fdd5 	bl	800a0f6 <USBD_LL_SetupStage>
}
 800b54c:	bf00      	nop
 800b54e:	3708      	adds	r7, #8
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}

0800b554 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b082      	sub	sp, #8
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
 800b55c:	460b      	mov	r3, r1
 800b55e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800b566:	78fb      	ldrb	r3, [r7, #3]
 800b568:	687a      	ldr	r2, [r7, #4]
 800b56a:	015b      	lsls	r3, r3, #5
 800b56c:	4413      	add	r3, r2
 800b56e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800b572:	681a      	ldr	r2, [r3, #0]
 800b574:	78fb      	ldrb	r3, [r7, #3]
 800b576:	4619      	mov	r1, r3
 800b578:	f7fe fe08 	bl	800a18c <USBD_LL_DataOutStage>
}
 800b57c:	bf00      	nop
 800b57e:	3708      	adds	r7, #8
 800b580:	46bd      	mov	sp, r7
 800b582:	bd80      	pop	{r7, pc}

0800b584 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b082      	sub	sp, #8
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
 800b58c:	460b      	mov	r3, r1
 800b58e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800b596:	78fb      	ldrb	r3, [r7, #3]
 800b598:	687a      	ldr	r2, [r7, #4]
 800b59a:	015b      	lsls	r3, r3, #5
 800b59c:	4413      	add	r3, r2
 800b59e:	333c      	adds	r3, #60	; 0x3c
 800b5a0:	681a      	ldr	r2, [r3, #0]
 800b5a2:	78fb      	ldrb	r3, [r7, #3]
 800b5a4:	4619      	mov	r1, r3
 800b5a6:	f7fe fe62 	bl	800a26e <USBD_LL_DataInStage>
}
 800b5aa:	bf00      	nop
 800b5ac:	3708      	adds	r7, #8
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}

0800b5b2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5b2:	b580      	push	{r7, lr}
 800b5b4:	b082      	sub	sp, #8
 800b5b6:	af00      	add	r7, sp, #0
 800b5b8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	f7fe ff72 	bl	800a4aa <USBD_LL_SOF>
}
 800b5c6:	bf00      	nop
 800b5c8:	3708      	adds	r7, #8
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bd80      	pop	{r7, pc}

0800b5ce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800b5ce:	b580      	push	{r7, lr}
 800b5d0:	b084      	sub	sp, #16
 800b5d2:	af00      	add	r7, sp, #0
 800b5d4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	689b      	ldr	r3, [r3, #8]
 800b5de:	2b02      	cmp	r3, #2
 800b5e0:	d001      	beq.n	800b5e6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b5e2:	f7f7 fea1 	bl	8003328 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800b5ec:	7bfa      	ldrb	r2, [r7, #15]
 800b5ee:	4611      	mov	r1, r2
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	f7fe ff22 	bl	800a43a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	f7fe fedb 	bl	800a3b8 <USBD_LL_Reset>
}
 800b602:	bf00      	nop
 800b604:	3710      	adds	r7, #16
 800b606:	46bd      	mov	sp, r7
 800b608:	bd80      	pop	{r7, pc}
	...

0800b60c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b082      	sub	sp, #8
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800b61a:	4618      	mov	r0, r3
 800b61c:	f7fe ff1c 	bl	800a458 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	699b      	ldr	r3, [r3, #24]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d005      	beq.n	800b634 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b628:	4b04      	ldr	r3, [pc, #16]	; (800b63c <HAL_PCD_SuspendCallback+0x30>)
 800b62a:	691b      	ldr	r3, [r3, #16]
 800b62c:	4a03      	ldr	r2, [pc, #12]	; (800b63c <HAL_PCD_SuspendCallback+0x30>)
 800b62e:	f043 0306 	orr.w	r3, r3, #6
 800b632:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b634:	bf00      	nop
 800b636:	3708      	adds	r7, #8
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd80      	pop	{r7, pc}
 800b63c:	e000ed00 	.word	0xe000ed00

0800b640 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b082      	sub	sp, #8
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800b64e:	4618      	mov	r0, r3
 800b650:	f7fe ff16 	bl	800a480 <USBD_LL_Resume>
}
 800b654:	bf00      	nop
 800b656:	3708      	adds	r7, #8
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd80      	pop	{r7, pc}

0800b65c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b082      	sub	sp, #8
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b664:	4a28      	ldr	r2, [pc, #160]	; (800b708 <USBD_LL_Init+0xac>)
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	4a26      	ldr	r2, [pc, #152]	; (800b708 <USBD_LL_Init+0xac>)
 800b670:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800b674:	4b24      	ldr	r3, [pc, #144]	; (800b708 <USBD_LL_Init+0xac>)
 800b676:	4a25      	ldr	r2, [pc, #148]	; (800b70c <USBD_LL_Init+0xb0>)
 800b678:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b67a:	4b23      	ldr	r3, [pc, #140]	; (800b708 <USBD_LL_Init+0xac>)
 800b67c:	2208      	movs	r2, #8
 800b67e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b680:	4b21      	ldr	r3, [pc, #132]	; (800b708 <USBD_LL_Init+0xac>)
 800b682:	2202      	movs	r2, #2
 800b684:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b686:	4b20      	ldr	r3, [pc, #128]	; (800b708 <USBD_LL_Init+0xac>)
 800b688:	2200      	movs	r2, #0
 800b68a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b68c:	4b1e      	ldr	r3, [pc, #120]	; (800b708 <USBD_LL_Init+0xac>)
 800b68e:	2200      	movs	r2, #0
 800b690:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b692:	4b1d      	ldr	r3, [pc, #116]	; (800b708 <USBD_LL_Init+0xac>)
 800b694:	2200      	movs	r2, #0
 800b696:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b698:	481b      	ldr	r0, [pc, #108]	; (800b708 <USBD_LL_Init+0xac>)
 800b69a:	f7fa fa7f 	bl	8005b9c <HAL_PCD_Init>
 800b69e:	4603      	mov	r3, r0
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d001      	beq.n	800b6a8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800b6a4:	f7f7 fe40 	bl	8003328 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b6ae:	2318      	movs	r3, #24
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	2100      	movs	r1, #0
 800b6b4:	f7fb f918 	bl	80068e8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b6be:	2358      	movs	r3, #88	; 0x58
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	2180      	movs	r1, #128	; 0x80
 800b6c4:	f7fb f910 	bl	80068e8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b6ce:	23c0      	movs	r3, #192	; 0xc0
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	2181      	movs	r1, #129	; 0x81
 800b6d4:	f7fb f908 	bl	80068e8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b6de:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	2101      	movs	r1, #1
 800b6e6:	f7fb f8ff 	bl	80068e8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b6f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	2182      	movs	r1, #130	; 0x82
 800b6f8:	f7fb f8f6 	bl	80068e8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b6fc:	2300      	movs	r3, #0
}
 800b6fe:	4618      	mov	r0, r3
 800b700:	3708      	adds	r7, #8
 800b702:	46bd      	mov	sp, r7
 800b704:	bd80      	pop	{r7, pc}
 800b706:	bf00      	nop
 800b708:	20001854 	.word	0x20001854
 800b70c:	40005c00 	.word	0x40005c00

0800b710 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b084      	sub	sp, #16
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b718:	2300      	movs	r3, #0
 800b71a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b71c:	2300      	movs	r3, #0
 800b71e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b726:	4618      	mov	r0, r3
 800b728:	f7fa fb19 	bl	8005d5e <HAL_PCD_Start>
 800b72c:	4603      	mov	r3, r0
 800b72e:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b730:	7bfb      	ldrb	r3, [r7, #15]
 800b732:	4618      	mov	r0, r3
 800b734:	f000 f948 	bl	800b9c8 <USBD_Get_USB_Status>
 800b738:	4603      	mov	r3, r0
 800b73a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800b73c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b73e:	4618      	mov	r0, r3
 800b740:	3710      	adds	r7, #16
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}

0800b746 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b746:	b580      	push	{r7, lr}
 800b748:	b084      	sub	sp, #16
 800b74a:	af00      	add	r7, sp, #0
 800b74c:	6078      	str	r0, [r7, #4]
 800b74e:	4608      	mov	r0, r1
 800b750:	4611      	mov	r1, r2
 800b752:	461a      	mov	r2, r3
 800b754:	4603      	mov	r3, r0
 800b756:	70fb      	strb	r3, [r7, #3]
 800b758:	460b      	mov	r3, r1
 800b75a:	70bb      	strb	r3, [r7, #2]
 800b75c:	4613      	mov	r3, r2
 800b75e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b760:	2300      	movs	r3, #0
 800b762:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b764:	2300      	movs	r3, #0
 800b766:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b76e:	78bb      	ldrb	r3, [r7, #2]
 800b770:	883a      	ldrh	r2, [r7, #0]
 800b772:	78f9      	ldrb	r1, [r7, #3]
 800b774:	f7fa fc4c 	bl	8006010 <HAL_PCD_EP_Open>
 800b778:	4603      	mov	r3, r0
 800b77a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b77c:	7bfb      	ldrb	r3, [r7, #15]
 800b77e:	4618      	mov	r0, r3
 800b780:	f000 f922 	bl	800b9c8 <USBD_Get_USB_Status>
 800b784:	4603      	mov	r3, r0
 800b786:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800b788:	7bbb      	ldrb	r3, [r7, #14]
}
 800b78a:	4618      	mov	r0, r3
 800b78c:	3710      	adds	r7, #16
 800b78e:	46bd      	mov	sp, r7
 800b790:	bd80      	pop	{r7, pc}

0800b792 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b792:	b580      	push	{r7, lr}
 800b794:	b084      	sub	sp, #16
 800b796:	af00      	add	r7, sp, #0
 800b798:	6078      	str	r0, [r7, #4]
 800b79a:	460b      	mov	r3, r1
 800b79c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b79e:	2300      	movs	r3, #0
 800b7a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b7ac:	78fa      	ldrb	r2, [r7, #3]
 800b7ae:	4611      	mov	r1, r2
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	f7fa fc8d 	bl	80060d0 <HAL_PCD_EP_Close>
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b7ba:	7bfb      	ldrb	r3, [r7, #15]
 800b7bc:	4618      	mov	r0, r3
 800b7be:	f000 f903 	bl	800b9c8 <USBD_Get_USB_Status>
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 800b7c6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	3710      	adds	r7, #16
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}

0800b7d0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b084      	sub	sp, #16
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
 800b7d8:	460b      	mov	r3, r1
 800b7da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7dc:	2300      	movs	r3, #0
 800b7de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b7ea:	78fa      	ldrb	r2, [r7, #3]
 800b7ec:	4611      	mov	r1, r2
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	f7fa fd37 	bl	8006262 <HAL_PCD_EP_SetStall>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b7f8:	7bfb      	ldrb	r3, [r7, #15]
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	f000 f8e4 	bl	800b9c8 <USBD_Get_USB_Status>
 800b800:	4603      	mov	r3, r0
 800b802:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800b804:	7bbb      	ldrb	r3, [r7, #14]
}
 800b806:	4618      	mov	r0, r3
 800b808:	3710      	adds	r7, #16
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bd80      	pop	{r7, pc}

0800b80e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b80e:	b580      	push	{r7, lr}
 800b810:	b084      	sub	sp, #16
 800b812:	af00      	add	r7, sp, #0
 800b814:	6078      	str	r0, [r7, #4]
 800b816:	460b      	mov	r3, r1
 800b818:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b81a:	2300      	movs	r3, #0
 800b81c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b81e:	2300      	movs	r3, #0
 800b820:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b828:	78fa      	ldrb	r2, [r7, #3]
 800b82a:	4611      	mov	r1, r2
 800b82c:	4618      	mov	r0, r3
 800b82e:	f7fa fd72 	bl	8006316 <HAL_PCD_EP_ClrStall>
 800b832:	4603      	mov	r3, r0
 800b834:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b836:	7bfb      	ldrb	r3, [r7, #15]
 800b838:	4618      	mov	r0, r3
 800b83a:	f000 f8c5 	bl	800b9c8 <USBD_Get_USB_Status>
 800b83e:	4603      	mov	r3, r0
 800b840:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 800b842:	7bbb      	ldrb	r3, [r7, #14]
}
 800b844:	4618      	mov	r0, r3
 800b846:	3710      	adds	r7, #16
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd80      	pop	{r7, pc}

0800b84c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b84c:	b480      	push	{r7}
 800b84e:	b085      	sub	sp, #20
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
 800b854:	460b      	mov	r3, r1
 800b856:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b85e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800b860:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b864:	2b00      	cmp	r3, #0
 800b866:	da08      	bge.n	800b87a <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800b868:	78fb      	ldrb	r3, [r7, #3]
 800b86a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b86e:	68fa      	ldr	r2, [r7, #12]
 800b870:	015b      	lsls	r3, r3, #5
 800b872:	4413      	add	r3, r2
 800b874:	332a      	adds	r3, #42	; 0x2a
 800b876:	781b      	ldrb	r3, [r3, #0]
 800b878:	e008      	b.n	800b88c <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800b87a:	78fb      	ldrb	r3, [r7, #3]
 800b87c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b880:	68fa      	ldr	r2, [r7, #12]
 800b882:	015b      	lsls	r3, r3, #5
 800b884:	4413      	add	r3, r2
 800b886:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800b88a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b88c:	4618      	mov	r0, r3
 800b88e:	3714      	adds	r7, #20
 800b890:	46bd      	mov	sp, r7
 800b892:	bc80      	pop	{r7}
 800b894:	4770      	bx	lr

0800b896 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b896:	b580      	push	{r7, lr}
 800b898:	b084      	sub	sp, #16
 800b89a:	af00      	add	r7, sp, #0
 800b89c:	6078      	str	r0, [r7, #4]
 800b89e:	460b      	mov	r3, r1
 800b8a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b8b0:	78fa      	ldrb	r2, [r7, #3]
 800b8b2:	4611      	mov	r1, r2
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	f7fa fb86 	bl	8005fc6 <HAL_PCD_SetAddress>
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8be:	7bfb      	ldrb	r3, [r7, #15]
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	f000 f881 	bl	800b9c8 <USBD_Get_USB_Status>
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800b8ca:	7bbb      	ldrb	r3, [r7, #14]
}
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	3710      	adds	r7, #16
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}

0800b8d4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b086      	sub	sp, #24
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	60f8      	str	r0, [r7, #12]
 800b8dc:	607a      	str	r2, [r7, #4]
 800b8de:	461a      	mov	r2, r3
 800b8e0:	460b      	mov	r3, r1
 800b8e2:	72fb      	strb	r3, [r7, #11]
 800b8e4:	4613      	mov	r3, r2
 800b8e6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b8f6:	893b      	ldrh	r3, [r7, #8]
 800b8f8:	7af9      	ldrb	r1, [r7, #11]
 800b8fa:	687a      	ldr	r2, [r7, #4]
 800b8fc:	f7fa fc78 	bl	80061f0 <HAL_PCD_EP_Transmit>
 800b900:	4603      	mov	r3, r0
 800b902:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b904:	7dfb      	ldrb	r3, [r7, #23]
 800b906:	4618      	mov	r0, r3
 800b908:	f000 f85e 	bl	800b9c8 <USBD_Get_USB_Status>
 800b90c:	4603      	mov	r3, r0
 800b90e:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800b910:	7dbb      	ldrb	r3, [r7, #22]
}
 800b912:	4618      	mov	r0, r3
 800b914:	3718      	adds	r7, #24
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}

0800b91a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b91a:	b580      	push	{r7, lr}
 800b91c:	b086      	sub	sp, #24
 800b91e:	af00      	add	r7, sp, #0
 800b920:	60f8      	str	r0, [r7, #12]
 800b922:	607a      	str	r2, [r7, #4]
 800b924:	461a      	mov	r2, r3
 800b926:	460b      	mov	r3, r1
 800b928:	72fb      	strb	r3, [r7, #11]
 800b92a:	4613      	mov	r3, r2
 800b92c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b92e:	2300      	movs	r3, #0
 800b930:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b932:	2300      	movs	r3, #0
 800b934:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b93c:	893b      	ldrh	r3, [r7, #8]
 800b93e:	7af9      	ldrb	r1, [r7, #11]
 800b940:	687a      	ldr	r2, [r7, #4]
 800b942:	f7fa fc07 	bl	8006154 <HAL_PCD_EP_Receive>
 800b946:	4603      	mov	r3, r0
 800b948:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b94a:	7dfb      	ldrb	r3, [r7, #23]
 800b94c:	4618      	mov	r0, r3
 800b94e:	f000 f83b 	bl	800b9c8 <USBD_Get_USB_Status>
 800b952:	4603      	mov	r3, r0
 800b954:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 800b956:	7dbb      	ldrb	r3, [r7, #22]
}
 800b958:	4618      	mov	r0, r3
 800b95a:	3718      	adds	r7, #24
 800b95c:	46bd      	mov	sp, r7
 800b95e:	bd80      	pop	{r7, pc}

0800b960 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b082      	sub	sp, #8
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
 800b968:	460b      	mov	r3, r1
 800b96a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b972:	78fa      	ldrb	r2, [r7, #3]
 800b974:	4611      	mov	r1, r2
 800b976:	4618      	mov	r0, r3
 800b978:	f7fa fc26 	bl	80061c8 <HAL_PCD_EP_GetRxCount>
 800b97c:	4603      	mov	r3, r0
}
 800b97e:	4618      	mov	r0, r3
 800b980:	3708      	adds	r7, #8
 800b982:	46bd      	mov	sp, r7
 800b984:	bd80      	pop	{r7, pc}
	...

0800b988 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b988:	b480      	push	{r7}
 800b98a:	b083      	sub	sp, #12
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b990:	4b02      	ldr	r3, [pc, #8]	; (800b99c <USBD_static_malloc+0x14>)
}
 800b992:	4618      	mov	r0, r3
 800b994:	370c      	adds	r7, #12
 800b996:	46bd      	mov	sp, r7
 800b998:	bc80      	pop	{r7}
 800b99a:	4770      	bx	lr
 800b99c:	20000738 	.word	0x20000738

0800b9a0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b9a0:	b480      	push	{r7}
 800b9a2:	b083      	sub	sp, #12
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]

}
 800b9a8:	bf00      	nop
 800b9aa:	370c      	adds	r7, #12
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	bc80      	pop	{r7}
 800b9b0:	4770      	bx	lr

0800b9b2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9b2:	b480      	push	{r7}
 800b9b4:	b083      	sub	sp, #12
 800b9b6:	af00      	add	r7, sp, #0
 800b9b8:	6078      	str	r0, [r7, #4]
 800b9ba:	460b      	mov	r3, r1
 800b9bc:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800b9be:	bf00      	nop
 800b9c0:	370c      	adds	r7, #12
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	bc80      	pop	{r7}
 800b9c6:	4770      	bx	lr

0800b9c8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b9c8:	b480      	push	{r7}
 800b9ca:	b085      	sub	sp, #20
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b9d6:	79fb      	ldrb	r3, [r7, #7]
 800b9d8:	2b03      	cmp	r3, #3
 800b9da:	d817      	bhi.n	800ba0c <USBD_Get_USB_Status+0x44>
 800b9dc:	a201      	add	r2, pc, #4	; (adr r2, 800b9e4 <USBD_Get_USB_Status+0x1c>)
 800b9de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9e2:	bf00      	nop
 800b9e4:	0800b9f5 	.word	0x0800b9f5
 800b9e8:	0800b9fb 	.word	0x0800b9fb
 800b9ec:	0800ba01 	.word	0x0800ba01
 800b9f0:	0800ba07 	.word	0x0800ba07
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	73fb      	strb	r3, [r7, #15]
    break;
 800b9f8:	e00b      	b.n	800ba12 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b9fa:	2302      	movs	r3, #2
 800b9fc:	73fb      	strb	r3, [r7, #15]
    break;
 800b9fe:	e008      	b.n	800ba12 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ba00:	2301      	movs	r3, #1
 800ba02:	73fb      	strb	r3, [r7, #15]
    break;
 800ba04:	e005      	b.n	800ba12 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ba06:	2302      	movs	r3, #2
 800ba08:	73fb      	strb	r3, [r7, #15]
    break;
 800ba0a:	e002      	b.n	800ba12 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ba0c:	2302      	movs	r3, #2
 800ba0e:	73fb      	strb	r3, [r7, #15]
    break;
 800ba10:	bf00      	nop
  }
  return usb_status;
 800ba12:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba14:	4618      	mov	r0, r3
 800ba16:	3714      	adds	r7, #20
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bc80      	pop	{r7}
 800ba1c:	4770      	bx	lr
 800ba1e:	bf00      	nop

0800ba20 <__errno>:
 800ba20:	4b01      	ldr	r3, [pc, #4]	; (800ba28 <__errno+0x8>)
 800ba22:	6818      	ldr	r0, [r3, #0]
 800ba24:	4770      	bx	lr
 800ba26:	bf00      	nop
 800ba28:	2000018c 	.word	0x2000018c

0800ba2c <__libc_init_array>:
 800ba2c:	b570      	push	{r4, r5, r6, lr}
 800ba2e:	2500      	movs	r5, #0
 800ba30:	4e0c      	ldr	r6, [pc, #48]	; (800ba64 <__libc_init_array+0x38>)
 800ba32:	4c0d      	ldr	r4, [pc, #52]	; (800ba68 <__libc_init_array+0x3c>)
 800ba34:	1ba4      	subs	r4, r4, r6
 800ba36:	10a4      	asrs	r4, r4, #2
 800ba38:	42a5      	cmp	r5, r4
 800ba3a:	d109      	bne.n	800ba50 <__libc_init_array+0x24>
 800ba3c:	f000 fc36 	bl	800c2ac <_init>
 800ba40:	2500      	movs	r5, #0
 800ba42:	4e0a      	ldr	r6, [pc, #40]	; (800ba6c <__libc_init_array+0x40>)
 800ba44:	4c0a      	ldr	r4, [pc, #40]	; (800ba70 <__libc_init_array+0x44>)
 800ba46:	1ba4      	subs	r4, r4, r6
 800ba48:	10a4      	asrs	r4, r4, #2
 800ba4a:	42a5      	cmp	r5, r4
 800ba4c:	d105      	bne.n	800ba5a <__libc_init_array+0x2e>
 800ba4e:	bd70      	pop	{r4, r5, r6, pc}
 800ba50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ba54:	4798      	blx	r3
 800ba56:	3501      	adds	r5, #1
 800ba58:	e7ee      	b.n	800ba38 <__libc_init_array+0xc>
 800ba5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ba5e:	4798      	blx	r3
 800ba60:	3501      	adds	r5, #1
 800ba62:	e7f2      	b.n	800ba4a <__libc_init_array+0x1e>
 800ba64:	0800d630 	.word	0x0800d630
 800ba68:	0800d630 	.word	0x0800d630
 800ba6c:	0800d630 	.word	0x0800d630
 800ba70:	0800d634 	.word	0x0800d634

0800ba74 <memcpy>:
 800ba74:	b510      	push	{r4, lr}
 800ba76:	1e43      	subs	r3, r0, #1
 800ba78:	440a      	add	r2, r1
 800ba7a:	4291      	cmp	r1, r2
 800ba7c:	d100      	bne.n	800ba80 <memcpy+0xc>
 800ba7e:	bd10      	pop	{r4, pc}
 800ba80:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba84:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba88:	e7f7      	b.n	800ba7a <memcpy+0x6>

0800ba8a <memset>:
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	4402      	add	r2, r0
 800ba8e:	4293      	cmp	r3, r2
 800ba90:	d100      	bne.n	800ba94 <memset+0xa>
 800ba92:	4770      	bx	lr
 800ba94:	f803 1b01 	strb.w	r1, [r3], #1
 800ba98:	e7f9      	b.n	800ba8e <memset+0x4>
	...

0800ba9c <siprintf>:
 800ba9c:	b40e      	push	{r1, r2, r3}
 800ba9e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800baa2:	b500      	push	{lr}
 800baa4:	b09c      	sub	sp, #112	; 0x70
 800baa6:	ab1d      	add	r3, sp, #116	; 0x74
 800baa8:	9002      	str	r0, [sp, #8]
 800baaa:	9006      	str	r0, [sp, #24]
 800baac:	9107      	str	r1, [sp, #28]
 800baae:	9104      	str	r1, [sp, #16]
 800bab0:	4808      	ldr	r0, [pc, #32]	; (800bad4 <siprintf+0x38>)
 800bab2:	4909      	ldr	r1, [pc, #36]	; (800bad8 <siprintf+0x3c>)
 800bab4:	f853 2b04 	ldr.w	r2, [r3], #4
 800bab8:	9105      	str	r1, [sp, #20]
 800baba:	6800      	ldr	r0, [r0, #0]
 800babc:	a902      	add	r1, sp, #8
 800babe:	9301      	str	r3, [sp, #4]
 800bac0:	f000 f866 	bl	800bb90 <_svfiprintf_r>
 800bac4:	2200      	movs	r2, #0
 800bac6:	9b02      	ldr	r3, [sp, #8]
 800bac8:	701a      	strb	r2, [r3, #0]
 800baca:	b01c      	add	sp, #112	; 0x70
 800bacc:	f85d eb04 	ldr.w	lr, [sp], #4
 800bad0:	b003      	add	sp, #12
 800bad2:	4770      	bx	lr
 800bad4:	2000018c 	.word	0x2000018c
 800bad8:	ffff0208 	.word	0xffff0208

0800badc <__ssputs_r>:
 800badc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bae0:	688e      	ldr	r6, [r1, #8]
 800bae2:	4682      	mov	sl, r0
 800bae4:	429e      	cmp	r6, r3
 800bae6:	460c      	mov	r4, r1
 800bae8:	4690      	mov	r8, r2
 800baea:	4699      	mov	r9, r3
 800baec:	d837      	bhi.n	800bb5e <__ssputs_r+0x82>
 800baee:	898a      	ldrh	r2, [r1, #12]
 800baf0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800baf4:	d031      	beq.n	800bb5a <__ssputs_r+0x7e>
 800baf6:	2302      	movs	r3, #2
 800baf8:	6825      	ldr	r5, [r4, #0]
 800bafa:	6909      	ldr	r1, [r1, #16]
 800bafc:	1a6f      	subs	r7, r5, r1
 800bafe:	6965      	ldr	r5, [r4, #20]
 800bb00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bb04:	fb95 f5f3 	sdiv	r5, r5, r3
 800bb08:	f109 0301 	add.w	r3, r9, #1
 800bb0c:	443b      	add	r3, r7
 800bb0e:	429d      	cmp	r5, r3
 800bb10:	bf38      	it	cc
 800bb12:	461d      	movcc	r5, r3
 800bb14:	0553      	lsls	r3, r2, #21
 800bb16:	d530      	bpl.n	800bb7a <__ssputs_r+0x9e>
 800bb18:	4629      	mov	r1, r5
 800bb1a:	f000 fb2d 	bl	800c178 <_malloc_r>
 800bb1e:	4606      	mov	r6, r0
 800bb20:	b950      	cbnz	r0, 800bb38 <__ssputs_r+0x5c>
 800bb22:	230c      	movs	r3, #12
 800bb24:	f04f 30ff 	mov.w	r0, #4294967295
 800bb28:	f8ca 3000 	str.w	r3, [sl]
 800bb2c:	89a3      	ldrh	r3, [r4, #12]
 800bb2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb32:	81a3      	strh	r3, [r4, #12]
 800bb34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb38:	463a      	mov	r2, r7
 800bb3a:	6921      	ldr	r1, [r4, #16]
 800bb3c:	f7ff ff9a 	bl	800ba74 <memcpy>
 800bb40:	89a3      	ldrh	r3, [r4, #12]
 800bb42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bb46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb4a:	81a3      	strh	r3, [r4, #12]
 800bb4c:	6126      	str	r6, [r4, #16]
 800bb4e:	443e      	add	r6, r7
 800bb50:	6026      	str	r6, [r4, #0]
 800bb52:	464e      	mov	r6, r9
 800bb54:	6165      	str	r5, [r4, #20]
 800bb56:	1bed      	subs	r5, r5, r7
 800bb58:	60a5      	str	r5, [r4, #8]
 800bb5a:	454e      	cmp	r6, r9
 800bb5c:	d900      	bls.n	800bb60 <__ssputs_r+0x84>
 800bb5e:	464e      	mov	r6, r9
 800bb60:	4632      	mov	r2, r6
 800bb62:	4641      	mov	r1, r8
 800bb64:	6820      	ldr	r0, [r4, #0]
 800bb66:	f000 faa1 	bl	800c0ac <memmove>
 800bb6a:	68a3      	ldr	r3, [r4, #8]
 800bb6c:	2000      	movs	r0, #0
 800bb6e:	1b9b      	subs	r3, r3, r6
 800bb70:	60a3      	str	r3, [r4, #8]
 800bb72:	6823      	ldr	r3, [r4, #0]
 800bb74:	441e      	add	r6, r3
 800bb76:	6026      	str	r6, [r4, #0]
 800bb78:	e7dc      	b.n	800bb34 <__ssputs_r+0x58>
 800bb7a:	462a      	mov	r2, r5
 800bb7c:	f000 fb56 	bl	800c22c <_realloc_r>
 800bb80:	4606      	mov	r6, r0
 800bb82:	2800      	cmp	r0, #0
 800bb84:	d1e2      	bne.n	800bb4c <__ssputs_r+0x70>
 800bb86:	6921      	ldr	r1, [r4, #16]
 800bb88:	4650      	mov	r0, sl
 800bb8a:	f000 faa9 	bl	800c0e0 <_free_r>
 800bb8e:	e7c8      	b.n	800bb22 <__ssputs_r+0x46>

0800bb90 <_svfiprintf_r>:
 800bb90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb94:	461d      	mov	r5, r3
 800bb96:	898b      	ldrh	r3, [r1, #12]
 800bb98:	b09d      	sub	sp, #116	; 0x74
 800bb9a:	061f      	lsls	r7, r3, #24
 800bb9c:	4680      	mov	r8, r0
 800bb9e:	460c      	mov	r4, r1
 800bba0:	4616      	mov	r6, r2
 800bba2:	d50f      	bpl.n	800bbc4 <_svfiprintf_r+0x34>
 800bba4:	690b      	ldr	r3, [r1, #16]
 800bba6:	b96b      	cbnz	r3, 800bbc4 <_svfiprintf_r+0x34>
 800bba8:	2140      	movs	r1, #64	; 0x40
 800bbaa:	f000 fae5 	bl	800c178 <_malloc_r>
 800bbae:	6020      	str	r0, [r4, #0]
 800bbb0:	6120      	str	r0, [r4, #16]
 800bbb2:	b928      	cbnz	r0, 800bbc0 <_svfiprintf_r+0x30>
 800bbb4:	230c      	movs	r3, #12
 800bbb6:	f8c8 3000 	str.w	r3, [r8]
 800bbba:	f04f 30ff 	mov.w	r0, #4294967295
 800bbbe:	e0c8      	b.n	800bd52 <_svfiprintf_r+0x1c2>
 800bbc0:	2340      	movs	r3, #64	; 0x40
 800bbc2:	6163      	str	r3, [r4, #20]
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	9309      	str	r3, [sp, #36]	; 0x24
 800bbc8:	2320      	movs	r3, #32
 800bbca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bbce:	2330      	movs	r3, #48	; 0x30
 800bbd0:	f04f 0b01 	mov.w	fp, #1
 800bbd4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bbd8:	9503      	str	r5, [sp, #12]
 800bbda:	4637      	mov	r7, r6
 800bbdc:	463d      	mov	r5, r7
 800bbde:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bbe2:	b10b      	cbz	r3, 800bbe8 <_svfiprintf_r+0x58>
 800bbe4:	2b25      	cmp	r3, #37	; 0x25
 800bbe6:	d13e      	bne.n	800bc66 <_svfiprintf_r+0xd6>
 800bbe8:	ebb7 0a06 	subs.w	sl, r7, r6
 800bbec:	d00b      	beq.n	800bc06 <_svfiprintf_r+0x76>
 800bbee:	4653      	mov	r3, sl
 800bbf0:	4632      	mov	r2, r6
 800bbf2:	4621      	mov	r1, r4
 800bbf4:	4640      	mov	r0, r8
 800bbf6:	f7ff ff71 	bl	800badc <__ssputs_r>
 800bbfa:	3001      	adds	r0, #1
 800bbfc:	f000 80a4 	beq.w	800bd48 <_svfiprintf_r+0x1b8>
 800bc00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc02:	4453      	add	r3, sl
 800bc04:	9309      	str	r3, [sp, #36]	; 0x24
 800bc06:	783b      	ldrb	r3, [r7, #0]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	f000 809d 	beq.w	800bd48 <_svfiprintf_r+0x1b8>
 800bc0e:	2300      	movs	r3, #0
 800bc10:	f04f 32ff 	mov.w	r2, #4294967295
 800bc14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc18:	9304      	str	r3, [sp, #16]
 800bc1a:	9307      	str	r3, [sp, #28]
 800bc1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc20:	931a      	str	r3, [sp, #104]	; 0x68
 800bc22:	462f      	mov	r7, r5
 800bc24:	2205      	movs	r2, #5
 800bc26:	f817 1b01 	ldrb.w	r1, [r7], #1
 800bc2a:	4850      	ldr	r0, [pc, #320]	; (800bd6c <_svfiprintf_r+0x1dc>)
 800bc2c:	f000 fa30 	bl	800c090 <memchr>
 800bc30:	9b04      	ldr	r3, [sp, #16]
 800bc32:	b9d0      	cbnz	r0, 800bc6a <_svfiprintf_r+0xda>
 800bc34:	06d9      	lsls	r1, r3, #27
 800bc36:	bf44      	itt	mi
 800bc38:	2220      	movmi	r2, #32
 800bc3a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bc3e:	071a      	lsls	r2, r3, #28
 800bc40:	bf44      	itt	mi
 800bc42:	222b      	movmi	r2, #43	; 0x2b
 800bc44:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bc48:	782a      	ldrb	r2, [r5, #0]
 800bc4a:	2a2a      	cmp	r2, #42	; 0x2a
 800bc4c:	d015      	beq.n	800bc7a <_svfiprintf_r+0xea>
 800bc4e:	462f      	mov	r7, r5
 800bc50:	2000      	movs	r0, #0
 800bc52:	250a      	movs	r5, #10
 800bc54:	9a07      	ldr	r2, [sp, #28]
 800bc56:	4639      	mov	r1, r7
 800bc58:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc5c:	3b30      	subs	r3, #48	; 0x30
 800bc5e:	2b09      	cmp	r3, #9
 800bc60:	d94d      	bls.n	800bcfe <_svfiprintf_r+0x16e>
 800bc62:	b1b8      	cbz	r0, 800bc94 <_svfiprintf_r+0x104>
 800bc64:	e00f      	b.n	800bc86 <_svfiprintf_r+0xf6>
 800bc66:	462f      	mov	r7, r5
 800bc68:	e7b8      	b.n	800bbdc <_svfiprintf_r+0x4c>
 800bc6a:	4a40      	ldr	r2, [pc, #256]	; (800bd6c <_svfiprintf_r+0x1dc>)
 800bc6c:	463d      	mov	r5, r7
 800bc6e:	1a80      	subs	r0, r0, r2
 800bc70:	fa0b f000 	lsl.w	r0, fp, r0
 800bc74:	4318      	orrs	r0, r3
 800bc76:	9004      	str	r0, [sp, #16]
 800bc78:	e7d3      	b.n	800bc22 <_svfiprintf_r+0x92>
 800bc7a:	9a03      	ldr	r2, [sp, #12]
 800bc7c:	1d11      	adds	r1, r2, #4
 800bc7e:	6812      	ldr	r2, [r2, #0]
 800bc80:	9103      	str	r1, [sp, #12]
 800bc82:	2a00      	cmp	r2, #0
 800bc84:	db01      	blt.n	800bc8a <_svfiprintf_r+0xfa>
 800bc86:	9207      	str	r2, [sp, #28]
 800bc88:	e004      	b.n	800bc94 <_svfiprintf_r+0x104>
 800bc8a:	4252      	negs	r2, r2
 800bc8c:	f043 0302 	orr.w	r3, r3, #2
 800bc90:	9207      	str	r2, [sp, #28]
 800bc92:	9304      	str	r3, [sp, #16]
 800bc94:	783b      	ldrb	r3, [r7, #0]
 800bc96:	2b2e      	cmp	r3, #46	; 0x2e
 800bc98:	d10c      	bne.n	800bcb4 <_svfiprintf_r+0x124>
 800bc9a:	787b      	ldrb	r3, [r7, #1]
 800bc9c:	2b2a      	cmp	r3, #42	; 0x2a
 800bc9e:	d133      	bne.n	800bd08 <_svfiprintf_r+0x178>
 800bca0:	9b03      	ldr	r3, [sp, #12]
 800bca2:	3702      	adds	r7, #2
 800bca4:	1d1a      	adds	r2, r3, #4
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	9203      	str	r2, [sp, #12]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	bfb8      	it	lt
 800bcae:	f04f 33ff 	movlt.w	r3, #4294967295
 800bcb2:	9305      	str	r3, [sp, #20]
 800bcb4:	4d2e      	ldr	r5, [pc, #184]	; (800bd70 <_svfiprintf_r+0x1e0>)
 800bcb6:	2203      	movs	r2, #3
 800bcb8:	7839      	ldrb	r1, [r7, #0]
 800bcba:	4628      	mov	r0, r5
 800bcbc:	f000 f9e8 	bl	800c090 <memchr>
 800bcc0:	b138      	cbz	r0, 800bcd2 <_svfiprintf_r+0x142>
 800bcc2:	2340      	movs	r3, #64	; 0x40
 800bcc4:	1b40      	subs	r0, r0, r5
 800bcc6:	fa03 f000 	lsl.w	r0, r3, r0
 800bcca:	9b04      	ldr	r3, [sp, #16]
 800bccc:	3701      	adds	r7, #1
 800bcce:	4303      	orrs	r3, r0
 800bcd0:	9304      	str	r3, [sp, #16]
 800bcd2:	7839      	ldrb	r1, [r7, #0]
 800bcd4:	2206      	movs	r2, #6
 800bcd6:	4827      	ldr	r0, [pc, #156]	; (800bd74 <_svfiprintf_r+0x1e4>)
 800bcd8:	1c7e      	adds	r6, r7, #1
 800bcda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bcde:	f000 f9d7 	bl	800c090 <memchr>
 800bce2:	2800      	cmp	r0, #0
 800bce4:	d038      	beq.n	800bd58 <_svfiprintf_r+0x1c8>
 800bce6:	4b24      	ldr	r3, [pc, #144]	; (800bd78 <_svfiprintf_r+0x1e8>)
 800bce8:	bb13      	cbnz	r3, 800bd30 <_svfiprintf_r+0x1a0>
 800bcea:	9b03      	ldr	r3, [sp, #12]
 800bcec:	3307      	adds	r3, #7
 800bcee:	f023 0307 	bic.w	r3, r3, #7
 800bcf2:	3308      	adds	r3, #8
 800bcf4:	9303      	str	r3, [sp, #12]
 800bcf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcf8:	444b      	add	r3, r9
 800bcfa:	9309      	str	r3, [sp, #36]	; 0x24
 800bcfc:	e76d      	b.n	800bbda <_svfiprintf_r+0x4a>
 800bcfe:	fb05 3202 	mla	r2, r5, r2, r3
 800bd02:	2001      	movs	r0, #1
 800bd04:	460f      	mov	r7, r1
 800bd06:	e7a6      	b.n	800bc56 <_svfiprintf_r+0xc6>
 800bd08:	2300      	movs	r3, #0
 800bd0a:	250a      	movs	r5, #10
 800bd0c:	4619      	mov	r1, r3
 800bd0e:	3701      	adds	r7, #1
 800bd10:	9305      	str	r3, [sp, #20]
 800bd12:	4638      	mov	r0, r7
 800bd14:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd18:	3a30      	subs	r2, #48	; 0x30
 800bd1a:	2a09      	cmp	r2, #9
 800bd1c:	d903      	bls.n	800bd26 <_svfiprintf_r+0x196>
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d0c8      	beq.n	800bcb4 <_svfiprintf_r+0x124>
 800bd22:	9105      	str	r1, [sp, #20]
 800bd24:	e7c6      	b.n	800bcb4 <_svfiprintf_r+0x124>
 800bd26:	fb05 2101 	mla	r1, r5, r1, r2
 800bd2a:	2301      	movs	r3, #1
 800bd2c:	4607      	mov	r7, r0
 800bd2e:	e7f0      	b.n	800bd12 <_svfiprintf_r+0x182>
 800bd30:	ab03      	add	r3, sp, #12
 800bd32:	9300      	str	r3, [sp, #0]
 800bd34:	4622      	mov	r2, r4
 800bd36:	4b11      	ldr	r3, [pc, #68]	; (800bd7c <_svfiprintf_r+0x1ec>)
 800bd38:	a904      	add	r1, sp, #16
 800bd3a:	4640      	mov	r0, r8
 800bd3c:	f3af 8000 	nop.w
 800bd40:	f1b0 3fff 	cmp.w	r0, #4294967295
 800bd44:	4681      	mov	r9, r0
 800bd46:	d1d6      	bne.n	800bcf6 <_svfiprintf_r+0x166>
 800bd48:	89a3      	ldrh	r3, [r4, #12]
 800bd4a:	065b      	lsls	r3, r3, #25
 800bd4c:	f53f af35 	bmi.w	800bbba <_svfiprintf_r+0x2a>
 800bd50:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd52:	b01d      	add	sp, #116	; 0x74
 800bd54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd58:	ab03      	add	r3, sp, #12
 800bd5a:	9300      	str	r3, [sp, #0]
 800bd5c:	4622      	mov	r2, r4
 800bd5e:	4b07      	ldr	r3, [pc, #28]	; (800bd7c <_svfiprintf_r+0x1ec>)
 800bd60:	a904      	add	r1, sp, #16
 800bd62:	4640      	mov	r0, r8
 800bd64:	f000 f882 	bl	800be6c <_printf_i>
 800bd68:	e7ea      	b.n	800bd40 <_svfiprintf_r+0x1b0>
 800bd6a:	bf00      	nop
 800bd6c:	0800d5fc 	.word	0x0800d5fc
 800bd70:	0800d602 	.word	0x0800d602
 800bd74:	0800d606 	.word	0x0800d606
 800bd78:	00000000 	.word	0x00000000
 800bd7c:	0800badd 	.word	0x0800badd

0800bd80 <_printf_common>:
 800bd80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd84:	4691      	mov	r9, r2
 800bd86:	461f      	mov	r7, r3
 800bd88:	688a      	ldr	r2, [r1, #8]
 800bd8a:	690b      	ldr	r3, [r1, #16]
 800bd8c:	4606      	mov	r6, r0
 800bd8e:	4293      	cmp	r3, r2
 800bd90:	bfb8      	it	lt
 800bd92:	4613      	movlt	r3, r2
 800bd94:	f8c9 3000 	str.w	r3, [r9]
 800bd98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bd9c:	460c      	mov	r4, r1
 800bd9e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bda2:	b112      	cbz	r2, 800bdaa <_printf_common+0x2a>
 800bda4:	3301      	adds	r3, #1
 800bda6:	f8c9 3000 	str.w	r3, [r9]
 800bdaa:	6823      	ldr	r3, [r4, #0]
 800bdac:	0699      	lsls	r1, r3, #26
 800bdae:	bf42      	ittt	mi
 800bdb0:	f8d9 3000 	ldrmi.w	r3, [r9]
 800bdb4:	3302      	addmi	r3, #2
 800bdb6:	f8c9 3000 	strmi.w	r3, [r9]
 800bdba:	6825      	ldr	r5, [r4, #0]
 800bdbc:	f015 0506 	ands.w	r5, r5, #6
 800bdc0:	d107      	bne.n	800bdd2 <_printf_common+0x52>
 800bdc2:	f104 0a19 	add.w	sl, r4, #25
 800bdc6:	68e3      	ldr	r3, [r4, #12]
 800bdc8:	f8d9 2000 	ldr.w	r2, [r9]
 800bdcc:	1a9b      	subs	r3, r3, r2
 800bdce:	42ab      	cmp	r3, r5
 800bdd0:	dc29      	bgt.n	800be26 <_printf_common+0xa6>
 800bdd2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800bdd6:	6822      	ldr	r2, [r4, #0]
 800bdd8:	3300      	adds	r3, #0
 800bdda:	bf18      	it	ne
 800bddc:	2301      	movne	r3, #1
 800bdde:	0692      	lsls	r2, r2, #26
 800bde0:	d42e      	bmi.n	800be40 <_printf_common+0xc0>
 800bde2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bde6:	4639      	mov	r1, r7
 800bde8:	4630      	mov	r0, r6
 800bdea:	47c0      	blx	r8
 800bdec:	3001      	adds	r0, #1
 800bdee:	d021      	beq.n	800be34 <_printf_common+0xb4>
 800bdf0:	6823      	ldr	r3, [r4, #0]
 800bdf2:	68e5      	ldr	r5, [r4, #12]
 800bdf4:	f003 0306 	and.w	r3, r3, #6
 800bdf8:	2b04      	cmp	r3, #4
 800bdfa:	bf18      	it	ne
 800bdfc:	2500      	movne	r5, #0
 800bdfe:	f8d9 2000 	ldr.w	r2, [r9]
 800be02:	f04f 0900 	mov.w	r9, #0
 800be06:	bf08      	it	eq
 800be08:	1aad      	subeq	r5, r5, r2
 800be0a:	68a3      	ldr	r3, [r4, #8]
 800be0c:	6922      	ldr	r2, [r4, #16]
 800be0e:	bf08      	it	eq
 800be10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800be14:	4293      	cmp	r3, r2
 800be16:	bfc4      	itt	gt
 800be18:	1a9b      	subgt	r3, r3, r2
 800be1a:	18ed      	addgt	r5, r5, r3
 800be1c:	341a      	adds	r4, #26
 800be1e:	454d      	cmp	r5, r9
 800be20:	d11a      	bne.n	800be58 <_printf_common+0xd8>
 800be22:	2000      	movs	r0, #0
 800be24:	e008      	b.n	800be38 <_printf_common+0xb8>
 800be26:	2301      	movs	r3, #1
 800be28:	4652      	mov	r2, sl
 800be2a:	4639      	mov	r1, r7
 800be2c:	4630      	mov	r0, r6
 800be2e:	47c0      	blx	r8
 800be30:	3001      	adds	r0, #1
 800be32:	d103      	bne.n	800be3c <_printf_common+0xbc>
 800be34:	f04f 30ff 	mov.w	r0, #4294967295
 800be38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be3c:	3501      	adds	r5, #1
 800be3e:	e7c2      	b.n	800bdc6 <_printf_common+0x46>
 800be40:	2030      	movs	r0, #48	; 0x30
 800be42:	18e1      	adds	r1, r4, r3
 800be44:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800be48:	1c5a      	adds	r2, r3, #1
 800be4a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800be4e:	4422      	add	r2, r4
 800be50:	3302      	adds	r3, #2
 800be52:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800be56:	e7c4      	b.n	800bde2 <_printf_common+0x62>
 800be58:	2301      	movs	r3, #1
 800be5a:	4622      	mov	r2, r4
 800be5c:	4639      	mov	r1, r7
 800be5e:	4630      	mov	r0, r6
 800be60:	47c0      	blx	r8
 800be62:	3001      	adds	r0, #1
 800be64:	d0e6      	beq.n	800be34 <_printf_common+0xb4>
 800be66:	f109 0901 	add.w	r9, r9, #1
 800be6a:	e7d8      	b.n	800be1e <_printf_common+0x9e>

0800be6c <_printf_i>:
 800be6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800be70:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800be74:	460c      	mov	r4, r1
 800be76:	7e09      	ldrb	r1, [r1, #24]
 800be78:	b085      	sub	sp, #20
 800be7a:	296e      	cmp	r1, #110	; 0x6e
 800be7c:	4617      	mov	r7, r2
 800be7e:	4606      	mov	r6, r0
 800be80:	4698      	mov	r8, r3
 800be82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800be84:	f000 80b3 	beq.w	800bfee <_printf_i+0x182>
 800be88:	d822      	bhi.n	800bed0 <_printf_i+0x64>
 800be8a:	2963      	cmp	r1, #99	; 0x63
 800be8c:	d036      	beq.n	800befc <_printf_i+0x90>
 800be8e:	d80a      	bhi.n	800bea6 <_printf_i+0x3a>
 800be90:	2900      	cmp	r1, #0
 800be92:	f000 80b9 	beq.w	800c008 <_printf_i+0x19c>
 800be96:	2958      	cmp	r1, #88	; 0x58
 800be98:	f000 8083 	beq.w	800bfa2 <_printf_i+0x136>
 800be9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bea0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800bea4:	e032      	b.n	800bf0c <_printf_i+0xa0>
 800bea6:	2964      	cmp	r1, #100	; 0x64
 800bea8:	d001      	beq.n	800beae <_printf_i+0x42>
 800beaa:	2969      	cmp	r1, #105	; 0x69
 800beac:	d1f6      	bne.n	800be9c <_printf_i+0x30>
 800beae:	6820      	ldr	r0, [r4, #0]
 800beb0:	6813      	ldr	r3, [r2, #0]
 800beb2:	0605      	lsls	r5, r0, #24
 800beb4:	f103 0104 	add.w	r1, r3, #4
 800beb8:	d52a      	bpl.n	800bf10 <_printf_i+0xa4>
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	6011      	str	r1, [r2, #0]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	da03      	bge.n	800beca <_printf_i+0x5e>
 800bec2:	222d      	movs	r2, #45	; 0x2d
 800bec4:	425b      	negs	r3, r3
 800bec6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800beca:	486f      	ldr	r0, [pc, #444]	; (800c088 <_printf_i+0x21c>)
 800becc:	220a      	movs	r2, #10
 800bece:	e039      	b.n	800bf44 <_printf_i+0xd8>
 800bed0:	2973      	cmp	r1, #115	; 0x73
 800bed2:	f000 809d 	beq.w	800c010 <_printf_i+0x1a4>
 800bed6:	d808      	bhi.n	800beea <_printf_i+0x7e>
 800bed8:	296f      	cmp	r1, #111	; 0x6f
 800beda:	d020      	beq.n	800bf1e <_printf_i+0xb2>
 800bedc:	2970      	cmp	r1, #112	; 0x70
 800bede:	d1dd      	bne.n	800be9c <_printf_i+0x30>
 800bee0:	6823      	ldr	r3, [r4, #0]
 800bee2:	f043 0320 	orr.w	r3, r3, #32
 800bee6:	6023      	str	r3, [r4, #0]
 800bee8:	e003      	b.n	800bef2 <_printf_i+0x86>
 800beea:	2975      	cmp	r1, #117	; 0x75
 800beec:	d017      	beq.n	800bf1e <_printf_i+0xb2>
 800beee:	2978      	cmp	r1, #120	; 0x78
 800bef0:	d1d4      	bne.n	800be9c <_printf_i+0x30>
 800bef2:	2378      	movs	r3, #120	; 0x78
 800bef4:	4865      	ldr	r0, [pc, #404]	; (800c08c <_printf_i+0x220>)
 800bef6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800befa:	e055      	b.n	800bfa8 <_printf_i+0x13c>
 800befc:	6813      	ldr	r3, [r2, #0]
 800befe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bf02:	1d19      	adds	r1, r3, #4
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	6011      	str	r1, [r2, #0]
 800bf08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bf0c:	2301      	movs	r3, #1
 800bf0e:	e08c      	b.n	800c02a <_printf_i+0x1be>
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bf16:	6011      	str	r1, [r2, #0]
 800bf18:	bf18      	it	ne
 800bf1a:	b21b      	sxthne	r3, r3
 800bf1c:	e7cf      	b.n	800bebe <_printf_i+0x52>
 800bf1e:	6813      	ldr	r3, [r2, #0]
 800bf20:	6825      	ldr	r5, [r4, #0]
 800bf22:	1d18      	adds	r0, r3, #4
 800bf24:	6010      	str	r0, [r2, #0]
 800bf26:	0628      	lsls	r0, r5, #24
 800bf28:	d501      	bpl.n	800bf2e <_printf_i+0xc2>
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	e002      	b.n	800bf34 <_printf_i+0xc8>
 800bf2e:	0668      	lsls	r0, r5, #25
 800bf30:	d5fb      	bpl.n	800bf2a <_printf_i+0xbe>
 800bf32:	881b      	ldrh	r3, [r3, #0]
 800bf34:	296f      	cmp	r1, #111	; 0x6f
 800bf36:	bf14      	ite	ne
 800bf38:	220a      	movne	r2, #10
 800bf3a:	2208      	moveq	r2, #8
 800bf3c:	4852      	ldr	r0, [pc, #328]	; (800c088 <_printf_i+0x21c>)
 800bf3e:	2100      	movs	r1, #0
 800bf40:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bf44:	6865      	ldr	r5, [r4, #4]
 800bf46:	2d00      	cmp	r5, #0
 800bf48:	60a5      	str	r5, [r4, #8]
 800bf4a:	f2c0 8095 	blt.w	800c078 <_printf_i+0x20c>
 800bf4e:	6821      	ldr	r1, [r4, #0]
 800bf50:	f021 0104 	bic.w	r1, r1, #4
 800bf54:	6021      	str	r1, [r4, #0]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d13d      	bne.n	800bfd6 <_printf_i+0x16a>
 800bf5a:	2d00      	cmp	r5, #0
 800bf5c:	f040 808e 	bne.w	800c07c <_printf_i+0x210>
 800bf60:	4665      	mov	r5, ip
 800bf62:	2a08      	cmp	r2, #8
 800bf64:	d10b      	bne.n	800bf7e <_printf_i+0x112>
 800bf66:	6823      	ldr	r3, [r4, #0]
 800bf68:	07db      	lsls	r3, r3, #31
 800bf6a:	d508      	bpl.n	800bf7e <_printf_i+0x112>
 800bf6c:	6923      	ldr	r3, [r4, #16]
 800bf6e:	6862      	ldr	r2, [r4, #4]
 800bf70:	429a      	cmp	r2, r3
 800bf72:	bfde      	ittt	le
 800bf74:	2330      	movle	r3, #48	; 0x30
 800bf76:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bf7a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bf7e:	ebac 0305 	sub.w	r3, ip, r5
 800bf82:	6123      	str	r3, [r4, #16]
 800bf84:	f8cd 8000 	str.w	r8, [sp]
 800bf88:	463b      	mov	r3, r7
 800bf8a:	aa03      	add	r2, sp, #12
 800bf8c:	4621      	mov	r1, r4
 800bf8e:	4630      	mov	r0, r6
 800bf90:	f7ff fef6 	bl	800bd80 <_printf_common>
 800bf94:	3001      	adds	r0, #1
 800bf96:	d14d      	bne.n	800c034 <_printf_i+0x1c8>
 800bf98:	f04f 30ff 	mov.w	r0, #4294967295
 800bf9c:	b005      	add	sp, #20
 800bf9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bfa2:	4839      	ldr	r0, [pc, #228]	; (800c088 <_printf_i+0x21c>)
 800bfa4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800bfa8:	6813      	ldr	r3, [r2, #0]
 800bfaa:	6821      	ldr	r1, [r4, #0]
 800bfac:	1d1d      	adds	r5, r3, #4
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	6015      	str	r5, [r2, #0]
 800bfb2:	060a      	lsls	r2, r1, #24
 800bfb4:	d50b      	bpl.n	800bfce <_printf_i+0x162>
 800bfb6:	07ca      	lsls	r2, r1, #31
 800bfb8:	bf44      	itt	mi
 800bfba:	f041 0120 	orrmi.w	r1, r1, #32
 800bfbe:	6021      	strmi	r1, [r4, #0]
 800bfc0:	b91b      	cbnz	r3, 800bfca <_printf_i+0x15e>
 800bfc2:	6822      	ldr	r2, [r4, #0]
 800bfc4:	f022 0220 	bic.w	r2, r2, #32
 800bfc8:	6022      	str	r2, [r4, #0]
 800bfca:	2210      	movs	r2, #16
 800bfcc:	e7b7      	b.n	800bf3e <_printf_i+0xd2>
 800bfce:	064d      	lsls	r5, r1, #25
 800bfd0:	bf48      	it	mi
 800bfd2:	b29b      	uxthmi	r3, r3
 800bfd4:	e7ef      	b.n	800bfb6 <_printf_i+0x14a>
 800bfd6:	4665      	mov	r5, ip
 800bfd8:	fbb3 f1f2 	udiv	r1, r3, r2
 800bfdc:	fb02 3311 	mls	r3, r2, r1, r3
 800bfe0:	5cc3      	ldrb	r3, [r0, r3]
 800bfe2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800bfe6:	460b      	mov	r3, r1
 800bfe8:	2900      	cmp	r1, #0
 800bfea:	d1f5      	bne.n	800bfd8 <_printf_i+0x16c>
 800bfec:	e7b9      	b.n	800bf62 <_printf_i+0xf6>
 800bfee:	6813      	ldr	r3, [r2, #0]
 800bff0:	6825      	ldr	r5, [r4, #0]
 800bff2:	1d18      	adds	r0, r3, #4
 800bff4:	6961      	ldr	r1, [r4, #20]
 800bff6:	6010      	str	r0, [r2, #0]
 800bff8:	0628      	lsls	r0, r5, #24
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	d501      	bpl.n	800c002 <_printf_i+0x196>
 800bffe:	6019      	str	r1, [r3, #0]
 800c000:	e002      	b.n	800c008 <_printf_i+0x19c>
 800c002:	066a      	lsls	r2, r5, #25
 800c004:	d5fb      	bpl.n	800bffe <_printf_i+0x192>
 800c006:	8019      	strh	r1, [r3, #0]
 800c008:	2300      	movs	r3, #0
 800c00a:	4665      	mov	r5, ip
 800c00c:	6123      	str	r3, [r4, #16]
 800c00e:	e7b9      	b.n	800bf84 <_printf_i+0x118>
 800c010:	6813      	ldr	r3, [r2, #0]
 800c012:	1d19      	adds	r1, r3, #4
 800c014:	6011      	str	r1, [r2, #0]
 800c016:	681d      	ldr	r5, [r3, #0]
 800c018:	6862      	ldr	r2, [r4, #4]
 800c01a:	2100      	movs	r1, #0
 800c01c:	4628      	mov	r0, r5
 800c01e:	f000 f837 	bl	800c090 <memchr>
 800c022:	b108      	cbz	r0, 800c028 <_printf_i+0x1bc>
 800c024:	1b40      	subs	r0, r0, r5
 800c026:	6060      	str	r0, [r4, #4]
 800c028:	6863      	ldr	r3, [r4, #4]
 800c02a:	6123      	str	r3, [r4, #16]
 800c02c:	2300      	movs	r3, #0
 800c02e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c032:	e7a7      	b.n	800bf84 <_printf_i+0x118>
 800c034:	6923      	ldr	r3, [r4, #16]
 800c036:	462a      	mov	r2, r5
 800c038:	4639      	mov	r1, r7
 800c03a:	4630      	mov	r0, r6
 800c03c:	47c0      	blx	r8
 800c03e:	3001      	adds	r0, #1
 800c040:	d0aa      	beq.n	800bf98 <_printf_i+0x12c>
 800c042:	6823      	ldr	r3, [r4, #0]
 800c044:	079b      	lsls	r3, r3, #30
 800c046:	d413      	bmi.n	800c070 <_printf_i+0x204>
 800c048:	68e0      	ldr	r0, [r4, #12]
 800c04a:	9b03      	ldr	r3, [sp, #12]
 800c04c:	4298      	cmp	r0, r3
 800c04e:	bfb8      	it	lt
 800c050:	4618      	movlt	r0, r3
 800c052:	e7a3      	b.n	800bf9c <_printf_i+0x130>
 800c054:	2301      	movs	r3, #1
 800c056:	464a      	mov	r2, r9
 800c058:	4639      	mov	r1, r7
 800c05a:	4630      	mov	r0, r6
 800c05c:	47c0      	blx	r8
 800c05e:	3001      	adds	r0, #1
 800c060:	d09a      	beq.n	800bf98 <_printf_i+0x12c>
 800c062:	3501      	adds	r5, #1
 800c064:	68e3      	ldr	r3, [r4, #12]
 800c066:	9a03      	ldr	r2, [sp, #12]
 800c068:	1a9b      	subs	r3, r3, r2
 800c06a:	42ab      	cmp	r3, r5
 800c06c:	dcf2      	bgt.n	800c054 <_printf_i+0x1e8>
 800c06e:	e7eb      	b.n	800c048 <_printf_i+0x1dc>
 800c070:	2500      	movs	r5, #0
 800c072:	f104 0919 	add.w	r9, r4, #25
 800c076:	e7f5      	b.n	800c064 <_printf_i+0x1f8>
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d1ac      	bne.n	800bfd6 <_printf_i+0x16a>
 800c07c:	7803      	ldrb	r3, [r0, #0]
 800c07e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c082:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c086:	e76c      	b.n	800bf62 <_printf_i+0xf6>
 800c088:	0800d60d 	.word	0x0800d60d
 800c08c:	0800d61e 	.word	0x0800d61e

0800c090 <memchr>:
 800c090:	b510      	push	{r4, lr}
 800c092:	b2c9      	uxtb	r1, r1
 800c094:	4402      	add	r2, r0
 800c096:	4290      	cmp	r0, r2
 800c098:	4603      	mov	r3, r0
 800c09a:	d101      	bne.n	800c0a0 <memchr+0x10>
 800c09c:	2300      	movs	r3, #0
 800c09e:	e003      	b.n	800c0a8 <memchr+0x18>
 800c0a0:	781c      	ldrb	r4, [r3, #0]
 800c0a2:	3001      	adds	r0, #1
 800c0a4:	428c      	cmp	r4, r1
 800c0a6:	d1f6      	bne.n	800c096 <memchr+0x6>
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	bd10      	pop	{r4, pc}

0800c0ac <memmove>:
 800c0ac:	4288      	cmp	r0, r1
 800c0ae:	b510      	push	{r4, lr}
 800c0b0:	eb01 0302 	add.w	r3, r1, r2
 800c0b4:	d807      	bhi.n	800c0c6 <memmove+0x1a>
 800c0b6:	1e42      	subs	r2, r0, #1
 800c0b8:	4299      	cmp	r1, r3
 800c0ba:	d00a      	beq.n	800c0d2 <memmove+0x26>
 800c0bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c0c0:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c0c4:	e7f8      	b.n	800c0b8 <memmove+0xc>
 800c0c6:	4283      	cmp	r3, r0
 800c0c8:	d9f5      	bls.n	800c0b6 <memmove+0xa>
 800c0ca:	1881      	adds	r1, r0, r2
 800c0cc:	1ad2      	subs	r2, r2, r3
 800c0ce:	42d3      	cmn	r3, r2
 800c0d0:	d100      	bne.n	800c0d4 <memmove+0x28>
 800c0d2:	bd10      	pop	{r4, pc}
 800c0d4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c0d8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c0dc:	e7f7      	b.n	800c0ce <memmove+0x22>
	...

0800c0e0 <_free_r>:
 800c0e0:	b538      	push	{r3, r4, r5, lr}
 800c0e2:	4605      	mov	r5, r0
 800c0e4:	2900      	cmp	r1, #0
 800c0e6:	d043      	beq.n	800c170 <_free_r+0x90>
 800c0e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c0ec:	1f0c      	subs	r4, r1, #4
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	bfb8      	it	lt
 800c0f2:	18e4      	addlt	r4, r4, r3
 800c0f4:	f000 f8d0 	bl	800c298 <__malloc_lock>
 800c0f8:	4a1e      	ldr	r2, [pc, #120]	; (800c174 <_free_r+0x94>)
 800c0fa:	6813      	ldr	r3, [r2, #0]
 800c0fc:	4610      	mov	r0, r2
 800c0fe:	b933      	cbnz	r3, 800c10e <_free_r+0x2e>
 800c100:	6063      	str	r3, [r4, #4]
 800c102:	6014      	str	r4, [r2, #0]
 800c104:	4628      	mov	r0, r5
 800c106:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c10a:	f000 b8c6 	b.w	800c29a <__malloc_unlock>
 800c10e:	42a3      	cmp	r3, r4
 800c110:	d90b      	bls.n	800c12a <_free_r+0x4a>
 800c112:	6821      	ldr	r1, [r4, #0]
 800c114:	1862      	adds	r2, r4, r1
 800c116:	4293      	cmp	r3, r2
 800c118:	bf01      	itttt	eq
 800c11a:	681a      	ldreq	r2, [r3, #0]
 800c11c:	685b      	ldreq	r3, [r3, #4]
 800c11e:	1852      	addeq	r2, r2, r1
 800c120:	6022      	streq	r2, [r4, #0]
 800c122:	6063      	str	r3, [r4, #4]
 800c124:	6004      	str	r4, [r0, #0]
 800c126:	e7ed      	b.n	800c104 <_free_r+0x24>
 800c128:	4613      	mov	r3, r2
 800c12a:	685a      	ldr	r2, [r3, #4]
 800c12c:	b10a      	cbz	r2, 800c132 <_free_r+0x52>
 800c12e:	42a2      	cmp	r2, r4
 800c130:	d9fa      	bls.n	800c128 <_free_r+0x48>
 800c132:	6819      	ldr	r1, [r3, #0]
 800c134:	1858      	adds	r0, r3, r1
 800c136:	42a0      	cmp	r0, r4
 800c138:	d10b      	bne.n	800c152 <_free_r+0x72>
 800c13a:	6820      	ldr	r0, [r4, #0]
 800c13c:	4401      	add	r1, r0
 800c13e:	1858      	adds	r0, r3, r1
 800c140:	4282      	cmp	r2, r0
 800c142:	6019      	str	r1, [r3, #0]
 800c144:	d1de      	bne.n	800c104 <_free_r+0x24>
 800c146:	6810      	ldr	r0, [r2, #0]
 800c148:	6852      	ldr	r2, [r2, #4]
 800c14a:	4401      	add	r1, r0
 800c14c:	6019      	str	r1, [r3, #0]
 800c14e:	605a      	str	r2, [r3, #4]
 800c150:	e7d8      	b.n	800c104 <_free_r+0x24>
 800c152:	d902      	bls.n	800c15a <_free_r+0x7a>
 800c154:	230c      	movs	r3, #12
 800c156:	602b      	str	r3, [r5, #0]
 800c158:	e7d4      	b.n	800c104 <_free_r+0x24>
 800c15a:	6820      	ldr	r0, [r4, #0]
 800c15c:	1821      	adds	r1, r4, r0
 800c15e:	428a      	cmp	r2, r1
 800c160:	bf01      	itttt	eq
 800c162:	6811      	ldreq	r1, [r2, #0]
 800c164:	6852      	ldreq	r2, [r2, #4]
 800c166:	1809      	addeq	r1, r1, r0
 800c168:	6021      	streq	r1, [r4, #0]
 800c16a:	6062      	str	r2, [r4, #4]
 800c16c:	605c      	str	r4, [r3, #4]
 800c16e:	e7c9      	b.n	800c104 <_free_r+0x24>
 800c170:	bd38      	pop	{r3, r4, r5, pc}
 800c172:	bf00      	nop
 800c174:	20000958 	.word	0x20000958

0800c178 <_malloc_r>:
 800c178:	b570      	push	{r4, r5, r6, lr}
 800c17a:	1ccd      	adds	r5, r1, #3
 800c17c:	f025 0503 	bic.w	r5, r5, #3
 800c180:	3508      	adds	r5, #8
 800c182:	2d0c      	cmp	r5, #12
 800c184:	bf38      	it	cc
 800c186:	250c      	movcc	r5, #12
 800c188:	2d00      	cmp	r5, #0
 800c18a:	4606      	mov	r6, r0
 800c18c:	db01      	blt.n	800c192 <_malloc_r+0x1a>
 800c18e:	42a9      	cmp	r1, r5
 800c190:	d903      	bls.n	800c19a <_malloc_r+0x22>
 800c192:	230c      	movs	r3, #12
 800c194:	6033      	str	r3, [r6, #0]
 800c196:	2000      	movs	r0, #0
 800c198:	bd70      	pop	{r4, r5, r6, pc}
 800c19a:	f000 f87d 	bl	800c298 <__malloc_lock>
 800c19e:	4a21      	ldr	r2, [pc, #132]	; (800c224 <_malloc_r+0xac>)
 800c1a0:	6814      	ldr	r4, [r2, #0]
 800c1a2:	4621      	mov	r1, r4
 800c1a4:	b991      	cbnz	r1, 800c1cc <_malloc_r+0x54>
 800c1a6:	4c20      	ldr	r4, [pc, #128]	; (800c228 <_malloc_r+0xb0>)
 800c1a8:	6823      	ldr	r3, [r4, #0]
 800c1aa:	b91b      	cbnz	r3, 800c1b4 <_malloc_r+0x3c>
 800c1ac:	4630      	mov	r0, r6
 800c1ae:	f000 f863 	bl	800c278 <_sbrk_r>
 800c1b2:	6020      	str	r0, [r4, #0]
 800c1b4:	4629      	mov	r1, r5
 800c1b6:	4630      	mov	r0, r6
 800c1b8:	f000 f85e 	bl	800c278 <_sbrk_r>
 800c1bc:	1c43      	adds	r3, r0, #1
 800c1be:	d124      	bne.n	800c20a <_malloc_r+0x92>
 800c1c0:	230c      	movs	r3, #12
 800c1c2:	4630      	mov	r0, r6
 800c1c4:	6033      	str	r3, [r6, #0]
 800c1c6:	f000 f868 	bl	800c29a <__malloc_unlock>
 800c1ca:	e7e4      	b.n	800c196 <_malloc_r+0x1e>
 800c1cc:	680b      	ldr	r3, [r1, #0]
 800c1ce:	1b5b      	subs	r3, r3, r5
 800c1d0:	d418      	bmi.n	800c204 <_malloc_r+0x8c>
 800c1d2:	2b0b      	cmp	r3, #11
 800c1d4:	d90f      	bls.n	800c1f6 <_malloc_r+0x7e>
 800c1d6:	600b      	str	r3, [r1, #0]
 800c1d8:	18cc      	adds	r4, r1, r3
 800c1da:	50cd      	str	r5, [r1, r3]
 800c1dc:	4630      	mov	r0, r6
 800c1de:	f000 f85c 	bl	800c29a <__malloc_unlock>
 800c1e2:	f104 000b 	add.w	r0, r4, #11
 800c1e6:	1d23      	adds	r3, r4, #4
 800c1e8:	f020 0007 	bic.w	r0, r0, #7
 800c1ec:	1ac3      	subs	r3, r0, r3
 800c1ee:	d0d3      	beq.n	800c198 <_malloc_r+0x20>
 800c1f0:	425a      	negs	r2, r3
 800c1f2:	50e2      	str	r2, [r4, r3]
 800c1f4:	e7d0      	b.n	800c198 <_malloc_r+0x20>
 800c1f6:	684b      	ldr	r3, [r1, #4]
 800c1f8:	428c      	cmp	r4, r1
 800c1fa:	bf16      	itet	ne
 800c1fc:	6063      	strne	r3, [r4, #4]
 800c1fe:	6013      	streq	r3, [r2, #0]
 800c200:	460c      	movne	r4, r1
 800c202:	e7eb      	b.n	800c1dc <_malloc_r+0x64>
 800c204:	460c      	mov	r4, r1
 800c206:	6849      	ldr	r1, [r1, #4]
 800c208:	e7cc      	b.n	800c1a4 <_malloc_r+0x2c>
 800c20a:	1cc4      	adds	r4, r0, #3
 800c20c:	f024 0403 	bic.w	r4, r4, #3
 800c210:	42a0      	cmp	r0, r4
 800c212:	d005      	beq.n	800c220 <_malloc_r+0xa8>
 800c214:	1a21      	subs	r1, r4, r0
 800c216:	4630      	mov	r0, r6
 800c218:	f000 f82e 	bl	800c278 <_sbrk_r>
 800c21c:	3001      	adds	r0, #1
 800c21e:	d0cf      	beq.n	800c1c0 <_malloc_r+0x48>
 800c220:	6025      	str	r5, [r4, #0]
 800c222:	e7db      	b.n	800c1dc <_malloc_r+0x64>
 800c224:	20000958 	.word	0x20000958
 800c228:	2000095c 	.word	0x2000095c

0800c22c <_realloc_r>:
 800c22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c22e:	4607      	mov	r7, r0
 800c230:	4614      	mov	r4, r2
 800c232:	460e      	mov	r6, r1
 800c234:	b921      	cbnz	r1, 800c240 <_realloc_r+0x14>
 800c236:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c23a:	4611      	mov	r1, r2
 800c23c:	f7ff bf9c 	b.w	800c178 <_malloc_r>
 800c240:	b922      	cbnz	r2, 800c24c <_realloc_r+0x20>
 800c242:	f7ff ff4d 	bl	800c0e0 <_free_r>
 800c246:	4625      	mov	r5, r4
 800c248:	4628      	mov	r0, r5
 800c24a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c24c:	f000 f826 	bl	800c29c <_malloc_usable_size_r>
 800c250:	42a0      	cmp	r0, r4
 800c252:	d20f      	bcs.n	800c274 <_realloc_r+0x48>
 800c254:	4621      	mov	r1, r4
 800c256:	4638      	mov	r0, r7
 800c258:	f7ff ff8e 	bl	800c178 <_malloc_r>
 800c25c:	4605      	mov	r5, r0
 800c25e:	2800      	cmp	r0, #0
 800c260:	d0f2      	beq.n	800c248 <_realloc_r+0x1c>
 800c262:	4631      	mov	r1, r6
 800c264:	4622      	mov	r2, r4
 800c266:	f7ff fc05 	bl	800ba74 <memcpy>
 800c26a:	4631      	mov	r1, r6
 800c26c:	4638      	mov	r0, r7
 800c26e:	f7ff ff37 	bl	800c0e0 <_free_r>
 800c272:	e7e9      	b.n	800c248 <_realloc_r+0x1c>
 800c274:	4635      	mov	r5, r6
 800c276:	e7e7      	b.n	800c248 <_realloc_r+0x1c>

0800c278 <_sbrk_r>:
 800c278:	b538      	push	{r3, r4, r5, lr}
 800c27a:	2300      	movs	r3, #0
 800c27c:	4c05      	ldr	r4, [pc, #20]	; (800c294 <_sbrk_r+0x1c>)
 800c27e:	4605      	mov	r5, r0
 800c280:	4608      	mov	r0, r1
 800c282:	6023      	str	r3, [r4, #0]
 800c284:	f7f7 fd5c 	bl	8003d40 <_sbrk>
 800c288:	1c43      	adds	r3, r0, #1
 800c28a:	d102      	bne.n	800c292 <_sbrk_r+0x1a>
 800c28c:	6823      	ldr	r3, [r4, #0]
 800c28e:	b103      	cbz	r3, 800c292 <_sbrk_r+0x1a>
 800c290:	602b      	str	r3, [r5, #0]
 800c292:	bd38      	pop	{r3, r4, r5, pc}
 800c294:	20001ac0 	.word	0x20001ac0

0800c298 <__malloc_lock>:
 800c298:	4770      	bx	lr

0800c29a <__malloc_unlock>:
 800c29a:	4770      	bx	lr

0800c29c <_malloc_usable_size_r>:
 800c29c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2a0:	1f18      	subs	r0, r3, #4
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	bfbc      	itt	lt
 800c2a6:	580b      	ldrlt	r3, [r1, r0]
 800c2a8:	18c0      	addlt	r0, r0, r3
 800c2aa:	4770      	bx	lr

0800c2ac <_init>:
 800c2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2ae:	bf00      	nop
 800c2b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2b2:	bc08      	pop	{r3}
 800c2b4:	469e      	mov	lr, r3
 800c2b6:	4770      	bx	lr

0800c2b8 <_fini>:
 800c2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2ba:	bf00      	nop
 800c2bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2be:	bc08      	pop	{r3}
 800c2c0:	469e      	mov	lr, r3
 800c2c2:	4770      	bx	lr
