
stm_nrf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c9d8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001430  0800cae8  0800cae8  0001cae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df18  0800df18  00020208  2**0
                  CONTENTS
  4 .ARM          00000000  0800df18  0800df18  00020208  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800df18  0800df18  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800df18  0800df18  0001df18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800df1c  0800df1c  0001df1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0800df20  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000110c  20000208  0800e128  00020208  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001314  0800e128  00021314  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023b43  00000000  00000000  00020231  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004a53  00000000  00000000  00043d74  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001b78  00000000  00000000  000487c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001970  00000000  00000000  0004a340  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ae47  00000000  00000000  0004bcb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018434  00000000  00000000  00066af7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00082cd6  00000000  00000000  0007ef2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00101c01  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077bc  00000000  00000000  00101c7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000208 	.word	0x20000208
 800012c:	00000000 	.word	0x00000000
 8000130:	0800cad0 	.word	0x0800cad0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000020c 	.word	0x2000020c
 800014c:	0800cad0 	.word	0x0800cad0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8000a68:	4b0a      	ldr	r3, [pc, #40]	; (8000a94 <NRF24_DelayMicroSeconds+0x38>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a0a      	ldr	r2, [pc, #40]	; (8000a98 <NRF24_DelayMicroSeconds+0x3c>)
 8000a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a72:	0c9a      	lsrs	r2, r3, #18
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	fb02 f303 	mul.w	r3, r2, r3
 8000a7a:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 8000a7c:	bf00      	nop
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	1e5a      	subs	r2, r3, #1
 8000a82:	60fa      	str	r2, [r7, #12]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d1fa      	bne.n	8000a7e <NRF24_DelayMicroSeconds+0x22>
}
 8000a88:	bf00      	nop
 8000a8a:	3714      	adds	r7, #20
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bc80      	pop	{r7}
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	20000134 	.word	0x20000134
 8000a98:	165e9f81 	.word	0x165e9f81

08000a9c <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d008      	beq.n	8000abc <NRF24_csn+0x20>
 8000aaa:	4b0a      	ldr	r3, [pc, #40]	; (8000ad4 <NRF24_csn+0x38>)
 8000aac:	6818      	ldr	r0, [r3, #0]
 8000aae:	4b0a      	ldr	r3, [pc, #40]	; (8000ad8 <NRF24_csn+0x3c>)
 8000ab0:	881b      	ldrh	r3, [r3, #0]
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	f004 fdfc 	bl	80056b2 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8000aba:	e007      	b.n	8000acc <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8000abc:	4b05      	ldr	r3, [pc, #20]	; (8000ad4 <NRF24_csn+0x38>)
 8000abe:	6818      	ldr	r0, [r3, #0]
 8000ac0:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <NRF24_csn+0x3c>)
 8000ac2:	881b      	ldrh	r3, [r3, #0]
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	f004 fdf3 	bl	80056b2 <HAL_GPIO_WritePin>
}
 8000acc:	bf00      	nop
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20000234 	.word	0x20000234
 8000ad8:	20000238 	.word	0x20000238

08000adc <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d008      	beq.n	8000afc <NRF24_ce+0x20>
 8000aea:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <NRF24_ce+0x38>)
 8000aec:	6818      	ldr	r0, [r3, #0]
 8000aee:	4b0a      	ldr	r3, [pc, #40]	; (8000b18 <NRF24_ce+0x3c>)
 8000af0:	881b      	ldrh	r3, [r3, #0]
 8000af2:	2201      	movs	r2, #1
 8000af4:	4619      	mov	r1, r3
 8000af6:	f004 fddc 	bl	80056b2 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8000afa:	e007      	b.n	8000b0c <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000afc:	4b05      	ldr	r3, [pc, #20]	; (8000b14 <NRF24_ce+0x38>)
 8000afe:	6818      	ldr	r0, [r3, #0]
 8000b00:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <NRF24_ce+0x3c>)
 8000b02:	881b      	ldrh	r3, [r3, #0]
 8000b04:	2200      	movs	r2, #0
 8000b06:	4619      	mov	r1, r3
 8000b08:	f004 fdd3 	bl	80056b2 <HAL_GPIO_WritePin>
}
 8000b0c:	bf00      	nop
 8000b0e:	3708      	adds	r7, #8
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20000234 	.word	0x20000234
 8000b18:	2000023a 	.word	0x2000023a

08000b1c <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8000b26:	2000      	movs	r0, #0
 8000b28:	f7ff ffb8 	bl	8000a9c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
 8000b2e:	f003 031f 	and.w	r3, r3, #31
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000b36:	f107 010c 	add.w	r1, r7, #12
 8000b3a:	2364      	movs	r3, #100	; 0x64
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	480a      	ldr	r0, [pc, #40]	; (8000b68 <NRF24_read_register+0x4c>)
 8000b40:	f007 fb53 	bl	80081ea <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8000b44:	f107 030c 	add.w	r3, r7, #12
 8000b48:	1c59      	adds	r1, r3, #1
 8000b4a:	2364      	movs	r3, #100	; 0x64
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	4806      	ldr	r0, [pc, #24]	; (8000b68 <NRF24_read_register+0x4c>)
 8000b50:	f007 fc7f 	bl	8008452 <HAL_SPI_Receive>
	retData = spiBuf[1];
 8000b54:	7b7b      	ldrb	r3, [r7, #13]
 8000b56:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8000b58:	2001      	movs	r0, #1
 8000b5a:	f7ff ff9f 	bl	8000a9c <NRF24_csn>
	return retData;
 8000b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3710      	adds	r7, #16
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	2000023c 	.word	0x2000023c

08000b6c <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	6039      	str	r1, [r7, #0]
 8000b76:	71fb      	strb	r3, [r7, #7]
 8000b78:	4613      	mov	r3, r2
 8000b7a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	f7ff ff8d 	bl	8000a9c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	f003 031f 	and.w	r3, r3, #31
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000b8c:	f107 010c 	add.w	r1, r7, #12
 8000b90:	2364      	movs	r3, #100	; 0x64
 8000b92:	2201      	movs	r2, #1
 8000b94:	4808      	ldr	r0, [pc, #32]	; (8000bb8 <NRF24_read_registerN+0x4c>)
 8000b96:	f007 fb28 	bl	80081ea <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8000b9a:	79bb      	ldrb	r3, [r7, #6]
 8000b9c:	b29a      	uxth	r2, r3
 8000b9e:	2364      	movs	r3, #100	; 0x64
 8000ba0:	6839      	ldr	r1, [r7, #0]
 8000ba2:	4805      	ldr	r0, [pc, #20]	; (8000bb8 <NRF24_read_registerN+0x4c>)
 8000ba4:	f007 fc55 	bl	8008452 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8000ba8:	2001      	movs	r0, #1
 8000baa:	f7ff ff77 	bl	8000a9c <NRF24_csn>
}
 8000bae:	bf00      	nop
 8000bb0:	3710      	adds	r7, #16
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	2000023c 	.word	0x2000023c

08000bbc <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	460a      	mov	r2, r1
 8000bc6:	71fb      	strb	r3, [r7, #7]
 8000bc8:	4613      	mov	r3, r2
 8000bca:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000bcc:	2000      	movs	r0, #0
 8000bce:	f7ff ff65 	bl	8000a9c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	f043 0320 	orr.w	r3, r3, #32
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8000bdc:	79bb      	ldrb	r3, [r7, #6]
 8000bde:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8000be0:	f107 010c 	add.w	r1, r7, #12
 8000be4:	2364      	movs	r3, #100	; 0x64
 8000be6:	2202      	movs	r2, #2
 8000be8:	4804      	ldr	r0, [pc, #16]	; (8000bfc <NRF24_write_register+0x40>)
 8000bea:	f007 fafe 	bl	80081ea <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000bee:	2001      	movs	r0, #1
 8000bf0:	f7ff ff54 	bl	8000a9c <NRF24_csn>
}
 8000bf4:	bf00      	nop
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	2000023c 	.word	0x2000023c

08000c00 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	6039      	str	r1, [r7, #0]
 8000c0a:	71fb      	strb	r3, [r7, #7]
 8000c0c:	4613      	mov	r3, r2
 8000c0e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000c10:	2000      	movs	r0, #0
 8000c12:	f7ff ff43 	bl	8000a9c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	f043 0320 	orr.w	r3, r3, #32
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000c20:	f107 010c 	add.w	r1, r7, #12
 8000c24:	2364      	movs	r3, #100	; 0x64
 8000c26:	2201      	movs	r2, #1
 8000c28:	4808      	ldr	r0, [pc, #32]	; (8000c4c <NRF24_write_registerN+0x4c>)
 8000c2a:	f007 fade 	bl	80081ea <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8000c2e:	79bb      	ldrb	r3, [r7, #6]
 8000c30:	b29a      	uxth	r2, r3
 8000c32:	2364      	movs	r3, #100	; 0x64
 8000c34:	6839      	ldr	r1, [r7, #0]
 8000c36:	4805      	ldr	r0, [pc, #20]	; (8000c4c <NRF24_write_registerN+0x4c>)
 8000c38:	f007 fad7 	bl	80081ea <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	f7ff ff2d 	bl	8000a9c <NRF24_csn>
}
 8000c42:	bf00      	nop
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	2000023c 	.word	0x2000023c

08000c50 <NRF24_read_payload>:
	//Bring CSN high
	NRF24_csn(1);
}
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	460b      	mov	r3, r1
 8000c5a:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 8000c5c:	f000 fa06 	bl	800106c <NRF24_getPayloadSize>
 8000c60:	4603      	mov	r3, r0
 8000c62:	461a      	mov	r2, r3
 8000c64:	78fb      	ldrb	r3, [r7, #3]
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d303      	bcc.n	8000c72 <NRF24_read_payload+0x22>
 8000c6a:	f000 f9ff 	bl	800106c <NRF24_getPayloadSize>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	e000      	b.n	8000c74 <NRF24_read_payload+0x24>
 8000c72:	78fb      	ldrb	r3, [r7, #3]
 8000c74:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8000c76:	2000      	movs	r0, #0
 8000c78:	f7ff ff10 	bl	8000a9c <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 8000c7c:	2361      	movs	r3, #97	; 0x61
 8000c7e:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 8000c80:	f107 010e 	add.w	r1, r7, #14
 8000c84:	2364      	movs	r3, #100	; 0x64
 8000c86:	2201      	movs	r2, #1
 8000c88:	4808      	ldr	r0, [pc, #32]	; (8000cac <NRF24_read_payload+0x5c>)
 8000c8a:	f007 faae 	bl	80081ea <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 8000c8e:	7bfb      	ldrb	r3, [r7, #15]
 8000c90:	b29a      	uxth	r2, r3
 8000c92:	2364      	movs	r3, #100	; 0x64
 8000c94:	6879      	ldr	r1, [r7, #4]
 8000c96:	4805      	ldr	r0, [pc, #20]	; (8000cac <NRF24_read_payload+0x5c>)
 8000c98:	f007 fbdb 	bl	8008452 <HAL_SPI_Receive>
	NRF24_csn(1);
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	f7ff fefd 	bl	8000a9c <NRF24_csn>
}
 8000ca2:	bf00      	nop
 8000ca4:	3710      	adds	r7, #16
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	2000023c 	.word	0x2000023c

08000cb0 <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000cb4:	21ff      	movs	r1, #255	; 0xff
 8000cb6:	20e1      	movs	r0, #225	; 0xe1
 8000cb8:	f7ff ff80 	bl	8000bbc <NRF24_write_register>
}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000cc4:	21ff      	movs	r1, #255	; 0xff
 8000cc6:	20e2      	movs	r0, #226	; 0xe2
 8000cc8:	f7ff ff78 	bl	8000bbc <NRF24_write_register>
}
 8000ccc:	bf00      	nop
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8000cd6:	2007      	movs	r0, #7
 8000cd8:	f7ff ff20 	bl	8000b1c <NRF24_read_register>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
	...

08000cec <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8000cec:	b082      	sub	sp, #8
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b084      	sub	sp, #16
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
 8000cf6:	61fb      	str	r3, [r7, #28]
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	807b      	strh	r3, [r7, #2]
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000d00:	4b66      	ldr	r3, [pc, #408]	; (8000e9c <NRF24_begin+0x1b0>)
 8000d02:	4618      	mov	r0, r3
 8000d04:	f107 031c 	add.w	r3, r7, #28
 8000d08:	2258      	movs	r2, #88	; 0x58
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	f00b fac4 	bl	800c298 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000d10:	4a63      	ldr	r2, [pc, #396]	; (8000ea0 <NRF24_begin+0x1b4>)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8000d16:	4a63      	ldr	r2, [pc, #396]	; (8000ea4 <NRF24_begin+0x1b8>)
 8000d18:	887b      	ldrh	r3, [r7, #2]
 8000d1a:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000d1c:	4a62      	ldr	r2, [pc, #392]	; (8000ea8 <NRF24_begin+0x1bc>)
 8000d1e:	883b      	ldrh	r3, [r7, #0]
 8000d20:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 8000d22:	2001      	movs	r0, #1
 8000d24:	f7ff feba 	bl	8000a9c <NRF24_csn>
	NRF24_ce(0);
 8000d28:	2000      	movs	r0, #0
 8000d2a:	f7ff fed7 	bl	8000adc <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000d2e:	2005      	movs	r0, #5
 8000d30:	f003 fd26 	bl	8004780 <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000d34:	2108      	movs	r1, #8
 8000d36:	2000      	movs	r0, #0
 8000d38:	f7ff ff40 	bl	8000bbc <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000d3c:	213f      	movs	r1, #63	; 0x3f
 8000d3e:	2001      	movs	r0, #1
 8000d40:	f7ff ff3c 	bl	8000bbc <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000d44:	2103      	movs	r1, #3
 8000d46:	2002      	movs	r0, #2
 8000d48:	f7ff ff38 	bl	8000bbc <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000d4c:	2103      	movs	r1, #3
 8000d4e:	2003      	movs	r0, #3
 8000d50:	f7ff ff34 	bl	8000bbc <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000d54:	2103      	movs	r1, #3
 8000d56:	2004      	movs	r0, #4
 8000d58:	f7ff ff30 	bl	8000bbc <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000d5c:	2102      	movs	r1, #2
 8000d5e:	2005      	movs	r0, #5
 8000d60:	f7ff ff2c 	bl	8000bbc <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8000d64:	210f      	movs	r1, #15
 8000d66:	2006      	movs	r0, #6
 8000d68:	f7ff ff28 	bl	8000bbc <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000d6c:	210e      	movs	r1, #14
 8000d6e:	2007      	movs	r0, #7
 8000d70:	f7ff ff24 	bl	8000bbc <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8000d74:	2100      	movs	r1, #0
 8000d76:	2008      	movs	r0, #8
 8000d78:	f7ff ff20 	bl	8000bbc <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	2009      	movs	r0, #9
 8000d80:	f7ff ff1c 	bl	8000bbc <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000d84:	23e7      	movs	r3, #231	; 0xe7
 8000d86:	733b      	strb	r3, [r7, #12]
 8000d88:	23e7      	movs	r3, #231	; 0xe7
 8000d8a:	72fb      	strb	r3, [r7, #11]
 8000d8c:	23e7      	movs	r3, #231	; 0xe7
 8000d8e:	72bb      	strb	r3, [r7, #10]
 8000d90:	23e7      	movs	r3, #231	; 0xe7
 8000d92:	727b      	strb	r3, [r7, #9]
 8000d94:	23e7      	movs	r3, #231	; 0xe7
 8000d96:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8000d98:	f107 0308 	add.w	r3, r7, #8
 8000d9c:	2205      	movs	r2, #5
 8000d9e:	4619      	mov	r1, r3
 8000da0:	200a      	movs	r0, #10
 8000da2:	f7ff ff2d 	bl	8000c00 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 8000da6:	23c2      	movs	r3, #194	; 0xc2
 8000da8:	733b      	strb	r3, [r7, #12]
 8000daa:	23c2      	movs	r3, #194	; 0xc2
 8000dac:	72fb      	strb	r3, [r7, #11]
 8000dae:	23c2      	movs	r3, #194	; 0xc2
 8000db0:	72bb      	strb	r3, [r7, #10]
 8000db2:	23c2      	movs	r3, #194	; 0xc2
 8000db4:	727b      	strb	r3, [r7, #9]
 8000db6:	23c2      	movs	r3, #194	; 0xc2
 8000db8:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8000dba:	f107 0308 	add.w	r3, r7, #8
 8000dbe:	2205      	movs	r2, #5
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	200b      	movs	r0, #11
 8000dc4:	f7ff ff1c 	bl	8000c00 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8000dc8:	21c3      	movs	r1, #195	; 0xc3
 8000dca:	200c      	movs	r0, #12
 8000dcc:	f7ff fef6 	bl	8000bbc <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000dd0:	21c4      	movs	r1, #196	; 0xc4
 8000dd2:	200d      	movs	r0, #13
 8000dd4:	f7ff fef2 	bl	8000bbc <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8000dd8:	21c5      	movs	r1, #197	; 0xc5
 8000dda:	200e      	movs	r0, #14
 8000ddc:	f7ff feee 	bl	8000bbc <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000de0:	21c6      	movs	r1, #198	; 0xc6
 8000de2:	200f      	movs	r0, #15
 8000de4:	f7ff feea 	bl	8000bbc <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000de8:	23e7      	movs	r3, #231	; 0xe7
 8000dea:	733b      	strb	r3, [r7, #12]
 8000dec:	23e7      	movs	r3, #231	; 0xe7
 8000dee:	72fb      	strb	r3, [r7, #11]
 8000df0:	23e7      	movs	r3, #231	; 0xe7
 8000df2:	72bb      	strb	r3, [r7, #10]
 8000df4:	23e7      	movs	r3, #231	; 0xe7
 8000df6:	727b      	strb	r3, [r7, #9]
 8000df8:	23e7      	movs	r3, #231	; 0xe7
 8000dfa:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000dfc:	f107 0308 	add.w	r3, r7, #8
 8000e00:	2205      	movs	r2, #5
 8000e02:	4619      	mov	r1, r3
 8000e04:	2010      	movs	r0, #16
 8000e06:	f7ff fefb 	bl	8000c00 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	2011      	movs	r0, #17
 8000e0e:	f7ff fed5 	bl	8000bbc <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000e12:	2100      	movs	r1, #0
 8000e14:	2012      	movs	r0, #18
 8000e16:	f7ff fed1 	bl	8000bbc <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	2013      	movs	r0, #19
 8000e1e:	f7ff fecd 	bl	8000bbc <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000e22:	2100      	movs	r1, #0
 8000e24:	2014      	movs	r0, #20
 8000e26:	f7ff fec9 	bl	8000bbc <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	2015      	movs	r0, #21
 8000e2e:	f7ff fec5 	bl	8000bbc <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000e32:	2100      	movs	r1, #0
 8000e34:	2016      	movs	r0, #22
 8000e36:	f7ff fec1 	bl	8000bbc <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 8000e3a:	f000 facf 	bl	80013dc <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000e3e:	2100      	movs	r1, #0
 8000e40:	201c      	movs	r0, #28
 8000e42:	f7ff febb 	bl	8000bbc <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8000e46:	2100      	movs	r1, #0
 8000e48:	201d      	movs	r0, #29
 8000e4a:	f7ff feb7 	bl	8000bbc <NRF24_write_register>
	printRadioSettings();
 8000e4e:	f000 fadf 	bl	8001410 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000e52:	210f      	movs	r1, #15
 8000e54:	200f      	movs	r0, #15
 8000e56:	f000 f8c3 	bl	8000fe0 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8000e5a:	2003      	movs	r0, #3
 8000e5c:	f000 f9a5 	bl	80011aa <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000e60:	2001      	movs	r0, #1
 8000e62:	f000 f9db 	bl	800121c <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8000e66:	2002      	movs	r0, #2
 8000e68:	f000 fa1e 	bl	80012a8 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000e6c:	f000 f970 	bl	8001150 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000e70:	2020      	movs	r0, #32
 8000e72:	f000 f8e5 	bl	8001040 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 8000e76:	f000 faa8 	bl	80013ca <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8000e7a:	204c      	movs	r0, #76	; 0x4c
 8000e7c:	f000 f8cb 	bl	8001016 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000e80:	f7ff ff16 	bl	8000cb0 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000e84:	f7ff ff1c 	bl	8000cc0 <NRF24_flush_rx>
	
	NRF24_powerDown();
 8000e88:	f000 fa36 	bl	80012f8 <NRF24_powerDown>
	
}
 8000e8c:	bf00      	nop
 8000e8e:	3710      	adds	r7, #16
 8000e90:	46bd      	mov	sp, r7
 8000e92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e96:	b002      	add	sp, #8
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	2000023c 	.word	0x2000023c
 8000ea0:	20000234 	.word	0x20000234
 8000ea4:	20000238 	.word	0x20000238
 8000ea8:	2000023a 	.word	0x2000023a

08000eac <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8000eac:	b598      	push	{r3, r4, r7, lr}
 8000eae:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 8000eb0:	2000      	movs	r0, #0
 8000eb2:	f7ff fe33 	bl	8000b1c <NRF24_read_register>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	f043 0303 	orr.w	r3, r3, #3
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	2000      	movs	r0, #0
 8000ec2:	f7ff fe7b 	bl	8000bbc <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 8000ec6:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <NRF24_startListening+0x44>)
 8000ec8:	cb18      	ldmia	r3, {r3, r4}
 8000eca:	4323      	orrs	r3, r4
 8000ecc:	d004      	beq.n	8000ed8 <NRF24_startListening+0x2c>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 8000ece:	2205      	movs	r2, #5
 8000ed0:	4907      	ldr	r1, [pc, #28]	; (8000ef0 <NRF24_startListening+0x44>)
 8000ed2:	200a      	movs	r0, #10
 8000ed4:	f7ff fe94 	bl	8000c00 <NRF24_write_registerN>
	
	//Flush buffers
	NRF24_flush_tx();
 8000ed8:	f7ff feea 	bl	8000cb0 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000edc:	f7ff fef0 	bl	8000cc0 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	f7ff fdfb 	bl	8000adc <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8000ee6:	2096      	movs	r0, #150	; 0x96
 8000ee8:	f7ff fdb8 	bl	8000a5c <NRF24_DelayMicroSeconds>
}
 8000eec:	bf00      	nop
 8000eee:	bd98      	pop	{r3, r4, r7, pc}
 8000ef0:	20000228 	.word	0x20000228

08000ef4 <NRF24_available>:
	NRF24_flush_tx();
	return retStatus;
}
//16. Check for available data to read
bool NRF24_available(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8000ef8:	2000      	movs	r0, #0
 8000efa:	f000 fa0c 	bl	8001316 <NRF24_availablePipe>
 8000efe:	4603      	mov	r3, r0
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 8000f10:	78fb      	ldrb	r3, [r7, #3]
 8000f12:	4619      	mov	r1, r3
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f7ff fe9b 	bl	8000c50 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 8000f1a:	2017      	movs	r0, #23
 8000f1c:	f7ff fdfe 	bl	8000b1c <NRF24_read_register>
 8000f20:	4603      	mov	r3, r0
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 8000f28:	f7ff feca 	bl	8000cc0 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 8000f2c:	f000 f8a8 	bl	8001080 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 8000f30:	7bfb      	ldrb	r3, [r7, #15]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	bf14      	ite	ne
 8000f36:	2301      	movne	r3, #1
 8000f38:	2300      	moveq	r3, #0
 8000f3a:	b2db      	uxtb	r3, r3
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <NRF24_openReadingPipe>:
	const uint8_t max_payload_size = 32;
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
}
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 8000f44:	b590      	push	{r4, r7, lr}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4601      	mov	r1, r0
 8000f4c:	e9c7 2300 	strd	r2, r3, [r7]
 8000f50:	460b      	mov	r3, r1
 8000f52:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d104      	bne.n	8000f64 <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 8000f5a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000f5e:	4a1c      	ldr	r2, [pc, #112]	; (8000fd0 <NRF24_openReadingPipe+0x8c>)
 8000f60:	e9c2 3400 	strd	r3, r4, [r2]
	
	if(number <= 6)
 8000f64:	7bfb      	ldrb	r3, [r7, #15]
 8000f66:	2b06      	cmp	r3, #6
 8000f68:	d82d      	bhi.n	8000fc6 <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 8000f6a:	7bfb      	ldrb	r3, [r7, #15]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d808      	bhi.n	8000f82 <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 8000f70:	7bfb      	ldrb	r3, [r7, #15]
 8000f72:	4a18      	ldr	r2, [pc, #96]	; (8000fd4 <NRF24_openReadingPipe+0x90>)
 8000f74:	5cd3      	ldrb	r3, [r2, r3]
 8000f76:	4639      	mov	r1, r7
 8000f78:	2205      	movs	r2, #5
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff fe40 	bl	8000c00 <NRF24_write_registerN>
 8000f80:	e007      	b.n	8000f92 <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 8000f82:	7bfb      	ldrb	r3, [r7, #15]
 8000f84:	4a13      	ldr	r2, [pc, #76]	; (8000fd4 <NRF24_openReadingPipe+0x90>)
 8000f86:	5cd3      	ldrb	r3, [r2, r3]
 8000f88:	4639      	mov	r1, r7
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff fe37 	bl	8000c00 <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 8000f92:	7bfb      	ldrb	r3, [r7, #15]
 8000f94:	4a10      	ldr	r2, [pc, #64]	; (8000fd8 <NRF24_openReadingPipe+0x94>)
 8000f96:	5cd2      	ldrb	r2, [r2, r3]
 8000f98:	4b10      	ldr	r3, [pc, #64]	; (8000fdc <NRF24_openReadingPipe+0x98>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4610      	mov	r0, r2
 8000fa0:	f7ff fe0c 	bl	8000bbc <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 8000fa4:	2002      	movs	r0, #2
 8000fa6:	f7ff fdb9 	bl	8000b1c <NRF24_read_register>
 8000faa:	4603      	mov	r3, r0
 8000fac:	b25a      	sxtb	r2, r3
 8000fae:	7bfb      	ldrb	r3, [r7, #15]
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb6:	b25b      	sxtb	r3, r3
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	b25b      	sxtb	r3, r3
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	2002      	movs	r0, #2
 8000fc2:	f7ff fdfb 	bl	8000bbc <NRF24_write_register>
	}
	
}
 8000fc6:	bf00      	nop
 8000fc8:	3714      	adds	r7, #20
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd90      	pop	{r4, r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000228 	.word	0x20000228
 8000fd4:	0800d160 	.word	0x0800d160
 8000fd8:	0800d168 	.word	0x0800d168
 8000fdc:	20000230 	.word	0x20000230

08000fe0 <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	460a      	mov	r2, r1
 8000fea:	71fb      	strb	r3, [r7, #7]
 8000fec:	4613      	mov	r3, r2
 8000fee:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	011b      	lsls	r3, r3, #4
 8000ff4:	b25a      	sxtb	r2, r3
 8000ff6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000ffa:	f003 030f 	and.w	r3, r3, #15
 8000ffe:	b25b      	sxtb	r3, r3
 8001000:	4313      	orrs	r3, r2
 8001002:	b25b      	sxtb	r3, r3
 8001004:	b2db      	uxtb	r3, r3
 8001006:	4619      	mov	r1, r3
 8001008:	2004      	movs	r0, #4
 800100a:	f7ff fdd7 	bl	8000bbc <NRF24_write_register>
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b084      	sub	sp, #16
 800101a:	af00      	add	r7, sp, #0
 800101c:	4603      	mov	r3, r0
 800101e:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8001020:	237f      	movs	r3, #127	; 0x7f
 8001022:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8001024:	7bfa      	ldrb	r2, [r7, #15]
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	4293      	cmp	r3, r2
 800102a:	bf28      	it	cs
 800102c:	4613      	movcs	r3, r2
 800102e:	b2db      	uxtb	r3, r3
 8001030:	4619      	mov	r1, r3
 8001032:	2005      	movs	r0, #5
 8001034:	f7ff fdc2 	bl	8000bbc <NRF24_write_register>
}
 8001038:	bf00      	nop
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 800104a:	2320      	movs	r3, #32
 800104c:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 800104e:	7bfa      	ldrb	r2, [r7, #15]
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	4293      	cmp	r3, r2
 8001054:	bf28      	it	cs
 8001056:	4613      	movcs	r3, r2
 8001058:	b2da      	uxtb	r2, r3
 800105a:	4b03      	ldr	r3, [pc, #12]	; (8001068 <NRF24_setPayloadSize+0x28>)
 800105c:	701a      	strb	r2, [r3, #0]
}
 800105e:	bf00      	nop
 8001060:	3714      	adds	r7, #20
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr
 8001068:	20000230 	.word	0x20000230

0800106c <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
	return payload_size;
 8001070:	4b02      	ldr	r3, [pc, #8]	; (800107c <NRF24_getPayloadSize+0x10>)
 8001072:	781b      	ldrb	r3, [r3, #0]
}
 8001074:	4618      	mov	r0, r3
 8001076:	46bd      	mov	sp, r7
 8001078:	bc80      	pop	{r7}
 800107a:	4770      	bx	lr
 800107c:	20000230 	.word	0x20000230

08001080 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8001084:	2060      	movs	r0, #96	; 0x60
 8001086:	f7ff fd49 	bl	8000b1c <NRF24_read_register>
 800108a:	4603      	mov	r3, r0
}
 800108c:	4618      	mov	r0, r3
 800108e:	bd80      	pop	{r7, pc}

08001090 <NRF24_enableAckPayload>:
//25. Enable payload on Ackknowledge packet
void NRF24_enableAckPayload(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
	//Need to enable dynamic payload and Ack payload together
	 NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8001094:	201d      	movs	r0, #29
 8001096:	f7ff fd41 	bl	8000b1c <NRF24_read_register>
 800109a:	4603      	mov	r3, r0
 800109c:	f043 0306 	orr.w	r3, r3, #6
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	4619      	mov	r1, r3
 80010a4:	201d      	movs	r0, #29
 80010a6:	f7ff fd89 	bl	8000bbc <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 80010aa:	201d      	movs	r0, #29
 80010ac:	f7ff fd36 	bl	8000b1c <NRF24_read_register>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d10c      	bne.n	80010d0 <NRF24_enableAckPayload+0x40>
	{
		NRF24_ACTIVATE_cmd();
 80010b6:	f000 f991 	bl	80013dc <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 80010ba:	201d      	movs	r0, #29
 80010bc:	f7ff fd2e 	bl	8000b1c <NRF24_read_register>
 80010c0:	4603      	mov	r3, r0
 80010c2:	f043 0306 	orr.w	r3, r3, #6
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	4619      	mov	r1, r3
 80010ca:	201d      	movs	r0, #29
 80010cc:	f7ff fd76 	bl	8000bbc <NRF24_write_register>
	}
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 80010d0:	201c      	movs	r0, #28
 80010d2:	f7ff fd23 	bl	8000b1c <NRF24_read_register>
 80010d6:	4603      	mov	r3, r0
 80010d8:	f043 0303 	orr.w	r3, r3, #3
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	4619      	mov	r1, r3
 80010e0:	201c      	movs	r0, #28
 80010e2:	f7ff fd6b 	bl	8000bbc <NRF24_write_register>
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
	...

080010ec <NRF24_enableDynamicPayloads>:
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 80010f0:	201d      	movs	r0, #29
 80010f2:	f7ff fd13 	bl	8000b1c <NRF24_read_register>
 80010f6:	4603      	mov	r3, r0
 80010f8:	f043 0304 	orr.w	r3, r3, #4
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	4619      	mov	r1, r3
 8001100:	201d      	movs	r0, #29
 8001102:	f7ff fd5b 	bl	8000bbc <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8001106:	201d      	movs	r0, #29
 8001108:	f7ff fd08 	bl	8000b1c <NRF24_read_register>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d10c      	bne.n	800112c <NRF24_enableDynamicPayloads+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8001112:	f000 f963 	bl	80013dc <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8001116:	201d      	movs	r0, #29
 8001118:	f7ff fd00 	bl	8000b1c <NRF24_read_register>
 800111c:	4603      	mov	r3, r0
 800111e:	f043 0304 	orr.w	r3, r3, #4
 8001122:	b2db      	uxtb	r3, r3
 8001124:	4619      	mov	r1, r3
 8001126:	201d      	movs	r0, #29
 8001128:	f7ff fd48 	bl	8000bbc <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 800112c:	201c      	movs	r0, #28
 800112e:	f7ff fcf5 	bl	8000b1c <NRF24_read_register>
 8001132:	4603      	mov	r3, r0
 8001134:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8001138:	b2db      	uxtb	r3, r3
 800113a:	4619      	mov	r1, r3
 800113c:	201c      	movs	r0, #28
 800113e:	f7ff fd3d 	bl	8000bbc <NRF24_write_register>
  dynamic_payloads_enabled = true;
 8001142:	4b02      	ldr	r3, [pc, #8]	; (800114c <NRF24_enableDynamicPayloads+0x60>)
 8001144:	2201      	movs	r2, #1
 8001146:	701a      	strb	r2, [r3, #0]
	
}
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20000231 	.word	0x20000231

08001150 <NRF24_disableDynamicPayloads>:
void NRF24_disableDynamicPayloads(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8001154:	201d      	movs	r0, #29
 8001156:	f7ff fce1 	bl	8000b1c <NRF24_read_register>
 800115a:	4603      	mov	r3, r0
 800115c:	f023 0304 	bic.w	r3, r3, #4
 8001160:	b2db      	uxtb	r3, r3
 8001162:	4619      	mov	r1, r3
 8001164:	201d      	movs	r0, #29
 8001166:	f7ff fd29 	bl	8000bbc <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 800116a:	2100      	movs	r1, #0
 800116c:	201c      	movs	r0, #28
 800116e:	f7ff fd25 	bl	8000bbc <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8001172:	4b02      	ldr	r3, [pc, #8]	; (800117c <NRF24_disableDynamicPayloads+0x2c>)
 8001174:	2200      	movs	r2, #0
 8001176:	701a      	strb	r2, [r3, #0]
}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20000231 	.word	0x20000231

08001180 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d004      	beq.n	800119a <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8001190:	213f      	movs	r1, #63	; 0x3f
 8001192:	2001      	movs	r0, #1
 8001194:	f7ff fd12 	bl	8000bbc <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8001198:	e003      	b.n	80011a2 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 800119a:	2100      	movs	r1, #0
 800119c:	2001      	movs	r0, #1
 800119e:	f7ff fd0d 	bl	8000bbc <NRF24_write_register>
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b084      	sub	sp, #16
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	4603      	mov	r3, r0
 80011b2:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80011b4:	2006      	movs	r0, #6
 80011b6:	f7ff fcb1 	bl	8000b1c <NRF24_read_register>
 80011ba:	4603      	mov	r3, r0
 80011bc:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80011be:	7bfb      	ldrb	r3, [r7, #15]
 80011c0:	f023 0306 	bic.w	r3, r3, #6
 80011c4:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	2b03      	cmp	r3, #3
 80011ca:	d104      	bne.n	80011d6 <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80011cc:	7bfb      	ldrb	r3, [r7, #15]
 80011ce:	f043 0306 	orr.w	r3, r3, #6
 80011d2:	73fb      	strb	r3, [r7, #15]
 80011d4:	e019      	b.n	800120a <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d104      	bne.n	80011e6 <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 80011dc:	7bfb      	ldrb	r3, [r7, #15]
 80011de:	f043 0304 	orr.w	r3, r3, #4
 80011e2:	73fb      	strb	r3, [r7, #15]
 80011e4:	e011      	b.n	800120a <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d104      	bne.n	80011f6 <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 80011ec:	7bfb      	ldrb	r3, [r7, #15]
 80011ee:	f043 0302 	orr.w	r3, r3, #2
 80011f2:	73fb      	strb	r3, [r7, #15]
 80011f4:	e009      	b.n	800120a <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d006      	beq.n	800120a <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	2b04      	cmp	r3, #4
 8001200:	d103      	bne.n	800120a <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001202:	7bfb      	ldrb	r3, [r7, #15]
 8001204:	f043 0306 	orr.w	r3, r3, #6
 8001208:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 800120a:	7bfb      	ldrb	r3, [r7, #15]
 800120c:	4619      	mov	r1, r3
 800120e:	2006      	movs	r0, #6
 8001210:	f7ff fcd4 	bl	8000bbc <NRF24_write_register>
}
 8001214:	bf00      	nop
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8001226:	2300      	movs	r3, #0
 8001228:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 800122a:	2006      	movs	r0, #6
 800122c:	f7ff fc76 	bl	8000b1c <NRF24_read_register>
 8001230:	4603      	mov	r3, r0
 8001232:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8001234:	4b1b      	ldr	r3, [pc, #108]	; (80012a4 <NRF24_setDataRate+0x88>)
 8001236:	2200      	movs	r2, #0
 8001238:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 800123a:	7bbb      	ldrb	r3, [r7, #14]
 800123c:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8001240:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	2b02      	cmp	r3, #2
 8001246:	d107      	bne.n	8001258 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8001248:	4b16      	ldr	r3, [pc, #88]	; (80012a4 <NRF24_setDataRate+0x88>)
 800124a:	2200      	movs	r2, #0
 800124c:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 800124e:	7bbb      	ldrb	r3, [r7, #14]
 8001250:	f043 0320 	orr.w	r3, r3, #32
 8001254:	73bb      	strb	r3, [r7, #14]
 8001256:	e00d      	b.n	8001274 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d107      	bne.n	800126e <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 800125e:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <NRF24_setDataRate+0x88>)
 8001260:	2201      	movs	r2, #1
 8001262:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8001264:	7bbb      	ldrb	r3, [r7, #14]
 8001266:	f043 0308 	orr.w	r3, r3, #8
 800126a:	73bb      	strb	r3, [r7, #14]
 800126c:	e002      	b.n	8001274 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 800126e:	4b0d      	ldr	r3, [pc, #52]	; (80012a4 <NRF24_setDataRate+0x88>)
 8001270:	2200      	movs	r2, #0
 8001272:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8001274:	7bbb      	ldrb	r3, [r7, #14]
 8001276:	4619      	mov	r1, r3
 8001278:	2006      	movs	r0, #6
 800127a:	f7ff fc9f 	bl	8000bbc <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 800127e:	2006      	movs	r0, #6
 8001280:	f7ff fc4c 	bl	8000b1c <NRF24_read_register>
 8001284:	4603      	mov	r3, r0
 8001286:	461a      	mov	r2, r3
 8001288:	7bbb      	ldrb	r3, [r7, #14]
 800128a:	4293      	cmp	r3, r2
 800128c:	d102      	bne.n	8001294 <NRF24_setDataRate+0x78>
  {
    result = true;
 800128e:	2301      	movs	r3, #1
 8001290:	73fb      	strb	r3, [r7, #15]
 8001292:	e002      	b.n	800129a <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8001294:	4b03      	ldr	r3, [pc, #12]	; (80012a4 <NRF24_setDataRate+0x88>)
 8001296:	2200      	movs	r2, #0
 8001298:	701a      	strb	r2, [r3, #0]
  }

  return result;
 800129a:	7bfb      	ldrb	r3, [r7, #15]
}
 800129c:	4618      	mov	r0, r3
 800129e:	3710      	adds	r7, #16
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000232 	.word	0x20000232

080012a8 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 80012b2:	2000      	movs	r0, #0
 80012b4:	f7ff fc32 	bl	8000b1c <NRF24_read_register>
 80012b8:	4603      	mov	r3, r0
 80012ba:	f023 030c 	bic.w	r3, r3, #12
 80012be:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d00f      	beq.n	80012e6 <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d104      	bne.n	80012d6 <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 80012cc:	7bfb      	ldrb	r3, [r7, #15]
 80012ce:	f043 0308 	orr.w	r3, r3, #8
 80012d2:	73fb      	strb	r3, [r7, #15]
 80012d4:	e007      	b.n	80012e6 <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 80012d6:	7bfb      	ldrb	r3, [r7, #15]
 80012d8:	f043 0308 	orr.w	r3, r3, #8
 80012dc:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 80012de:	7bfb      	ldrb	r3, [r7, #15]
 80012e0:	f043 0304 	orr.w	r3, r3, #4
 80012e4:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 80012e6:	7bfb      	ldrb	r3, [r7, #15]
 80012e8:	4619      	mov	r1, r3
 80012ea:	2000      	movs	r0, #0
 80012ec:	f7ff fc66 	bl	8000bbc <NRF24_write_register>
}
 80012f0:	bf00      	nop
 80012f2:	3710      	adds	r7, #16
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 80012fc:	2000      	movs	r0, #0
 80012fe:	f7ff fc0d 	bl	8000b1c <NRF24_read_register>
 8001302:	4603      	mov	r3, r0
 8001304:	f023 0302 	bic.w	r3, r3, #2
 8001308:	b2db      	uxtb	r3, r3
 800130a:	4619      	mov	r1, r3
 800130c:	2000      	movs	r0, #0
 800130e:	f7ff fc55 	bl	8000bbc <NRF24_write_register>
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}

08001316 <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b084      	sub	sp, #16
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 800131e:	f7ff fcd7 	bl	8000cd0 <NRF24_get_status>
 8001322:	4603      	mov	r3, r0
 8001324:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8001326:	7bfb      	ldrb	r3, [r7, #15]
 8001328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800132c:	2b00      	cmp	r3, #0
 800132e:	bf14      	ite	ne
 8001330:	2301      	movne	r3, #1
 8001332:	2300      	moveq	r3, #0
 8001334:	73bb      	strb	r3, [r7, #14]

  if (result)
 8001336:	7bbb      	ldrb	r3, [r7, #14]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d017      	beq.n	800136c <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d007      	beq.n	8001352 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8001342:	7bfb      	ldrb	r3, [r7, #15]
 8001344:	085b      	lsrs	r3, r3, #1
 8001346:	b2db      	uxtb	r3, r3
 8001348:	f003 0307 	and.w	r3, r3, #7
 800134c:	b2da      	uxtb	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8001352:	2140      	movs	r1, #64	; 0x40
 8001354:	2007      	movs	r0, #7
 8001356:	f7ff fc31 	bl	8000bbc <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 800135a:	7bfb      	ldrb	r3, [r7, #15]
 800135c:	f003 0320 	and.w	r3, r3, #32
 8001360:	2b00      	cmp	r3, #0
 8001362:	d003      	beq.n	800136c <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8001364:	2120      	movs	r1, #32
 8001366:	2007      	movs	r0, #7
 8001368:	f7ff fc28 	bl	8000bbc <NRF24_write_register>
    }
  }
  return result;
 800136c:	7bbb      	ldrb	r3, [r7, #14]
}
 800136e:	4618      	mov	r0, r3
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <NRF24_writeAckPayload>:
  NRF24_DelayMicroSeconds(15);
  NRF24_ce(0);
}
//41. Write acknowledge payload
void NRF24_writeAckPayload(uint8_t pipe, const void* buf, uint8_t len)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b084      	sub	sp, #16
 800137a:	af00      	add	r7, sp, #0
 800137c:	4603      	mov	r3, r0
 800137e:	6039      	str	r1, [r7, #0]
 8001380:	71fb      	strb	r3, [r7, #7]
 8001382:	4613      	mov	r3, r2
 8001384:	71bb      	strb	r3, [r7, #6]
	const uint8_t* current = (uint8_t *)buf;
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	60fb      	str	r3, [r7, #12]
	const uint8_t max_payload_size = 32;
 800138a:	2320      	movs	r3, #32
 800138c:	72fb      	strb	r3, [r7, #11]
  uint8_t data_len = MIN(len,max_payload_size);
 800138e:	7afa      	ldrb	r2, [r7, #11]
 8001390:	79bb      	ldrb	r3, [r7, #6]
 8001392:	4293      	cmp	r3, r2
 8001394:	bf28      	it	cs
 8001396:	4613      	movcs	r3, r2
 8001398:	72bb      	strb	r3, [r7, #10]
	
  NRF24_csn(0);
 800139a:	2000      	movs	r0, #0
 800139c:	f7ff fb7e 	bl	8000a9c <NRF24_csn>
	NRF24_write_registerN(CMD_W_ACK_PAYLOAD | ( pipe & 0x7 ) , current, data_len);
 80013a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a4:	f003 0307 	and.w	r3, r3, #7
 80013a8:	b25b      	sxtb	r3, r3
 80013aa:	f063 0357 	orn	r3, r3, #87	; 0x57
 80013ae:	b25b      	sxtb	r3, r3
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	7aba      	ldrb	r2, [r7, #10]
 80013b4:	68f9      	ldr	r1, [r7, #12]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff fc22 	bl	8000c00 <NRF24_write_registerN>
  NRF24_csn(1);
 80013bc:	2001      	movs	r0, #1
 80013be:	f7ff fb6d 	bl	8000a9c <NRF24_csn>
}
 80013c2:	bf00      	nop
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 80013ce:	2170      	movs	r1, #112	; 0x70
 80013d0:	2007      	movs	r0, #7
 80013d2:	f7ff fbf3 	bl	8000bbc <NRF24_write_register>
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
	...

080013dc <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80013e2:	2000      	movs	r0, #0
 80013e4:	f7ff fb5a 	bl	8000a9c <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 80013e8:	2350      	movs	r3, #80	; 0x50
 80013ea:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 80013ec:	2373      	movs	r3, #115	; 0x73
 80013ee:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 80013f0:	1d39      	adds	r1, r7, #4
 80013f2:	2364      	movs	r3, #100	; 0x64
 80013f4:	2202      	movs	r2, #2
 80013f6:	4805      	ldr	r0, [pc, #20]	; (800140c <NRF24_ACTIVATE_cmd+0x30>)
 80013f8:	f006 fef7 	bl	80081ea <HAL_SPI_Transmit>
	NRF24_csn(1);
 80013fc:	2001      	movs	r0, #1
 80013fe:	f7ff fb4d 	bl	8000a9c <NRF24_csn>
}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	2000023c 	.word	0x2000023c

08001410 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8001410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001412:	b0a1      	sub	sp, #132	; 0x84
 8001414:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001416:	f107 0308 	add.w	r3, r7, #8
 800141a:	4ab6      	ldr	r2, [pc, #728]	; (80016f4 <printRadioSettings+0x2e4>)
 800141c:	461c      	mov	r4, r3
 800141e:	4615      	mov	r5, r2
 8001420:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001422:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001424:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001426:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001428:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800142a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800142c:	682b      	ldr	r3, [r5, #0]
 800142e:	461a      	mov	r2, r3
 8001430:	8022      	strh	r2, [r4, #0]
 8001432:	3402      	adds	r4, #2
 8001434:	0c1b      	lsrs	r3, r3, #16
 8001436:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001438:	f107 0308 	add.w	r3, r7, #8
 800143c:	4618      	mov	r0, r3
 800143e:	f7fe fe87 	bl	8000150 <strlen>
 8001442:	4603      	mov	r3, r0
 8001444:	b29a      	uxth	r2, r3
 8001446:	f107 0108 	add.w	r1, r7, #8
 800144a:	230a      	movs	r3, #10
 800144c:	48aa      	ldr	r0, [pc, #680]	; (80016f8 <printRadioSettings+0x2e8>)
 800144e:	f007 fef2 	bl	8009236 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8001452:	2000      	movs	r0, #0
 8001454:	f7ff fb62 	bl	8000b1c <NRF24_read_register>
 8001458:	4603      	mov	r3, r0
 800145a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 800145e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001462:	f003 0308 	and.w	r3, r3, #8
 8001466:	2b00      	cmp	r3, #0
 8001468:	d020      	beq.n	80014ac <printRadioSettings+0x9c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 800146a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800146e:	f003 0304 	and.w	r3, r3, #4
 8001472:	2b00      	cmp	r3, #0
 8001474:	d00b      	beq.n	800148e <printRadioSettings+0x7e>
 8001476:	f107 0308 	add.w	r3, r7, #8
 800147a:	4aa0      	ldr	r2, [pc, #640]	; (80016fc <printRadioSettings+0x2ec>)
 800147c:	461c      	mov	r4, r3
 800147e:	4615      	mov	r5, r2
 8001480:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001482:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001484:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001488:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800148c:	e017      	b.n	80014be <printRadioSettings+0xae>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 800148e:	f107 0308 	add.w	r3, r7, #8
 8001492:	4a9b      	ldr	r2, [pc, #620]	; (8001700 <printRadioSettings+0x2f0>)
 8001494:	461c      	mov	r4, r3
 8001496:	4615      	mov	r5, r2
 8001498:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800149a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800149c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014a0:	c403      	stmia	r4!, {r0, r1}
 80014a2:	8022      	strh	r2, [r4, #0]
 80014a4:	3402      	adds	r4, #2
 80014a6:	0c13      	lsrs	r3, r2, #16
 80014a8:	7023      	strb	r3, [r4, #0]
 80014aa:	e008      	b.n	80014be <printRadioSettings+0xae>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 80014ac:	f107 0308 	add.w	r3, r7, #8
 80014b0:	4a94      	ldr	r2, [pc, #592]	; (8001704 <printRadioSettings+0x2f4>)
 80014b2:	461c      	mov	r4, r3
 80014b4:	4615      	mov	r5, r2
 80014b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014ba:	682b      	ldr	r3, [r5, #0]
 80014bc:	6023      	str	r3, [r4, #0]
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014be:	f107 0308 	add.w	r3, r7, #8
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7fe fe44 	bl	8000150 <strlen>
 80014c8:	4603      	mov	r3, r0
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	f107 0108 	add.w	r1, r7, #8
 80014d0:	230a      	movs	r3, #10
 80014d2:	4889      	ldr	r0, [pc, #548]	; (80016f8 <printRadioSettings+0x2e8>)
 80014d4:	f007 feaf 	bl	8009236 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 80014d8:	2001      	movs	r0, #1
 80014da:	f7ff fb1f 	bl	8000b1c <NRF24_read_register>
 80014de:	4603      	mov	r3, r0
 80014e0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80014e4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80014e8:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	bfcc      	ite	gt
 80014f0:	2301      	movgt	r3, #1
 80014f2:	2300      	movle	r3, #0
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80014f8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80014fc:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001500:	2b00      	cmp	r3, #0
 8001502:	bfcc      	ite	gt
 8001504:	2301      	movgt	r3, #1
 8001506:	2300      	movle	r3, #0
 8001508:	b2db      	uxtb	r3, r3
 800150a:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800150c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001510:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001514:	2b00      	cmp	r3, #0
 8001516:	bfcc      	ite	gt
 8001518:	2301      	movgt	r3, #1
 800151a:	2300      	movle	r3, #0
 800151c:	b2db      	uxtb	r3, r3
 800151e:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001520:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001524:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001528:	2b00      	cmp	r3, #0
 800152a:	bfcc      	ite	gt
 800152c:	2301      	movgt	r3, #1
 800152e:	2300      	movle	r3, #0
 8001530:	b2db      	uxtb	r3, r3
 8001532:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001534:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001538:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800153c:	2b00      	cmp	r3, #0
 800153e:	bfcc      	ite	gt
 8001540:	2301      	movgt	r3, #1
 8001542:	2300      	movle	r3, #0
 8001544:	b2db      	uxtb	r3, r3
 8001546:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001548:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800154c:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001550:	2b00      	cmp	r3, #0
 8001552:	bfcc      	ite	gt
 8001554:	2301      	movgt	r3, #1
 8001556:	2300      	movle	r3, #0
 8001558:	b2db      	uxtb	r3, r3
 800155a:	f107 0008 	add.w	r0, r7, #8
 800155e:	9303      	str	r3, [sp, #12]
 8001560:	9402      	str	r4, [sp, #8]
 8001562:	9101      	str	r1, [sp, #4]
 8001564:	9200      	str	r2, [sp, #0]
 8001566:	4633      	mov	r3, r6
 8001568:	462a      	mov	r2, r5
 800156a:	4967      	ldr	r1, [pc, #412]	; (8001708 <printRadioSettings+0x2f8>)
 800156c:	f00a fea8 	bl	800c2c0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001570:	f107 0308 	add.w	r3, r7, #8
 8001574:	4618      	mov	r0, r3
 8001576:	f7fe fdeb 	bl	8000150 <strlen>
 800157a:	4603      	mov	r3, r0
 800157c:	b29a      	uxth	r2, r3
 800157e:	f107 0108 	add.w	r1, r7, #8
 8001582:	230a      	movs	r3, #10
 8001584:	485c      	ldr	r0, [pc, #368]	; (80016f8 <printRadioSettings+0x2e8>)
 8001586:	f007 fe56 	bl	8009236 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 800158a:	2002      	movs	r0, #2
 800158c:	f7ff fac6 	bl	8000b1c <NRF24_read_register>
 8001590:	4603      	mov	r3, r0
 8001592:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001596:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800159a:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800159e:	2b00      	cmp	r3, #0
 80015a0:	bfcc      	ite	gt
 80015a2:	2301      	movgt	r3, #1
 80015a4:	2300      	movle	r3, #0
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80015aa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015ae:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	bfcc      	ite	gt
 80015b6:	2301      	movgt	r3, #1
 80015b8:	2300      	movle	r3, #0
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80015be:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015c2:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	bfcc      	ite	gt
 80015ca:	2301      	movgt	r3, #1
 80015cc:	2300      	movle	r3, #0
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80015d2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015d6:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80015da:	2b00      	cmp	r3, #0
 80015dc:	bfcc      	ite	gt
 80015de:	2301      	movgt	r3, #1
 80015e0:	2300      	movle	r3, #0
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80015e6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015ea:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	bfcc      	ite	gt
 80015f2:	2301      	movgt	r3, #1
 80015f4:	2300      	movle	r3, #0
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80015fa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015fe:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001602:	2b00      	cmp	r3, #0
 8001604:	bfcc      	ite	gt
 8001606:	2301      	movgt	r3, #1
 8001608:	2300      	movle	r3, #0
 800160a:	b2db      	uxtb	r3, r3
 800160c:	f107 0008 	add.w	r0, r7, #8
 8001610:	9303      	str	r3, [sp, #12]
 8001612:	9402      	str	r4, [sp, #8]
 8001614:	9101      	str	r1, [sp, #4]
 8001616:	9200      	str	r2, [sp, #0]
 8001618:	4633      	mov	r3, r6
 800161a:	462a      	mov	r2, r5
 800161c:	493b      	ldr	r1, [pc, #236]	; (800170c <printRadioSettings+0x2fc>)
 800161e:	f00a fe4f 	bl	800c2c0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001622:	f107 0308 	add.w	r3, r7, #8
 8001626:	4618      	mov	r0, r3
 8001628:	f7fe fd92 	bl	8000150 <strlen>
 800162c:	4603      	mov	r3, r0
 800162e:	b29a      	uxth	r2, r3
 8001630:	f107 0108 	add.w	r1, r7, #8
 8001634:	230a      	movs	r3, #10
 8001636:	4830      	ldr	r0, [pc, #192]	; (80016f8 <printRadioSettings+0x2e8>)
 8001638:	f007 fdfd 	bl	8009236 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 800163c:	2003      	movs	r0, #3
 800163e:	f7ff fa6d 	bl	8000b1c <NRF24_read_register>
 8001642:	4603      	mov	r3, r0
 8001644:	f003 0303 	and.w	r3, r3, #3
 8001648:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 800164c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001650:	3302      	adds	r3, #2
 8001652:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8001656:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800165a:	f107 0308 	add.w	r3, r7, #8
 800165e:	492c      	ldr	r1, [pc, #176]	; (8001710 <printRadioSettings+0x300>)
 8001660:	4618      	mov	r0, r3
 8001662:	f00a fe2d 	bl	800c2c0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001666:	f107 0308 	add.w	r3, r7, #8
 800166a:	4618      	mov	r0, r3
 800166c:	f7fe fd70 	bl	8000150 <strlen>
 8001670:	4603      	mov	r3, r0
 8001672:	b29a      	uxth	r2, r3
 8001674:	f107 0108 	add.w	r1, r7, #8
 8001678:	230a      	movs	r3, #10
 800167a:	481f      	ldr	r0, [pc, #124]	; (80016f8 <printRadioSettings+0x2e8>)
 800167c:	f007 fddb 	bl	8009236 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8001680:	2005      	movs	r0, #5
 8001682:	f7ff fa4b 	bl	8000b1c <NRF24_read_register>
 8001686:	4603      	mov	r3, r0
 8001688:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 800168c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001690:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001694:	f107 0308 	add.w	r3, r7, #8
 8001698:	491e      	ldr	r1, [pc, #120]	; (8001714 <printRadioSettings+0x304>)
 800169a:	4618      	mov	r0, r3
 800169c:	f00a fe10 	bl	800c2c0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016a0:	f107 0308 	add.w	r3, r7, #8
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7fe fd53 	bl	8000150 <strlen>
 80016aa:	4603      	mov	r3, r0
 80016ac:	b29a      	uxth	r2, r3
 80016ae:	f107 0108 	add.w	r1, r7, #8
 80016b2:	230a      	movs	r3, #10
 80016b4:	4810      	ldr	r0, [pc, #64]	; (80016f8 <printRadioSettings+0x2e8>)
 80016b6:	f007 fdbe 	bl	8009236 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 80016ba:	2006      	movs	r0, #6
 80016bc:	f7ff fa2e 	bl	8000b1c <NRF24_read_register>
 80016c0:	4603      	mov	r3, r0
 80016c2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 80016c6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016ca:	f003 0308 	and.w	r3, r3, #8
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d024      	beq.n	800171c <printRadioSettings+0x30c>
 80016d2:	f107 0308 	add.w	r3, r7, #8
 80016d6:	4a10      	ldr	r2, [pc, #64]	; (8001718 <printRadioSettings+0x308>)
 80016d8:	461c      	mov	r4, r3
 80016da:	4615      	mov	r5, r2
 80016dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016e0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80016e4:	6020      	str	r0, [r4, #0]
 80016e6:	3404      	adds	r4, #4
 80016e8:	8021      	strh	r1, [r4, #0]
 80016ea:	3402      	adds	r4, #2
 80016ec:	0c0b      	lsrs	r3, r1, #16
 80016ee:	7023      	strb	r3, [r4, #0]
 80016f0:	e023      	b.n	800173a <printRadioSettings+0x32a>
 80016f2:	bf00      	nop
 80016f4:	0800cae8 	.word	0x0800cae8
 80016f8:	20000294 	.word	0x20000294
 80016fc:	0800cb1c 	.word	0x0800cb1c
 8001700:	0800cb38 	.word	0x0800cb38
 8001704:	0800cb54 	.word	0x0800cb54
 8001708:	0800cb68 	.word	0x0800cb68
 800170c:	0800cbac 	.word	0x0800cbac
 8001710:	0800cbf8 	.word	0x0800cbf8
 8001714:	0800cc14 	.word	0x0800cc14
 8001718:	0800cc28 	.word	0x0800cc28
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 800171c:	f107 0308 	add.w	r3, r7, #8
 8001720:	4a29      	ldr	r2, [pc, #164]	; (80017c8 <printRadioSettings+0x3b8>)
 8001722:	461c      	mov	r4, r3
 8001724:	4615      	mov	r5, r2
 8001726:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001728:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800172a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800172e:	6020      	str	r0, [r4, #0]
 8001730:	3404      	adds	r4, #4
 8001732:	8021      	strh	r1, [r4, #0]
 8001734:	3402      	adds	r4, #2
 8001736:	0c0b      	lsrs	r3, r1, #16
 8001738:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800173a:	f107 0308 	add.w	r3, r7, #8
 800173e:	4618      	mov	r0, r3
 8001740:	f7fe fd06 	bl	8000150 <strlen>
 8001744:	4603      	mov	r3, r0
 8001746:	b29a      	uxth	r2, r3
 8001748:	f107 0108 	add.w	r1, r7, #8
 800174c:	230a      	movs	r3, #10
 800174e:	481f      	ldr	r0, [pc, #124]	; (80017cc <printRadioSettings+0x3bc>)
 8001750:	f007 fd71 	bl	8009236 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8001754:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001758:	f003 0306 	and.w	r3, r3, #6
 800175c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8001760:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001764:	085b      	lsrs	r3, r3, #1
 8001766:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 800176a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800176e:	2b00      	cmp	r3, #0
 8001770:	d109      	bne.n	8001786 <printRadioSettings+0x376>
 8001772:	f107 0308 	add.w	r3, r7, #8
 8001776:	4a16      	ldr	r2, [pc, #88]	; (80017d0 <printRadioSettings+0x3c0>)
 8001778:	461c      	mov	r4, r3
 800177a:	4615      	mov	r5, r2
 800177c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800177e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001780:	682b      	ldr	r3, [r5, #0]
 8001782:	6023      	str	r3, [r4, #0]
 8001784:	e037      	b.n	80017f6 <printRadioSettings+0x3e6>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8001786:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800178a:	2b01      	cmp	r3, #1
 800178c:	d109      	bne.n	80017a2 <printRadioSettings+0x392>
 800178e:	f107 0308 	add.w	r3, r7, #8
 8001792:	4a10      	ldr	r2, [pc, #64]	; (80017d4 <printRadioSettings+0x3c4>)
 8001794:	461c      	mov	r4, r3
 8001796:	4615      	mov	r5, r2
 8001798:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800179a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800179c:	682b      	ldr	r3, [r5, #0]
 800179e:	6023      	str	r3, [r4, #0]
 80017a0:	e029      	b.n	80017f6 <printRadioSettings+0x3e6>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 80017a2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d118      	bne.n	80017dc <printRadioSettings+0x3cc>
 80017aa:	f107 0308 	add.w	r3, r7, #8
 80017ae:	4a0a      	ldr	r2, [pc, #40]	; (80017d8 <printRadioSettings+0x3c8>)
 80017b0:	461c      	mov	r4, r3
 80017b2:	4615      	mov	r5, r2
 80017b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017b8:	682b      	ldr	r3, [r5, #0]
 80017ba:	461a      	mov	r2, r3
 80017bc:	8022      	strh	r2, [r4, #0]
 80017be:	3402      	adds	r4, #2
 80017c0:	0c1b      	lsrs	r3, r3, #16
 80017c2:	7023      	strb	r3, [r4, #0]
 80017c4:	e017      	b.n	80017f6 <printRadioSettings+0x3e6>
 80017c6:	bf00      	nop
 80017c8:	0800cc40 	.word	0x0800cc40
 80017cc:	20000294 	.word	0x20000294
 80017d0:	0800cc58 	.word	0x0800cc58
 80017d4:	0800cc6c 	.word	0x0800cc6c
 80017d8:	0800cc80 	.word	0x0800cc80
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 80017dc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017e0:	2b03      	cmp	r3, #3
 80017e2:	d108      	bne.n	80017f6 <printRadioSettings+0x3e6>
 80017e4:	f107 0308 	add.w	r3, r7, #8
 80017e8:	4ad7      	ldr	r2, [pc, #860]	; (8001b48 <printRadioSettings+0x738>)
 80017ea:	461c      	mov	r4, r3
 80017ec:	4615      	mov	r5, r2
 80017ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017f2:	682b      	ldr	r3, [r5, #0]
 80017f4:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80017f6:	f107 0308 	add.w	r3, r7, #8
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7fe fca8 	bl	8000150 <strlen>
 8001800:	4603      	mov	r3, r0
 8001802:	b29a      	uxth	r2, r3
 8001804:	f107 0108 	add.w	r1, r7, #8
 8001808:	230a      	movs	r3, #10
 800180a:	48d0      	ldr	r0, [pc, #832]	; (8001b4c <printRadioSettings+0x73c>)
 800180c:	f007 fd13 	bl	8009236 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8001810:	463b      	mov	r3, r7
 8001812:	2205      	movs	r2, #5
 8001814:	4619      	mov	r1, r3
 8001816:	200a      	movs	r0, #10
 8001818:	f7ff f9a8 	bl	8000b6c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800181c:	793b      	ldrb	r3, [r7, #4]
 800181e:	461c      	mov	r4, r3
 8001820:	78fb      	ldrb	r3, [r7, #3]
 8001822:	461d      	mov	r5, r3
 8001824:	78bb      	ldrb	r3, [r7, #2]
 8001826:	787a      	ldrb	r2, [r7, #1]
 8001828:	7839      	ldrb	r1, [r7, #0]
 800182a:	f107 0008 	add.w	r0, r7, #8
 800182e:	9102      	str	r1, [sp, #8]
 8001830:	9201      	str	r2, [sp, #4]
 8001832:	9300      	str	r3, [sp, #0]
 8001834:	462b      	mov	r3, r5
 8001836:	4622      	mov	r2, r4
 8001838:	49c5      	ldr	r1, [pc, #788]	; (8001b50 <printRadioSettings+0x740>)
 800183a:	f00a fd41 	bl	800c2c0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800183e:	f107 0308 	add.w	r3, r7, #8
 8001842:	4618      	mov	r0, r3
 8001844:	f7fe fc84 	bl	8000150 <strlen>
 8001848:	4603      	mov	r3, r0
 800184a:	b29a      	uxth	r2, r3
 800184c:	f107 0108 	add.w	r1, r7, #8
 8001850:	230a      	movs	r3, #10
 8001852:	48be      	ldr	r0, [pc, #760]	; (8001b4c <printRadioSettings+0x73c>)
 8001854:	f007 fcef 	bl	8009236 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8001858:	463b      	mov	r3, r7
 800185a:	2205      	movs	r2, #5
 800185c:	4619      	mov	r1, r3
 800185e:	200b      	movs	r0, #11
 8001860:	f7ff f984 	bl	8000b6c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001864:	793b      	ldrb	r3, [r7, #4]
 8001866:	461c      	mov	r4, r3
 8001868:	78fb      	ldrb	r3, [r7, #3]
 800186a:	461d      	mov	r5, r3
 800186c:	78bb      	ldrb	r3, [r7, #2]
 800186e:	787a      	ldrb	r2, [r7, #1]
 8001870:	7839      	ldrb	r1, [r7, #0]
 8001872:	f107 0008 	add.w	r0, r7, #8
 8001876:	9102      	str	r1, [sp, #8]
 8001878:	9201      	str	r2, [sp, #4]
 800187a:	9300      	str	r3, [sp, #0]
 800187c:	462b      	mov	r3, r5
 800187e:	4622      	mov	r2, r4
 8001880:	49b4      	ldr	r1, [pc, #720]	; (8001b54 <printRadioSettings+0x744>)
 8001882:	f00a fd1d 	bl	800c2c0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001886:	f107 0308 	add.w	r3, r7, #8
 800188a:	4618      	mov	r0, r3
 800188c:	f7fe fc60 	bl	8000150 <strlen>
 8001890:	4603      	mov	r3, r0
 8001892:	b29a      	uxth	r2, r3
 8001894:	f107 0108 	add.w	r1, r7, #8
 8001898:	230a      	movs	r3, #10
 800189a:	48ac      	ldr	r0, [pc, #688]	; (8001b4c <printRadioSettings+0x73c>)
 800189c:	f007 fccb 	bl	8009236 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 80018a0:	463b      	mov	r3, r7
 80018a2:	2201      	movs	r2, #1
 80018a4:	4619      	mov	r1, r3
 80018a6:	200c      	movs	r0, #12
 80018a8:	f7ff f960 	bl	8000b6c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80018ac:	783b      	ldrb	r3, [r7, #0]
 80018ae:	461a      	mov	r2, r3
 80018b0:	f107 0308 	add.w	r3, r7, #8
 80018b4:	49a8      	ldr	r1, [pc, #672]	; (8001b58 <printRadioSettings+0x748>)
 80018b6:	4618      	mov	r0, r3
 80018b8:	f00a fd02 	bl	800c2c0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018bc:	f107 0308 	add.w	r3, r7, #8
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7fe fc45 	bl	8000150 <strlen>
 80018c6:	4603      	mov	r3, r0
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	f107 0108 	add.w	r1, r7, #8
 80018ce:	230a      	movs	r3, #10
 80018d0:	489e      	ldr	r0, [pc, #632]	; (8001b4c <printRadioSettings+0x73c>)
 80018d2:	f007 fcb0 	bl	8009236 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 80018d6:	463b      	mov	r3, r7
 80018d8:	2201      	movs	r2, #1
 80018da:	4619      	mov	r1, r3
 80018dc:	200d      	movs	r0, #13
 80018de:	f7ff f945 	bl	8000b6c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80018e2:	783b      	ldrb	r3, [r7, #0]
 80018e4:	461a      	mov	r2, r3
 80018e6:	f107 0308 	add.w	r3, r7, #8
 80018ea:	499c      	ldr	r1, [pc, #624]	; (8001b5c <printRadioSettings+0x74c>)
 80018ec:	4618      	mov	r0, r3
 80018ee:	f00a fce7 	bl	800c2c0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018f2:	f107 0308 	add.w	r3, r7, #8
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7fe fc2a 	bl	8000150 <strlen>
 80018fc:	4603      	mov	r3, r0
 80018fe:	b29a      	uxth	r2, r3
 8001900:	f107 0108 	add.w	r1, r7, #8
 8001904:	230a      	movs	r3, #10
 8001906:	4891      	ldr	r0, [pc, #580]	; (8001b4c <printRadioSettings+0x73c>)
 8001908:	f007 fc95 	bl	8009236 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 800190c:	463b      	mov	r3, r7
 800190e:	2201      	movs	r2, #1
 8001910:	4619      	mov	r1, r3
 8001912:	200e      	movs	r0, #14
 8001914:	f7ff f92a 	bl	8000b6c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001918:	783b      	ldrb	r3, [r7, #0]
 800191a:	461a      	mov	r2, r3
 800191c:	f107 0308 	add.w	r3, r7, #8
 8001920:	498f      	ldr	r1, [pc, #572]	; (8001b60 <printRadioSettings+0x750>)
 8001922:	4618      	mov	r0, r3
 8001924:	f00a fccc 	bl	800c2c0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001928:	f107 0308 	add.w	r3, r7, #8
 800192c:	4618      	mov	r0, r3
 800192e:	f7fe fc0f 	bl	8000150 <strlen>
 8001932:	4603      	mov	r3, r0
 8001934:	b29a      	uxth	r2, r3
 8001936:	f107 0108 	add.w	r1, r7, #8
 800193a:	230a      	movs	r3, #10
 800193c:	4883      	ldr	r0, [pc, #524]	; (8001b4c <printRadioSettings+0x73c>)
 800193e:	f007 fc7a 	bl	8009236 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8001942:	463b      	mov	r3, r7
 8001944:	2201      	movs	r2, #1
 8001946:	4619      	mov	r1, r3
 8001948:	200f      	movs	r0, #15
 800194a:	f7ff f90f 	bl	8000b6c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800194e:	783b      	ldrb	r3, [r7, #0]
 8001950:	461a      	mov	r2, r3
 8001952:	f107 0308 	add.w	r3, r7, #8
 8001956:	4983      	ldr	r1, [pc, #524]	; (8001b64 <printRadioSettings+0x754>)
 8001958:	4618      	mov	r0, r3
 800195a:	f00a fcb1 	bl	800c2c0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800195e:	f107 0308 	add.w	r3, r7, #8
 8001962:	4618      	mov	r0, r3
 8001964:	f7fe fbf4 	bl	8000150 <strlen>
 8001968:	4603      	mov	r3, r0
 800196a:	b29a      	uxth	r2, r3
 800196c:	f107 0108 	add.w	r1, r7, #8
 8001970:	230a      	movs	r3, #10
 8001972:	4876      	ldr	r0, [pc, #472]	; (8001b4c <printRadioSettings+0x73c>)
 8001974:	f007 fc5f 	bl	8009236 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8001978:	463b      	mov	r3, r7
 800197a:	2205      	movs	r2, #5
 800197c:	4619      	mov	r1, r3
 800197e:	2010      	movs	r0, #16
 8001980:	f7ff f8f4 	bl	8000b6c <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001984:	793b      	ldrb	r3, [r7, #4]
 8001986:	461c      	mov	r4, r3
 8001988:	78fb      	ldrb	r3, [r7, #3]
 800198a:	461d      	mov	r5, r3
 800198c:	78bb      	ldrb	r3, [r7, #2]
 800198e:	787a      	ldrb	r2, [r7, #1]
 8001990:	7839      	ldrb	r1, [r7, #0]
 8001992:	f107 0008 	add.w	r0, r7, #8
 8001996:	9102      	str	r1, [sp, #8]
 8001998:	9201      	str	r2, [sp, #4]
 800199a:	9300      	str	r3, [sp, #0]
 800199c:	462b      	mov	r3, r5
 800199e:	4622      	mov	r2, r4
 80019a0:	4971      	ldr	r1, [pc, #452]	; (8001b68 <printRadioSettings+0x758>)
 80019a2:	f00a fc8d 	bl	800c2c0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80019a6:	f107 0308 	add.w	r3, r7, #8
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7fe fbd0 	bl	8000150 <strlen>
 80019b0:	4603      	mov	r3, r0
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	f107 0108 	add.w	r1, r7, #8
 80019b8:	230a      	movs	r3, #10
 80019ba:	4864      	ldr	r0, [pc, #400]	; (8001b4c <printRadioSettings+0x73c>)
 80019bc:	f007 fc3b 	bl	8009236 <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 80019c0:	2011      	movs	r0, #17
 80019c2:	f7ff f8ab 	bl	8000b1c <NRF24_read_register>
 80019c6:	4603      	mov	r3, r0
 80019c8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80019cc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80019d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019d4:	f107 0308 	add.w	r3, r7, #8
 80019d8:	4964      	ldr	r1, [pc, #400]	; (8001b6c <printRadioSettings+0x75c>)
 80019da:	4618      	mov	r0, r3
 80019dc:	f00a fc70 	bl	800c2c0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80019e0:	f107 0308 	add.w	r3, r7, #8
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7fe fbb3 	bl	8000150 <strlen>
 80019ea:	4603      	mov	r3, r0
 80019ec:	b29a      	uxth	r2, r3
 80019ee:	f107 0108 	add.w	r1, r7, #8
 80019f2:	230a      	movs	r3, #10
 80019f4:	4855      	ldr	r0, [pc, #340]	; (8001b4c <printRadioSettings+0x73c>)
 80019f6:	f007 fc1e 	bl	8009236 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 80019fa:	2012      	movs	r0, #18
 80019fc:	f7ff f88e 	bl	8000b1c <NRF24_read_register>
 8001a00:	4603      	mov	r3, r0
 8001a02:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001a06:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a0e:	f107 0308 	add.w	r3, r7, #8
 8001a12:	4957      	ldr	r1, [pc, #348]	; (8001b70 <printRadioSettings+0x760>)
 8001a14:	4618      	mov	r0, r3
 8001a16:	f00a fc53 	bl	800c2c0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a1a:	f107 0308 	add.w	r3, r7, #8
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7fe fb96 	bl	8000150 <strlen>
 8001a24:	4603      	mov	r3, r0
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	f107 0108 	add.w	r1, r7, #8
 8001a2c:	230a      	movs	r3, #10
 8001a2e:	4847      	ldr	r0, [pc, #284]	; (8001b4c <printRadioSettings+0x73c>)
 8001a30:	f007 fc01 	bl	8009236 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 8001a34:	2013      	movs	r0, #19
 8001a36:	f7ff f871 	bl	8000b1c <NRF24_read_register>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001a40:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a44:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a48:	f107 0308 	add.w	r3, r7, #8
 8001a4c:	4949      	ldr	r1, [pc, #292]	; (8001b74 <printRadioSettings+0x764>)
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f00a fc36 	bl	800c2c0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a54:	f107 0308 	add.w	r3, r7, #8
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7fe fb79 	bl	8000150 <strlen>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	f107 0108 	add.w	r1, r7, #8
 8001a66:	230a      	movs	r3, #10
 8001a68:	4838      	ldr	r0, [pc, #224]	; (8001b4c <printRadioSettings+0x73c>)
 8001a6a:	f007 fbe4 	bl	8009236 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 8001a6e:	2014      	movs	r0, #20
 8001a70:	f7ff f854 	bl	8000b1c <NRF24_read_register>
 8001a74:	4603      	mov	r3, r0
 8001a76:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001a7a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a82:	f107 0308 	add.w	r3, r7, #8
 8001a86:	493c      	ldr	r1, [pc, #240]	; (8001b78 <printRadioSettings+0x768>)
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f00a fc19 	bl	800c2c0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a8e:	f107 0308 	add.w	r3, r7, #8
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7fe fb5c 	bl	8000150 <strlen>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	f107 0108 	add.w	r1, r7, #8
 8001aa0:	230a      	movs	r3, #10
 8001aa2:	482a      	ldr	r0, [pc, #168]	; (8001b4c <printRadioSettings+0x73c>)
 8001aa4:	f007 fbc7 	bl	8009236 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 8001aa8:	2015      	movs	r0, #21
 8001aaa:	f7ff f837 	bl	8000b1c <NRF24_read_register>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001ab4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001ab8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001abc:	f107 0308 	add.w	r3, r7, #8
 8001ac0:	492e      	ldr	r1, [pc, #184]	; (8001b7c <printRadioSettings+0x76c>)
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f00a fbfc 	bl	800c2c0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001ac8:	f107 0308 	add.w	r3, r7, #8
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7fe fb3f 	bl	8000150 <strlen>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	f107 0108 	add.w	r1, r7, #8
 8001ada:	230a      	movs	r3, #10
 8001adc:	481b      	ldr	r0, [pc, #108]	; (8001b4c <printRadioSettings+0x73c>)
 8001ade:	f007 fbaa 	bl	8009236 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 8001ae2:	2016      	movs	r0, #22
 8001ae4:	f7ff f81a 	bl	8000b1c <NRF24_read_register>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001aee:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001af2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001af6:	f107 0308 	add.w	r3, r7, #8
 8001afa:	4921      	ldr	r1, [pc, #132]	; (8001b80 <printRadioSettings+0x770>)
 8001afc:	4618      	mov	r0, r3
 8001afe:	f00a fbdf 	bl	800c2c0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001b02:	f107 0308 	add.w	r3, r7, #8
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7fe fb22 	bl	8000150 <strlen>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	f107 0108 	add.w	r1, r7, #8
 8001b14:	230a      	movs	r3, #10
 8001b16:	480d      	ldr	r0, [pc, #52]	; (8001b4c <printRadioSettings+0x73c>)
 8001b18:	f007 fb8d 	bl	8009236 <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8001b1c:	201c      	movs	r0, #28
 8001b1e:	f7fe fffd 	bl	8000b1c <NRF24_read_register>
 8001b22:	4603      	mov	r3, r0
 8001b24:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001b28:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001b2c:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	bfcc      	ite	gt
 8001b34:	2301      	movgt	r3, #1
 8001b36:	2300      	movle	r3, #0
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001b3c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001b40:	f003 0302 	and.w	r3, r3, #2
 8001b44:	e01e      	b.n	8001b84 <printRadioSettings+0x774>
 8001b46:	bf00      	nop
 8001b48:	0800cc94 	.word	0x0800cc94
 8001b4c:	20000294 	.word	0x20000294
 8001b50:	0800cca8 	.word	0x0800cca8
 8001b54:	0800ccd8 	.word	0x0800ccd8
 8001b58:	0800cd08 	.word	0x0800cd08
 8001b5c:	0800cd30 	.word	0x0800cd30
 8001b60:	0800cd58 	.word	0x0800cd58
 8001b64:	0800cd80 	.word	0x0800cd80
 8001b68:	0800cda8 	.word	0x0800cda8
 8001b6c:	0800cdd4 	.word	0x0800cdd4
 8001b70:	0800cdf0 	.word	0x0800cdf0
 8001b74:	0800ce0c 	.word	0x0800ce0c
 8001b78:	0800ce28 	.word	0x0800ce28
 8001b7c:	0800ce44 	.word	0x0800ce44
 8001b80:	0800ce60 	.word	0x0800ce60
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	bfcc      	ite	gt
 8001b88:	2301      	movgt	r3, #1
 8001b8a:	2300      	movle	r3, #0
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001b90:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001b94:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	bfcc      	ite	gt
 8001b9c:	2301      	movgt	r3, #1
 8001b9e:	2300      	movle	r3, #0
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001ba4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001ba8:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	bfcc      	ite	gt
 8001bb0:	2301      	movgt	r3, #1
 8001bb2:	2300      	movle	r3, #0
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001bb8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001bbc:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	bfcc      	ite	gt
 8001bc4:	2301      	movgt	r3, #1
 8001bc6:	2300      	movle	r3, #0
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001bcc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001bd0:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	bfcc      	ite	gt
 8001bd8:	2301      	movgt	r3, #1
 8001bda:	2300      	movle	r3, #0
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	f107 0008 	add.w	r0, r7, #8
 8001be2:	9303      	str	r3, [sp, #12]
 8001be4:	9402      	str	r4, [sp, #8]
 8001be6:	9101      	str	r1, [sp, #4]
 8001be8:	9200      	str	r2, [sp, #0]
 8001bea:	4633      	mov	r3, r6
 8001bec:	462a      	mov	r2, r5
 8001bee:	494a      	ldr	r1, [pc, #296]	; (8001d18 <printRadioSettings+0x908>)
 8001bf0:	f00a fb66 	bl	800c2c0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001bf4:	f107 0308 	add.w	r3, r7, #8
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7fe faa9 	bl	8000150 <strlen>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	b29a      	uxth	r2, r3
 8001c02:	f107 0108 	add.w	r1, r7, #8
 8001c06:	230a      	movs	r3, #10
 8001c08:	4844      	ldr	r0, [pc, #272]	; (8001d1c <printRadioSettings+0x90c>)
 8001c0a:	f007 fb14 	bl	8009236 <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8001c0e:	201d      	movs	r0, #29
 8001c10:	f7fe ff84 	bl	8000b1c <NRF24_read_register>
 8001c14:	4603      	mov	r3, r0
 8001c16:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8001c1a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001c1e:	f003 0304 	and.w	r3, r3, #4
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d00c      	beq.n	8001c40 <printRadioSettings+0x830>
 8001c26:	f107 0308 	add.w	r3, r7, #8
 8001c2a:	4a3d      	ldr	r2, [pc, #244]	; (8001d20 <printRadioSettings+0x910>)
 8001c2c:	461c      	mov	r4, r3
 8001c2e:	4615      	mov	r5, r2
 8001c30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c34:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c38:	6020      	str	r0, [r4, #0]
 8001c3a:	3404      	adds	r4, #4
 8001c3c:	8021      	strh	r1, [r4, #0]
 8001c3e:	e00e      	b.n	8001c5e <printRadioSettings+0x84e>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8001c40:	f107 0308 	add.w	r3, r7, #8
 8001c44:	4a37      	ldr	r2, [pc, #220]	; (8001d24 <printRadioSettings+0x914>)
 8001c46:	461c      	mov	r4, r3
 8001c48:	4615      	mov	r5, r2
 8001c4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c4e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c52:	6020      	str	r0, [r4, #0]
 8001c54:	3404      	adds	r4, #4
 8001c56:	8021      	strh	r1, [r4, #0]
 8001c58:	3402      	adds	r4, #2
 8001c5a:	0c0b      	lsrs	r3, r1, #16
 8001c5c:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001c5e:	f107 0308 	add.w	r3, r7, #8
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7fe fa74 	bl	8000150 <strlen>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	f107 0108 	add.w	r1, r7, #8
 8001c70:	230a      	movs	r3, #10
 8001c72:	482a      	ldr	r0, [pc, #168]	; (8001d1c <printRadioSettings+0x90c>)
 8001c74:	f007 fadf 	bl	8009236 <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8001c78:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001c7c:	f003 0302 	and.w	r3, r3, #2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d00b      	beq.n	8001c9c <printRadioSettings+0x88c>
 8001c84:	f107 0308 	add.w	r3, r7, #8
 8001c88:	4a27      	ldr	r2, [pc, #156]	; (8001d28 <printRadioSettings+0x918>)
 8001c8a:	461c      	mov	r4, r3
 8001c8c:	4615      	mov	r5, r2
 8001c8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c92:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c96:	c403      	stmia	r4!, {r0, r1}
 8001c98:	8022      	strh	r2, [r4, #0]
 8001c9a:	e00d      	b.n	8001cb8 <printRadioSettings+0x8a8>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8001c9c:	f107 0308 	add.w	r3, r7, #8
 8001ca0:	4a22      	ldr	r2, [pc, #136]	; (8001d2c <printRadioSettings+0x91c>)
 8001ca2:	461c      	mov	r4, r3
 8001ca4:	4615      	mov	r5, r2
 8001ca6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ca8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001caa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001cae:	c403      	stmia	r4!, {r0, r1}
 8001cb0:	8022      	strh	r2, [r4, #0]
 8001cb2:	3402      	adds	r4, #2
 8001cb4:	0c13      	lsrs	r3, r2, #16
 8001cb6:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001cb8:	f107 0308 	add.w	r3, r7, #8
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7fe fa47 	bl	8000150 <strlen>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	b29a      	uxth	r2, r3
 8001cc6:	f107 0108 	add.w	r1, r7, #8
 8001cca:	230a      	movs	r3, #10
 8001ccc:	4813      	ldr	r0, [pc, #76]	; (8001d1c <printRadioSettings+0x90c>)
 8001cce:	f007 fab2 	bl	8009236 <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001cd2:	f107 0308 	add.w	r3, r7, #8
 8001cd6:	4a16      	ldr	r2, [pc, #88]	; (8001d30 <printRadioSettings+0x920>)
 8001cd8:	461c      	mov	r4, r3
 8001cda:	4615      	mov	r5, r2
 8001cdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ce0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ce2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ce4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ce6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ce8:	682b      	ldr	r3, [r5, #0]
 8001cea:	461a      	mov	r2, r3
 8001cec:	8022      	strh	r2, [r4, #0]
 8001cee:	3402      	adds	r4, #2
 8001cf0:	0c1b      	lsrs	r3, r3, #16
 8001cf2:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001cf4:	f107 0308 	add.w	r3, r7, #8
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7fe fa29 	bl	8000150 <strlen>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	f107 0108 	add.w	r1, r7, #8
 8001d06:	230a      	movs	r3, #10
 8001d08:	4804      	ldr	r0, [pc, #16]	; (8001d1c <printRadioSettings+0x90c>)
 8001d0a:	f007 fa94 	bl	8009236 <HAL_UART_Transmit>
}
 8001d0e:	bf00      	nop
 8001d10:	3774      	adds	r7, #116	; 0x74
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d16:	bf00      	nop
 8001d18:	0800ce7c 	.word	0x0800ce7c
 8001d1c:	20000294 	.word	0x20000294
 8001d20:	0800cec8 	.word	0x0800cec8
 8001d24:	0800cee0 	.word	0x0800cee0
 8001d28:	0800cef8 	.word	0x0800cef8
 8001d2c:	0800cf14 	.word	0x0800cf14
 8001d30:	0800cae8 	.word	0x0800cae8

08001d34 <MPU6050_Init>:
static int16_t GyroRW[3];

//Fucntion Definitions
//1- i2c Handler 
void MPU6050_Init(I2C_HandleTypeDef *I2Chnd)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
	//Copy I2C CubeMX handle to local library
	memcpy(&i2cHandler, I2Chnd, sizeof(*I2Chnd));
 8001d3c:	2254      	movs	r2, #84	; 0x54
 8001d3e:	6879      	ldr	r1, [r7, #4]
 8001d40:	4803      	ldr	r0, [pc, #12]	; (8001d50 <MPU6050_Init+0x1c>)
 8001d42:	f00a faa9 	bl	800c298 <memcpy>
}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	200002d4 	.word	0x200002d4

08001d54 <I2C_Read>:

//2- i2c Read
void I2C_Read(uint8_t ADDR, uint8_t *i2cBif, uint8_t NofData)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af02      	add	r7, sp, #8
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	6039      	str	r1, [r7, #0]
 8001d5e:	71fb      	strb	r3, [r7, #7]
 8001d60:	4613      	mov	r3, r2
 8001d62:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cBuf[2];
	uint8_t MPUADDR;
	//Need to Shift address to make it proper to i2c operation
	MPUADDR = (MPU_ADDR<<1);
 8001d64:	23d0      	movs	r3, #208	; 0xd0
 8001d66:	73fb      	strb	r3, [r7, #15]
	i2cBuf[0] = ADDR;
 8001d68:	79fb      	ldrb	r3, [r7, #7]
 8001d6a:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cBuf, 1, 10);
 8001d6c:	7bfb      	ldrb	r3, [r7, #15]
 8001d6e:	b299      	uxth	r1, r3
 8001d70:	f107 020c 	add.w	r2, r7, #12
 8001d74:	230a      	movs	r3, #10
 8001d76:	9300      	str	r3, [sp, #0]
 8001d78:	2301      	movs	r3, #1
 8001d7a:	4809      	ldr	r0, [pc, #36]	; (8001da0 <I2C_Read+0x4c>)
 8001d7c:	f003 fe22 	bl	80059c4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cHandler, MPUADDR, i2cBif, NofData, 100);
 8001d80:	7bfb      	ldrb	r3, [r7, #15]
 8001d82:	b299      	uxth	r1, r3
 8001d84:	79bb      	ldrb	r3, [r7, #6]
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	2364      	movs	r3, #100	; 0x64
 8001d8a:	9300      	str	r3, [sp, #0]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	683a      	ldr	r2, [r7, #0]
 8001d90:	4803      	ldr	r0, [pc, #12]	; (8001da0 <I2C_Read+0x4c>)
 8001d92:	f003 ff15 	bl	8005bc0 <HAL_I2C_Master_Receive>
}
 8001d96:	bf00      	nop
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	200002d4 	.word	0x200002d4

08001da4 <I2C_Write8>:

//3- i2c Write
void I2C_Write8(uint8_t ADDR, uint8_t data)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af02      	add	r7, sp, #8
 8001daa:	4603      	mov	r3, r0
 8001dac:	460a      	mov	r2, r1
 8001dae:	71fb      	strb	r3, [r7, #7]
 8001db0:	4613      	mov	r3, r2
 8001db2:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cData[2];
	i2cData[0] = ADDR;
 8001db4:	79fb      	ldrb	r3, [r7, #7]
 8001db6:	733b      	strb	r3, [r7, #12]
	i2cData[1] = data;
 8001db8:	79bb      	ldrb	r3, [r7, #6]
 8001dba:	737b      	strb	r3, [r7, #13]
	uint8_t MPUADDR = (MPU_ADDR<<1);
 8001dbc:	23d0      	movs	r3, #208	; 0xd0
 8001dbe:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cData, 2,100);
 8001dc0:	7bfb      	ldrb	r3, [r7, #15]
 8001dc2:	b299      	uxth	r1, r3
 8001dc4:	f107 020c 	add.w	r2, r7, #12
 8001dc8:	2364      	movs	r3, #100	; 0x64
 8001dca:	9300      	str	r3, [sp, #0]
 8001dcc:	2302      	movs	r3, #2
 8001dce:	4803      	ldr	r0, [pc, #12]	; (8001ddc <I2C_Write8+0x38>)
 8001dd0:	f003 fdf8 	bl	80059c4 <HAL_I2C_Master_Transmit>
}
 8001dd4:	bf00      	nop
 8001dd6:	3710      	adds	r7, #16
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	200002d4 	.word	0x200002d4

08001de0 <MPU6050_Config>:

//4- MPU6050 Initialaztion Configuration 
void MPU6050_Config(MPU_ConfigTypeDef *config)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
	uint8_t Buffer = 0;
 8001de8:	2300      	movs	r3, #0
 8001dea:	73fb      	strb	r3, [r7, #15]
	//Clock Source 
	//Reset Device
	I2C_Write8(PWR_MAGT_1_REG, 0x80);
 8001dec:	2180      	movs	r1, #128	; 0x80
 8001dee:	206b      	movs	r0, #107	; 0x6b
 8001df0:	f7ff ffd8 	bl	8001da4 <I2C_Write8>
	HAL_Delay(100);
 8001df4:	2064      	movs	r0, #100	; 0x64
 8001df6:	f002 fcc3 	bl	8004780 <HAL_Delay>
	Buffer = config ->ClockSource & 0x07; //change the 7th bits of register
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	73fb      	strb	r3, [r7, #15]
	Buffer |= (config ->Sleep_Mode_Bit << 6) &0x40; // change only the 7th bit in the register
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	791b      	ldrb	r3, [r3, #4]
 8001e08:	019b      	lsls	r3, r3, #6
 8001e0a:	b25b      	sxtb	r3, r3
 8001e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e10:	b25a      	sxtb	r2, r3
 8001e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	b25b      	sxtb	r3, r3
 8001e1a:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(PWR_MAGT_1_REG, Buffer);
 8001e1c:	7bfb      	ldrb	r3, [r7, #15]
 8001e1e:	4619      	mov	r1, r3
 8001e20:	206b      	movs	r0, #107	; 0x6b
 8001e22:	f7ff ffbf 	bl	8001da4 <I2C_Write8>
	HAL_Delay(100); // should wait 10ms after changeing the clock setting.
 8001e26:	2064      	movs	r0, #100	; 0x64
 8001e28:	f002 fcaa 	bl	8004780 <HAL_Delay>
	
	//Set the Digital Low Pass Filter
	Buffer = 0;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	73fb      	strb	r3, [r7, #15]
	Buffer = config->CONFIG_DLPF & 0x07;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	78db      	ldrb	r3, [r3, #3]
 8001e34:	f003 0307 	and.w	r3, r3, #7
 8001e38:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(CONFIG_REG, Buffer);
 8001e3a:	7bfb      	ldrb	r3, [r7, #15]
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	201a      	movs	r0, #26
 8001e40:	f7ff ffb0 	bl	8001da4 <I2C_Write8>
	
	//Select the Gyroscope Full Scale Range
	Buffer = 0;
 8001e44:	2300      	movs	r3, #0
 8001e46:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Gyro_Full_Scale << 3) & 0x18;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	785b      	ldrb	r3, [r3, #1]
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	f003 0318 	and.w	r3, r3, #24
 8001e54:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(GYRO_CONFIG_REG, Buffer);
 8001e56:	7bfb      	ldrb	r3, [r7, #15]
 8001e58:	4619      	mov	r1, r3
 8001e5a:	201b      	movs	r0, #27
 8001e5c:	f7ff ffa2 	bl	8001da4 <I2C_Write8>
	
	//Select the Accelerometer Full Scale Range 
	Buffer = 0; 
 8001e60:	2300      	movs	r3, #0
 8001e62:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Accel_Full_Scale << 3) & 0x18;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	789b      	ldrb	r3, [r3, #2]
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	f003 0318 	and.w	r3, r3, #24
 8001e70:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(ACCEL_CONFIG_REG, Buffer);
 8001e72:	7bfb      	ldrb	r3, [r7, #15]
 8001e74:	4619      	mov	r1, r3
 8001e76:	201c      	movs	r0, #28
 8001e78:	f7ff ff94 	bl	8001da4 <I2C_Write8>
	//Set SRD To Default
	MPU6050_Set_SMPRT_DIV(0x04);
 8001e7c:	2004      	movs	r0, #4
 8001e7e:	f000 f857 	bl	8001f30 <MPU6050_Set_SMPRT_DIV>
	
	
	//Accelerometer Scaling Factor, Set the Accelerometer and Gyroscope Scaling Factor
	switch (config->Accel_Full_Scale)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	789b      	ldrb	r3, [r3, #2]
 8001e86:	2b03      	cmp	r3, #3
 8001e88:	d81a      	bhi.n	8001ec0 <MPU6050_Config+0xe0>
 8001e8a:	a201      	add	r2, pc, #4	; (adr r2, 8001e90 <MPU6050_Config+0xb0>)
 8001e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e90:	08001ea1 	.word	0x08001ea1
 8001e94:	08001ea9 	.word	0x08001ea9
 8001e98:	08001eb1 	.word	0x08001eb1
 8001e9c:	08001eb9 	.word	0x08001eb9
	{
		case AFS_SEL_2g:
			accelScalingFactor = (2000.0f/32768.0f);
 8001ea0:	4b1a      	ldr	r3, [pc, #104]	; (8001f0c <MPU6050_Config+0x12c>)
 8001ea2:	4a1b      	ldr	r2, [pc, #108]	; (8001f10 <MPU6050_Config+0x130>)
 8001ea4:	601a      	str	r2, [r3, #0]
			break;
 8001ea6:	e00c      	b.n	8001ec2 <MPU6050_Config+0xe2>
		
		case AFS_SEL_4g:
			accelScalingFactor = (4000.0f/32768.0f);
 8001ea8:	4b18      	ldr	r3, [pc, #96]	; (8001f0c <MPU6050_Config+0x12c>)
 8001eaa:	4a1a      	ldr	r2, [pc, #104]	; (8001f14 <MPU6050_Config+0x134>)
 8001eac:	601a      	str	r2, [r3, #0]
				break;
 8001eae:	e008      	b.n	8001ec2 <MPU6050_Config+0xe2>
		
		case AFS_SEL_8g:
			accelScalingFactor = (8000.0f/32768.0f);
 8001eb0:	4b16      	ldr	r3, [pc, #88]	; (8001f0c <MPU6050_Config+0x12c>)
 8001eb2:	4a19      	ldr	r2, [pc, #100]	; (8001f18 <MPU6050_Config+0x138>)
 8001eb4:	601a      	str	r2, [r3, #0]
			break;
 8001eb6:	e004      	b.n	8001ec2 <MPU6050_Config+0xe2>
		
		case AFS_SEL_16g:
			accelScalingFactor = (16000.0f/32768.0f);
 8001eb8:	4b14      	ldr	r3, [pc, #80]	; (8001f0c <MPU6050_Config+0x12c>)
 8001eba:	4a18      	ldr	r2, [pc, #96]	; (8001f1c <MPU6050_Config+0x13c>)
 8001ebc:	601a      	str	r2, [r3, #0]
			break;
 8001ebe:	e000      	b.n	8001ec2 <MPU6050_Config+0xe2>
		
		default:
			break;
 8001ec0:	bf00      	nop
	}
	//Gyroscope Scaling Factor 
	switch (config->Gyro_Full_Scale)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	785b      	ldrb	r3, [r3, #1]
 8001ec6:	2b03      	cmp	r3, #3
 8001ec8:	d81a      	bhi.n	8001f00 <MPU6050_Config+0x120>
 8001eca:	a201      	add	r2, pc, #4	; (adr r2, 8001ed0 <MPU6050_Config+0xf0>)
 8001ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ed0:	08001ee1 	.word	0x08001ee1
 8001ed4:	08001ee9 	.word	0x08001ee9
 8001ed8:	08001ef1 	.word	0x08001ef1
 8001edc:	08001ef9 	.word	0x08001ef9
	{
		case FS_SEL_250:
			gyroScalingFactor = 250.0f/32768.0f;
 8001ee0:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <MPU6050_Config+0x140>)
 8001ee2:	4a10      	ldr	r2, [pc, #64]	; (8001f24 <MPU6050_Config+0x144>)
 8001ee4:	601a      	str	r2, [r3, #0]
			break;
 8001ee6:	e00c      	b.n	8001f02 <MPU6050_Config+0x122>
		
		case FS_SEL_500:
				gyroScalingFactor = 500.0f/32768.0f;
 8001ee8:	4b0d      	ldr	r3, [pc, #52]	; (8001f20 <MPU6050_Config+0x140>)
 8001eea:	4a0f      	ldr	r2, [pc, #60]	; (8001f28 <MPU6050_Config+0x148>)
 8001eec:	601a      	str	r2, [r3, #0]
				break;
 8001eee:	e008      	b.n	8001f02 <MPU6050_Config+0x122>
		
		case FS_SEL_1000:
			gyroScalingFactor = 1000.0f/32768.0f;
 8001ef0:	4b0b      	ldr	r3, [pc, #44]	; (8001f20 <MPU6050_Config+0x140>)
 8001ef2:	4a0e      	ldr	r2, [pc, #56]	; (8001f2c <MPU6050_Config+0x14c>)
 8001ef4:	601a      	str	r2, [r3, #0]
			break;
 8001ef6:	e004      	b.n	8001f02 <MPU6050_Config+0x122>
		
		case FS_SEL_2000:
			gyroScalingFactor = 2000.0f/32768.0f;
 8001ef8:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <MPU6050_Config+0x140>)
 8001efa:	4a05      	ldr	r2, [pc, #20]	; (8001f10 <MPU6050_Config+0x130>)
 8001efc:	601a      	str	r2, [r3, #0]
			break;
 8001efe:	e000      	b.n	8001f02 <MPU6050_Config+0x122>
		
		default:
			break;
 8001f00:	bf00      	nop
	}
	
}
 8001f02:	bf00      	nop
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	20000328 	.word	0x20000328
 8001f10:	3d7a0000 	.word	0x3d7a0000
 8001f14:	3dfa0000 	.word	0x3dfa0000
 8001f18:	3e7a0000 	.word	0x3e7a0000
 8001f1c:	3efa0000 	.word	0x3efa0000
 8001f20:	2000032c 	.word	0x2000032c
 8001f24:	3bfa0000 	.word	0x3bfa0000
 8001f28:	3c7a0000 	.word	0x3c7a0000
 8001f2c:	3cfa0000 	.word	0x3cfa0000

08001f30 <MPU6050_Set_SMPRT_DIV>:
	return Buffer;
}

//6- Set Sample Rate Divider
void MPU6050_Set_SMPRT_DIV(uint8_t SMPRTvalue)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	71fb      	strb	r3, [r7, #7]
	I2C_Write8(SMPLRT_DIV_REG, SMPRTvalue);
 8001f3a:	79fb      	ldrb	r3, [r7, #7]
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	2019      	movs	r0, #25
 8001f40:	f7ff ff30 	bl	8001da4 <I2C_Write8>
}
 8001f44:	bf00      	nop
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <MPU6050_Get_Accel_RawData>:
	
}

//9- Get Accel Raw Data
void MPU6050_Get_Accel_RawData(RawData_Def *rawDef)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b088      	sub	sp, #32
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
	uint8_t i2cBuf[2];
	uint8_t AcceArr[6], GyroArr[6];
	
	//i2cBuf[1] = 0;

	I2C_Read(INT_STATUS_REG, &i2cBuf[1],1);
 8001f54:	f107 031c 	add.w	r3, r7, #28
 8001f58:	3301      	adds	r3, #1
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	203a      	movs	r0, #58	; 0x3a
 8001f60:	f7ff fef8 	bl	8001d54 <I2C_Read>
	if((i2cBuf[1]&&0x01))
 8001f64:	7f7b      	ldrb	r3, [r7, #29]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d04f      	beq.n	800200a <MPU6050_Get_Accel_RawData+0xbe>
	{
		I2C_Read(ACCEL_XOUT_H_REG, AcceArr,6);
 8001f6a:	f107 0314 	add.w	r3, r7, #20
 8001f6e:	2206      	movs	r2, #6
 8001f70:	4619      	mov	r1, r3
 8001f72:	203b      	movs	r0, #59	; 0x3b
 8001f74:	f7ff feee 	bl	8001d54 <I2C_Read>
		
		//Accel Raw Data
		rawDef->x = ((AcceArr[0]<<8) + AcceArr[1]); // x-Axis
 8001f78:	7d3b      	ldrb	r3, [r7, #20]
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	021b      	lsls	r3, r3, #8
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	7d7b      	ldrb	r3, [r7, #21]
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	4413      	add	r3, r2
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	b21a      	sxth	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	801a      	strh	r2, [r3, #0]
		rawDef->y = ((AcceArr[2]<<8) + AcceArr[3]); // y-Axis
 8001f8e:	7dbb      	ldrb	r3, [r7, #22]
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	021b      	lsls	r3, r3, #8
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	7dfb      	ldrb	r3, [r7, #23]
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	4413      	add	r3, r2
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	b21a      	sxth	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	805a      	strh	r2, [r3, #2]
		rawDef->z = ((AcceArr[4]<<8) + AcceArr[5]); // z-Axis
 8001fa4:	7e3b      	ldrb	r3, [r7, #24]
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	021b      	lsls	r3, r3, #8
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	7e7b      	ldrb	r3, [r7, #25]
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	4413      	add	r3, r2
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	b21a      	sxth	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	809a      	strh	r2, [r3, #4]
		//Gyro Raw Data
		I2C_Read(GYRO_XOUT_H_REG, GyroArr,6);
 8001fba:	f107 030c 	add.w	r3, r7, #12
 8001fbe:	2206      	movs	r2, #6
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	2043      	movs	r0, #67	; 0x43
 8001fc4:	f7ff fec6 	bl	8001d54 <I2C_Read>
		GyroRW[0] = ((GyroArr[0]<<8) + GyroArr[1]);
 8001fc8:	7b3b      	ldrb	r3, [r7, #12]
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	021b      	lsls	r3, r3, #8
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	7b7b      	ldrb	r3, [r7, #13]
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	4413      	add	r3, r2
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	b21a      	sxth	r2, r3
 8001fda:	4b0e      	ldr	r3, [pc, #56]	; (8002014 <MPU6050_Get_Accel_RawData+0xc8>)
 8001fdc:	801a      	strh	r2, [r3, #0]
		GyroRW[1] = (GyroArr[2]<<8) + GyroArr[3];
 8001fde:	7bbb      	ldrb	r3, [r7, #14]
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	021b      	lsls	r3, r3, #8
 8001fe4:	b29a      	uxth	r2, r3
 8001fe6:	7bfb      	ldrb	r3, [r7, #15]
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	4413      	add	r3, r2
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	b21a      	sxth	r2, r3
 8001ff0:	4b08      	ldr	r3, [pc, #32]	; (8002014 <MPU6050_Get_Accel_RawData+0xc8>)
 8001ff2:	805a      	strh	r2, [r3, #2]
		GyroRW[2] = ((GyroArr[4]<<8) + GyroArr[5]);
 8001ff4:	7c3b      	ldrb	r3, [r7, #16]
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	021b      	lsls	r3, r3, #8
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	7c7b      	ldrb	r3, [r7, #17]
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	4413      	add	r3, r2
 8002002:	b29b      	uxth	r3, r3
 8002004:	b21a      	sxth	r2, r3
 8002006:	4b03      	ldr	r3, [pc, #12]	; (8002014 <MPU6050_Get_Accel_RawData+0xc8>)
 8002008:	809a      	strh	r2, [r3, #4]
	}
}
 800200a:	bf00      	nop
 800200c:	3720      	adds	r7, #32
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	20000330 	.word	0x20000330

08002018 <MPU6050_Get_Gyro_RawData>:
	CaliDef->y = (AccelScaled.y) - A_Y_Bias;// y-Axis
	CaliDef->z = (AccelScaled.z) - A_Z_Bias;// z-Axis
}
//12- Get Gyro Raw Data
void MPU6050_Get_Gyro_RawData(RawData_Def *rawDef)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
	
	//Accel Raw Data
	rawDef->x = GyroRW[0];
 8002020:	4b09      	ldr	r3, [pc, #36]	; (8002048 <MPU6050_Get_Gyro_RawData+0x30>)
 8002022:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	801a      	strh	r2, [r3, #0]
	rawDef->y = GyroRW[1];
 800202a:	4b07      	ldr	r3, [pc, #28]	; (8002048 <MPU6050_Get_Gyro_RawData+0x30>)
 800202c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	805a      	strh	r2, [r3, #2]
	rawDef->z = GyroRW[2];
 8002034:	4b04      	ldr	r3, [pc, #16]	; (8002048 <MPU6050_Get_Gyro_RawData+0x30>)
 8002036:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	809a      	strh	r2, [r3, #4]
	
}
 800203e:	bf00      	nop
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	bc80      	pop	{r7}
 8002046:	4770      	bx	lr
 8002048:	20000330 	.word	0x20000330

0800204c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af02      	add	r7, sp, #8
 8002052:	4603      	mov	r3, r0
 8002054:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8002056:	79fb      	ldrb	r3, [r7, #7]
 8002058:	f023 030f 	bic.w	r3, r3, #15
 800205c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800205e:	79fb      	ldrb	r3, [r7, #7]
 8002060:	011b      	lsls	r3, r3, #4
 8002062:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002064:	7bfb      	ldrb	r3, [r7, #15]
 8002066:	f043 030c 	orr.w	r3, r3, #12
 800206a:	b2db      	uxtb	r3, r3
 800206c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800206e:	7bfb      	ldrb	r3, [r7, #15]
 8002070:	f043 0308 	orr.w	r3, r3, #8
 8002074:	b2db      	uxtb	r3, r3
 8002076:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8002078:	7bbb      	ldrb	r3, [r7, #14]
 800207a:	f043 030c 	orr.w	r3, r3, #12
 800207e:	b2db      	uxtb	r3, r3
 8002080:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8002082:	7bbb      	ldrb	r3, [r7, #14]
 8002084:	f043 0308 	orr.w	r3, r3, #8
 8002088:	b2db      	uxtb	r3, r3
 800208a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800208c:	f107 0208 	add.w	r2, r7, #8
 8002090:	2364      	movs	r3, #100	; 0x64
 8002092:	9300      	str	r3, [sp, #0]
 8002094:	2304      	movs	r3, #4
 8002096:	214e      	movs	r1, #78	; 0x4e
 8002098:	4803      	ldr	r0, [pc, #12]	; (80020a8 <lcd_send_cmd+0x5c>)
 800209a:	f003 fc93 	bl	80059c4 <HAL_I2C_Master_Transmit>
}
 800209e:	bf00      	nop
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	2000098c 	.word	0x2000098c

080020ac <lcd_init>:
	data_t[3] = data_l|0x09;  //en=0, rs=0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
}

void lcd_init (void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 80020b0:	2002      	movs	r0, #2
 80020b2:	f7ff ffcb 	bl	800204c <lcd_send_cmd>
	lcd_send_cmd (0x28);
 80020b6:	2028      	movs	r0, #40	; 0x28
 80020b8:	f7ff ffc8 	bl	800204c <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 80020bc:	200c      	movs	r0, #12
 80020be:	f7ff ffc5 	bl	800204c <lcd_send_cmd>
	lcd_send_cmd (0x80);
 80020c2:	2080      	movs	r0, #128	; 0x80
 80020c4:	f7ff ffc2 	bl	800204c <lcd_send_cmd>
}
 80020c8:	bf00      	nop
 80020ca:	bd80      	pop	{r7, pc}

080020cc <Serial_Send>:
//                        butns|size|     |     | lt  | rt  | lx        | ly        | rx        | ry        | unused
//                                    b10 & b9  & b7  & b8  & dr  & dl  & dd  & du
//


int Serial_Send(uint8_t* Buf, uint32_t *Len){
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
	CDC_Transmit_FS(Buf, Len);
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	4619      	mov	r1, r3
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f009 fcb8 	bl	800ba50 <CDC_Transmit_FS>
	return &Len;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <wait_for_gpio_state_timeout>:
#define I2C1_SCL_GPIO_Port SCL_GPIO_Port
#define I2C1_SDA_Pin SDA_Pin
#define I2C1_SDA_GPIO_Port SDA_GPIO_Port

static bool wait_for_gpio_state_timeout(GPIO_TypeDef *port, uint16_t pin, GPIO_PinState state, uint32_t timeout)
 {
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b086      	sub	sp, #24
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	60f8      	str	r0, [r7, #12]
 80020f2:	607b      	str	r3, [r7, #4]
 80020f4:	460b      	mov	r3, r1
 80020f6:	817b      	strh	r3, [r7, #10]
 80020f8:	4613      	mov	r3, r2
 80020fa:	727b      	strb	r3, [r7, #9]
    uint32_t Tickstart = HAL_GetTick();
 80020fc:	f002 fb36 	bl	800476c <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]
    bool ret = true;
 8002102:	2301      	movs	r3, #1
 8002104:	75fb      	strb	r3, [r7, #23]
    /* Wait until flag is set */
    for(;(state != HAL_GPIO_ReadPin(port, pin)) && (true == ret);)
 8002106:	e011      	b.n	800212c <wait_for_gpio_state_timeout+0x42>
    {
        /* Check for the timeout */
        if (timeout != HAL_MAX_DELAY)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800210e:	d00c      	beq.n	800212a <wait_for_gpio_state_timeout+0x40>
        {
            if ((timeout == 0U) || ((HAL_GetTick() - Tickstart) > timeout))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d007      	beq.n	8002126 <wait_for_gpio_state_timeout+0x3c>
 8002116:	f002 fb29 	bl	800476c <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	429a      	cmp	r2, r3
 8002124:	d201      	bcs.n	800212a <wait_for_gpio_state_timeout+0x40>
            {
                ret = false;
 8002126:	2300      	movs	r3, #0
 8002128:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
            }
        }
        asm("nop");
 800212a:	bf00      	nop
    for(;(state != HAL_GPIO_ReadPin(port, pin)) && (true == ret);)
 800212c:	897b      	ldrh	r3, [r7, #10]
 800212e:	4619      	mov	r1, r3
 8002130:	68f8      	ldr	r0, [r7, #12]
 8002132:	f003 faa7 	bl	8005684 <HAL_GPIO_ReadPin>
 8002136:	4603      	mov	r3, r0
 8002138:	461a      	mov	r2, r3
 800213a:	7a7b      	ldrb	r3, [r7, #9]
 800213c:	4293      	cmp	r3, r2
 800213e:	d002      	beq.n	8002146 <wait_for_gpio_state_timeout+0x5c>
 8002140:	7dfb      	ldrb	r3, [r7, #23]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d1e0      	bne.n	8002108 <wait_for_gpio_state_timeout+0x1e>
    }
    return ret;
 8002146:	7dfb      	ldrb	r3, [r7, #23]
}
 8002148:	4618      	mov	r0, r3
 800214a:	3718      	adds	r7, #24
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <I2C_ClearBusyFlagErratum>:


static void I2C_ClearBusyFlagErratum(I2C_HandleTypeDef* handle, uint32_t timeout)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
    GPIO_InitTypeDef GPIO_InitStructure;

    // 1. Clear PE bit.
    CLEAR_BIT(handle->Instance->CR1, I2C_CR1_PE);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f022 0201 	bic.w	r2, r2, #1
 8002168:	601a      	str	r2, [r3, #0]

    //  2. Configure the SCL and SDA I/Os as General Purpose Output Open-Drain, High level (Write 1 to GPIOx_ODR).
    HAL_I2C_DeInit(handle);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f003 fbfa 	bl	8005964 <HAL_I2C_DeInit>

    GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 8002170:	2311      	movs	r3, #17
 8002172:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002174:	2300      	movs	r3, #0
 8002176:	613b      	str	r3, [r7, #16]

    GPIO_InitStructure.Pin = I2C1_SCL_Pin;
 8002178:	2340      	movs	r3, #64	; 0x40
 800217a:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800217c:	f107 0308 	add.w	r3, r7, #8
 8002180:	4619      	mov	r1, r3
 8002182:	4840      	ldr	r0, [pc, #256]	; (8002284 <I2C_ClearBusyFlagErratum+0x134>)
 8002184:	f003 f868 	bl	8005258 <HAL_GPIO_Init>

    GPIO_InitStructure.Pin = I2C1_SDA_Pin;
 8002188:	2380      	movs	r3, #128	; 0x80
 800218a:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(I2C1_SDA_GPIO_Port, &GPIO_InitStructure);
 800218c:	f107 0308 	add.w	r3, r7, #8
 8002190:	4619      	mov	r1, r3
 8002192:	483c      	ldr	r0, [pc, #240]	; (8002284 <I2C_ClearBusyFlagErratum+0x134>)
 8002194:	f003 f860 	bl	8005258 <HAL_GPIO_Init>

    // 3. Check SCL and SDA High level in GPIOx_IDR.
    HAL_GPIO_WritePin(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin, GPIO_PIN_SET);
 8002198:	2201      	movs	r2, #1
 800219a:	2180      	movs	r1, #128	; 0x80
 800219c:	4839      	ldr	r0, [pc, #228]	; (8002284 <I2C_ClearBusyFlagErratum+0x134>)
 800219e:	f003 fa88 	bl	80056b2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin, GPIO_PIN_SET);
 80021a2:	2201      	movs	r2, #1
 80021a4:	2140      	movs	r1, #64	; 0x40
 80021a6:	4837      	ldr	r0, [pc, #220]	; (8002284 <I2C_ClearBusyFlagErratum+0x134>)
 80021a8:	f003 fa83 	bl	80056b2 <HAL_GPIO_WritePin>

    wait_for_gpio_state_timeout(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin, GPIO_PIN_SET, timeout);
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	2201      	movs	r2, #1
 80021b0:	2140      	movs	r1, #64	; 0x40
 80021b2:	4834      	ldr	r0, [pc, #208]	; (8002284 <I2C_ClearBusyFlagErratum+0x134>)
 80021b4:	f7ff ff99 	bl	80020ea <wait_for_gpio_state_timeout>
    wait_for_gpio_state_timeout(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin, GPIO_PIN_SET, timeout);
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	2201      	movs	r2, #1
 80021bc:	2180      	movs	r1, #128	; 0x80
 80021be:	4831      	ldr	r0, [pc, #196]	; (8002284 <I2C_ClearBusyFlagErratum+0x134>)
 80021c0:	f7ff ff93 	bl	80020ea <wait_for_gpio_state_timeout>

    // 4. Configure the SDA I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR).
    HAL_GPIO_WritePin(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin, GPIO_PIN_RESET);
 80021c4:	2200      	movs	r2, #0
 80021c6:	2180      	movs	r1, #128	; 0x80
 80021c8:	482e      	ldr	r0, [pc, #184]	; (8002284 <I2C_ClearBusyFlagErratum+0x134>)
 80021ca:	f003 fa72 	bl	80056b2 <HAL_GPIO_WritePin>

    // 5. Check SDA Low level in GPIOx_IDR.
    wait_for_gpio_state_timeout(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin, GPIO_PIN_RESET, timeout);
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	2200      	movs	r2, #0
 80021d2:	2180      	movs	r1, #128	; 0x80
 80021d4:	482b      	ldr	r0, [pc, #172]	; (8002284 <I2C_ClearBusyFlagErratum+0x134>)
 80021d6:	f7ff ff88 	bl	80020ea <wait_for_gpio_state_timeout>

    // 6. Configure the SCL I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR).
    HAL_GPIO_WritePin(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin, GPIO_PIN_RESET);
 80021da:	2200      	movs	r2, #0
 80021dc:	2140      	movs	r1, #64	; 0x40
 80021de:	4829      	ldr	r0, [pc, #164]	; (8002284 <I2C_ClearBusyFlagErratum+0x134>)
 80021e0:	f003 fa67 	bl	80056b2 <HAL_GPIO_WritePin>

    // 7. Check SCL Low level in GPIOx_IDR.
    wait_for_gpio_state_timeout(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin, GPIO_PIN_RESET, timeout);
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	2200      	movs	r2, #0
 80021e8:	2140      	movs	r1, #64	; 0x40
 80021ea:	4826      	ldr	r0, [pc, #152]	; (8002284 <I2C_ClearBusyFlagErratum+0x134>)
 80021ec:	f7ff ff7d 	bl	80020ea <wait_for_gpio_state_timeout>

    // 8. Configure the SCL I/O as General Purpose Output Open-Drain, High level (Write 1 to GPIOx_ODR).
    HAL_GPIO_WritePin(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin, GPIO_PIN_SET);
 80021f0:	2201      	movs	r2, #1
 80021f2:	2140      	movs	r1, #64	; 0x40
 80021f4:	4823      	ldr	r0, [pc, #140]	; (8002284 <I2C_ClearBusyFlagErratum+0x134>)
 80021f6:	f003 fa5c 	bl	80056b2 <HAL_GPIO_WritePin>

    // 9. Check SCL High level in GPIOx_IDR.
    wait_for_gpio_state_timeout(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin, GPIO_PIN_SET, timeout);
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	2201      	movs	r2, #1
 80021fe:	2140      	movs	r1, #64	; 0x40
 8002200:	4820      	ldr	r0, [pc, #128]	; (8002284 <I2C_ClearBusyFlagErratum+0x134>)
 8002202:	f7ff ff72 	bl	80020ea <wait_for_gpio_state_timeout>

    // 10. Configure the SDA I/O as General Purpose Output Open-Drain , High level (Write 1 to GPIOx_ODR).
    HAL_GPIO_WritePin(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin, GPIO_PIN_SET);
 8002206:	2201      	movs	r2, #1
 8002208:	2180      	movs	r1, #128	; 0x80
 800220a:	481e      	ldr	r0, [pc, #120]	; (8002284 <I2C_ClearBusyFlagErratum+0x134>)
 800220c:	f003 fa51 	bl	80056b2 <HAL_GPIO_WritePin>

    // 11. Check SDA High level in GPIOx_IDR.
    wait_for_gpio_state_timeout(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin, GPIO_PIN_SET, timeout);
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	2201      	movs	r2, #1
 8002214:	2180      	movs	r1, #128	; 0x80
 8002216:	481b      	ldr	r0, [pc, #108]	; (8002284 <I2C_ClearBusyFlagErratum+0x134>)
 8002218:	f7ff ff67 	bl	80020ea <wait_for_gpio_state_timeout>

    // 12. Configure the SCL and SDA I/Os as Alternate function Open-Drain.
    GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 800221c:	2312      	movs	r3, #18
 800221e:	60fb      	str	r3, [r7, #12]
    //MAT//GPIO_InitStructure.Alternate = GPIO_AF1_I2C1;

    GPIO_InitStructure.Pin = I2C1_SCL_Pin;
 8002220:	2340      	movs	r3, #64	; 0x40
 8002222:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(I2C1_SCL_GPIO_Port, &GPIO_InitStructure);
 8002224:	f107 0308 	add.w	r3, r7, #8
 8002228:	4619      	mov	r1, r3
 800222a:	4816      	ldr	r0, [pc, #88]	; (8002284 <I2C_ClearBusyFlagErratum+0x134>)
 800222c:	f003 f814 	bl	8005258 <HAL_GPIO_Init>

    GPIO_InitStructure.Pin = I2C1_SDA_Pin;
 8002230:	2380      	movs	r3, #128	; 0x80
 8002232:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(I2C1_SDA_GPIO_Port, &GPIO_InitStructure);
 8002234:	f107 0308 	add.w	r3, r7, #8
 8002238:	4619      	mov	r1, r3
 800223a:	4812      	ldr	r0, [pc, #72]	; (8002284 <I2C_ClearBusyFlagErratum+0x134>)
 800223c:	f003 f80c 	bl	8005258 <HAL_GPIO_Init>

    // 13. Set SWRST bit in I2Cx_CR1 register.
    SET_BIT(handle->Instance->CR1, I2C_CR1_SWRST);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800224e:	601a      	str	r2, [r3, #0]
    asm("nop");
 8002250:	bf00      	nop

    /* 14. Clear SWRST bit in I2Cx_CR1 register. */
    CLEAR_BIT(handle->Instance->CR1, I2C_CR1_SWRST);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002260:	601a      	str	r2, [r3, #0]
    asm("nop");
 8002262:	bf00      	nop

    /* 15. Enable the I2C peripheral by setting the PE bit in I2Cx_CR1 register */
    SET_BIT(handle->Instance->CR1, I2C_CR1_PE);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f042 0201 	orr.w	r2, r2, #1
 8002272:	601a      	str	r2, [r3, #0]
    asm("nop");
 8002274:	bf00      	nop

    // Call initialization function.
    HAL_I2C_Init(handle);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f003 fa4c 	bl	8005714 <HAL_I2C_Init>
}
 800227c:	bf00      	nop
 800227e:	3718      	adds	r7, #24
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40010c00 	.word	0x40010c00

08002288 <MapValue>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
double MapValue(double Val, double FromLow,double FromHigh,double ToLow,double ToHigh){
 8002288:	b5b0      	push	{r4, r5, r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002292:	e9c7 2300 	strd	r2, r3, [r7]
	double out = ToLow + ((ToHigh - ToLow) / (FromHigh - FromLow)) * (Val - FromLow);
 8002296:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800229a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800229e:	f7fd ff63 	bl	8000168 <__aeabi_dsub>
 80022a2:	4603      	mov	r3, r0
 80022a4:	460c      	mov	r4, r1
 80022a6:	4625      	mov	r5, r4
 80022a8:	461c      	mov	r4, r3
 80022aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80022ae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80022b2:	f7fd ff59 	bl	8000168 <__aeabi_dsub>
 80022b6:	4602      	mov	r2, r0
 80022b8:	460b      	mov	r3, r1
 80022ba:	4620      	mov	r0, r4
 80022bc:	4629      	mov	r1, r5
 80022be:	f7fe fa35 	bl	800072c <__aeabi_ddiv>
 80022c2:	4603      	mov	r3, r0
 80022c4:	460c      	mov	r4, r1
 80022c6:	4625      	mov	r5, r4
 80022c8:	461c      	mov	r4, r3
 80022ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80022ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80022d2:	f7fd ff49 	bl	8000168 <__aeabi_dsub>
 80022d6:	4602      	mov	r2, r0
 80022d8:	460b      	mov	r3, r1
 80022da:	4620      	mov	r0, r4
 80022dc:	4629      	mov	r1, r5
 80022de:	f7fe f8fb 	bl	80004d8 <__aeabi_dmul>
 80022e2:	4603      	mov	r3, r0
 80022e4:	460c      	mov	r4, r1
 80022e6:	461a      	mov	r2, r3
 80022e8:	4623      	mov	r3, r4
 80022ea:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80022ee:	f7fd ff3d 	bl	800016c <__adddf3>
 80022f2:	4603      	mov	r3, r0
 80022f4:	460c      	mov	r4, r1
 80022f6:	e9c7 3404 	strd	r3, r4, [r7, #16]
	if (out > ToHigh) out = ToHigh;
 80022fa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80022fe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002302:	f7fe fb79 	bl	80009f8 <__aeabi_dcmpgt>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d003      	beq.n	8002314 <MapValue+0x8c>
 800230c:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8002310:	e9c7 3404 	strd	r3, r4, [r7, #16]
	if (out < ToLow) out - ToLow;
	return out;
 8002314:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
}
 8002318:	4618      	mov	r0, r3
 800231a:	4621      	mov	r1, r4
 800231c:	3718      	adds	r7, #24
 800231e:	46bd      	mov	sp, r7
 8002320:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002324 <AdsRead>:

void AdsRead(int16_t *buf){
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af02      	add	r7, sp, #8
 800232a:	6078      	str	r0, [r7, #4]
	for (int a = 0; a < 4; a++){
 800232c:	2300      	movs	r3, #0
 800232e:	60fb      	str	r3, [r7, #12]
 8002330:	e052      	b.n	80023d8 <AdsRead+0xb4>
		  ADSwrite[0] = 0x01;
 8002332:	4b2d      	ldr	r3, [pc, #180]	; (80023e8 <AdsRead+0xc4>)
 8002334:	2201      	movs	r2, #1
 8002336:	701a      	strb	r2, [r3, #0]
		  switch(a){
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2b03      	cmp	r3, #3
 800233c:	d81a      	bhi.n	8002374 <AdsRead+0x50>
 800233e:	a201      	add	r2, pc, #4	; (adr r2, 8002344 <AdsRead+0x20>)
 8002340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002344:	08002355 	.word	0x08002355
 8002348:	0800235d 	.word	0x0800235d
 800234c:	08002365 	.word	0x08002365
 8002350:	0800236d 	.word	0x0800236d
		  case 0: {
			  ADSwrite[1] = 0xC1; // 11000011
 8002354:	4b24      	ldr	r3, [pc, #144]	; (80023e8 <AdsRead+0xc4>)
 8002356:	22c1      	movs	r2, #193	; 0xc1
 8002358:	705a      	strb	r2, [r3, #1]
			  break;
 800235a:	e00b      	b.n	8002374 <AdsRead+0x50>
		  }
		  case 1: {
			  ADSwrite[1] = 0xD1; // 11010011
 800235c:	4b22      	ldr	r3, [pc, #136]	; (80023e8 <AdsRead+0xc4>)
 800235e:	22d1      	movs	r2, #209	; 0xd1
 8002360:	705a      	strb	r2, [r3, #1]
			  break;
 8002362:	e007      	b.n	8002374 <AdsRead+0x50>
		  }
		  case 2: {
			  ADSwrite[1] = 0xE1; // 11100011
 8002364:	4b20      	ldr	r3, [pc, #128]	; (80023e8 <AdsRead+0xc4>)
 8002366:	22e1      	movs	r2, #225	; 0xe1
 8002368:	705a      	strb	r2, [r3, #1]
			  break;
 800236a:	e003      	b.n	8002374 <AdsRead+0x50>
		  }
		  case 3: {
			  ADSwrite[1] = 0xF1; // 11110011
 800236c:	4b1e      	ldr	r3, [pc, #120]	; (80023e8 <AdsRead+0xc4>)
 800236e:	22f1      	movs	r2, #241	; 0xf1
 8002370:	705a      	strb	r2, [r3, #1]
			  break;
 8002372:	bf00      	nop
		  }
		  }

		  ADSwrite[2] = 0xE3; // 10000011 // 10100011 // 11000011// 11100011
 8002374:	4b1c      	ldr	r3, [pc, #112]	; (80023e8 <AdsRead+0xc4>)
 8002376:	22e3      	movs	r2, #227	; 0xe3
 8002378:	709a      	strb	r2, [r3, #2]
		  HAL_I2C_Master_Transmit(&hi2c2, ADS1115_ADDRESS<<1, ADSwrite, 3, 100);
 800237a:	2364      	movs	r3, #100	; 0x64
 800237c:	9300      	str	r3, [sp, #0]
 800237e:	2303      	movs	r3, #3
 8002380:	4a19      	ldr	r2, [pc, #100]	; (80023e8 <AdsRead+0xc4>)
 8002382:	2190      	movs	r1, #144	; 0x90
 8002384:	4819      	ldr	r0, [pc, #100]	; (80023ec <AdsRead+0xc8>)
 8002386:	f003 fb1d 	bl	80059c4 <HAL_I2C_Master_Transmit>
		  ADSwrite[0] = 0x00;
 800238a:	4b17      	ldr	r3, [pc, #92]	; (80023e8 <AdsRead+0xc4>)
 800238c:	2200      	movs	r2, #0
 800238e:	701a      	strb	r2, [r3, #0]
		  HAL_I2C_Master_Transmit(&hi2c2, ADS1115_ADDRESS<<1, ADSwrite, 1, 100);
 8002390:	2364      	movs	r3, #100	; 0x64
 8002392:	9300      	str	r3, [sp, #0]
 8002394:	2301      	movs	r3, #1
 8002396:	4a14      	ldr	r2, [pc, #80]	; (80023e8 <AdsRead+0xc4>)
 8002398:	2190      	movs	r1, #144	; 0x90
 800239a:	4814      	ldr	r0, [pc, #80]	; (80023ec <AdsRead+0xc8>)
 800239c:	f003 fb12 	bl	80059c4 <HAL_I2C_Master_Transmit>
		  NRF24_DelayMicroSeconds(100);
 80023a0:	2064      	movs	r0, #100	; 0x64
 80023a2:	f7fe fb5b 	bl	8000a5c <NRF24_DelayMicroSeconds>
		  HAL_I2C_Master_Receive(&hi2c2, ADS1115_ADDRESS<<1, ADSwrite, 2, 100);
 80023a6:	2364      	movs	r3, #100	; 0x64
 80023a8:	9300      	str	r3, [sp, #0]
 80023aa:	2302      	movs	r3, #2
 80023ac:	4a0e      	ldr	r2, [pc, #56]	; (80023e8 <AdsRead+0xc4>)
 80023ae:	2190      	movs	r1, #144	; 0x90
 80023b0:	480e      	ldr	r0, [pc, #56]	; (80023ec <AdsRead+0xc8>)
 80023b2:	f003 fc05 	bl	8005bc0 <HAL_I2C_Master_Receive>
		  buf[a] = (((int16_t)ADSwrite[0]) << 8 | ADSwrite[1]);
 80023b6:	4b0c      	ldr	r3, [pc, #48]	; (80023e8 <AdsRead+0xc4>)
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	021b      	lsls	r3, r3, #8
 80023bc:	b219      	sxth	r1, r3
 80023be:	4b0a      	ldr	r3, [pc, #40]	; (80023e8 <AdsRead+0xc4>)
 80023c0:	785b      	ldrb	r3, [r3, #1]
 80023c2:	b21a      	sxth	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	4403      	add	r3, r0
 80023cc:	430a      	orrs	r2, r1
 80023ce:	b212      	sxth	r2, r2
 80023d0:	801a      	strh	r2, [r3, #0]
	for (int a = 0; a < 4; a++){
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	3301      	adds	r3, #1
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2b03      	cmp	r3, #3
 80023dc:	dda9      	ble.n	8002332 <AdsRead+0xe>
	  }
}
 80023de:	bf00      	nop
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	20000b2c 	.word	0x20000b2c
 80023ec:	200009e0 	.word	0x200009e0

080023f0 <AdcRead>:

void AdcRead(int16_t *buf){
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(&hadc1);
 80023f8:	481c      	ldr	r0, [pc, #112]	; (800246c <AdcRead+0x7c>)
 80023fa:	f002 fabb 	bl	8004974 <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK) {
 80023fe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002402:	481a      	ldr	r0, [pc, #104]	; (800246c <AdcRead+0x7c>)
 8002404:	f002 fb90 	bl	8004b28 <HAL_ADC_PollForConversion>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d106      	bne.n	800241c <AdcRead+0x2c>
		buf[0] = HAL_ADC_GetValue(&hadc1);
 800240e:	4817      	ldr	r0, [pc, #92]	; (800246c <AdcRead+0x7c>)
 8002410:	f002 fc84 	bl	8004d1c <HAL_ADC_GetValue>
 8002414:	4603      	mov	r3, r0
 8002416:	b21a      	sxth	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	801a      	strh	r2, [r3, #0]
	}
	if (HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK) {
 800241c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002420:	4812      	ldr	r0, [pc, #72]	; (800246c <AdcRead+0x7c>)
 8002422:	f002 fb81 	bl	8004b28 <HAL_ADC_PollForConversion>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d107      	bne.n	800243c <AdcRead+0x4c>
		buf[1] = HAL_ADC_GetValue(&hadc1);
 800242c:	480f      	ldr	r0, [pc, #60]	; (800246c <AdcRead+0x7c>)
 800242e:	f002 fc75 	bl	8004d1c <HAL_ADC_GetValue>
 8002432:	4602      	mov	r2, r0
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	3302      	adds	r3, #2
 8002438:	b212      	sxth	r2, r2
 800243a:	801a      	strh	r2, [r3, #0]
	}
	if (HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK) {
 800243c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002440:	480a      	ldr	r0, [pc, #40]	; (800246c <AdcRead+0x7c>)
 8002442:	f002 fb71 	bl	8004b28 <HAL_ADC_PollForConversion>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d107      	bne.n	800245c <AdcRead+0x6c>
		buf[2] = HAL_ADC_GetValue(&hadc1);
 800244c:	4807      	ldr	r0, [pc, #28]	; (800246c <AdcRead+0x7c>)
 800244e:	f002 fc65 	bl	8004d1c <HAL_ADC_GetValue>
 8002452:	4602      	mov	r2, r0
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	3304      	adds	r3, #4
 8002458:	b212      	sxth	r2, r2
 800245a:	801a      	strh	r2, [r3, #0]
	}
	HAL_ADC_Stop(&hadc1);
 800245c:	4803      	ldr	r0, [pc, #12]	; (800246c <AdcRead+0x7c>)
 800245e:	f002 fb37 	bl	8004ad0 <HAL_ADC_Stop>
}
 8002462:	bf00      	nop
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	20000a9c 	.word	0x20000a9c

08002470 <updateButtons>:
void updateButtons()
{
 8002470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002472:	b08b      	sub	sp, #44	; 0x2c
 8002474:	af06      	add	r7, sp, #24
	  int16_t Val[4];
	  AdsRead(Val);
 8002476:	f107 0308 	add.w	r3, r7, #8
 800247a:	4618      	mov	r0, r3
 800247c:	f7ff ff52 	bl	8002324 <AdsRead>
	  Val[1] = (int16_t)MapValue(Val[1], 0, Val[0], 0, 10);
 8002480:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002484:	4618      	mov	r0, r3
 8002486:	f7fd ffbd 	bl	8000404 <__aeabi_i2d>
 800248a:	4605      	mov	r5, r0
 800248c:	460e      	mov	r6, r1
 800248e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002492:	4618      	mov	r0, r3
 8002494:	f7fd ffb6 	bl	8000404 <__aeabi_i2d>
 8002498:	460a      	mov	r2, r1
 800249a:	4601      	mov	r1, r0
 800249c:	f04f 0300 	mov.w	r3, #0
 80024a0:	4caf      	ldr	r4, [pc, #700]	; (8002760 <updateButtons+0x2f0>)
 80024a2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80024a6:	f04f 0300 	mov.w	r3, #0
 80024aa:	f04f 0400 	mov.w	r4, #0
 80024ae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80024b2:	e9cd 1200 	strd	r1, r2, [sp]
 80024b6:	f04f 0200 	mov.w	r2, #0
 80024ba:	f04f 0300 	mov.w	r3, #0
 80024be:	4628      	mov	r0, r5
 80024c0:	4631      	mov	r1, r6
 80024c2:	f7ff fee1 	bl	8002288 <MapValue>
 80024c6:	4603      	mov	r3, r0
 80024c8:	460c      	mov	r4, r1
 80024ca:	4618      	mov	r0, r3
 80024cc:	4621      	mov	r1, r4
 80024ce:	f7fe fa9d 	bl	8000a0c <__aeabi_d2iz>
 80024d2:	4603      	mov	r3, r0
 80024d4:	b21b      	sxth	r3, r3
 80024d6:	817b      	strh	r3, [r7, #10]
	  Val[2] = (int16_t)MapValue(Val[2], 0, Val[0], -32768, 32767);
 80024d8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80024dc:	4618      	mov	r0, r3
 80024de:	f7fd ff91 	bl	8000404 <__aeabi_i2d>
 80024e2:	4605      	mov	r5, r0
 80024e4:	460e      	mov	r6, r1
 80024e6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7fd ff8a 	bl	8000404 <__aeabi_i2d>
 80024f0:	460a      	mov	r2, r1
 80024f2:	4601      	mov	r1, r0
 80024f4:	a496      	add	r4, pc, #600	; (adr r4, 8002750 <updateButtons+0x2e0>)
 80024f6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80024fa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80024fe:	f04f 0300 	mov.w	r3, #0
 8002502:	4c98      	ldr	r4, [pc, #608]	; (8002764 <updateButtons+0x2f4>)
 8002504:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8002508:	e9cd 1200 	strd	r1, r2, [sp]
 800250c:	f04f 0200 	mov.w	r2, #0
 8002510:	f04f 0300 	mov.w	r3, #0
 8002514:	4628      	mov	r0, r5
 8002516:	4631      	mov	r1, r6
 8002518:	f7ff feb6 	bl	8002288 <MapValue>
 800251c:	4603      	mov	r3, r0
 800251e:	460c      	mov	r4, r1
 8002520:	4618      	mov	r0, r3
 8002522:	4621      	mov	r1, r4
 8002524:	f7fe fa72 	bl	8000a0c <__aeabi_d2iz>
 8002528:	4603      	mov	r3, r0
 800252a:	b21b      	sxth	r3, r3
 800252c:	81bb      	strh	r3, [r7, #12]
	  Val[3] = (int16_t)MapValue(Val[3], 0, Val[0], -32768, 32767);
 800252e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002532:	4618      	mov	r0, r3
 8002534:	f7fd ff66 	bl	8000404 <__aeabi_i2d>
 8002538:	4605      	mov	r5, r0
 800253a:	460e      	mov	r6, r1
 800253c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002540:	4618      	mov	r0, r3
 8002542:	f7fd ff5f 	bl	8000404 <__aeabi_i2d>
 8002546:	460a      	mov	r2, r1
 8002548:	4601      	mov	r1, r0
 800254a:	a481      	add	r4, pc, #516	; (adr r4, 8002750 <updateButtons+0x2e0>)
 800254c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002550:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8002554:	f04f 0300 	mov.w	r3, #0
 8002558:	4c82      	ldr	r4, [pc, #520]	; (8002764 <updateButtons+0x2f4>)
 800255a:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800255e:	e9cd 1200 	strd	r1, r2, [sp]
 8002562:	f04f 0200 	mov.w	r2, #0
 8002566:	f04f 0300 	mov.w	r3, #0
 800256a:	4628      	mov	r0, r5
 800256c:	4631      	mov	r1, r6
 800256e:	f7ff fe8b 	bl	8002288 <MapValue>
 8002572:	4603      	mov	r3, r0
 8002574:	460c      	mov	r4, r1
 8002576:	4618      	mov	r0, r3
 8002578:	4621      	mov	r1, r4
 800257a:	f7fe fa47 	bl	8000a0c <__aeabi_d2iz>
 800257e:	4603      	mov	r3, r0
 8002580:	b21b      	sxth	r3, r3
 8002582:	81fb      	strh	r3, [r7, #14]
	  if ((Val[2] <= 3) && (Val[2] >= -3)) Val[2] = 0;
 8002584:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002588:	2b03      	cmp	r3, #3
 800258a:	dc06      	bgt.n	800259a <updateButtons+0x12a>
 800258c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002590:	f113 0f03 	cmn.w	r3, #3
 8002594:	db01      	blt.n	800259a <updateButtons+0x12a>
 8002596:	2300      	movs	r3, #0
 8002598:	81bb      	strh	r3, [r7, #12]
	  if ((Val[3] <= 3) && (Val[3] >= -3)) Val[3] = 0;
 800259a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800259e:	2b03      	cmp	r3, #3
 80025a0:	dc06      	bgt.n	80025b0 <updateButtons+0x140>
 80025a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80025a6:	f113 0f03 	cmn.w	r3, #3
 80025aa:	db01      	blt.n	80025b0 <updateButtons+0x140>
 80025ac:	2300      	movs	r3, #0
 80025ae:	81fb      	strh	r3, [r7, #14]
	  if (Val[1] > 5) Val[1] = 0; else Val[1] = 1;
 80025b0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80025b4:	2b05      	cmp	r3, #5
 80025b6:	dd02      	ble.n	80025be <updateButtons+0x14e>
 80025b8:	2300      	movs	r3, #0
 80025ba:	817b      	strh	r3, [r7, #10]
 80025bc:	e001      	b.n	80025c2 <updateButtons+0x152>
 80025be:	2301      	movs	r3, #1
 80025c0:	817b      	strh	r3, [r7, #10]

	 int16_t Adc[3];
	 AdcRead(Adc);
 80025c2:	463b      	mov	r3, r7
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7ff ff13 	bl	80023f0 <AdcRead>
	 Adc[0] = (int16_t)MapValue(Adc[0], 0, 4095, -32768, 32767);
 80025ca:	f9b7 3000 	ldrsh.w	r3, [r7]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7fd ff18 	bl	8000404 <__aeabi_i2d>
 80025d4:	a45e      	add	r4, pc, #376	; (adr r4, 8002750 <updateButtons+0x2e0>)
 80025d6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80025da:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80025de:	f04f 0300 	mov.w	r3, #0
 80025e2:	4c60      	ldr	r4, [pc, #384]	; (8002764 <updateButtons+0x2f4>)
 80025e4:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80025e8:	a45b      	add	r4, pc, #364	; (adr r4, 8002758 <updateButtons+0x2e8>)
 80025ea:	e9d4 3400 	ldrd	r3, r4, [r4]
 80025ee:	e9cd 3400 	strd	r3, r4, [sp]
 80025f2:	f04f 0200 	mov.w	r2, #0
 80025f6:	f04f 0300 	mov.w	r3, #0
 80025fa:	f7ff fe45 	bl	8002288 <MapValue>
 80025fe:	4603      	mov	r3, r0
 8002600:	460c      	mov	r4, r1
 8002602:	4618      	mov	r0, r3
 8002604:	4621      	mov	r1, r4
 8002606:	f7fe fa01 	bl	8000a0c <__aeabi_d2iz>
 800260a:	4603      	mov	r3, r0
 800260c:	b21b      	sxth	r3, r3
 800260e:	803b      	strh	r3, [r7, #0]
	 Adc[1] = (int16_t)MapValue(Adc[1], 0, 4095, -32768, 32767);
 8002610:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002614:	4618      	mov	r0, r3
 8002616:	f7fd fef5 	bl	8000404 <__aeabi_i2d>
 800261a:	a44d      	add	r4, pc, #308	; (adr r4, 8002750 <updateButtons+0x2e0>)
 800261c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002620:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8002624:	f04f 0300 	mov.w	r3, #0
 8002628:	4c4e      	ldr	r4, [pc, #312]	; (8002764 <updateButtons+0x2f4>)
 800262a:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800262e:	a44a      	add	r4, pc, #296	; (adr r4, 8002758 <updateButtons+0x2e8>)
 8002630:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002634:	e9cd 3400 	strd	r3, r4, [sp]
 8002638:	f04f 0200 	mov.w	r2, #0
 800263c:	f04f 0300 	mov.w	r3, #0
 8002640:	f7ff fe22 	bl	8002288 <MapValue>
 8002644:	4603      	mov	r3, r0
 8002646:	460c      	mov	r4, r1
 8002648:	4618      	mov	r0, r3
 800264a:	4621      	mov	r1, r4
 800264c:	f7fe f9de 	bl	8000a0c <__aeabi_d2iz>
 8002650:	4603      	mov	r3, r0
 8002652:	b21b      	sxth	r3, r3
 8002654:	807b      	strh	r3, [r7, #2]

	  if (HAL_GPIO_ReadPin(BT_POWER_GPIO_Port, BT_POWER_Pin) == GPIO_PIN_SET) Msg[5] += 1;
*/
	  ////////////////////////////////////////////////////////////////////////////////////////////////////
	// btns |rs|, |ls|, |select|, |start|, |dr|, |dl|, |dd|, |du|
	dataToSend[2] = 0;
 8002656:	4b44      	ldr	r3, [pc, #272]	; (8002768 <updateButtons+0x2f8>)
 8002658:	2200      	movs	r2, #0
 800265a:	709a      	strb	r2, [r3, #2]
	dataToSend[2] |= Val[1] << 0;
 800265c:	4b42      	ldr	r3, [pc, #264]	; (8002768 <updateButtons+0x2f8>)
 800265e:	789b      	ldrb	r3, [r3, #2]
 8002660:	b25a      	sxtb	r2, r3
 8002662:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002666:	b25b      	sxtb	r3, r3
 8002668:	4313      	orrs	r3, r2
 800266a:	b25b      	sxtb	r3, r3
 800266c:	b2da      	uxtb	r2, r3
 800266e:	4b3e      	ldr	r3, [pc, #248]	; (8002768 <updateButtons+0x2f8>)
 8002670:	709a      	strb	r2, [r3, #2]
	dataToSend[2] |= !HAL_GPIO_ReadPin(BT_LC_GPIO_Port, BT_LC_Pin) << 1;
 8002672:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002676:	483d      	ldr	r0, [pc, #244]	; (800276c <updateButtons+0x2fc>)
 8002678:	f003 f804 	bl	8005684 <HAL_GPIO_ReadPin>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <updateButtons+0x216>
 8002682:	2102      	movs	r1, #2
 8002684:	e000      	b.n	8002688 <updateButtons+0x218>
 8002686:	2100      	movs	r1, #0
 8002688:	4b37      	ldr	r3, [pc, #220]	; (8002768 <updateButtons+0x2f8>)
 800268a:	789b      	ldrb	r3, [r3, #2]
 800268c:	b25a      	sxtb	r2, r3
 800268e:	b24b      	sxtb	r3, r1
 8002690:	4313      	orrs	r3, r2
 8002692:	b25b      	sxtb	r3, r3
 8002694:	b2da      	uxtb	r2, r3
 8002696:	4b34      	ldr	r3, [pc, #208]	; (8002768 <updateButtons+0x2f8>)
 8002698:	709a      	strb	r2, [r3, #2]
	dataToSend[2] |= !HAL_GPIO_ReadPin(BT_LB_GPIO_Port, BT_LB_Pin) << 2;
 800269a:	2108      	movs	r1, #8
 800269c:	4834      	ldr	r0, [pc, #208]	; (8002770 <updateButtons+0x300>)
 800269e:	f002 fff1 	bl	8005684 <HAL_GPIO_ReadPin>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d101      	bne.n	80026ac <updateButtons+0x23c>
 80026a8:	2104      	movs	r1, #4
 80026aa:	e000      	b.n	80026ae <updateButtons+0x23e>
 80026ac:	2100      	movs	r1, #0
 80026ae:	4b2e      	ldr	r3, [pc, #184]	; (8002768 <updateButtons+0x2f8>)
 80026b0:	789b      	ldrb	r3, [r3, #2]
 80026b2:	b25a      	sxtb	r2, r3
 80026b4:	b24b      	sxtb	r3, r1
 80026b6:	4313      	orrs	r3, r2
 80026b8:	b25b      	sxtb	r3, r3
 80026ba:	b2da      	uxtb	r2, r3
 80026bc:	4b2a      	ldr	r3, [pc, #168]	; (8002768 <updateButtons+0x2f8>)
 80026be:	709a      	strb	r2, [r3, #2]
	dataToSend[2] |= !HAL_GPIO_ReadPin(BT_LD_GPIO_Port, BT_LD_Pin) << 3;
 80026c0:	2102      	movs	r1, #2
 80026c2:	482b      	ldr	r0, [pc, #172]	; (8002770 <updateButtons+0x300>)
 80026c4:	f002 ffde 	bl	8005684 <HAL_GPIO_ReadPin>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d101      	bne.n	80026d2 <updateButtons+0x262>
 80026ce:	2108      	movs	r1, #8
 80026d0:	e000      	b.n	80026d4 <updateButtons+0x264>
 80026d2:	2100      	movs	r1, #0
 80026d4:	4b24      	ldr	r3, [pc, #144]	; (8002768 <updateButtons+0x2f8>)
 80026d6:	789b      	ldrb	r3, [r3, #2]
 80026d8:	b25a      	sxtb	r2, r3
 80026da:	b24b      	sxtb	r3, r1
 80026dc:	4313      	orrs	r3, r2
 80026de:	b25b      	sxtb	r3, r3
 80026e0:	b2da      	uxtb	r2, r3
 80026e2:	4b21      	ldr	r3, [pc, #132]	; (8002768 <updateButtons+0x2f8>)
 80026e4:	709a      	strb	r2, [r3, #2]
	//dataToSend[2] |= (readStart() & 1) << 4;
	//dataToSend[2] |= (readBack()  & 1) << 5;
	//dataToSend[2] |= (Val[1]  & 1) << 6;
	//dataToSend[2] |= (readRS() & 1) << 7;
	// btns |y|, |x|, |b|, |a|, _, _, |rb|, |lb|
	dataToSend[3] = 0;
 80026e6:	4b20      	ldr	r3, [pc, #128]	; (8002768 <updateButtons+0x2f8>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	70da      	strb	r2, [r3, #3]
	dataToSend[3] |= !HAL_GPIO_ReadPin(BT_LA_GPIO_Port, BT_LA_Pin)  & 1 << 0;
 80026ec:	2104      	movs	r1, #4
 80026ee:	4820      	ldr	r0, [pc, #128]	; (8002770 <updateButtons+0x300>)
 80026f0:	f002 ffc8 	bl	8005684 <HAL_GPIO_ReadPin>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	bf0c      	ite	eq
 80026fa:	2301      	moveq	r3, #1
 80026fc:	2300      	movne	r3, #0
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	4619      	mov	r1, r3
 8002702:	4b19      	ldr	r3, [pc, #100]	; (8002768 <updateButtons+0x2f8>)
 8002704:	78db      	ldrb	r3, [r3, #3]
 8002706:	b25a      	sxtb	r2, r3
 8002708:	b24b      	sxtb	r3, r1
 800270a:	4313      	orrs	r3, r2
 800270c:	b25b      	sxtb	r3, r3
 800270e:	b2da      	uxtb	r2, r3
 8002710:	4b15      	ldr	r3, [pc, #84]	; (8002768 <updateButtons+0x2f8>)
 8002712:	70da      	strb	r2, [r3, #3]
	dataToSend[3] |= !HAL_GPIO_ReadPin(BT_RA_GPIO_Port, BT_RA_Pin) << 1;
 8002714:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002718:	4815      	ldr	r0, [pc, #84]	; (8002770 <updateButtons+0x300>)
 800271a:	f002 ffb3 	bl	8005684 <HAL_GPIO_ReadPin>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d101      	bne.n	8002728 <updateButtons+0x2b8>
 8002724:	2102      	movs	r1, #2
 8002726:	e000      	b.n	800272a <updateButtons+0x2ba>
 8002728:	2100      	movs	r1, #0
 800272a:	4b0f      	ldr	r3, [pc, #60]	; (8002768 <updateButtons+0x2f8>)
 800272c:	78db      	ldrb	r3, [r3, #3]
 800272e:	b25a      	sxtb	r2, r3
 8002730:	b24b      	sxtb	r3, r1
 8002732:	4313      	orrs	r3, r2
 8002734:	b25b      	sxtb	r3, r3
 8002736:	b2da      	uxtb	r2, r3
 8002738:	4b0b      	ldr	r3, [pc, #44]	; (8002768 <updateButtons+0x2f8>)
 800273a:	70da      	strb	r2, [r3, #3]
	//dataToSend[3] |= (Val[1] & 1) << 2;
	//dataToSend[3] |= (Val[1] & 1) << 3;
	dataToSend[3] |= !HAL_GPIO_ReadPin(BT_RC_GPIO_Port, BT_RC_Pin) << 4;
 800273c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002740:	480b      	ldr	r0, [pc, #44]	; (8002770 <updateButtons+0x300>)
 8002742:	f002 ff9f 	bl	8005684 <HAL_GPIO_ReadPin>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d113      	bne.n	8002774 <updateButtons+0x304>
 800274c:	2110      	movs	r1, #16
 800274e:	e012      	b.n	8002776 <updateButtons+0x306>
 8002750:	00000000 	.word	0x00000000
 8002754:	40dfffc0 	.word	0x40dfffc0
 8002758:	00000000 	.word	0x00000000
 800275c:	40affe00 	.word	0x40affe00
 8002760:	40240000 	.word	0x40240000
 8002764:	c0e00000 	.word	0xc0e00000
 8002768:	20000010 	.word	0x20000010
 800276c:	40010800 	.word	0x40010800
 8002770:	40010c00 	.word	0x40010c00
 8002774:	2100      	movs	r1, #0
 8002776:	4b3f      	ldr	r3, [pc, #252]	; (8002874 <updateButtons+0x404>)
 8002778:	78db      	ldrb	r3, [r3, #3]
 800277a:	b25a      	sxtb	r2, r3
 800277c:	b24b      	sxtb	r3, r1
 800277e:	4313      	orrs	r3, r2
 8002780:	b25b      	sxtb	r3, r3
 8002782:	b2da      	uxtb	r2, r3
 8002784:	4b3b      	ldr	r3, [pc, #236]	; (8002874 <updateButtons+0x404>)
 8002786:	70da      	strb	r2, [r3, #3]
	dataToSend[3] |= !HAL_GPIO_ReadPin(BT_RB_GPIO_Port, BT_RB_Pin) << 5;
 8002788:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800278c:	483a      	ldr	r0, [pc, #232]	; (8002878 <updateButtons+0x408>)
 800278e:	f002 ff79 	bl	8005684 <HAL_GPIO_ReadPin>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d101      	bne.n	800279c <updateButtons+0x32c>
 8002798:	2120      	movs	r1, #32
 800279a:	e000      	b.n	800279e <updateButtons+0x32e>
 800279c:	2100      	movs	r1, #0
 800279e:	4b35      	ldr	r3, [pc, #212]	; (8002874 <updateButtons+0x404>)
 80027a0:	78db      	ldrb	r3, [r3, #3]
 80027a2:	b25a      	sxtb	r2, r3
 80027a4:	b24b      	sxtb	r3, r1
 80027a6:	4313      	orrs	r3, r2
 80027a8:	b25b      	sxtb	r3, r3
 80027aa:	b2da      	uxtb	r2, r3
 80027ac:	4b31      	ldr	r3, [pc, #196]	; (8002874 <updateButtons+0x404>)
 80027ae:	70da      	strb	r2, [r3, #3]
	dataToSend[3] |= !HAL_GPIO_ReadPin(BT_RD_GPIO_Port, BT_RD_Pin) << 6;
 80027b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027b4:	4831      	ldr	r0, [pc, #196]	; (800287c <updateButtons+0x40c>)
 80027b6:	f002 ff65 	bl	8005684 <HAL_GPIO_ReadPin>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d101      	bne.n	80027c4 <updateButtons+0x354>
 80027c0:	2140      	movs	r1, #64	; 0x40
 80027c2:	e000      	b.n	80027c6 <updateButtons+0x356>
 80027c4:	2100      	movs	r1, #0
 80027c6:	4b2b      	ldr	r3, [pc, #172]	; (8002874 <updateButtons+0x404>)
 80027c8:	78db      	ldrb	r3, [r3, #3]
 80027ca:	b25a      	sxtb	r2, r3
 80027cc:	b24b      	sxtb	r3, r1
 80027ce:	4313      	orrs	r3, r2
 80027d0:	b25b      	sxtb	r3, r3
 80027d2:	b2da      	uxtb	r2, r3
 80027d4:	4b27      	ldr	r3, [pc, #156]	; (8002874 <updateButtons+0x404>)
 80027d6:	70da      	strb	r2, [r3, #3]
	dataToSend[3] |= !HAL_GPIO_ReadPin(BT_RS_GPIO_Port, BT_RS_Pin) << 7;
 80027d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027dc:	4826      	ldr	r0, [pc, #152]	; (8002878 <updateButtons+0x408>)
 80027de:	f002 ff51 	bl	8005684 <HAL_GPIO_ReadPin>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d101      	bne.n	80027ec <updateButtons+0x37c>
 80027e8:	2180      	movs	r1, #128	; 0x80
 80027ea:	e000      	b.n	80027ee <updateButtons+0x37e>
 80027ec:	2100      	movs	r1, #0
 80027ee:	4b21      	ldr	r3, [pc, #132]	; (8002874 <updateButtons+0x404>)
 80027f0:	78db      	ldrb	r3, [r3, #3]
 80027f2:	b25a      	sxtb	r2, r3
 80027f4:	b24b      	sxtb	r3, r1
 80027f6:	4313      	orrs	r3, r2
 80027f8:	b25b      	sxtb	r3, r3
 80027fa:	b2da      	uxtb	r2, r3
 80027fc:	4b1d      	ldr	r3, [pc, #116]	; (8002874 <updateButtons+0x404>)
 80027fe:	70da      	strb	r2, [r3, #3]
	// left & right triggers
	dataToSend[4] = 0; //left
 8002800:	4b1c      	ldr	r3, [pc, #112]	; (8002874 <updateButtons+0x404>)
 8002802:	2200      	movs	r2, #0
 8002804:	711a      	strb	r2, [r3, #4]
	dataToSend[5] = 0; //right
 8002806:	4b1b      	ldr	r3, [pc, #108]	; (8002874 <updateButtons+0x404>)
 8002808:	2200      	movs	r2, #0
 800280a:	715a      	strb	r2, [r3, #5]
	//lx
	dataToSend[6] = Val[3] & 0xFF;
 800280c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002810:	b2da      	uxtb	r2, r3
 8002812:	4b18      	ldr	r3, [pc, #96]	; (8002874 <updateButtons+0x404>)
 8002814:	719a      	strb	r2, [r3, #6]
	dataToSend[7] = (Val[3] >> 8) & 0xFF;
 8002816:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800281a:	121b      	asrs	r3, r3, #8
 800281c:	b21b      	sxth	r3, r3
 800281e:	b2da      	uxtb	r2, r3
 8002820:	4b14      	ldr	r3, [pc, #80]	; (8002874 <updateButtons+0x404>)
 8002822:	71da      	strb	r2, [r3, #7]
	// ly
	dataToSend[8] = Val[2] & 0xFF;
 8002824:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002828:	b2da      	uxtb	r2, r3
 800282a:	4b12      	ldr	r3, [pc, #72]	; (8002874 <updateButtons+0x404>)
 800282c:	721a      	strb	r2, [r3, #8]
	dataToSend[9] = (Val[2] >> 8) & 0xFF;
 800282e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002832:	121b      	asrs	r3, r3, #8
 8002834:	b21b      	sxth	r3, r3
 8002836:	b2da      	uxtb	r2, r3
 8002838:	4b0e      	ldr	r3, [pc, #56]	; (8002874 <updateButtons+0x404>)
 800283a:	725a      	strb	r2, [r3, #9]
	// rx
	dataToSend[10] = Adc[1] & 0xFF;
 800283c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002840:	b2da      	uxtb	r2, r3
 8002842:	4b0c      	ldr	r3, [pc, #48]	; (8002874 <updateButtons+0x404>)
 8002844:	729a      	strb	r2, [r3, #10]
	dataToSend[11] = (Adc[1] >> 8) & 0xFF;
 8002846:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800284a:	121b      	asrs	r3, r3, #8
 800284c:	b21b      	sxth	r3, r3
 800284e:	b2da      	uxtb	r2, r3
 8002850:	4b08      	ldr	r3, [pc, #32]	; (8002874 <updateButtons+0x404>)
 8002852:	72da      	strb	r2, [r3, #11]
	// ry
	dataToSend[12] = Adc[0] & 0xFF;
 8002854:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002858:	b2da      	uxtb	r2, r3
 800285a:	4b06      	ldr	r3, [pc, #24]	; (8002874 <updateButtons+0x404>)
 800285c:	731a      	strb	r2, [r3, #12]
	dataToSend[13] = (Adc[0] >> 8) & 0xFF;
 800285e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002862:	121b      	asrs	r3, r3, #8
 8002864:	b21b      	sxth	r3, r3
 8002866:	b2da      	uxtb	r2, r3
 8002868:	4b02      	ldr	r3, [pc, #8]	; (8002874 <updateButtons+0x404>)
 800286a:	735a      	strb	r2, [r3, #13]
}
 800286c:	bf00      	nop
 800286e:	3714      	adds	r7, #20
 8002870:	46bd      	mov	sp, r7
 8002872:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002874:	20000010 	.word	0x20000010
 8002878:	40010c00 	.word	0x40010c00
 800287c:	40010800 	.word	0x40010800

08002880 <UlToStr>:

void UlToStr(char *s, unsigned long bin, unsigned char n)
{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	4613      	mov	r3, r2
 800288c:	71fb      	strb	r3, [r7, #7]
    s += n;
 800288e:	79fb      	ldrb	r3, [r7, #7]
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	4413      	add	r3, r2
 8002894:	60fb      	str	r3, [r7, #12]
    *s = '\0';
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	701a      	strb	r2, [r3, #0]

    while (n--)
 800289c:	e017      	b.n	80028ce <UlToStr+0x4e>
    {
        *--s = (bin % 10) + '0';
 800289e:	68b9      	ldr	r1, [r7, #8]
 80028a0:	4b10      	ldr	r3, [pc, #64]	; (80028e4 <UlToStr+0x64>)
 80028a2:	fba3 2301 	umull	r2, r3, r3, r1
 80028a6:	08da      	lsrs	r2, r3, #3
 80028a8:	4613      	mov	r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	4413      	add	r3, r2
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	1aca      	subs	r2, r1, r3
 80028b2:	b2d3      	uxtb	r3, r2
 80028b4:	68fa      	ldr	r2, [r7, #12]
 80028b6:	3a01      	subs	r2, #1
 80028b8:	60fa      	str	r2, [r7, #12]
 80028ba:	3330      	adds	r3, #48	; 0x30
 80028bc:	b2da      	uxtb	r2, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	701a      	strb	r2, [r3, #0]
        bin /= 10;
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	4a07      	ldr	r2, [pc, #28]	; (80028e4 <UlToStr+0x64>)
 80028c6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ca:	08db      	lsrs	r3, r3, #3
 80028cc:	60bb      	str	r3, [r7, #8]
    while (n--)
 80028ce:	79fb      	ldrb	r3, [r7, #7]
 80028d0:	1e5a      	subs	r2, r3, #1
 80028d2:	71fa      	strb	r2, [r7, #7]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1e2      	bne.n	800289e <UlToStr+0x1e>
    }
}
 80028d8:	bf00      	nop
 80028da:	3714      	adds	r7, #20
 80028dc:	46bd      	mov	sp, r7
 80028de:	bc80      	pop	{r7}
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	cccccccd 	.word	0xcccccccd

080028e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028ea:	b0a5      	sub	sp, #148	; 0x94
 80028ec:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028ee:	f001 fee5 	bl	80046bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028f2:	f000 fcf7 	bl	80032e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028f6:	f000 fef1 	bl	80036dc <MX_GPIO_Init>
  MX_ADC1_Init();
 80028fa:	f000 fd51 	bl	80033a0 <MX_ADC1_Init>
  MX_I2C1_Init();
 80028fe:	f000 fdaf 	bl	8003460 <MX_I2C1_Init>
  MX_I2C2_Init();
 8002902:	f000 fddb 	bl	80034bc <MX_I2C2_Init>
  MX_SPI1_Init();
 8002906:	f000 fe07 	bl	8003518 <MX_SPI1_Init>
  MX_TIM3_Init();
 800290a:	f000 fe3b 	bl	8003584 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800290e:	f000 fe91 	bl	8003634 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002912:	f000 feb9 	bl	8003688 <MX_USART2_UART_Init>
  //MX_USB_DEVICE_Init();
  /* USER CODE BEGIN 2 */
  my_MX_USB_DEVICE_Init();
 8002916:	f009 f879 	bl	800ba0c <my_MX_USB_DEVICE_Init>
  IsHID = 1;
 800291a:	4b8d      	ldr	r3, [pc, #564]	; (8002b50 <main+0x268>)
 800291c:	2201      	movs	r2, #1
 800291e:	601a      	str	r2, [r3, #0]

  I2C_ClearBusyFlagErratum(&hi2c1, 1000);
 8002920:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002924:	488b      	ldr	r0, [pc, #556]	; (8002b54 <main+0x26c>)
 8002926:	f7ff fc13 	bl	8002150 <I2C_ClearBusyFlagErratum>
  __HAL_RCC_I2C1_FORCE_RESET();
 800292a:	4b8b      	ldr	r3, [pc, #556]	; (8002b58 <main+0x270>)
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	4a8a      	ldr	r2, [pc, #552]	; (8002b58 <main+0x270>)
 8002930:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002934:	6113      	str	r3, [r2, #16]
  __HAL_RCC_I2C1_RELEASE_RESET();
 8002936:	4b88      	ldr	r3, [pc, #544]	; (8002b58 <main+0x270>)
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	4a87      	ldr	r2, [pc, #540]	; (8002b58 <main+0x270>)
 800293c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002940:	6113      	str	r3, [r2, #16]
  MX_I2C1_Init();
 8002942:	f000 fd8d 	bl	8003460 <MX_I2C1_Init>
  __HAL_RCC_I2C1_FORCE_RESET();
 8002946:	4b84      	ldr	r3, [pc, #528]	; (8002b58 <main+0x270>)
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	4a83      	ldr	r2, [pc, #524]	; (8002b58 <main+0x270>)
 800294c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002950:	6113      	str	r3, [r2, #16]
  __HAL_RCC_I2C1_RELEASE_RESET();
 8002952:	4b81      	ldr	r3, [pc, #516]	; (8002b58 <main+0x270>)
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	4a80      	ldr	r2, [pc, #512]	; (8002b58 <main+0x270>)
 8002958:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800295c:	6113      	str	r3, [r2, #16]
  MX_I2C1_Init();
 800295e:	f000 fd7f 	bl	8003460 <MX_I2C1_Init>

  //I2C_ClearBusyFlagErratum2(&hi2c2, 1000);
  __HAL_RCC_I2C2_FORCE_RESET();
 8002962:	4b7d      	ldr	r3, [pc, #500]	; (8002b58 <main+0x270>)
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	4a7c      	ldr	r2, [pc, #496]	; (8002b58 <main+0x270>)
 8002968:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800296c:	6113      	str	r3, [r2, #16]
  __HAL_RCC_I2C2_RELEASE_RESET();
 800296e:	4b7a      	ldr	r3, [pc, #488]	; (8002b58 <main+0x270>)
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	4a79      	ldr	r2, [pc, #484]	; (8002b58 <main+0x270>)
 8002974:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002978:	6113      	str	r3, [r2, #16]
  MX_I2C2_Init();
 800297a:	f000 fd9f 	bl	80034bc <MX_I2C2_Init>
  __HAL_RCC_I2C2_FORCE_RESET();
 800297e:	4b76      	ldr	r3, [pc, #472]	; (8002b58 <main+0x270>)
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	4a75      	ldr	r2, [pc, #468]	; (8002b58 <main+0x270>)
 8002984:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002988:	6113      	str	r3, [r2, #16]
  __HAL_RCC_I2C2_RELEASE_RESET();
 800298a:	4b73      	ldr	r3, [pc, #460]	; (8002b58 <main+0x270>)
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	4a72      	ldr	r2, [pc, #456]	; (8002b58 <main+0x270>)
 8002990:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002994:	6113      	str	r3, [r2, #16]
  MX_I2C2_Init();
 8002996:	f000 fd91 	bl	80034bc <MX_I2C2_Init>

  NRF24_begin(CSN_GPIO_Port, CSN_Pin, CE_Pin, hspi1);
 800299a:	4c70      	ldr	r4, [pc, #448]	; (8002b5c <main+0x274>)
 800299c:	4668      	mov	r0, sp
 800299e:	1d23      	adds	r3, r4, #4
 80029a0:	2254      	movs	r2, #84	; 0x54
 80029a2:	4619      	mov	r1, r3
 80029a4:	f009 fc78 	bl	800c298 <memcpy>
 80029a8:	6823      	ldr	r3, [r4, #0]
 80029aa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80029ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80029b2:	486b      	ldr	r0, [pc, #428]	; (8002b60 <main+0x278>)
 80029b4:	f7fe f99a 	bl	8000cec <NRF24_begin>

  NRF24_setAutoAck(true);
 80029b8:	2001      	movs	r0, #1
 80029ba:	f7fe fbe1 	bl	8001180 <NRF24_setAutoAck>
  NRF24_setChannel(52);
 80029be:	2034      	movs	r0, #52	; 0x34
 80029c0:	f7fe fb29 	bl	8001016 <NRF24_setChannel>
  NRF24_setPayloadSize(13);
 80029c4:	200d      	movs	r0, #13
 80029c6:	f7fe fb3b 	bl	8001040 <NRF24_setPayloadSize>
  NRF24_openReadingPipe(1, PipeAddres);
 80029ca:	4b66      	ldr	r3, [pc, #408]	; (8002b64 <main+0x27c>)
 80029cc:	cb18      	ldmia	r3, {r3, r4}
 80029ce:	461a      	mov	r2, r3
 80029d0:	4623      	mov	r3, r4
 80029d2:	2001      	movs	r0, #1
 80029d4:	f7fe fab6 	bl	8000f44 <NRF24_openReadingPipe>
  NRF24_enableDynamicPayloads();
 80029d8:	f7fe fb88 	bl	80010ec <NRF24_enableDynamicPayloads>
  NRF24_enableAckPayload();
 80029dc:	f7fe fb58 	bl	8001090 <NRF24_enableAckPayload>
  NRF24_startListening();
 80029e0:	f7fe fa64 	bl	8000eac <NRF24_startListening>

  //HAL_I2C_Init(&hi2c1);

  MPU6050_Init(&hi2c1);
 80029e4:	485b      	ldr	r0, [pc, #364]	; (8002b54 <main+0x26c>)
 80029e6:	f7ff f9a5 	bl	8001d34 <MPU6050_Init>

  MpuConfig.Accel_Full_Scale = AFS_SEL_4g;
 80029ea:	2301      	movs	r3, #1
 80029ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  MpuConfig.ClockSource = Internal_8MHz;
 80029f0:	2300      	movs	r3, #0
 80029f2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MpuConfig.CONFIG_DLPF = DLPF_184A_188G_Hz;
 80029f6:	2301      	movs	r3, #1
 80029f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  MpuConfig.Gyro_Full_Scale = FS_SEL_500;
 80029fc:	2301      	movs	r3, #1
 80029fe:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  MpuConfig.Sleep_Mode_Bit = 0;
 8002a02:	2300      	movs	r3, #0
 8002a04:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  MPU6050_Config(&MpuConfig);
 8002a08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff f9e7 	bl	8001de0 <MPU6050_Config>


	lcd_init ();
 8002a12:	f7ff fb4b 	bl	80020ac <lcd_init>
	uint8_t check = SSD1306_Init ();
 8002a16:	f001 f8c5 	bl	8003ba4 <SSD1306_Init>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	SSD1306_Fill (0);
 8002a20:	2000      	movs	r0, #0
 8002a22:	f001 f9ab 	bl	8003d7c <SSD1306_Fill>
	SSD1306_UpdateScreen(); //display
 8002a26:	f001 f97b 	bl	8003d20 <SSD1306_UpdateScreen>
	SSD1306_GotoXY (10,10);
 8002a2a:	210a      	movs	r1, #10
 8002a2c:	200a      	movs	r0, #10
 8002a2e:	f001 fa1b 	bl	8003e68 <SSD1306_GotoXY>
	SSD1306_Puts ("HELLO", &Font_11x18, 1);
 8002a32:	2201      	movs	r2, #1
 8002a34:	494c      	ldr	r1, [pc, #304]	; (8002b68 <main+0x280>)
 8002a36:	484d      	ldr	r0, [pc, #308]	; (8002b6c <main+0x284>)
 8002a38:	f001 faac 	bl	8003f94 <SSD1306_Puts>
	SSD1306_GotoXY (10, 30);
 8002a3c:	211e      	movs	r1, #30
 8002a3e:	200a      	movs	r0, #10
 8002a40:	f001 fa12 	bl	8003e68 <SSD1306_GotoXY>
	SSD1306_Puts ("WORLD !!", &Font_11x18, 1);
 8002a44:	2201      	movs	r2, #1
 8002a46:	4948      	ldr	r1, [pc, #288]	; (8002b68 <main+0x280>)
 8002a48:	4849      	ldr	r0, [pc, #292]	; (8002b70 <main+0x288>)
 8002a4a:	f001 faa3 	bl	8003f94 <SSD1306_Puts>
	SSD1306_UpdateScreen(); //display
 8002a4e:	f001 f967 	bl	8003d20 <SSD1306_UpdateScreen>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  while (IsHID)
 8002a52:	e035      	b.n	8002ac0 <main+0x1d8>
	   {
			updateButtons();
 8002a54:	f7ff fd0c 	bl	8002470 <updateButtons>
			USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 20);
 8002a58:	2214      	movs	r2, #20
 8002a5a:	4946      	ldr	r1, [pc, #280]	; (8002b74 <main+0x28c>)
 8002a5c:	4846      	ldr	r0, [pc, #280]	; (8002b78 <main+0x290>)
 8002a5e:	f000 fff7 	bl	8003a50 <USBD_CUSTOM_HID_SendReport>
			HAL_Delay(10);
 8002a62:	200a      	movs	r0, #10
 8002a64:	f001 fe8c 	bl	8004780 <HAL_Delay>

			int16_t Val[4];
			//AdsRead(Val);
			//Val[1] = (int16_t)MapValue(Val[1], 0, Val[0], 0, 10);
			Val[1] = HAL_GPIO_ReadPin(BT_POWER_GPIO_Port, BT_POWER_Pin);
 8002a68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a6c:	4843      	ldr	r0, [pc, #268]	; (8002b7c <main+0x294>)
 8002a6e:	f002 fe09 	bl	8005684 <HAL_GPIO_ReadPin>
 8002a72:	4603      	mov	r3, r0
 8002a74:	b21b      	sxth	r3, r3
 8002a76:	847b      	strh	r3, [r7, #34]	; 0x22
			char s[5];
			UlToStr(s, Val[1], 5);
 8002a78:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	f107 0318 	add.w	r3, r7, #24
 8002a82:	2205      	movs	r2, #5
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7ff fefb 	bl	8002880 <UlToStr>
			SSD1306_Fill (0);
 8002a8a:	2000      	movs	r0, #0
 8002a8c:	f001 f976 	bl	8003d7c <SSD1306_Fill>
			SSD1306_UpdateScreen(); //display
 8002a90:	f001 f946 	bl	8003d20 <SSD1306_UpdateScreen>
			SSD1306_GotoXY (10,10);
 8002a94:	210a      	movs	r1, #10
 8002a96:	200a      	movs	r0, #10
 8002a98:	f001 f9e6 	bl	8003e68 <SSD1306_GotoXY>
			SSD1306_Puts (s, &Font_11x18, 1);
 8002a9c:	f107 0318 	add.w	r3, r7, #24
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	4931      	ldr	r1, [pc, #196]	; (8002b68 <main+0x280>)
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f001 fa75 	bl	8003f94 <SSD1306_Puts>
			SSD1306_GotoXY (10, 30);
 8002aaa:	211e      	movs	r1, #30
 8002aac:	200a      	movs	r0, #10
 8002aae:	f001 f9db 	bl	8003e68 <SSD1306_GotoXY>
			SSD1306_Puts ("WORLD !!", &Font_11x18, 1);
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	492c      	ldr	r1, [pc, #176]	; (8002b68 <main+0x280>)
 8002ab6:	482e      	ldr	r0, [pc, #184]	; (8002b70 <main+0x288>)
 8002ab8:	f001 fa6c 	bl	8003f94 <SSD1306_Puts>
			SSD1306_UpdateScreen(); //display
 8002abc:	f001 f930 	bl	8003d20 <SSD1306_UpdateScreen>
	  while (IsHID)
 8002ac0:	4b23      	ldr	r3, [pc, #140]	; (8002b50 <main+0x268>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1c5      	bne.n	8002a54 <main+0x16c>

	   }
	  if (NRF24_available()){
 8002ac8:	f7fe fa14 	bl	8000ef4 <NRF24_available>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f000 8125 	beq.w	8002d1e <main+0x436>
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002ad4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ad8:	4821      	ldr	r0, [pc, #132]	; (8002b60 <main+0x278>)
 8002ada:	f002 fe02 	bl	80056e2 <HAL_GPIO_TogglePin>
		  NRF24_read(RF_RxData, 13);
 8002ade:	210d      	movs	r1, #13
 8002ae0:	4827      	ldr	r0, [pc, #156]	; (8002b80 <main+0x298>)
 8002ae2:	f7fe fa0f 	bl	8000f04 <NRF24_read>
		  Serial_Send(RF_RxData, 13);
 8002ae6:	210d      	movs	r1, #13
 8002ae8:	4825      	ldr	r0, [pc, #148]	; (8002b80 <main+0x298>)
 8002aea:	f7ff faef 	bl	80020cc <Serial_Send>
		  NRF24_writeAckPayload(1, RF_TxData, 16);
 8002aee:	2210      	movs	r2, #16
 8002af0:	4924      	ldr	r1, [pc, #144]	; (8002b84 <main+0x29c>)
 8002af2:	2001      	movs	r0, #1
 8002af4:	f7fe fc3f 	bl	8001376 <NRF24_writeAckPayload>
// BARDZO ISTOTNE, I2C i NRF ZAKLUCAJA SIE JAKOS, DLA TEGO DANE ZBIERAMY PO TRANSMISJI NRF
// ZAKLUCENIA NADAL WYSTEPUJA ALE ZADZIEJ, JE WYELIMINOWAC TRZEBA INACZEJ ??
		  // Ustawienie funkcji
		  RF_TxData[0] = 0;
 8002af8:	4b22      	ldr	r3, [pc, #136]	; (8002b84 <main+0x29c>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	701a      	strb	r2, [r3, #0]
		  int16_t Val[4];
		  if (Flag[3] == 1) {
 8002afe:	4b22      	ldr	r3, [pc, #136]	; (8002b88 <main+0x2a0>)
 8002b00:	78db      	ldrb	r3, [r3, #3]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	f040 810b 	bne.w	8002d1e <main+0x436>
			  // Ustawienie funkcji
			  RF_TxData[0] = FUNC_JOYSTICK_DATA;
 8002b08:	4b1e      	ldr	r3, [pc, #120]	; (8002b84 <main+0x29c>)
 8002b0a:	2281      	movs	r2, #129	; 0x81
 8002b0c:	701a      	strb	r2, [r3, #0]
			  // Odczyt z ADS1115
			  for (int a = 0; a < 4; a++){
 8002b0e:	2300      	movs	r3, #0
 8002b10:	637b      	str	r3, [r7, #52]	; 0x34
 8002b12:	e075      	b.n	8002c00 <main+0x318>
				  ADSwrite[0] = 0x01;
 8002b14:	4b1d      	ldr	r3, [pc, #116]	; (8002b8c <main+0x2a4>)
 8002b16:	2201      	movs	r2, #1
 8002b18:	701a      	strb	r2, [r3, #0]
				  switch(a){
 8002b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b1c:	2b03      	cmp	r3, #3
 8002b1e:	d83b      	bhi.n	8002b98 <main+0x2b0>
 8002b20:	a201      	add	r2, pc, #4	; (adr r2, 8002b28 <main+0x240>)
 8002b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b26:	bf00      	nop
 8002b28:	08002b39 	.word	0x08002b39
 8002b2c:	08002b41 	.word	0x08002b41
 8002b30:	08002b49 	.word	0x08002b49
 8002b34:	08002b91 	.word	0x08002b91
				  case 0: {
					  ADSwrite[1] = 0xC1; // 11000011
 8002b38:	4b14      	ldr	r3, [pc, #80]	; (8002b8c <main+0x2a4>)
 8002b3a:	22c1      	movs	r2, #193	; 0xc1
 8002b3c:	705a      	strb	r2, [r3, #1]
					  break;
 8002b3e:	e02b      	b.n	8002b98 <main+0x2b0>
				  }
				  case 1: {
					  ADSwrite[1] = 0xD1; // 11010011
 8002b40:	4b12      	ldr	r3, [pc, #72]	; (8002b8c <main+0x2a4>)
 8002b42:	22d1      	movs	r2, #209	; 0xd1
 8002b44:	705a      	strb	r2, [r3, #1]
					  break;
 8002b46:	e027      	b.n	8002b98 <main+0x2b0>
				  }
				  case 2: {
					  ADSwrite[1] = 0xE1; // 11100011
 8002b48:	4b10      	ldr	r3, [pc, #64]	; (8002b8c <main+0x2a4>)
 8002b4a:	22e1      	movs	r2, #225	; 0xe1
 8002b4c:	705a      	strb	r2, [r3, #1]
					  break;
 8002b4e:	e023      	b.n	8002b98 <main+0x2b0>
 8002b50:	20000340 	.word	0x20000340
 8002b54:	2000098c 	.word	0x2000098c
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	20000b3c 	.word	0x20000b3c
 8002b60:	40011000 	.word	0x40011000
 8002b64:	20000008 	.word	0x20000008
 8002b68:	20000000 	.word	0x20000000
 8002b6c:	0800d02c 	.word	0x0800d02c
 8002b70:	0800d034 	.word	0x0800d034
 8002b74:	20000010 	.word	0x20000010
 8002b78:	20000be0 	.word	0x20000be0
 8002b7c:	40010c00 	.word	0x40010c00
 8002b80:	20000acc 	.word	0x20000acc
 8002b84:	20000a7c 	.word	0x20000a7c
 8002b88:	20000338 	.word	0x20000338
 8002b8c:	20000b2c 	.word	0x20000b2c
				  }
				  case 3: {
					  ADSwrite[1] = 0xF1; // 11110011
 8002b90:	4bb9      	ldr	r3, [pc, #740]	; (8002e78 <main+0x590>)
 8002b92:	22f1      	movs	r2, #241	; 0xf1
 8002b94:	705a      	strb	r2, [r3, #1]
					  break;
 8002b96:	bf00      	nop
				  __HAL_RCC_I2C2_FORCE_RESET();
				  __HAL_RCC_I2C2_RELEASE_RESET();
				  MX_I2C2_Init();*/


				  ADSwrite[2] = 0xE3; // 10000011 // 10100011 // 11000011// 11100011
 8002b98:	4bb7      	ldr	r3, [pc, #732]	; (8002e78 <main+0x590>)
 8002b9a:	22e3      	movs	r2, #227	; 0xe3
 8002b9c:	709a      	strb	r2, [r3, #2]
				  HAL_I2C_Master_Transmit(&hi2c2, ADS1115_ADDRESS<<1, ADSwrite, 3, 100);
 8002b9e:	2364      	movs	r3, #100	; 0x64
 8002ba0:	9300      	str	r3, [sp, #0]
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	4ab4      	ldr	r2, [pc, #720]	; (8002e78 <main+0x590>)
 8002ba6:	2190      	movs	r1, #144	; 0x90
 8002ba8:	48b4      	ldr	r0, [pc, #720]	; (8002e7c <main+0x594>)
 8002baa:	f002 ff0b 	bl	80059c4 <HAL_I2C_Master_Transmit>
				  ADSwrite[0] = 0x00;
 8002bae:	4bb2      	ldr	r3, [pc, #712]	; (8002e78 <main+0x590>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	701a      	strb	r2, [r3, #0]
				  HAL_I2C_Master_Transmit(&hi2c2, ADS1115_ADDRESS<<1, ADSwrite, 1, 100);
 8002bb4:	2364      	movs	r3, #100	; 0x64
 8002bb6:	9300      	str	r3, [sp, #0]
 8002bb8:	2301      	movs	r3, #1
 8002bba:	4aaf      	ldr	r2, [pc, #700]	; (8002e78 <main+0x590>)
 8002bbc:	2190      	movs	r1, #144	; 0x90
 8002bbe:	48af      	ldr	r0, [pc, #700]	; (8002e7c <main+0x594>)
 8002bc0:	f002 ff00 	bl	80059c4 <HAL_I2C_Master_Transmit>
				  //HAL_Delay(1);
				  NRF24_DelayMicroSeconds(100);
 8002bc4:	2064      	movs	r0, #100	; 0x64
 8002bc6:	f7fd ff49 	bl	8000a5c <NRF24_DelayMicroSeconds>
				  HAL_I2C_Master_Receive(&hi2c2, ADS1115_ADDRESS<<1, ADSwrite, 2, 100);
 8002bca:	2364      	movs	r3, #100	; 0x64
 8002bcc:	9300      	str	r3, [sp, #0]
 8002bce:	2302      	movs	r3, #2
 8002bd0:	4aa9      	ldr	r2, [pc, #676]	; (8002e78 <main+0x590>)
 8002bd2:	2190      	movs	r1, #144	; 0x90
 8002bd4:	48a9      	ldr	r0, [pc, #676]	; (8002e7c <main+0x594>)
 8002bd6:	f002 fff3 	bl	8005bc0 <HAL_I2C_Master_Receive>

				  //RF_TxData[1 + a*2] = ADSwrite[1];
				  //RF_TxData[1 + a*2 + 1] = ADSwrite[0];
				  Val[a] = (((int16_t)ADSwrite[0]) << 8 | ADSwrite[1]);
 8002bda:	4ba7      	ldr	r3, [pc, #668]	; (8002e78 <main+0x590>)
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	021b      	lsls	r3, r3, #8
 8002be0:	b21a      	sxth	r2, r3
 8002be2:	4ba5      	ldr	r3, [pc, #660]	; (8002e78 <main+0x590>)
 8002be4:	785b      	ldrb	r3, [r3, #1]
 8002be6:	b21b      	sxth	r3, r3
 8002be8:	4313      	orrs	r3, r2
 8002bea:	b21a      	sxth	r2, r3
 8002bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002bf4:	440b      	add	r3, r1
 8002bf6:	f823 2c28 	strh.w	r2, [r3, #-40]
			  for (int a = 0; a < 4; a++){
 8002bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	637b      	str	r3, [r7, #52]	; 0x34
 8002c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c02:	2b03      	cmp	r3, #3
 8002c04:	dd86      	ble.n	8002b14 <main+0x22c>
				}
			  //Val[1] = (int16_t)MapValue(Val[1], 0, Val[0], -1023, 1023);
			  Val[2] = (int16_t)MapValue(Val[2], 0, Val[0], -1023, 1023) - 22;
 8002c06:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7fd fbfa 	bl	8000404 <__aeabi_i2d>
 8002c10:	4605      	mov	r5, r0
 8002c12:	460e      	mov	r6, r1
 8002c14:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7fd fbf3 	bl	8000404 <__aeabi_i2d>
 8002c1e:	460a      	mov	r2, r1
 8002c20:	4601      	mov	r1, r0
 8002c22:	a491      	add	r4, pc, #580	; (adr r4, 8002e68 <main+0x580>)
 8002c24:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002c28:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8002c2c:	a490      	add	r4, pc, #576	; (adr r4, 8002e70 <main+0x588>)
 8002c2e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002c32:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8002c36:	e9cd 1200 	strd	r1, r2, [sp]
 8002c3a:	f04f 0200 	mov.w	r2, #0
 8002c3e:	f04f 0300 	mov.w	r3, #0
 8002c42:	4628      	mov	r0, r5
 8002c44:	4631      	mov	r1, r6
 8002c46:	f7ff fb1f 	bl	8002288 <MapValue>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	460c      	mov	r4, r1
 8002c4e:	4618      	mov	r0, r3
 8002c50:	4621      	mov	r1, r4
 8002c52:	f7fd fedb 	bl	8000a0c <__aeabi_d2iz>
 8002c56:	4603      	mov	r3, r0
 8002c58:	b21b      	sxth	r3, r3
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	3b16      	subs	r3, #22
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	b21b      	sxth	r3, r3
 8002c62:	82bb      	strh	r3, [r7, #20]
			  Val[3] = (int16_t)MapValue(Val[3], 0, Val[0], -1023, 1023) - 22;
 8002c64:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7fd fbcb 	bl	8000404 <__aeabi_i2d>
 8002c6e:	4605      	mov	r5, r0
 8002c70:	460e      	mov	r6, r1
 8002c72:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7fd fbc4 	bl	8000404 <__aeabi_i2d>
 8002c7c:	460a      	mov	r2, r1
 8002c7e:	4601      	mov	r1, r0
 8002c80:	a479      	add	r4, pc, #484	; (adr r4, 8002e68 <main+0x580>)
 8002c82:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002c86:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8002c8a:	a479      	add	r4, pc, #484	; (adr r4, 8002e70 <main+0x588>)
 8002c8c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002c90:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8002c94:	e9cd 1200 	strd	r1, r2, [sp]
 8002c98:	f04f 0200 	mov.w	r2, #0
 8002c9c:	f04f 0300 	mov.w	r3, #0
 8002ca0:	4628      	mov	r0, r5
 8002ca2:	4631      	mov	r1, r6
 8002ca4:	f7ff faf0 	bl	8002288 <MapValue>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	460c      	mov	r4, r1
 8002cac:	4618      	mov	r0, r3
 8002cae:	4621      	mov	r1, r4
 8002cb0:	f7fd feac 	bl	8000a0c <__aeabi_d2iz>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	b21b      	sxth	r3, r3
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	3b16      	subs	r3, #22
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	b21b      	sxth	r3, r3
 8002cc0:	82fb      	strh	r3, [r7, #22]
			  //Val[0] = (int16_t)MapValue(Val[0], 0, Val[0], -1023, 1023);

			  if ((Val[2] <= 6) && (Val[2] >= -6)) Val[2] = 0;
 8002cc2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002cc6:	2b06      	cmp	r3, #6
 8002cc8:	dc06      	bgt.n	8002cd8 <main+0x3f0>
 8002cca:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002cce:	f113 0f06 	cmn.w	r3, #6
 8002cd2:	db01      	blt.n	8002cd8 <main+0x3f0>
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	82bb      	strh	r3, [r7, #20]
			  if ((Val[3] <= 6) && (Val[3] >= -6)) Val[3] = 0;
 8002cd8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002cdc:	2b06      	cmp	r3, #6
 8002cde:	dc06      	bgt.n	8002cee <main+0x406>
 8002ce0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002ce4:	f113 0f06 	cmn.w	r3, #6
 8002ce8:	db01      	blt.n	8002cee <main+0x406>
 8002cea:	2300      	movs	r3, #0
 8002cec:	82fb      	strh	r3, [r7, #22]

			  RF_TxData[1] = Val[2];
 8002cee:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002cf2:	b2da      	uxtb	r2, r3
 8002cf4:	4b62      	ldr	r3, [pc, #392]	; (8002e80 <main+0x598>)
 8002cf6:	705a      	strb	r2, [r3, #1]
			  RF_TxData[2] = Val[2] >> 8;
 8002cf8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002cfc:	121b      	asrs	r3, r3, #8
 8002cfe:	b21b      	sxth	r3, r3
 8002d00:	b2da      	uxtb	r2, r3
 8002d02:	4b5f      	ldr	r3, [pc, #380]	; (8002e80 <main+0x598>)
 8002d04:	709a      	strb	r2, [r3, #2]
			  RF_TxData[3] = Val[3];
 8002d06:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002d0a:	b2da      	uxtb	r2, r3
 8002d0c:	4b5c      	ldr	r3, [pc, #368]	; (8002e80 <main+0x598>)
 8002d0e:	70da      	strb	r2, [r3, #3]
			  RF_TxData[4] = Val[3] >> 8;
 8002d10:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002d14:	121b      	asrs	r3, r3, #8
 8002d16:	b21b      	sxth	r3, r3
 8002d18:	b2da      	uxtb	r2, r3
 8002d1a:	4b59      	ldr	r3, [pc, #356]	; (8002e80 <main+0x598>)
 8002d1c:	711a      	strb	r2, [r3, #4]

			  // Nastepne odczyty...

		  }
	  }
	  if (Flag[4] == 1){
 8002d1e:	4b59      	ldr	r3, [pc, #356]	; (8002e84 <main+0x59c>)
 8002d20:	791b      	ldrb	r3, [r3, #4]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d122      	bne.n	8002d6c <main+0x484>
		  Flag[4] = 0;
 8002d26:	4b57      	ldr	r3, [pc, #348]	; (8002e84 <main+0x59c>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	711a      	strb	r2, [r3, #4]
		  char Bad[6] = {'B', 'A', 'D', '(', BadFunc, ')'};
 8002d2c:	2342      	movs	r3, #66	; 0x42
 8002d2e:	723b      	strb	r3, [r7, #8]
 8002d30:	2341      	movs	r3, #65	; 0x41
 8002d32:	727b      	strb	r3, [r7, #9]
 8002d34:	2344      	movs	r3, #68	; 0x44
 8002d36:	72bb      	strb	r3, [r7, #10]
 8002d38:	2328      	movs	r3, #40	; 0x28
 8002d3a:	72fb      	strb	r3, [r7, #11]
 8002d3c:	4b52      	ldr	r3, [pc, #328]	; (8002e88 <main+0x5a0>)
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	733b      	strb	r3, [r7, #12]
 8002d42:	2329      	movs	r3, #41	; 0x29
 8002d44:	737b      	strb	r3, [r7, #13]
		  Serial_Send(Bad, 6);
 8002d46:	f107 0308 	add.w	r3, r7, #8
 8002d4a:	2106      	movs	r1, #6
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7ff f9bd 	bl	80020cc <Serial_Send>
		  HAL_Delay(1000);
 8002d52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d56:	f001 fd13 	bl	8004780 <HAL_Delay>
		  Bad[0] = BadFunc;
 8002d5a:	4b4b      	ldr	r3, [pc, #300]	; (8002e88 <main+0x5a0>)
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	723b      	strb	r3, [r7, #8]
		  Serial_Send(Bad, 6);
 8002d60:	f107 0308 	add.w	r3, r7, #8
 8002d64:	2106      	movs	r1, #6
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7ff f9b0 	bl	80020cc <Serial_Send>
	  }
	  if ((Flag[0] == 1) || (Flag[1] == 1)) {
 8002d6c:	4b45      	ldr	r3, [pc, #276]	; (8002e84 <main+0x59c>)
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d004      	beq.n	8002d7e <main+0x496>
 8002d74:	4b43      	ldr	r3, [pc, #268]	; (8002e84 <main+0x59c>)
 8002d76:	785b      	ldrb	r3, [r3, #1]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	f040 80a6 	bne.w	8002eca <main+0x5e2>
		  Flag[0] = 0;
 8002d7e:	4b41      	ldr	r3, [pc, #260]	; (8002e84 <main+0x59c>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	701a      	strb	r2, [r3, #0]

		  I2C_ClearBusyFlagErratum(&hi2c1, 1000);
 8002d84:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002d88:	4840      	ldr	r0, [pc, #256]	; (8002e8c <main+0x5a4>)
 8002d8a:	f7ff f9e1 	bl	8002150 <I2C_ClearBusyFlagErratum>

		  __HAL_RCC_I2C1_FORCE_RESET();
 8002d8e:	4b40      	ldr	r3, [pc, #256]	; (8002e90 <main+0x5a8>)
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	4a3f      	ldr	r2, [pc, #252]	; (8002e90 <main+0x5a8>)
 8002d94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d98:	6113      	str	r3, [r2, #16]
		  __HAL_RCC_I2C1_RELEASE_RESET();
 8002d9a:	4b3d      	ldr	r3, [pc, #244]	; (8002e90 <main+0x5a8>)
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	4a3c      	ldr	r2, [pc, #240]	; (8002e90 <main+0x5a8>)
 8002da0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002da4:	6113      	str	r3, [r2, #16]
		  MX_I2C1_Init();
 8002da6:	f000 fb5b 	bl	8003460 <MX_I2C1_Init>
		  __HAL_RCC_I2C1_FORCE_RESET();
 8002daa:	4b39      	ldr	r3, [pc, #228]	; (8002e90 <main+0x5a8>)
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	4a38      	ldr	r2, [pc, #224]	; (8002e90 <main+0x5a8>)
 8002db0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002db4:	6113      	str	r3, [r2, #16]
		  __HAL_RCC_I2C1_RELEASE_RESET();
 8002db6:	4b36      	ldr	r3, [pc, #216]	; (8002e90 <main+0x5a8>)
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	4a35      	ldr	r2, [pc, #212]	; (8002e90 <main+0x5a8>)
 8002dbc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002dc0:	6113      	str	r3, [r2, #16]
		  MX_I2C1_Init();
 8002dc2:	f000 fb4d 	bl	8003460 <MX_I2C1_Init>

			//HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);

			MPU6050_Get_Accel_RawData(&AccelData);	// Najpier trzeba akcelerometr
 8002dc6:	4833      	ldr	r0, [pc, #204]	; (8002e94 <main+0x5ac>)
 8002dc8:	f7ff f8c0 	bl	8001f4c <MPU6050_Get_Accel_RawData>
			MPU6050_Get_Gyro_RawData(&GyroData);		// Potem zyroskop
 8002dcc:	4832      	ldr	r0, [pc, #200]	; (8002e98 <main+0x5b0>)
 8002dce:	f7ff f923 	bl	8002018 <MPU6050_Get_Gyro_RawData>

			Msg[0] = FUNC_ACCEL_GYRO_DATA;
 8002dd2:	4b32      	ldr	r3, [pc, #200]	; (8002e9c <main+0x5b4>)
 8002dd4:	2280      	movs	r2, #128	; 0x80
 8002dd6:	701a      	strb	r2, [r3, #0]
			Msg[1] = AccelData.x;
 8002dd8:	4b2e      	ldr	r3, [pc, #184]	; (8002e94 <main+0x5ac>)
 8002dda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dde:	b2da      	uxtb	r2, r3
 8002de0:	4b2e      	ldr	r3, [pc, #184]	; (8002e9c <main+0x5b4>)
 8002de2:	705a      	strb	r2, [r3, #1]
			Msg[2] = AccelData.x >> 8;
 8002de4:	4b2b      	ldr	r3, [pc, #172]	; (8002e94 <main+0x5ac>)
 8002de6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dea:	121b      	asrs	r3, r3, #8
 8002dec:	b21b      	sxth	r3, r3
 8002dee:	b2da      	uxtb	r2, r3
 8002df0:	4b2a      	ldr	r3, [pc, #168]	; (8002e9c <main+0x5b4>)
 8002df2:	709a      	strb	r2, [r3, #2]
			Msg[3] = AccelData.y;
 8002df4:	4b27      	ldr	r3, [pc, #156]	; (8002e94 <main+0x5ac>)
 8002df6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002dfa:	b2da      	uxtb	r2, r3
 8002dfc:	4b27      	ldr	r3, [pc, #156]	; (8002e9c <main+0x5b4>)
 8002dfe:	70da      	strb	r2, [r3, #3]
			Msg[4] = AccelData.y >> 8;
 8002e00:	4b24      	ldr	r3, [pc, #144]	; (8002e94 <main+0x5ac>)
 8002e02:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002e06:	121b      	asrs	r3, r3, #8
 8002e08:	b21b      	sxth	r3, r3
 8002e0a:	b2da      	uxtb	r2, r3
 8002e0c:	4b23      	ldr	r3, [pc, #140]	; (8002e9c <main+0x5b4>)
 8002e0e:	711a      	strb	r2, [r3, #4]
			Msg[5] = AccelData.z;
 8002e10:	4b20      	ldr	r3, [pc, #128]	; (8002e94 <main+0x5ac>)
 8002e12:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002e16:	b2da      	uxtb	r2, r3
 8002e18:	4b20      	ldr	r3, [pc, #128]	; (8002e9c <main+0x5b4>)
 8002e1a:	715a      	strb	r2, [r3, #5]
			Msg[6] = AccelData.z >> 8;
 8002e1c:	4b1d      	ldr	r3, [pc, #116]	; (8002e94 <main+0x5ac>)
 8002e1e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002e22:	121b      	asrs	r3, r3, #8
 8002e24:	b21b      	sxth	r3, r3
 8002e26:	b2da      	uxtb	r2, r3
 8002e28:	4b1c      	ldr	r3, [pc, #112]	; (8002e9c <main+0x5b4>)
 8002e2a:	719a      	strb	r2, [r3, #6]

			Msg[7] = GyroData.x;
 8002e2c:	4b1a      	ldr	r3, [pc, #104]	; (8002e98 <main+0x5b0>)
 8002e2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e32:	b2da      	uxtb	r2, r3
 8002e34:	4b19      	ldr	r3, [pc, #100]	; (8002e9c <main+0x5b4>)
 8002e36:	71da      	strb	r2, [r3, #7]
			Msg[8] = GyroData.x >> 8;
 8002e38:	4b17      	ldr	r3, [pc, #92]	; (8002e98 <main+0x5b0>)
 8002e3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e3e:	121b      	asrs	r3, r3, #8
 8002e40:	b21b      	sxth	r3, r3
 8002e42:	b2da      	uxtb	r2, r3
 8002e44:	4b15      	ldr	r3, [pc, #84]	; (8002e9c <main+0x5b4>)
 8002e46:	721a      	strb	r2, [r3, #8]
			Msg[9] = GyroData.y;
 8002e48:	4b13      	ldr	r3, [pc, #76]	; (8002e98 <main+0x5b0>)
 8002e4a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002e4e:	b2da      	uxtb	r2, r3
 8002e50:	4b12      	ldr	r3, [pc, #72]	; (8002e9c <main+0x5b4>)
 8002e52:	725a      	strb	r2, [r3, #9]
			Msg[10] = GyroData.y >> 8;
 8002e54:	4b10      	ldr	r3, [pc, #64]	; (8002e98 <main+0x5b0>)
 8002e56:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002e5a:	121b      	asrs	r3, r3, #8
 8002e5c:	b21b      	sxth	r3, r3
 8002e5e:	b2da      	uxtb	r2, r3
 8002e60:	4b0e      	ldr	r3, [pc, #56]	; (8002e9c <main+0x5b4>)
 8002e62:	729a      	strb	r2, [r3, #10]
 8002e64:	e01c      	b.n	8002ea0 <main+0x5b8>
 8002e66:	bf00      	nop
 8002e68:	00000000 	.word	0x00000000
 8002e6c:	408ff800 	.word	0x408ff800
 8002e70:	00000000 	.word	0x00000000
 8002e74:	c08ff800 	.word	0xc08ff800
 8002e78:	20000b2c 	.word	0x20000b2c
 8002e7c:	200009e0 	.word	0x200009e0
 8002e80:	20000a7c 	.word	0x20000a7c
 8002e84:	20000338 	.word	0x20000338
 8002e88:	20000bd4 	.word	0x20000bd4
 8002e8c:	2000098c 	.word	0x2000098c
 8002e90:	40021000 	.word	0x40021000
 8002e94:	20000a34 	.word	0x20000a34
 8002e98:	20000b34 	.word	0x20000b34
 8002e9c:	2000097c 	.word	0x2000097c
			Msg[11] = GyroData.z;
 8002ea0:	4bb7      	ldr	r3, [pc, #732]	; (8003180 <main+0x898>)
 8002ea2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002ea6:	b2da      	uxtb	r2, r3
 8002ea8:	4bb6      	ldr	r3, [pc, #728]	; (8003184 <main+0x89c>)
 8002eaa:	72da      	strb	r2, [r3, #11]
			Msg[12] = GyroData.z >> 8;
 8002eac:	4bb4      	ldr	r3, [pc, #720]	; (8003180 <main+0x898>)
 8002eae:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002eb2:	121b      	asrs	r3, r3, #8
 8002eb4:	b21b      	sxth	r3, r3
 8002eb6:	b2da      	uxtb	r2, r3
 8002eb8:	4bb2      	ldr	r3, [pc, #712]	; (8003184 <main+0x89c>)
 8002eba:	731a      	strb	r2, [r3, #12]

			Serial_Send(Msg, 13);
 8002ebc:	210d      	movs	r1, #13
 8002ebe:	48b1      	ldr	r0, [pc, #708]	; (8003184 <main+0x89c>)
 8002ec0:	f7ff f904 	bl	80020cc <Serial_Send>
			HAL_Delay(10);
 8002ec4:	200a      	movs	r0, #10
 8002ec6:	f001 fc5b 	bl	8004780 <HAL_Delay>
	  }
	  if (Flag[2] == 1){
 8002eca:	4baf      	ldr	r3, [pc, #700]	; (8003188 <main+0x8a0>)
 8002ecc:	789b      	ldrb	r3, [r3, #2]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	f47f adf6 	bne.w	8002ac0 <main+0x1d8>
		  Flag[2] = 0;
 8002ed4:	4bac      	ldr	r3, [pc, #688]	; (8003188 <main+0x8a0>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	709a      	strb	r2, [r3, #2]
		  // Odczyt z ADS1115
		  int16_t Val[4];
		  for (int a = 0; a < 4; a++){
 8002eda:	2300      	movs	r3, #0
 8002edc:	633b      	str	r3, [r7, #48]	; 0x30
 8002ede:	e055      	b.n	8002f8c <main+0x6a4>
			  ADSwrite[0] = 0x01;
 8002ee0:	4baa      	ldr	r3, [pc, #680]	; (800318c <main+0x8a4>)
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	701a      	strb	r2, [r3, #0]
			  switch(a){
 8002ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee8:	2b03      	cmp	r3, #3
 8002eea:	d81b      	bhi.n	8002f24 <main+0x63c>
 8002eec:	a201      	add	r2, pc, #4	; (adr r2, 8002ef4 <main+0x60c>)
 8002eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef2:	bf00      	nop
 8002ef4:	08002f05 	.word	0x08002f05
 8002ef8:	08002f0d 	.word	0x08002f0d
 8002efc:	08002f15 	.word	0x08002f15
 8002f00:	08002f1d 	.word	0x08002f1d
			  case 0: {
				  ADSwrite[1] = 0xC1; // 11000011
 8002f04:	4ba1      	ldr	r3, [pc, #644]	; (800318c <main+0x8a4>)
 8002f06:	22c1      	movs	r2, #193	; 0xc1
 8002f08:	705a      	strb	r2, [r3, #1]
				  break;
 8002f0a:	e00b      	b.n	8002f24 <main+0x63c>
			  }
			  case 1: {
				  ADSwrite[1] = 0xD1; // 11010011
 8002f0c:	4b9f      	ldr	r3, [pc, #636]	; (800318c <main+0x8a4>)
 8002f0e:	22d1      	movs	r2, #209	; 0xd1
 8002f10:	705a      	strb	r2, [r3, #1]
				  break;
 8002f12:	e007      	b.n	8002f24 <main+0x63c>
			  }
			  case 2: {
				  ADSwrite[1] = 0xE1; // 11100011
 8002f14:	4b9d      	ldr	r3, [pc, #628]	; (800318c <main+0x8a4>)
 8002f16:	22e1      	movs	r2, #225	; 0xe1
 8002f18:	705a      	strb	r2, [r3, #1]
				  break;
 8002f1a:	e003      	b.n	8002f24 <main+0x63c>
			  }
			  case 3: {
				  ADSwrite[1] = 0xF1; // 11110011
 8002f1c:	4b9b      	ldr	r3, [pc, #620]	; (800318c <main+0x8a4>)
 8002f1e:	22f1      	movs	r2, #241	; 0xf1
 8002f20:	705a      	strb	r2, [r3, #1]
				  break;
 8002f22:	bf00      	nop
			  MX_I2C2_Init();
			  __HAL_RCC_I2C2_FORCE_RESET();
			  __HAL_RCC_I2C2_RELEASE_RESET();
			  MX_I2C2_Init();*/

			  ADSwrite[2] = 0xE3; // 10000011 // 10100011 // 11000011// 11100011
 8002f24:	4b99      	ldr	r3, [pc, #612]	; (800318c <main+0x8a4>)
 8002f26:	22e3      	movs	r2, #227	; 0xe3
 8002f28:	709a      	strb	r2, [r3, #2]
			  HAL_I2C_Master_Transmit(&hi2c2, ADS1115_ADDRESS<<1, ADSwrite, 3, 100);
 8002f2a:	2364      	movs	r3, #100	; 0x64
 8002f2c:	9300      	str	r3, [sp, #0]
 8002f2e:	2303      	movs	r3, #3
 8002f30:	4a96      	ldr	r2, [pc, #600]	; (800318c <main+0x8a4>)
 8002f32:	2190      	movs	r1, #144	; 0x90
 8002f34:	4896      	ldr	r0, [pc, #600]	; (8003190 <main+0x8a8>)
 8002f36:	f002 fd45 	bl	80059c4 <HAL_I2C_Master_Transmit>
			  ADSwrite[0] = 0x00;
 8002f3a:	4b94      	ldr	r3, [pc, #592]	; (800318c <main+0x8a4>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	701a      	strb	r2, [r3, #0]
			  HAL_I2C_Master_Transmit(&hi2c2, ADS1115_ADDRESS<<1, ADSwrite, 1, 100);
 8002f40:	2364      	movs	r3, #100	; 0x64
 8002f42:	9300      	str	r3, [sp, #0]
 8002f44:	2301      	movs	r3, #1
 8002f46:	4a91      	ldr	r2, [pc, #580]	; (800318c <main+0x8a4>)
 8002f48:	2190      	movs	r1, #144	; 0x90
 8002f4a:	4891      	ldr	r0, [pc, #580]	; (8003190 <main+0x8a8>)
 8002f4c:	f002 fd3a 	bl	80059c4 <HAL_I2C_Master_Transmit>
			  //HAL_Delay(1);
			  NRF24_DelayMicroSeconds(100);
 8002f50:	2064      	movs	r0, #100	; 0x64
 8002f52:	f7fd fd83 	bl	8000a5c <NRF24_DelayMicroSeconds>
			  HAL_I2C_Master_Receive(&hi2c2, ADS1115_ADDRESS<<1, ADSwrite, 2, 100);
 8002f56:	2364      	movs	r3, #100	; 0x64
 8002f58:	9300      	str	r3, [sp, #0]
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	4a8b      	ldr	r2, [pc, #556]	; (800318c <main+0x8a4>)
 8002f5e:	2190      	movs	r1, #144	; 0x90
 8002f60:	488b      	ldr	r0, [pc, #556]	; (8003190 <main+0x8a8>)
 8002f62:	f002 fe2d 	bl	8005bc0 <HAL_I2C_Master_Receive>

			  //Msg[1 + a*2] = ADSwrite[1];
			  //Msg[1 + a*2 + 1] = ADSwrite[0];
			  Val[a] = (((int16_t)ADSwrite[0]) << 8 | ADSwrite[1]);
 8002f66:	4b89      	ldr	r3, [pc, #548]	; (800318c <main+0x8a4>)
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	021b      	lsls	r3, r3, #8
 8002f6c:	b21a      	sxth	r2, r3
 8002f6e:	4b87      	ldr	r3, [pc, #540]	; (800318c <main+0x8a4>)
 8002f70:	785b      	ldrb	r3, [r3, #1]
 8002f72:	b21b      	sxth	r3, r3
 8002f74:	4313      	orrs	r3, r2
 8002f76:	b21a      	sxth	r2, r3
 8002f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002f80:	440b      	add	r3, r1
 8002f82:	f823 2c38 	strh.w	r2, [r3, #-56]
		  for (int a = 0; a < 4; a++){
 8002f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f88:	3301      	adds	r3, #1
 8002f8a:	633b      	str	r3, [r7, #48]	; 0x30
 8002f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f8e:	2b03      	cmp	r3, #3
 8002f90:	dda6      	ble.n	8002ee0 <main+0x5f8>
			  //Serial_Send("ELO", 3);

		  }

		  Val[1] = (int16_t)MapValue(Val[1], 0, Val[0], -1023, 1023);
 8002f92:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7fd fa34 	bl	8000404 <__aeabi_i2d>
 8002f9c:	4605      	mov	r5, r0
 8002f9e:	460e      	mov	r6, r1
 8002fa0:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7fd fa2d 	bl	8000404 <__aeabi_i2d>
 8002faa:	460a      	mov	r2, r1
 8002fac:	4601      	mov	r1, r0
 8002fae:	a470      	add	r4, pc, #448	; (adr r4, 8003170 <main+0x888>)
 8002fb0:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002fb4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8002fb8:	a46f      	add	r4, pc, #444	; (adr r4, 8003178 <main+0x890>)
 8002fba:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002fbe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8002fc2:	e9cd 1200 	strd	r1, r2, [sp]
 8002fc6:	f04f 0200 	mov.w	r2, #0
 8002fca:	f04f 0300 	mov.w	r3, #0
 8002fce:	4628      	mov	r0, r5
 8002fd0:	4631      	mov	r1, r6
 8002fd2:	f7ff f959 	bl	8002288 <MapValue>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	460c      	mov	r4, r1
 8002fda:	4618      	mov	r0, r3
 8002fdc:	4621      	mov	r1, r4
 8002fde:	f7fd fd15 	bl	8000a0c <__aeabi_d2iz>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	b21b      	sxth	r3, r3
 8002fe6:	807b      	strh	r3, [r7, #2]
		  Val[2] = (int16_t)MapValue(Val[2], 0, Val[0], -1023, 1023) - 22;
 8002fe8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7fd fa09 	bl	8000404 <__aeabi_i2d>
 8002ff2:	4605      	mov	r5, r0
 8002ff4:	460e      	mov	r6, r1
 8002ff6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7fd fa02 	bl	8000404 <__aeabi_i2d>
 8003000:	460a      	mov	r2, r1
 8003002:	4601      	mov	r1, r0
 8003004:	a45a      	add	r4, pc, #360	; (adr r4, 8003170 <main+0x888>)
 8003006:	e9d4 3400 	ldrd	r3, r4, [r4]
 800300a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800300e:	a45a      	add	r4, pc, #360	; (adr r4, 8003178 <main+0x890>)
 8003010:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003014:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8003018:	e9cd 1200 	strd	r1, r2, [sp]
 800301c:	f04f 0200 	mov.w	r2, #0
 8003020:	f04f 0300 	mov.w	r3, #0
 8003024:	4628      	mov	r0, r5
 8003026:	4631      	mov	r1, r6
 8003028:	f7ff f92e 	bl	8002288 <MapValue>
 800302c:	4603      	mov	r3, r0
 800302e:	460c      	mov	r4, r1
 8003030:	4618      	mov	r0, r3
 8003032:	4621      	mov	r1, r4
 8003034:	f7fd fcea 	bl	8000a0c <__aeabi_d2iz>
 8003038:	4603      	mov	r3, r0
 800303a:	b21b      	sxth	r3, r3
 800303c:	b29b      	uxth	r3, r3
 800303e:	3b16      	subs	r3, #22
 8003040:	b29b      	uxth	r3, r3
 8003042:	b21b      	sxth	r3, r3
 8003044:	80bb      	strh	r3, [r7, #4]
		  Val[3] = (int16_t)MapValue(Val[3], 0, Val[0], -1023, 1023) -22;
 8003046:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800304a:	4618      	mov	r0, r3
 800304c:	f7fd f9da 	bl	8000404 <__aeabi_i2d>
 8003050:	4605      	mov	r5, r0
 8003052:	460e      	mov	r6, r1
 8003054:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003058:	4618      	mov	r0, r3
 800305a:	f7fd f9d3 	bl	8000404 <__aeabi_i2d>
 800305e:	460a      	mov	r2, r1
 8003060:	4601      	mov	r1, r0
 8003062:	a443      	add	r4, pc, #268	; (adr r4, 8003170 <main+0x888>)
 8003064:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003068:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800306c:	a442      	add	r4, pc, #264	; (adr r4, 8003178 <main+0x890>)
 800306e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003072:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8003076:	e9cd 1200 	strd	r1, r2, [sp]
 800307a:	f04f 0200 	mov.w	r2, #0
 800307e:	f04f 0300 	mov.w	r3, #0
 8003082:	4628      	mov	r0, r5
 8003084:	4631      	mov	r1, r6
 8003086:	f7ff f8ff 	bl	8002288 <MapValue>
 800308a:	4603      	mov	r3, r0
 800308c:	460c      	mov	r4, r1
 800308e:	4618      	mov	r0, r3
 8003090:	4621      	mov	r1, r4
 8003092:	f7fd fcbb 	bl	8000a0c <__aeabi_d2iz>
 8003096:	4603      	mov	r3, r0
 8003098:	b21b      	sxth	r3, r3
 800309a:	b29b      	uxth	r3, r3
 800309c:	3b16      	subs	r3, #22
 800309e:	b29b      	uxth	r3, r3
 80030a0:	b21b      	sxth	r3, r3
 80030a2:	80fb      	strh	r3, [r7, #6]
		  Val[0] = (int16_t)MapValue(Val[0], 0, Val[0], -1023, 1023);
 80030a4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7fd f9ab 	bl	8000404 <__aeabi_i2d>
 80030ae:	4605      	mov	r5, r0
 80030b0:	460e      	mov	r6, r1
 80030b2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7fd f9a4 	bl	8000404 <__aeabi_i2d>
 80030bc:	460a      	mov	r2, r1
 80030be:	4601      	mov	r1, r0
 80030c0:	a42b      	add	r4, pc, #172	; (adr r4, 8003170 <main+0x888>)
 80030c2:	e9d4 3400 	ldrd	r3, r4, [r4]
 80030c6:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80030ca:	a42b      	add	r4, pc, #172	; (adr r4, 8003178 <main+0x890>)
 80030cc:	e9d4 3400 	ldrd	r3, r4, [r4]
 80030d0:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80030d4:	e9cd 1200 	strd	r1, r2, [sp]
 80030d8:	f04f 0200 	mov.w	r2, #0
 80030dc:	f04f 0300 	mov.w	r3, #0
 80030e0:	4628      	mov	r0, r5
 80030e2:	4631      	mov	r1, r6
 80030e4:	f7ff f8d0 	bl	8002288 <MapValue>
 80030e8:	4603      	mov	r3, r0
 80030ea:	460c      	mov	r4, r1
 80030ec:	4618      	mov	r0, r3
 80030ee:	4621      	mov	r1, r4
 80030f0:	f7fd fc8c 	bl	8000a0c <__aeabi_d2iz>
 80030f4:	4603      	mov	r3, r0
 80030f6:	b21b      	sxth	r3, r3
 80030f8:	803b      	strh	r3, [r7, #0]

		  if ((Val[2] <= 3) && (Val[2] >= -3)) Val[2] = 0;
 80030fa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80030fe:	2b03      	cmp	r3, #3
 8003100:	dc06      	bgt.n	8003110 <main+0x828>
 8003102:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003106:	f113 0f03 	cmn.w	r3, #3
 800310a:	db01      	blt.n	8003110 <main+0x828>
 800310c:	2300      	movs	r3, #0
 800310e:	80bb      	strh	r3, [r7, #4]
		  if ((Val[3] <= 3) && (Val[3] >= -3)) Val[3] = 0;
 8003110:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003114:	2b03      	cmp	r3, #3
 8003116:	dc06      	bgt.n	8003126 <main+0x83e>
 8003118:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800311c:	f113 0f03 	cmn.w	r3, #3
 8003120:	db01      	blt.n	8003126 <main+0x83e>
 8003122:	2300      	movs	r3, #0
 8003124:	80fb      	strh	r3, [r7, #6]

		  Msg[0] = FUNC_JOYSTICK_DATA;
 8003126:	4b17      	ldr	r3, [pc, #92]	; (8003184 <main+0x89c>)
 8003128:	2281      	movs	r2, #129	; 0x81
 800312a:	701a      	strb	r2, [r3, #0]
		  Msg[1] = Val[2];
 800312c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003130:	b2da      	uxtb	r2, r3
 8003132:	4b14      	ldr	r3, [pc, #80]	; (8003184 <main+0x89c>)
 8003134:	705a      	strb	r2, [r3, #1]
		  Msg[2] = Val[2] >> 8;
 8003136:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800313a:	121b      	asrs	r3, r3, #8
 800313c:	b21b      	sxth	r3, r3
 800313e:	b2da      	uxtb	r2, r3
 8003140:	4b10      	ldr	r3, [pc, #64]	; (8003184 <main+0x89c>)
 8003142:	709a      	strb	r2, [r3, #2]
		  Msg[3] = Val[3];
 8003144:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003148:	b2da      	uxtb	r2, r3
 800314a:	4b0e      	ldr	r3, [pc, #56]	; (8003184 <main+0x89c>)
 800314c:	70da      	strb	r2, [r3, #3]
		  Msg[4] = Val[3] >> 8;
 800314e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003152:	121b      	asrs	r3, r3, #8
 8003154:	b21b      	sxth	r3, r3
 8003156:	b2da      	uxtb	r2, r3
 8003158:	4b0a      	ldr	r3, [pc, #40]	; (8003184 <main+0x89c>)
 800315a:	711a      	strb	r2, [r3, #4]
		  if (Val[1] > 0) Msg[5] = 0; else Msg[5] = 128;
 800315c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003160:	2b00      	cmp	r3, #0
 8003162:	dd17      	ble.n	8003194 <main+0x8ac>
 8003164:	4b07      	ldr	r3, [pc, #28]	; (8003184 <main+0x89c>)
 8003166:	2200      	movs	r2, #0
 8003168:	715a      	strb	r2, [r3, #5]
 800316a:	e016      	b.n	800319a <main+0x8b2>
 800316c:	f3af 8000 	nop.w
 8003170:	00000000 	.word	0x00000000
 8003174:	408ff800 	.word	0x408ff800
 8003178:	00000000 	.word	0x00000000
 800317c:	c08ff800 	.word	0xc08ff800
 8003180:	20000b34 	.word	0x20000b34
 8003184:	2000097c 	.word	0x2000097c
 8003188:	20000338 	.word	0x20000338
 800318c:	20000b2c 	.word	0x20000b2c
 8003190:	200009e0 	.word	0x200009e0
 8003194:	4b50      	ldr	r3, [pc, #320]	; (80032d8 <main+0x9f0>)
 8003196:	2280      	movs	r2, #128	; 0x80
 8003198:	715a      	strb	r2, [r3, #5]
		  if (HAL_GPIO_ReadPin(BT_LA_GPIO_Port, BT_LA_Pin) == GPIO_PIN_RESET) Msg[5] += 64;
 800319a:	2104      	movs	r1, #4
 800319c:	484f      	ldr	r0, [pc, #316]	; (80032dc <main+0x9f4>)
 800319e:	f002 fa71 	bl	8005684 <HAL_GPIO_ReadPin>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d105      	bne.n	80031b4 <main+0x8cc>
 80031a8:	4b4b      	ldr	r3, [pc, #300]	; (80032d8 <main+0x9f0>)
 80031aa:	795b      	ldrb	r3, [r3, #5]
 80031ac:	3340      	adds	r3, #64	; 0x40
 80031ae:	b2da      	uxtb	r2, r3
 80031b0:	4b49      	ldr	r3, [pc, #292]	; (80032d8 <main+0x9f0>)
 80031b2:	715a      	strb	r2, [r3, #5]
		  if (HAL_GPIO_ReadPin(BT_LB_GPIO_Port, BT_LB_Pin) == GPIO_PIN_RESET) Msg[5] += 32;
 80031b4:	2108      	movs	r1, #8
 80031b6:	4849      	ldr	r0, [pc, #292]	; (80032dc <main+0x9f4>)
 80031b8:	f002 fa64 	bl	8005684 <HAL_GPIO_ReadPin>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d105      	bne.n	80031ce <main+0x8e6>
 80031c2:	4b45      	ldr	r3, [pc, #276]	; (80032d8 <main+0x9f0>)
 80031c4:	795b      	ldrb	r3, [r3, #5]
 80031c6:	3320      	adds	r3, #32
 80031c8:	b2da      	uxtb	r2, r3
 80031ca:	4b43      	ldr	r3, [pc, #268]	; (80032d8 <main+0x9f0>)
 80031cc:	715a      	strb	r2, [r3, #5]
		  if (HAL_GPIO_ReadPin(BT_LC_GPIO_Port, BT_LC_Pin) == GPIO_PIN_RESET) Msg[5] += 16;
 80031ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031d2:	4843      	ldr	r0, [pc, #268]	; (80032e0 <main+0x9f8>)
 80031d4:	f002 fa56 	bl	8005684 <HAL_GPIO_ReadPin>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d105      	bne.n	80031ea <main+0x902>
 80031de:	4b3e      	ldr	r3, [pc, #248]	; (80032d8 <main+0x9f0>)
 80031e0:	795b      	ldrb	r3, [r3, #5]
 80031e2:	3310      	adds	r3, #16
 80031e4:	b2da      	uxtb	r2, r3
 80031e6:	4b3c      	ldr	r3, [pc, #240]	; (80032d8 <main+0x9f0>)
 80031e8:	715a      	strb	r2, [r3, #5]
		  if (HAL_GPIO_ReadPin(BT_LD_GPIO_Port, BT_LD_Pin) == GPIO_PIN_RESET) Msg[5] += 8;
 80031ea:	2102      	movs	r1, #2
 80031ec:	483b      	ldr	r0, [pc, #236]	; (80032dc <main+0x9f4>)
 80031ee:	f002 fa49 	bl	8005684 <HAL_GPIO_ReadPin>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d105      	bne.n	8003204 <main+0x91c>
 80031f8:	4b37      	ldr	r3, [pc, #220]	; (80032d8 <main+0x9f0>)
 80031fa:	795b      	ldrb	r3, [r3, #5]
 80031fc:	3308      	adds	r3, #8
 80031fe:	b2da      	uxtb	r2, r3
 8003200:	4b35      	ldr	r3, [pc, #212]	; (80032d8 <main+0x9f0>)
 8003202:	715a      	strb	r2, [r3, #5]

		  if (HAL_GPIO_ReadPin(BT_POWER_GPIO_Port, BT_POWER_Pin) == GPIO_PIN_SET) Msg[5] += 1;
 8003204:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003208:	4834      	ldr	r0, [pc, #208]	; (80032dc <main+0x9f4>)
 800320a:	f002 fa3b 	bl	8005684 <HAL_GPIO_ReadPin>
 800320e:	4603      	mov	r3, r0
 8003210:	2b01      	cmp	r3, #1
 8003212:	d105      	bne.n	8003220 <main+0x938>
 8003214:	4b30      	ldr	r3, [pc, #192]	; (80032d8 <main+0x9f0>)
 8003216:	795b      	ldrb	r3, [r3, #5]
 8003218:	3301      	adds	r3, #1
 800321a:	b2da      	uxtb	r2, r3
 800321c:	4b2e      	ldr	r3, [pc, #184]	; (80032d8 <main+0x9f0>)
 800321e:	715a      	strb	r2, [r3, #5]

		  Msg[6] = 0;
 8003220:	4b2d      	ldr	r3, [pc, #180]	; (80032d8 <main+0x9f0>)
 8003222:	2200      	movs	r2, #0
 8003224:	719a      	strb	r2, [r3, #6]
		  Msg[7] = 0;
 8003226:	4b2c      	ldr	r3, [pc, #176]	; (80032d8 <main+0x9f0>)
 8003228:	2200      	movs	r2, #0
 800322a:	71da      	strb	r2, [r3, #7]
		  Msg[8] = 0;
 800322c:	4b2a      	ldr	r3, [pc, #168]	; (80032d8 <main+0x9f0>)
 800322e:	2200      	movs	r2, #0
 8003230:	721a      	strb	r2, [r3, #8]
		  Msg[9] = 0;
 8003232:	4b29      	ldr	r3, [pc, #164]	; (80032d8 <main+0x9f0>)
 8003234:	2200      	movs	r2, #0
 8003236:	725a      	strb	r2, [r3, #9]

		  Msg[10] = 0;
 8003238:	4b27      	ldr	r3, [pc, #156]	; (80032d8 <main+0x9f0>)
 800323a:	2200      	movs	r2, #0
 800323c:	729a      	strb	r2, [r3, #10]
		  if (HAL_GPIO_ReadPin(BT_RS_GPIO_Port, BT_RS_Pin) == GPIO_PIN_RESET) Msg[10] += 128;
 800323e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003242:	4826      	ldr	r0, [pc, #152]	; (80032dc <main+0x9f4>)
 8003244:	f002 fa1e 	bl	8005684 <HAL_GPIO_ReadPin>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d105      	bne.n	800325a <main+0x972>
 800324e:	4b22      	ldr	r3, [pc, #136]	; (80032d8 <main+0x9f0>)
 8003250:	7a9b      	ldrb	r3, [r3, #10]
 8003252:	3b80      	subs	r3, #128	; 0x80
 8003254:	b2da      	uxtb	r2, r3
 8003256:	4b20      	ldr	r3, [pc, #128]	; (80032d8 <main+0x9f0>)
 8003258:	729a      	strb	r2, [r3, #10]
		  if (HAL_GPIO_ReadPin(BT_RA_GPIO_Port, BT_RA_Pin) == GPIO_PIN_RESET) Msg[10] += 64;
 800325a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800325e:	481f      	ldr	r0, [pc, #124]	; (80032dc <main+0x9f4>)
 8003260:	f002 fa10 	bl	8005684 <HAL_GPIO_ReadPin>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d105      	bne.n	8003276 <main+0x98e>
 800326a:	4b1b      	ldr	r3, [pc, #108]	; (80032d8 <main+0x9f0>)
 800326c:	7a9b      	ldrb	r3, [r3, #10]
 800326e:	3340      	adds	r3, #64	; 0x40
 8003270:	b2da      	uxtb	r2, r3
 8003272:	4b19      	ldr	r3, [pc, #100]	; (80032d8 <main+0x9f0>)
 8003274:	729a      	strb	r2, [r3, #10]
		  if (HAL_GPIO_ReadPin(BT_RB_GPIO_Port, BT_RB_Pin) == GPIO_PIN_RESET) Msg[10] += 32;
 8003276:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800327a:	4818      	ldr	r0, [pc, #96]	; (80032dc <main+0x9f4>)
 800327c:	f002 fa02 	bl	8005684 <HAL_GPIO_ReadPin>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d105      	bne.n	8003292 <main+0x9aa>
 8003286:	4b14      	ldr	r3, [pc, #80]	; (80032d8 <main+0x9f0>)
 8003288:	7a9b      	ldrb	r3, [r3, #10]
 800328a:	3320      	adds	r3, #32
 800328c:	b2da      	uxtb	r2, r3
 800328e:	4b12      	ldr	r3, [pc, #72]	; (80032d8 <main+0x9f0>)
 8003290:	729a      	strb	r2, [r3, #10]
		  if (HAL_GPIO_ReadPin(BT_RC_GPIO_Port, BT_RC_Pin) == GPIO_PIN_RESET) Msg[10] += 16;
 8003292:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003296:	4811      	ldr	r0, [pc, #68]	; (80032dc <main+0x9f4>)
 8003298:	f002 f9f4 	bl	8005684 <HAL_GPIO_ReadPin>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d105      	bne.n	80032ae <main+0x9c6>
 80032a2:	4b0d      	ldr	r3, [pc, #52]	; (80032d8 <main+0x9f0>)
 80032a4:	7a9b      	ldrb	r3, [r3, #10]
 80032a6:	3310      	adds	r3, #16
 80032a8:	b2da      	uxtb	r2, r3
 80032aa:	4b0b      	ldr	r3, [pc, #44]	; (80032d8 <main+0x9f0>)
 80032ac:	729a      	strb	r2, [r3, #10]
		  if (HAL_GPIO_ReadPin(BT_RD_GPIO_Port, BT_RD_Pin) == GPIO_PIN_RESET) Msg[10] += 8;
 80032ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80032b2:	480b      	ldr	r0, [pc, #44]	; (80032e0 <main+0x9f8>)
 80032b4:	f002 f9e6 	bl	8005684 <HAL_GPIO_ReadPin>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d105      	bne.n	80032ca <main+0x9e2>
 80032be:	4b06      	ldr	r3, [pc, #24]	; (80032d8 <main+0x9f0>)
 80032c0:	7a9b      	ldrb	r3, [r3, #10]
 80032c2:	3308      	adds	r3, #8
 80032c4:	b2da      	uxtb	r2, r3
 80032c6:	4b04      	ldr	r3, [pc, #16]	; (80032d8 <main+0x9f0>)
 80032c8:	729a      	strb	r2, [r3, #10]

		  // Nastepne odczyty

		  //RF_TXData[5] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)

		  Serial_Send(Msg, 11);
 80032ca:	210b      	movs	r1, #11
 80032cc:	4802      	ldr	r0, [pc, #8]	; (80032d8 <main+0x9f0>)
 80032ce:	f7fe fefd 	bl	80020cc <Serial_Send>
	  while (IsHID)
 80032d2:	f7ff bbf5 	b.w	8002ac0 <main+0x1d8>
 80032d6:	bf00      	nop
 80032d8:	2000097c 	.word	0x2000097c
 80032dc:	40010c00 	.word	0x40010c00
 80032e0:	40010800 	.word	0x40010800

080032e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b094      	sub	sp, #80	; 0x50
 80032e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80032ee:	2228      	movs	r2, #40	; 0x28
 80032f0:	2100      	movs	r1, #0
 80032f2:	4618      	mov	r0, r3
 80032f4:	f008 ffdb 	bl	800c2ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80032f8:	f107 0314 	add.w	r3, r7, #20
 80032fc:	2200      	movs	r2, #0
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	605a      	str	r2, [r3, #4]
 8003302:	609a      	str	r2, [r3, #8]
 8003304:	60da      	str	r2, [r3, #12]
 8003306:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003308:	1d3b      	adds	r3, r7, #4
 800330a:	2200      	movs	r2, #0
 800330c:	601a      	str	r2, [r3, #0]
 800330e:	605a      	str	r2, [r3, #4]
 8003310:	609a      	str	r2, [r3, #8]
 8003312:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003314:	2301      	movs	r3, #1
 8003316:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003318:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800331c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800331e:	2300      	movs	r3, #0
 8003320:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003322:	2301      	movs	r3, #1
 8003324:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003326:	2302      	movs	r3, #2
 8003328:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800332a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800332e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003330:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003334:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003336:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800333a:	4618      	mov	r0, r3
 800333c:	f004 f966 	bl	800760c <HAL_RCC_OscConfig>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8003346:	f000 fa53 	bl	80037f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800334a:	230f      	movs	r3, #15
 800334c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800334e:	2302      	movs	r3, #2
 8003350:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003352:	2300      	movs	r3, #0
 8003354:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003356:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800335a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800335c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003360:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003362:	f107 0314 	add.w	r3, r7, #20
 8003366:	2102      	movs	r1, #2
 8003368:	4618      	mov	r0, r3
 800336a:	f004 fbcf 	bl	8007b0c <HAL_RCC_ClockConfig>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d001      	beq.n	8003378 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003374:	f000 fa3c 	bl	80037f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8003378:	2312      	movs	r3, #18
 800337a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 800337c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003380:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8003382:	2300      	movs	r3, #0
 8003384:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003386:	1d3b      	adds	r3, r7, #4
 8003388:	4618      	mov	r0, r3
 800338a:	f004 fd5b 	bl	8007e44 <HAL_RCCEx_PeriphCLKConfig>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d001      	beq.n	8003398 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8003394:	f000 fa2c 	bl	80037f0 <Error_Handler>
  }
}
 8003398:	bf00      	nop
 800339a:	3750      	adds	r7, #80	; 0x50
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80033a6:	1d3b      	adds	r3, r7, #4
 80033a8:	2200      	movs	r2, #0
 80033aa:	601a      	str	r2, [r3, #0]
 80033ac:	605a      	str	r2, [r3, #4]
 80033ae:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 80033b0:	4b29      	ldr	r3, [pc, #164]	; (8003458 <MX_ADC1_Init+0xb8>)
 80033b2:	4a2a      	ldr	r2, [pc, #168]	; (800345c <MX_ADC1_Init+0xbc>)
 80033b4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80033b6:	4b28      	ldr	r3, [pc, #160]	; (8003458 <MX_ADC1_Init+0xb8>)
 80033b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033bc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80033be:	4b26      	ldr	r3, [pc, #152]	; (8003458 <MX_ADC1_Init+0xb8>)
 80033c0:	2201      	movs	r2, #1
 80033c2:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80033c4:	4b24      	ldr	r3, [pc, #144]	; (8003458 <MX_ADC1_Init+0xb8>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80033ca:	4b23      	ldr	r3, [pc, #140]	; (8003458 <MX_ADC1_Init+0xb8>)
 80033cc:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80033d0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80033d2:	4b21      	ldr	r3, [pc, #132]	; (8003458 <MX_ADC1_Init+0xb8>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 80033d8:	4b1f      	ldr	r3, [pc, #124]	; (8003458 <MX_ADC1_Init+0xb8>)
 80033da:	2203      	movs	r2, #3
 80033dc:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80033de:	481e      	ldr	r0, [pc, #120]	; (8003458 <MX_ADC1_Init+0xb8>)
 80033e0:	f001 f9f0 	bl	80047c4 <HAL_ADC_Init>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80033ea:	f000 fa01 	bl	80037f0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80033ee:	2300      	movs	r3, #0
 80033f0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80033f2:	2301      	movs	r3, #1
 80033f4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80033f6:	2307      	movs	r3, #7
 80033f8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80033fa:	1d3b      	adds	r3, r7, #4
 80033fc:	4619      	mov	r1, r3
 80033fe:	4816      	ldr	r0, [pc, #88]	; (8003458 <MX_ADC1_Init+0xb8>)
 8003400:	f001 fc98 	bl	8004d34 <HAL_ADC_ConfigChannel>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800340a:	f000 f9f1 	bl	80037f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  sConfig.Channel = ADC_CHANNEL_1;
 800340e:	2301      	movs	r3, #1
 8003410:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003412:	2303      	movs	r3, #3
 8003414:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8003416:	2307      	movs	r3, #7
 8003418:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800341a:	1d3b      	adds	r3, r7, #4
 800341c:	4619      	mov	r1, r3
 800341e:	480e      	ldr	r0, [pc, #56]	; (8003458 <MX_ADC1_Init+0xb8>)
 8003420:	f001 fc88 	bl	8004d34 <HAL_ADC_ConfigChannel>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <MX_ADC1_Init+0x8e>
  {
	Error_Handler();
 800342a:	f000 f9e1 	bl	80037f0 <Error_Handler>
  }
  sConfig.Channel = ADC_CHANNEL_4;
 800342e:	2304      	movs	r3, #4
 8003430:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003432:	2302      	movs	r3, #2
 8003434:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8003436:	2307      	movs	r3, #7
 8003438:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800343a:	1d3b      	adds	r3, r7, #4
 800343c:	4619      	mov	r1, r3
 800343e:	4806      	ldr	r0, [pc, #24]	; (8003458 <MX_ADC1_Init+0xb8>)
 8003440:	f001 fc78 	bl	8004d34 <HAL_ADC_ConfigChannel>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <MX_ADC1_Init+0xae>
  {
	Error_Handler();
 800344a:	f000 f9d1 	bl	80037f0 <Error_Handler>
  }
  /* USER CODE END ADC1_Init 2 */

}
 800344e:	bf00      	nop
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	20000a9c 	.word	0x20000a9c
 800345c:	40012400 	.word	0x40012400

08003460 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003464:	4b12      	ldr	r3, [pc, #72]	; (80034b0 <MX_I2C1_Init+0x50>)
 8003466:	4a13      	ldr	r2, [pc, #76]	; (80034b4 <MX_I2C1_Init+0x54>)
 8003468:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800346a:	4b11      	ldr	r3, [pc, #68]	; (80034b0 <MX_I2C1_Init+0x50>)
 800346c:	4a12      	ldr	r2, [pc, #72]	; (80034b8 <MX_I2C1_Init+0x58>)
 800346e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003470:	4b0f      	ldr	r3, [pc, #60]	; (80034b0 <MX_I2C1_Init+0x50>)
 8003472:	2200      	movs	r2, #0
 8003474:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003476:	4b0e      	ldr	r3, [pc, #56]	; (80034b0 <MX_I2C1_Init+0x50>)
 8003478:	2200      	movs	r2, #0
 800347a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800347c:	4b0c      	ldr	r3, [pc, #48]	; (80034b0 <MX_I2C1_Init+0x50>)
 800347e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003482:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003484:	4b0a      	ldr	r3, [pc, #40]	; (80034b0 <MX_I2C1_Init+0x50>)
 8003486:	2200      	movs	r2, #0
 8003488:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800348a:	4b09      	ldr	r3, [pc, #36]	; (80034b0 <MX_I2C1_Init+0x50>)
 800348c:	2200      	movs	r2, #0
 800348e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003490:	4b07      	ldr	r3, [pc, #28]	; (80034b0 <MX_I2C1_Init+0x50>)
 8003492:	2200      	movs	r2, #0
 8003494:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003496:	4b06      	ldr	r3, [pc, #24]	; (80034b0 <MX_I2C1_Init+0x50>)
 8003498:	2200      	movs	r2, #0
 800349a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800349c:	4804      	ldr	r0, [pc, #16]	; (80034b0 <MX_I2C1_Init+0x50>)
 800349e:	f002 f939 	bl	8005714 <HAL_I2C_Init>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d001      	beq.n	80034ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80034a8:	f000 f9a2 	bl	80037f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80034ac:	bf00      	nop
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	2000098c 	.word	0x2000098c
 80034b4:	40005400 	.word	0x40005400
 80034b8:	00061a80 	.word	0x00061a80

080034bc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80034c0:	4b12      	ldr	r3, [pc, #72]	; (800350c <MX_I2C2_Init+0x50>)
 80034c2:	4a13      	ldr	r2, [pc, #76]	; (8003510 <MX_I2C2_Init+0x54>)
 80034c4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80034c6:	4b11      	ldr	r3, [pc, #68]	; (800350c <MX_I2C2_Init+0x50>)
 80034c8:	4a12      	ldr	r2, [pc, #72]	; (8003514 <MX_I2C2_Init+0x58>)
 80034ca:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80034cc:	4b0f      	ldr	r3, [pc, #60]	; (800350c <MX_I2C2_Init+0x50>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80034d2:	4b0e      	ldr	r3, [pc, #56]	; (800350c <MX_I2C2_Init+0x50>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80034d8:	4b0c      	ldr	r3, [pc, #48]	; (800350c <MX_I2C2_Init+0x50>)
 80034da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80034de:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80034e0:	4b0a      	ldr	r3, [pc, #40]	; (800350c <MX_I2C2_Init+0x50>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80034e6:	4b09      	ldr	r3, [pc, #36]	; (800350c <MX_I2C2_Init+0x50>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80034ec:	4b07      	ldr	r3, [pc, #28]	; (800350c <MX_I2C2_Init+0x50>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80034f2:	4b06      	ldr	r3, [pc, #24]	; (800350c <MX_I2C2_Init+0x50>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80034f8:	4804      	ldr	r0, [pc, #16]	; (800350c <MX_I2C2_Init+0x50>)
 80034fa:	f002 f90b 	bl	8005714 <HAL_I2C_Init>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d001      	beq.n	8003508 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003504:	f000 f974 	bl	80037f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003508:	bf00      	nop
 800350a:	bd80      	pop	{r7, pc}
 800350c:	200009e0 	.word	0x200009e0
 8003510:	40005800 	.word	0x40005800
 8003514:	00061a80 	.word	0x00061a80

08003518 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800351c:	4b17      	ldr	r3, [pc, #92]	; (800357c <MX_SPI1_Init+0x64>)
 800351e:	4a18      	ldr	r2, [pc, #96]	; (8003580 <MX_SPI1_Init+0x68>)
 8003520:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003522:	4b16      	ldr	r3, [pc, #88]	; (800357c <MX_SPI1_Init+0x64>)
 8003524:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003528:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800352a:	4b14      	ldr	r3, [pc, #80]	; (800357c <MX_SPI1_Init+0x64>)
 800352c:	2200      	movs	r2, #0
 800352e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003530:	4b12      	ldr	r3, [pc, #72]	; (800357c <MX_SPI1_Init+0x64>)
 8003532:	2200      	movs	r2, #0
 8003534:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003536:	4b11      	ldr	r3, [pc, #68]	; (800357c <MX_SPI1_Init+0x64>)
 8003538:	2200      	movs	r2, #0
 800353a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800353c:	4b0f      	ldr	r3, [pc, #60]	; (800357c <MX_SPI1_Init+0x64>)
 800353e:	2200      	movs	r2, #0
 8003540:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003542:	4b0e      	ldr	r3, [pc, #56]	; (800357c <MX_SPI1_Init+0x64>)
 8003544:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003548:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800354a:	4b0c      	ldr	r3, [pc, #48]	; (800357c <MX_SPI1_Init+0x64>)
 800354c:	2220      	movs	r2, #32
 800354e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003550:	4b0a      	ldr	r3, [pc, #40]	; (800357c <MX_SPI1_Init+0x64>)
 8003552:	2200      	movs	r2, #0
 8003554:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003556:	4b09      	ldr	r3, [pc, #36]	; (800357c <MX_SPI1_Init+0x64>)
 8003558:	2200      	movs	r2, #0
 800355a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800355c:	4b07      	ldr	r3, [pc, #28]	; (800357c <MX_SPI1_Init+0x64>)
 800355e:	2200      	movs	r2, #0
 8003560:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003562:	4b06      	ldr	r3, [pc, #24]	; (800357c <MX_SPI1_Init+0x64>)
 8003564:	220a      	movs	r2, #10
 8003566:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003568:	4804      	ldr	r0, [pc, #16]	; (800357c <MX_SPI1_Init+0x64>)
 800356a:	f004 fddd 	bl	8008128 <HAL_SPI_Init>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003574:	f000 f93c 	bl	80037f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003578:	bf00      	nop
 800357a:	bd80      	pop	{r7, pc}
 800357c:	20000b3c 	.word	0x20000b3c
 8003580:	40013000 	.word	0x40013000

08003584 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b08a      	sub	sp, #40	; 0x28
 8003588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800358a:	f107 0320 	add.w	r3, r7, #32
 800358e:	2200      	movs	r2, #0
 8003590:	601a      	str	r2, [r3, #0]
 8003592:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003594:	1d3b      	adds	r3, r7, #4
 8003596:	2200      	movs	r2, #0
 8003598:	601a      	str	r2, [r3, #0]
 800359a:	605a      	str	r2, [r3, #4]
 800359c:	609a      	str	r2, [r3, #8]
 800359e:	60da      	str	r2, [r3, #12]
 80035a0:	611a      	str	r2, [r3, #16]
 80035a2:	615a      	str	r2, [r3, #20]
 80035a4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80035a6:	4b21      	ldr	r3, [pc, #132]	; (800362c <MX_TIM3_Init+0xa8>)
 80035a8:	4a21      	ldr	r2, [pc, #132]	; (8003630 <MX_TIM3_Init+0xac>)
 80035aa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80035ac:	4b1f      	ldr	r3, [pc, #124]	; (800362c <MX_TIM3_Init+0xa8>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035b2:	4b1e      	ldr	r3, [pc, #120]	; (800362c <MX_TIM3_Init+0xa8>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 80035b8:	4b1c      	ldr	r3, [pc, #112]	; (800362c <MX_TIM3_Init+0xa8>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035be:	4b1b      	ldr	r3, [pc, #108]	; (800362c <MX_TIM3_Init+0xa8>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035c4:	4b19      	ldr	r3, [pc, #100]	; (800362c <MX_TIM3_Init+0xa8>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80035ca:	4818      	ldr	r0, [pc, #96]	; (800362c <MX_TIM3_Init+0xa8>)
 80035cc:	f005 fac6 	bl	8008b5c <HAL_TIM_PWM_Init>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80035d6:	f000 f90b 	bl	80037f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035da:	2300      	movs	r3, #0
 80035dc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035de:	2300      	movs	r3, #0
 80035e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80035e2:	f107 0320 	add.w	r3, r7, #32
 80035e6:	4619      	mov	r1, r3
 80035e8:	4810      	ldr	r0, [pc, #64]	; (800362c <MX_TIM3_Init+0xa8>)
 80035ea:	f005 fd93 	bl	8009114 <HAL_TIMEx_MasterConfigSynchronization>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d001      	beq.n	80035f8 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 80035f4:	f000 f8fc 	bl	80037f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80035f8:	2360      	movs	r3, #96	; 0x60
 80035fa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80035fc:	2300      	movs	r3, #0
 80035fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003600:	2300      	movs	r3, #0
 8003602:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003604:	2300      	movs	r3, #0
 8003606:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003608:	1d3b      	adds	r3, r7, #4
 800360a:	2208      	movs	r2, #8
 800360c:	4619      	mov	r1, r3
 800360e:	4807      	ldr	r0, [pc, #28]	; (800362c <MX_TIM3_Init+0xa8>)
 8003610:	f005 fad0 	bl	8008bb4 <HAL_TIM_PWM_ConfigChannel>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800361a:	f000 f8e9 	bl	80037f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800361e:	4803      	ldr	r0, [pc, #12]	; (800362c <MX_TIM3_Init+0xa8>)
 8003620:	f000 fedc 	bl	80043dc <HAL_TIM_MspPostInit>

}
 8003624:	bf00      	nop
 8003626:	3728      	adds	r7, #40	; 0x28
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	20000a3c 	.word	0x20000a3c
 8003630:	40000400 	.word	0x40000400

08003634 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003638:	4b11      	ldr	r3, [pc, #68]	; (8003680 <MX_USART1_UART_Init+0x4c>)
 800363a:	4a12      	ldr	r2, [pc, #72]	; (8003684 <MX_USART1_UART_Init+0x50>)
 800363c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800363e:	4b10      	ldr	r3, [pc, #64]	; (8003680 <MX_USART1_UART_Init+0x4c>)
 8003640:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003644:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003646:	4b0e      	ldr	r3, [pc, #56]	; (8003680 <MX_USART1_UART_Init+0x4c>)
 8003648:	2200      	movs	r2, #0
 800364a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800364c:	4b0c      	ldr	r3, [pc, #48]	; (8003680 <MX_USART1_UART_Init+0x4c>)
 800364e:	2200      	movs	r2, #0
 8003650:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003652:	4b0b      	ldr	r3, [pc, #44]	; (8003680 <MX_USART1_UART_Init+0x4c>)
 8003654:	2200      	movs	r2, #0
 8003656:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003658:	4b09      	ldr	r3, [pc, #36]	; (8003680 <MX_USART1_UART_Init+0x4c>)
 800365a:	220c      	movs	r2, #12
 800365c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800365e:	4b08      	ldr	r3, [pc, #32]	; (8003680 <MX_USART1_UART_Init+0x4c>)
 8003660:	2200      	movs	r2, #0
 8003662:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003664:	4b06      	ldr	r3, [pc, #24]	; (8003680 <MX_USART1_UART_Init+0x4c>)
 8003666:	2200      	movs	r2, #0
 8003668:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800366a:	4805      	ldr	r0, [pc, #20]	; (8003680 <MX_USART1_UART_Init+0x4c>)
 800366c:	f005 fd96 	bl	800919c <HAL_UART_Init>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003676:	f000 f8bb 	bl	80037f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800367a:	bf00      	nop
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	20000aec 	.word	0x20000aec
 8003684:	40013800 	.word	0x40013800

08003688 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800368c:	4b11      	ldr	r3, [pc, #68]	; (80036d4 <MX_USART2_UART_Init+0x4c>)
 800368e:	4a12      	ldr	r2, [pc, #72]	; (80036d8 <MX_USART2_UART_Init+0x50>)
 8003690:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003692:	4b10      	ldr	r3, [pc, #64]	; (80036d4 <MX_USART2_UART_Init+0x4c>)
 8003694:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003698:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800369a:	4b0e      	ldr	r3, [pc, #56]	; (80036d4 <MX_USART2_UART_Init+0x4c>)
 800369c:	2200      	movs	r2, #0
 800369e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80036a0:	4b0c      	ldr	r3, [pc, #48]	; (80036d4 <MX_USART2_UART_Init+0x4c>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80036a6:	4b0b      	ldr	r3, [pc, #44]	; (80036d4 <MX_USART2_UART_Init+0x4c>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80036ac:	4b09      	ldr	r3, [pc, #36]	; (80036d4 <MX_USART2_UART_Init+0x4c>)
 80036ae:	220c      	movs	r2, #12
 80036b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036b2:	4b08      	ldr	r3, [pc, #32]	; (80036d4 <MX_USART2_UART_Init+0x4c>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80036b8:	4b06      	ldr	r3, [pc, #24]	; (80036d4 <MX_USART2_UART_Init+0x4c>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80036be:	4805      	ldr	r0, [pc, #20]	; (80036d4 <MX_USART2_UART_Init+0x4c>)
 80036c0:	f005 fd6c 	bl	800919c <HAL_UART_Init>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80036ca:	f000 f891 	bl	80037f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80036ce:	bf00      	nop
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	20000b94 	.word	0x20000b94
 80036d8:	40004400 	.word	0x40004400

080036dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b088      	sub	sp, #32
 80036e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036e2:	f107 0310 	add.w	r3, r7, #16
 80036e6:	2200      	movs	r2, #0
 80036e8:	601a      	str	r2, [r3, #0]
 80036ea:	605a      	str	r2, [r3, #4]
 80036ec:	609a      	str	r2, [r3, #8]
 80036ee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80036f0:	4b3b      	ldr	r3, [pc, #236]	; (80037e0 <MX_GPIO_Init+0x104>)
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	4a3a      	ldr	r2, [pc, #232]	; (80037e0 <MX_GPIO_Init+0x104>)
 80036f6:	f043 0310 	orr.w	r3, r3, #16
 80036fa:	6193      	str	r3, [r2, #24]
 80036fc:	4b38      	ldr	r3, [pc, #224]	; (80037e0 <MX_GPIO_Init+0x104>)
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	f003 0310 	and.w	r3, r3, #16
 8003704:	60fb      	str	r3, [r7, #12]
 8003706:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003708:	4b35      	ldr	r3, [pc, #212]	; (80037e0 <MX_GPIO_Init+0x104>)
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	4a34      	ldr	r2, [pc, #208]	; (80037e0 <MX_GPIO_Init+0x104>)
 800370e:	f043 0320 	orr.w	r3, r3, #32
 8003712:	6193      	str	r3, [r2, #24]
 8003714:	4b32      	ldr	r3, [pc, #200]	; (80037e0 <MX_GPIO_Init+0x104>)
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	f003 0320 	and.w	r3, r3, #32
 800371c:	60bb      	str	r3, [r7, #8]
 800371e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003720:	4b2f      	ldr	r3, [pc, #188]	; (80037e0 <MX_GPIO_Init+0x104>)
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	4a2e      	ldr	r2, [pc, #184]	; (80037e0 <MX_GPIO_Init+0x104>)
 8003726:	f043 0304 	orr.w	r3, r3, #4
 800372a:	6193      	str	r3, [r2, #24]
 800372c:	4b2c      	ldr	r3, [pc, #176]	; (80037e0 <MX_GPIO_Init+0x104>)
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	f003 0304 	and.w	r3, r3, #4
 8003734:	607b      	str	r3, [r7, #4]
 8003736:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003738:	4b29      	ldr	r3, [pc, #164]	; (80037e0 <MX_GPIO_Init+0x104>)
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	4a28      	ldr	r2, [pc, #160]	; (80037e0 <MX_GPIO_Init+0x104>)
 800373e:	f043 0308 	orr.w	r3, r3, #8
 8003742:	6193      	str	r3, [r2, #24]
 8003744:	4b26      	ldr	r3, [pc, #152]	; (80037e0 <MX_GPIO_Init+0x104>)
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	f003 0308 	and.w	r3, r3, #8
 800374c:	603b      	str	r3, [r7, #0]
 800374e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|CSN_Pin|CE_Pin, GPIO_PIN_RESET);
 8003750:	2200      	movs	r2, #0
 8003752:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8003756:	4823      	ldr	r0, [pc, #140]	; (80037e4 <MX_GPIO_Init+0x108>)
 8003758:	f001 ffab 	bl	80056b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ON_Pin|MOS_Pin, GPIO_PIN_RESET);
 800375c:	2200      	movs	r2, #0
 800375e:	f44f 7108 	mov.w	r1, #544	; 0x220
 8003762:	4821      	ldr	r0, [pc, #132]	; (80037e8 <MX_GPIO_Init+0x10c>)
 8003764:	f001 ffa5 	bl	80056b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin CSN_Pin CE_Pin */
  GPIO_InitStruct.Pin = LED_Pin|CSN_Pin|CE_Pin;
 8003768:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800376c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800376e:	2301      	movs	r3, #1
 8003770:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003772:	2300      	movs	r3, #0
 8003774:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003776:	2302      	movs	r3, #2
 8003778:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800377a:	f107 0310 	add.w	r3, r7, #16
 800377e:	4619      	mov	r1, r3
 8003780:	4818      	ldr	r0, [pc, #96]	; (80037e4 <MX_GPIO_Init+0x108>)
 8003782:	f001 fd69 	bl	8005258 <HAL_GPIO_Init>

  /*Configure GPIO pins : BT_LD_Pin BT_LA_Pin BT_RS_Pin BT_RA_Pin 
                           BT_RB_Pin BT_RC_Pin BT_LB_Pin VIN_Pin 
                           BT_POWER_Pin */
  GPIO_InitStruct.Pin = BT_LD_Pin|BT_LA_Pin|BT_RS_Pin|BT_RA_Pin 
 8003786:	f24f 131e 	movw	r3, #61726	; 0xf11e
 800378a:	613b      	str	r3, [r7, #16]
                          |BT_RB_Pin|BT_RC_Pin|BT_LB_Pin|VIN_Pin 
                          |BT_POWER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800378c:	2300      	movs	r3, #0
 800378e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003790:	2300      	movs	r3, #0
 8003792:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003794:	f107 0310 	add.w	r3, r7, #16
 8003798:	4619      	mov	r1, r3
 800379a:	4813      	ldr	r0, [pc, #76]	; (80037e8 <MX_GPIO_Init+0x10c>)
 800379c:	f001 fd5c 	bl	8005258 <HAL_GPIO_Init>

  /*Configure GPIO pins : BT_RD_Pin BT_LC_Pin */
  GPIO_InitStruct.Pin = BT_RD_Pin|BT_LC_Pin;
 80037a0:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80037a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80037a6:	2300      	movs	r3, #0
 80037a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037aa:	2300      	movs	r3, #0
 80037ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037ae:	f107 0310 	add.w	r3, r7, #16
 80037b2:	4619      	mov	r1, r3
 80037b4:	480d      	ldr	r0, [pc, #52]	; (80037ec <MX_GPIO_Init+0x110>)
 80037b6:	f001 fd4f 	bl	8005258 <HAL_GPIO_Init>

  /*Configure GPIO pins : ON_Pin MOS_Pin */
  GPIO_InitStruct.Pin = ON_Pin|MOS_Pin;
 80037ba:	f44f 7308 	mov.w	r3, #544	; 0x220
 80037be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037c0:	2301      	movs	r3, #1
 80037c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c4:	2300      	movs	r3, #0
 80037c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037c8:	2302      	movs	r3, #2
 80037ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037cc:	f107 0310 	add.w	r3, r7, #16
 80037d0:	4619      	mov	r1, r3
 80037d2:	4805      	ldr	r0, [pc, #20]	; (80037e8 <MX_GPIO_Init+0x10c>)
 80037d4:	f001 fd40 	bl	8005258 <HAL_GPIO_Init>

}
 80037d8:	bf00      	nop
 80037da:	3720      	adds	r7, #32
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	40021000 	.word	0x40021000
 80037e4:	40011000 	.word	0x40011000
 80037e8:	40010c00 	.word	0x40010c00
 80037ec:	40010800 	.word	0x40010800

080037f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80037f4:	bf00      	nop
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bc80      	pop	{r7}
 80037fa:	4770      	bx	lr

080037fc <CUSTOM_HID_Init_FS>:
  *         Initializes the CUSTOM HID media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{ 
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */ 
  return (0);
 8003800:	2300      	movs	r3, #0
  /* USER CODE END 4 */ 
}
 8003802:	4618      	mov	r0, r3
 8003804:	46bd      	mov	sp, r7
 8003806:	bc80      	pop	{r7}
 8003808:	4770      	bx	lr

0800380a <CUSTOM_HID_DeInit_FS>:
  *         DeInitializes the CUSTOM HID media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800380a:	b480      	push	{r7}
 800380c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */ 
  return (0);
 800380e:	2300      	movs	r3, #0
  /* USER CODE END 5 */ 
}
 8003810:	4618      	mov	r0, r3
 8003812:	46bd      	mov	sp, r7
 8003814:	bc80      	pop	{r7}
 8003816:	4770      	bx	lr

08003818 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: event index
  * @param  state: event state
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS  (uint8_t event_idx, uint8_t state)
{ 
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	4603      	mov	r3, r0
 8003820:	460a      	mov	r2, r1
 8003822:	71fb      	strb	r3, [r7, #7]
 8003824:	4613      	mov	r3, r2
 8003826:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */ 
  return (0);
 8003828:	2300      	movs	r3, #0
  /* USER CODE END 6 */ 
}
 800382a:	4618      	mov	r0, r3
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	bc80      	pop	{r7}
 8003832:	4770      	bx	lr

08003834 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	460b      	mov	r3, r1
 800383e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8003840:	2300      	movs	r3, #0
 8003842:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;
  /* Open EP IN */
  USBD_LL_OpenEP(pdev,
 8003844:	2320      	movs	r3, #32
 8003846:	2203      	movs	r2, #3
 8003848:	2181      	movs	r1, #129	; 0x81
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f008 fba1 	bl	800bf92 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_ADDR,
                 USBD_EP_TYPE_INTR,
                 CUSTOM_HID_EPIN_SIZE);  
  
  /* Open EP OUT */
  USBD_LL_OpenEP(pdev,
 8003850:	2308      	movs	r3, #8
 8003852:	2203      	movs	r2, #3
 8003854:	2101      	movs	r1, #1
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f008 fb9b 	bl	800bf92 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_ADDR,
                 USBD_EP_TYPE_INTR,
                 CUSTOM_HID_EPOUT_SIZE);
  
  pdev->pClassData = USBD_malloc(sizeof (USBD_CUSTOM_HID_HandleTypeDef));
 800385c:	2028      	movs	r0, #40	; 0x28
 800385e:	f008 fca5 	bl	800c1ac <USBD_static_malloc>
 8003862:	4602      	mov	r2, r0
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  
  if(pdev->pClassData == NULL)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003870:	2b00      	cmp	r3, #0
 8003872:	d102      	bne.n	800387a <USBD_CUSTOM_HID_Init+0x46>
  {
    ret = 1; 
 8003874:	2301      	movs	r3, #1
 8003876:	73fb      	strb	r3, [r7, #15]
 8003878:	e012      	b.n	80038a0 <USBD_CUSTOM_HID_Init+0x6c>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef*) pdev->pClassData;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003880:	60bb      	str	r3, [r7, #8]
      
    hhid->state = CUSTOM_HID_IDLE;
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	4798      	blx	r3
          /* Prepare Out endpoint to receive 1st packet */ 
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf, 
 8003894:	68ba      	ldr	r2, [r7, #8]
 8003896:	2314      	movs	r3, #20
 8003898:	2101      	movs	r1, #1
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f008 fc63 	bl	800c166 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }
    
  return ret;
 80038a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3710      	adds	r7, #16
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}

080038aa <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 80038aa:	b580      	push	{r7, lr}
 80038ac:	b082      	sub	sp, #8
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
 80038b2:	460b      	mov	r3, r1
 80038b4:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev,
 80038b6:	2181      	movs	r1, #129	; 0x81
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f008 fb90 	bl	800bfde <USBD_LL_CloseEP>
                  CUSTOM_HID_EPIN_ADDR);
  
  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev,
 80038be:	2101      	movs	r1, #1
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f008 fb8c 	bl	800bfde <USBD_LL_CloseEP>
                  CUSTOM_HID_EPOUT_ADDR);
  
  /* FRee allocated memory */
  if(pdev->pClassData != NULL)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00e      	beq.n	80038ee <USBD_CUSTOM_HID_DeInit+0x44>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80038e0:	4618      	mov	r0, r3
 80038e2:	f008 fc6f 	bl	800c1c4 <USBD_static_free>
    pdev->pClassData = NULL;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }
  return USBD_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3708      	adds	r7, #8
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b086      	sub	sp, #24
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  uint16_t len = 0;
 8003902:	2300      	movs	r3, #0
 8003904:	82fb      	strh	r3, [r7, #22]
  uint8_t  *pbuf = NULL;
 8003906:	2300      	movs	r3, #0
 8003908:	613b      	str	r3, [r7, #16]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003910:	60fb      	str	r3, [r7, #12]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800391a:	2b00      	cmp	r3, #0
 800391c:	d052      	beq.n	80039c4 <USBD_CUSTOM_HID_Setup+0xcc>
 800391e:	2b20      	cmp	r3, #32
 8003920:	f040 808e 	bne.w	8003a40 <USBD_CUSTOM_HID_Setup+0x148>
  {
  case USB_REQ_TYPE_CLASS :  
    switch (req->bRequest)
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	785b      	ldrb	r3, [r3, #1]
 8003928:	3b02      	subs	r3, #2
 800392a:	2b09      	cmp	r3, #9
 800392c:	d843      	bhi.n	80039b6 <USBD_CUSTOM_HID_Setup+0xbe>
 800392e:	a201      	add	r2, pc, #4	; (adr r2, 8003934 <USBD_CUSTOM_HID_Setup+0x3c>)
 8003930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003934:	0800398d 	.word	0x0800398d
 8003938:	0800396b 	.word	0x0800396b
 800393c:	080039b7 	.word	0x080039b7
 8003940:	080039b7 	.word	0x080039b7
 8003944:	080039b7 	.word	0x080039b7
 8003948:	080039b7 	.word	0x080039b7
 800394c:	080039b7 	.word	0x080039b7
 8003950:	0800399d 	.word	0x0800399d
 8003954:	0800397b 	.word	0x0800397b
 8003958:	0800395d 	.word	0x0800395d
    {
      
      
    case CUSTOM_HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	885b      	ldrh	r3, [r3, #2]
 8003960:	b2db      	uxtb	r3, r3
 8003962:	461a      	mov	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	615a      	str	r2, [r3, #20]
      break;
 8003968:	e02b      	b.n	80039c2 <USBD_CUSTOM_HID_Setup+0xca>
      
    case CUSTOM_HID_REQ_GET_PROTOCOL:
      USBD_CtlSendData (pdev, 
                        (uint8_t *)&hhid->Protocol,
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	3314      	adds	r3, #20
      USBD_CtlSendData (pdev, 
 800396e:	2201      	movs	r2, #1
 8003970:	4619      	mov	r1, r3
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f007 ffc6 	bl	800b904 <USBD_CtlSendData>
                        1);    
      break;
 8003978:	e023      	b.n	80039c2 <USBD_CUSTOM_HID_Setup+0xca>
      
    case CUSTOM_HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	885b      	ldrh	r3, [r3, #2]
 800397e:	0a1b      	lsrs	r3, r3, #8
 8003980:	b29b      	uxth	r3, r3
 8003982:	b2db      	uxtb	r3, r3
 8003984:	461a      	mov	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	619a      	str	r2, [r3, #24]
      break;
 800398a:	e01a      	b.n	80039c2 <USBD_CUSTOM_HID_Setup+0xca>
      
    case CUSTOM_HID_REQ_GET_IDLE:
      USBD_CtlSendData (pdev, 
                        (uint8_t *)&hhid->IdleState,
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	3318      	adds	r3, #24
      USBD_CtlSendData (pdev, 
 8003990:	2201      	movs	r2, #1
 8003992:	4619      	mov	r1, r3
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f007 ffb5 	bl	800b904 <USBD_CtlSendData>
                        1);        
      break;      
 800399a:	e012      	b.n	80039c2 <USBD_CUSTOM_HID_Setup+0xca>
    
    case CUSTOM_HID_REQ_SET_REPORT:
      hhid->IsReportAvailable = 1;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2201      	movs	r2, #1
 80039a0:	621a      	str	r2, [r3, #32]
      USBD_CtlPrepareRx (pdev, hhid->Report_buf, (uint8_t)(req->wLength));
 80039a2:	68f9      	ldr	r1, [r7, #12]
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	88db      	ldrh	r3, [r3, #6]
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	461a      	mov	r2, r3
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f007 ffd6 	bl	800b960 <USBD_CtlPrepareRx>
      
      break;
 80039b4:	e005      	b.n	80039c2 <USBD_CUSTOM_HID_Setup+0xca>
    default:
      USBD_CtlError (pdev, req);
 80039b6:	6839      	ldr	r1, [r7, #0]
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f007 ff39 	bl	800b830 <USBD_CtlError>
      return USBD_FAIL; 
 80039be:	2302      	movs	r3, #2
 80039c0:	e03f      	b.n	8003a42 <USBD_CUSTOM_HID_Setup+0x14a>
    }
    break;
 80039c2:	e03d      	b.n	8003a40 <USBD_CUSTOM_HID_Setup+0x148>
    
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	785b      	ldrb	r3, [r3, #1]
 80039c8:	2b0a      	cmp	r3, #10
 80039ca:	d02a      	beq.n	8003a22 <USBD_CUSTOM_HID_Setup+0x12a>
 80039cc:	2b0b      	cmp	r3, #11
 80039ce:	d030      	beq.n	8003a32 <USBD_CUSTOM_HID_Setup+0x13a>
 80039d0:	2b06      	cmp	r3, #6
 80039d2:	d135      	bne.n	8003a40 <USBD_CUSTOM_HID_Setup+0x148>
    {
    case USB_REQ_GET_DESCRIPTOR: 
      if( req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	885b      	ldrh	r3, [r3, #2]
 80039d8:	0a1b      	lsrs	r3, r3, #8
 80039da:	b29b      	uxth	r3, r3
 80039dc:	2b22      	cmp	r3, #34	; 0x22
 80039de:	d10b      	bne.n	80039f8 <USBD_CUSTOM_HID_Setup+0x100>
      {
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE , req->wLength);
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	88db      	ldrh	r3, [r3, #6]
 80039e4:	2b14      	cmp	r3, #20
 80039e6:	bf28      	it	cs
 80039e8:	2314      	movcs	r3, #20
 80039ea:	82fb      	strh	r3, [r7, #22]
        pbuf =  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	613b      	str	r3, [r7, #16]
 80039f6:	e00d      	b.n	8003a14 <USBD_CUSTOM_HID_Setup+0x11c>
      }
      else if( req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	885b      	ldrh	r3, [r3, #2]
 80039fc:	0a1b      	lsrs	r3, r3, #8
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	2b21      	cmp	r3, #33	; 0x21
 8003a02:	d107      	bne.n	8003a14 <USBD_CUSTOM_HID_Setup+0x11c>
      {
        pbuf = USBD_CUSTOM_HID_Desc;   
 8003a04:	4b11      	ldr	r3, [pc, #68]	; (8003a4c <USBD_CUSTOM_HID_Setup+0x154>)
 8003a06:	613b      	str	r3, [r7, #16]
        len = MIN(USB_CUSTOM_HID_DESC_SIZ , req->wLength);
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	88db      	ldrh	r3, [r3, #6]
 8003a0c:	2b09      	cmp	r3, #9
 8003a0e:	bf28      	it	cs
 8003a10:	2309      	movcs	r3, #9
 8003a12:	82fb      	strh	r3, [r7, #22]
      }
      
      USBD_CtlSendData (pdev, 
 8003a14:	8afb      	ldrh	r3, [r7, #22]
 8003a16:	461a      	mov	r2, r3
 8003a18:	6939      	ldr	r1, [r7, #16]
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f007 ff72 	bl	800b904 <USBD_CtlSendData>
                        pbuf,
                        len);
      
      break;
 8003a20:	e00e      	b.n	8003a40 <USBD_CUSTOM_HID_Setup+0x148>
      
    case USB_REQ_GET_INTERFACE :
      USBD_CtlSendData (pdev,
                        (uint8_t *)&hhid->AltSetting,
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	331c      	adds	r3, #28
      USBD_CtlSendData (pdev,
 8003a26:	2201      	movs	r2, #1
 8003a28:	4619      	mov	r1, r3
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f007 ff6a 	bl	800b904 <USBD_CtlSendData>
                        1);
      break;
 8003a30:	e006      	b.n	8003a40 <USBD_CUSTOM_HID_Setup+0x148>
      
    case USB_REQ_SET_INTERFACE :
      hhid->AltSetting = (uint8_t)(req->wValue);
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	885b      	ldrh	r3, [r3, #2]
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	461a      	mov	r2, r3
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	61da      	str	r2, [r3, #28]
      break;
 8003a3e:	bf00      	nop
    }
  }
  return USBD_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3718      	adds	r7, #24
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	2000011c 	.word	0x2000011c

08003a50 <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport     (USBD_HandleTypeDef  *pdev, 
                                 uint8_t *report,
                                 uint16_t len)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003a64:	617b      	str	r3, [r7, #20]
  
  if (pdev->dev_state == USBD_STATE_CONFIGURED )
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003a6c:	2b03      	cmp	r3, #3
 8003a6e:	d10e      	bne.n	8003a8e <USBD_CUSTOM_HID_SendReport+0x3e>
  {
    if(hhid->state == CUSTOM_HID_IDLE)
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d109      	bne.n	8003a8e <USBD_CUSTOM_HID_SendReport+0x3e>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      USBD_LL_Transmit (pdev, 
 8003a82:	88fb      	ldrh	r3, [r7, #6]
 8003a84:	68ba      	ldr	r2, [r7, #8]
 8003a86:	2181      	movs	r1, #129	; 0x81
 8003a88:	68f8      	ldr	r0, [r7, #12]
 8003a8a:	f008 fb49 	bl	800c120 <USBD_LL_Transmit>
                        CUSTOM_HID_EPIN_ADDR,                                      
                        report,
                        len);
    }
  }
  return USBD_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3718      	adds	r7, #24
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <USBD_CUSTOM_HID_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetCfgDesc (uint16_t *length)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_CfgDesc);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2299      	movs	r2, #153	; 0x99
 8003aa4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8003aa6:	4b03      	ldr	r3, [pc, #12]	; (8003ab4 <USBD_CUSTOM_HID_GetCfgDesc+0x1c>)
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bc80      	pop	{r7}
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	20000080 	.word	0x20000080

08003ab8 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn (USBD_HandleTypeDef *pdev, 
                              uint8_t epnum)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	70fb      	strb	r3, [r7, #3]
  
  /* Ensure that the FIFO is empty before a new transfer, this condition could 
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return USBD_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bc80      	pop	{r7}
 8003ada:	4770      	bx	lr

08003adc <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut (USBD_HandleTypeDef *pdev, 
                              uint8_t epnum)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	70fb      	strb	r3, [r7, #3]
  
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;  
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003aee:	60fb      	str	r3, [r7, #12]
  
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0], 
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	7810      	ldrb	r0, [r2, #0]
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	7852      	ldrb	r2, [r2, #1]
 8003b00:	4611      	mov	r1, r2
 8003b02:	4798      	blx	r3
                                                            hhid->Report_buf[1]);
    
  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR , hhid->Report_buf, 
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	2314      	movs	r3, #20
 8003b08:	2101      	movs	r1, #1
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f008 fb2b 	bl	800c166 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3710      	adds	r7, #16
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}

08003b1a <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	b084      	sub	sp, #16
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;  
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003b28:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d10c      	bne.n	8003b4c <USBD_CUSTOM_HID_EP0_RxReady+0x32>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0], 
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	7810      	ldrb	r0, [r2, #0]
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	7852      	ldrb	r2, [r2, #1]
 8003b42:	4611      	mov	r1, r2
 8003b44:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0;      
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	621a      	str	r2, [r3, #32]
  }

  return USBD_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3710      	adds	r7, #16
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
	...

08003b58 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc (uint16_t *length)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_DeviceQualifierDesc);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	220a      	movs	r2, #10
 8003b64:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8003b66:	4b03      	ldr	r3, [pc, #12]	; (8003b74 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bc80      	pop	{r7}
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	20000128 	.word	0x20000128

08003b78 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                             USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b085      	sub	sp, #20
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8003b82:	2302      	movs	r3, #2
 8003b84:	73fb      	strb	r3, [r7, #15]
  
  if(fops != NULL)
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d005      	beq.n	8003b98 <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	683a      	ldr	r2, [r7, #0]
 8003b90:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;    
 8003b94:	2300      	movs	r3, #0
 8003b96:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8003b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3714      	adds	r7, #20
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bc80      	pop	{r7}
 8003ba2:	4770      	bx	lr

08003ba4 <SSD1306_Init>:
} SSD1306_t;

/* Private variable */
static SSD1306_t SSD1306;

uint8_t SSD1306_Init(void) {
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8003baa:	f000 fa19 	bl	8003fe0 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8003bae:	f644 6320 	movw	r3, #20000	; 0x4e20
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	2178      	movs	r1, #120	; 0x78
 8003bb6:	4858      	ldr	r0, [pc, #352]	; (8003d18 <SSD1306_Init+0x174>)
 8003bb8:	f002 fa30 	bl	800601c <HAL_I2C_IsDeviceReady>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	e0a4      	b.n	8003d10 <SSD1306_Init+0x16c>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8003bc6:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8003bca:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003bcc:	e002      	b.n	8003bd4 <SSD1306_Init+0x30>
		p--;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1f9      	bne.n	8003bce <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8003bda:	22ae      	movs	r2, #174	; 0xae
 8003bdc:	2100      	movs	r1, #0
 8003bde:	2078      	movs	r0, #120	; 0x78
 8003be0:	f000 fa6c 	bl	80040bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8003be4:	2220      	movs	r2, #32
 8003be6:	2100      	movs	r1, #0
 8003be8:	2078      	movs	r0, #120	; 0x78
 8003bea:	f000 fa67 	bl	80040bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8003bee:	2210      	movs	r2, #16
 8003bf0:	2100      	movs	r1, #0
 8003bf2:	2078      	movs	r0, #120	; 0x78
 8003bf4:	f000 fa62 	bl	80040bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003bf8:	22b0      	movs	r2, #176	; 0xb0
 8003bfa:	2100      	movs	r1, #0
 8003bfc:	2078      	movs	r0, #120	; 0x78
 8003bfe:	f000 fa5d 	bl	80040bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8003c02:	22c8      	movs	r2, #200	; 0xc8
 8003c04:	2100      	movs	r1, #0
 8003c06:	2078      	movs	r0, #120	; 0x78
 8003c08:	f000 fa58 	bl	80040bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	2100      	movs	r1, #0
 8003c10:	2078      	movs	r0, #120	; 0x78
 8003c12:	f000 fa53 	bl	80040bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8003c16:	2210      	movs	r2, #16
 8003c18:	2100      	movs	r1, #0
 8003c1a:	2078      	movs	r0, #120	; 0x78
 8003c1c:	f000 fa4e 	bl	80040bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8003c20:	2240      	movs	r2, #64	; 0x40
 8003c22:	2100      	movs	r1, #0
 8003c24:	2078      	movs	r0, #120	; 0x78
 8003c26:	f000 fa49 	bl	80040bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8003c2a:	2281      	movs	r2, #129	; 0x81
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	2078      	movs	r0, #120	; 0x78
 8003c30:	f000 fa44 	bl	80040bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8003c34:	22ff      	movs	r2, #255	; 0xff
 8003c36:	2100      	movs	r1, #0
 8003c38:	2078      	movs	r0, #120	; 0x78
 8003c3a:	f000 fa3f 	bl	80040bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8003c3e:	22a1      	movs	r2, #161	; 0xa1
 8003c40:	2100      	movs	r1, #0
 8003c42:	2078      	movs	r0, #120	; 0x78
 8003c44:	f000 fa3a 	bl	80040bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8003c48:	22a6      	movs	r2, #166	; 0xa6
 8003c4a:	2100      	movs	r1, #0
 8003c4c:	2078      	movs	r0, #120	; 0x78
 8003c4e:	f000 fa35 	bl	80040bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8003c52:	22a8      	movs	r2, #168	; 0xa8
 8003c54:	2100      	movs	r1, #0
 8003c56:	2078      	movs	r0, #120	; 0x78
 8003c58:	f000 fa30 	bl	80040bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8003c5c:	223f      	movs	r2, #63	; 0x3f
 8003c5e:	2100      	movs	r1, #0
 8003c60:	2078      	movs	r0, #120	; 0x78
 8003c62:	f000 fa2b 	bl	80040bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003c66:	22a4      	movs	r2, #164	; 0xa4
 8003c68:	2100      	movs	r1, #0
 8003c6a:	2078      	movs	r0, #120	; 0x78
 8003c6c:	f000 fa26 	bl	80040bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8003c70:	22d3      	movs	r2, #211	; 0xd3
 8003c72:	2100      	movs	r1, #0
 8003c74:	2078      	movs	r0, #120	; 0x78
 8003c76:	f000 fa21 	bl	80040bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	2078      	movs	r0, #120	; 0x78
 8003c80:	f000 fa1c 	bl	80040bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8003c84:	22d5      	movs	r2, #213	; 0xd5
 8003c86:	2100      	movs	r1, #0
 8003c88:	2078      	movs	r0, #120	; 0x78
 8003c8a:	f000 fa17 	bl	80040bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8003c8e:	22f0      	movs	r2, #240	; 0xf0
 8003c90:	2100      	movs	r1, #0
 8003c92:	2078      	movs	r0, #120	; 0x78
 8003c94:	f000 fa12 	bl	80040bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8003c98:	22d9      	movs	r2, #217	; 0xd9
 8003c9a:	2100      	movs	r1, #0
 8003c9c:	2078      	movs	r0, #120	; 0x78
 8003c9e:	f000 fa0d 	bl	80040bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8003ca2:	2222      	movs	r2, #34	; 0x22
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	2078      	movs	r0, #120	; 0x78
 8003ca8:	f000 fa08 	bl	80040bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8003cac:	22da      	movs	r2, #218	; 0xda
 8003cae:	2100      	movs	r1, #0
 8003cb0:	2078      	movs	r0, #120	; 0x78
 8003cb2:	f000 fa03 	bl	80040bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8003cb6:	2212      	movs	r2, #18
 8003cb8:	2100      	movs	r1, #0
 8003cba:	2078      	movs	r0, #120	; 0x78
 8003cbc:	f000 f9fe 	bl	80040bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8003cc0:	22db      	movs	r2, #219	; 0xdb
 8003cc2:	2100      	movs	r1, #0
 8003cc4:	2078      	movs	r0, #120	; 0x78
 8003cc6:	f000 f9f9 	bl	80040bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8003cca:	2220      	movs	r2, #32
 8003ccc:	2100      	movs	r1, #0
 8003cce:	2078      	movs	r0, #120	; 0x78
 8003cd0:	f000 f9f4 	bl	80040bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8003cd4:	228d      	movs	r2, #141	; 0x8d
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	2078      	movs	r0, #120	; 0x78
 8003cda:	f000 f9ef 	bl	80040bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8003cde:	2214      	movs	r2, #20
 8003ce0:	2100      	movs	r1, #0
 8003ce2:	2078      	movs	r0, #120	; 0x78
 8003ce4:	f000 f9ea 	bl	80040bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8003ce8:	22af      	movs	r2, #175	; 0xaf
 8003cea:	2100      	movs	r1, #0
 8003cec:	2078      	movs	r0, #120	; 0x78
 8003cee:	f000 f9e5 	bl	80040bc <ssd1306_I2C_Write>
	
	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8003cf2:	2000      	movs	r0, #0
 8003cf4:	f000 f842 	bl	8003d7c <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8003cf8:	f000 f812 	bl	8003d20 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8003cfc:	4b07      	ldr	r3, [pc, #28]	; (8003d1c <SSD1306_Init+0x178>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8003d02:	4b06      	ldr	r3, [pc, #24]	; (8003d1c <SSD1306_Init+0x178>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8003d08:	4b04      	ldr	r3, [pc, #16]	; (8003d1c <SSD1306_Init+0x178>)
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8003d0e:	2301      	movs	r3, #1
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3708      	adds	r7, #8
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	2000098c 	.word	0x2000098c
 8003d1c:	20000744 	.word	0x20000744

08003d20 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8003d26:	2300      	movs	r3, #0
 8003d28:	71fb      	strb	r3, [r7, #7]
 8003d2a:	e01d      	b.n	8003d68 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8003d2c:	79fb      	ldrb	r3, [r7, #7]
 8003d2e:	3b50      	subs	r3, #80	; 0x50
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	461a      	mov	r2, r3
 8003d34:	2100      	movs	r1, #0
 8003d36:	2078      	movs	r0, #120	; 0x78
 8003d38:	f000 f9c0 	bl	80040bc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	2100      	movs	r1, #0
 8003d40:	2078      	movs	r0, #120	; 0x78
 8003d42:	f000 f9bb 	bl	80040bc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8003d46:	2210      	movs	r2, #16
 8003d48:	2100      	movs	r1, #0
 8003d4a:	2078      	movs	r0, #120	; 0x78
 8003d4c:	f000 f9b6 	bl	80040bc <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8003d50:	79fb      	ldrb	r3, [r7, #7]
 8003d52:	01db      	lsls	r3, r3, #7
 8003d54:	4a08      	ldr	r2, [pc, #32]	; (8003d78 <SSD1306_UpdateScreen+0x58>)
 8003d56:	441a      	add	r2, r3
 8003d58:	2380      	movs	r3, #128	; 0x80
 8003d5a:	2140      	movs	r1, #64	; 0x40
 8003d5c:	2078      	movs	r0, #120	; 0x78
 8003d5e:	f000 f953 	bl	8004008 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8003d62:	79fb      	ldrb	r3, [r7, #7]
 8003d64:	3301      	adds	r3, #1
 8003d66:	71fb      	strb	r3, [r7, #7]
 8003d68:	79fb      	ldrb	r3, [r7, #7]
 8003d6a:	2b07      	cmp	r3, #7
 8003d6c:	d9de      	bls.n	8003d2c <SSD1306_UpdateScreen+0xc>
	}
}
 8003d6e:	bf00      	nop
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	20000344 	.word	0x20000344

08003d7c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	4603      	mov	r3, r0
 8003d84:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8003d86:	79fb      	ldrb	r3, [r7, #7]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d101      	bne.n	8003d90 <SSD1306_Fill+0x14>
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	e000      	b.n	8003d92 <SSD1306_Fill+0x16>
 8003d90:	23ff      	movs	r3, #255	; 0xff
 8003d92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d96:	4619      	mov	r1, r3
 8003d98:	4803      	ldr	r0, [pc, #12]	; (8003da8 <SSD1306_Fill+0x2c>)
 8003d9a:	f008 fa88 	bl	800c2ae <memset>
}
 8003d9e:	bf00      	nop
 8003da0:	3708      	adds	r7, #8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	20000344 	.word	0x20000344

08003dac <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	4603      	mov	r3, r0
 8003db4:	80fb      	strh	r3, [r7, #6]
 8003db6:	460b      	mov	r3, r1
 8003db8:	80bb      	strh	r3, [r7, #4]
 8003dba:	4613      	mov	r3, r2
 8003dbc:	70fb      	strb	r3, [r7, #3]
	if (
 8003dbe:	88fb      	ldrh	r3, [r7, #6]
 8003dc0:	2b7f      	cmp	r3, #127	; 0x7f
 8003dc2:	d848      	bhi.n	8003e56 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8003dc4:	88bb      	ldrh	r3, [r7, #4]
 8003dc6:	2b3f      	cmp	r3, #63	; 0x3f
 8003dc8:	d845      	bhi.n	8003e56 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8003dca:	4b25      	ldr	r3, [pc, #148]	; (8003e60 <SSD1306_DrawPixel+0xb4>)
 8003dcc:	791b      	ldrb	r3, [r3, #4]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d006      	beq.n	8003de0 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8003dd2:	78fb      	ldrb	r3, [r7, #3]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	bf0c      	ite	eq
 8003dd8:	2301      	moveq	r3, #1
 8003dda:	2300      	movne	r3, #0
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8003de0:	78fb      	ldrb	r3, [r7, #3]
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d11a      	bne.n	8003e1c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003de6:	88fa      	ldrh	r2, [r7, #6]
 8003de8:	88bb      	ldrh	r3, [r7, #4]
 8003dea:	08db      	lsrs	r3, r3, #3
 8003dec:	b298      	uxth	r0, r3
 8003dee:	4603      	mov	r3, r0
 8003df0:	01db      	lsls	r3, r3, #7
 8003df2:	4413      	add	r3, r2
 8003df4:	4a1b      	ldr	r2, [pc, #108]	; (8003e64 <SSD1306_DrawPixel+0xb8>)
 8003df6:	5cd3      	ldrb	r3, [r2, r3]
 8003df8:	b25a      	sxtb	r2, r3
 8003dfa:	88bb      	ldrh	r3, [r7, #4]
 8003dfc:	f003 0307 	and.w	r3, r3, #7
 8003e00:	2101      	movs	r1, #1
 8003e02:	fa01 f303 	lsl.w	r3, r1, r3
 8003e06:	b25b      	sxtb	r3, r3
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	b259      	sxtb	r1, r3
 8003e0c:	88fa      	ldrh	r2, [r7, #6]
 8003e0e:	4603      	mov	r3, r0
 8003e10:	01db      	lsls	r3, r3, #7
 8003e12:	4413      	add	r3, r2
 8003e14:	b2c9      	uxtb	r1, r1
 8003e16:	4a13      	ldr	r2, [pc, #76]	; (8003e64 <SSD1306_DrawPixel+0xb8>)
 8003e18:	54d1      	strb	r1, [r2, r3]
 8003e1a:	e01d      	b.n	8003e58 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003e1c:	88fa      	ldrh	r2, [r7, #6]
 8003e1e:	88bb      	ldrh	r3, [r7, #4]
 8003e20:	08db      	lsrs	r3, r3, #3
 8003e22:	b298      	uxth	r0, r3
 8003e24:	4603      	mov	r3, r0
 8003e26:	01db      	lsls	r3, r3, #7
 8003e28:	4413      	add	r3, r2
 8003e2a:	4a0e      	ldr	r2, [pc, #56]	; (8003e64 <SSD1306_DrawPixel+0xb8>)
 8003e2c:	5cd3      	ldrb	r3, [r2, r3]
 8003e2e:	b25a      	sxtb	r2, r3
 8003e30:	88bb      	ldrh	r3, [r7, #4]
 8003e32:	f003 0307 	and.w	r3, r3, #7
 8003e36:	2101      	movs	r1, #1
 8003e38:	fa01 f303 	lsl.w	r3, r1, r3
 8003e3c:	b25b      	sxtb	r3, r3
 8003e3e:	43db      	mvns	r3, r3
 8003e40:	b25b      	sxtb	r3, r3
 8003e42:	4013      	ands	r3, r2
 8003e44:	b259      	sxtb	r1, r3
 8003e46:	88fa      	ldrh	r2, [r7, #6]
 8003e48:	4603      	mov	r3, r0
 8003e4a:	01db      	lsls	r3, r3, #7
 8003e4c:	4413      	add	r3, r2
 8003e4e:	b2c9      	uxtb	r1, r1
 8003e50:	4a04      	ldr	r2, [pc, #16]	; (8003e64 <SSD1306_DrawPixel+0xb8>)
 8003e52:	54d1      	strb	r1, [r2, r3]
 8003e54:	e000      	b.n	8003e58 <SSD1306_DrawPixel+0xac>
		return;
 8003e56:	bf00      	nop
	}
}
 8003e58:	370c      	adds	r7, #12
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bc80      	pop	{r7}
 8003e5e:	4770      	bx	lr
 8003e60:	20000744 	.word	0x20000744
 8003e64:	20000344 	.word	0x20000344

08003e68 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	4603      	mov	r3, r0
 8003e70:	460a      	mov	r2, r1
 8003e72:	80fb      	strh	r3, [r7, #6]
 8003e74:	4613      	mov	r3, r2
 8003e76:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8003e78:	4a05      	ldr	r2, [pc, #20]	; (8003e90 <SSD1306_GotoXY+0x28>)
 8003e7a:	88fb      	ldrh	r3, [r7, #6]
 8003e7c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8003e7e:	4a04      	ldr	r2, [pc, #16]	; (8003e90 <SSD1306_GotoXY+0x28>)
 8003e80:	88bb      	ldrh	r3, [r7, #4]
 8003e82:	8053      	strh	r3, [r2, #2]
}
 8003e84:	bf00      	nop
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bc80      	pop	{r7}
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	20000744 	.word	0x20000744

08003e94 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	6039      	str	r1, [r7, #0]
 8003e9e:	71fb      	strb	r3, [r7, #7]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8003ea4:	4b3a      	ldr	r3, [pc, #232]	; (8003f90 <SSD1306_Putc+0xfc>)
 8003ea6:	881b      	ldrh	r3, [r3, #0]
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	4413      	add	r3, r2
	if (
 8003eb0:	2b7f      	cmp	r3, #127	; 0x7f
 8003eb2:	dc07      	bgt.n	8003ec4 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8003eb4:	4b36      	ldr	r3, [pc, #216]	; (8003f90 <SSD1306_Putc+0xfc>)
 8003eb6:	885b      	ldrh	r3, [r3, #2]
 8003eb8:	461a      	mov	r2, r3
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	785b      	ldrb	r3, [r3, #1]
 8003ebe:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8003ec0:	2b3f      	cmp	r3, #63	; 0x3f
 8003ec2:	dd01      	ble.n	8003ec8 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	e05e      	b.n	8003f86 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8003ec8:	2300      	movs	r3, #0
 8003eca:	617b      	str	r3, [r7, #20]
 8003ecc:	e04b      	b.n	8003f66 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	685a      	ldr	r2, [r3, #4]
 8003ed2:	79fb      	ldrb	r3, [r7, #7]
 8003ed4:	3b20      	subs	r3, #32
 8003ed6:	6839      	ldr	r1, [r7, #0]
 8003ed8:	7849      	ldrb	r1, [r1, #1]
 8003eda:	fb01 f303 	mul.w	r3, r1, r3
 8003ede:	4619      	mov	r1, r3
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	440b      	add	r3, r1
 8003ee4:	005b      	lsls	r3, r3, #1
 8003ee6:	4413      	add	r3, r2
 8003ee8:	881b      	ldrh	r3, [r3, #0]
 8003eea:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8003eec:	2300      	movs	r3, #0
 8003eee:	613b      	str	r3, [r7, #16]
 8003ef0:	e030      	b.n	8003f54 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8003efa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d010      	beq.n	8003f24 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8003f02:	4b23      	ldr	r3, [pc, #140]	; (8003f90 <SSD1306_Putc+0xfc>)
 8003f04:	881a      	ldrh	r2, [r3, #0]
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	4413      	add	r3, r2
 8003f0c:	b298      	uxth	r0, r3
 8003f0e:	4b20      	ldr	r3, [pc, #128]	; (8003f90 <SSD1306_Putc+0xfc>)
 8003f10:	885a      	ldrh	r2, [r3, #2]
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	4413      	add	r3, r2
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	79ba      	ldrb	r2, [r7, #6]
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	f7ff ff45 	bl	8003dac <SSD1306_DrawPixel>
 8003f22:	e014      	b.n	8003f4e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8003f24:	4b1a      	ldr	r3, [pc, #104]	; (8003f90 <SSD1306_Putc+0xfc>)
 8003f26:	881a      	ldrh	r2, [r3, #0]
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	4413      	add	r3, r2
 8003f2e:	b298      	uxth	r0, r3
 8003f30:	4b17      	ldr	r3, [pc, #92]	; (8003f90 <SSD1306_Putc+0xfc>)
 8003f32:	885a      	ldrh	r2, [r3, #2]
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	4413      	add	r3, r2
 8003f3a:	b299      	uxth	r1, r3
 8003f3c:	79bb      	ldrb	r3, [r7, #6]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	bf0c      	ite	eq
 8003f42:	2301      	moveq	r3, #1
 8003f44:	2300      	movne	r3, #0
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	461a      	mov	r2, r3
 8003f4a:	f7ff ff2f 	bl	8003dac <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	3301      	adds	r3, #1
 8003f52:	613b      	str	r3, [r7, #16]
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	461a      	mov	r2, r3
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d3c8      	bcc.n	8003ef2 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	3301      	adds	r3, #1
 8003f64:	617b      	str	r3, [r7, #20]
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	785b      	ldrb	r3, [r3, #1]
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d3ad      	bcc.n	8003ece <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8003f72:	4b07      	ldr	r3, [pc, #28]	; (8003f90 <SSD1306_Putc+0xfc>)
 8003f74:	881a      	ldrh	r2, [r3, #0]
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	4413      	add	r3, r2
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	4b03      	ldr	r3, [pc, #12]	; (8003f90 <SSD1306_Putc+0xfc>)
 8003f82:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8003f84:	79fb      	ldrb	r3, [r7, #7]
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3718      	adds	r7, #24
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	20000744 	.word	0x20000744

08003f94 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8003fa2:	e012      	b.n	8003fca <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	79fa      	ldrb	r2, [r7, #7]
 8003faa:	68b9      	ldr	r1, [r7, #8]
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7ff ff71 	bl	8003e94 <SSD1306_Putc>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d002      	beq.n	8003fc4 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	e008      	b.n	8003fd6 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1e8      	bne.n	8003fa4 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	781b      	ldrb	r3, [r3, #0]
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3710      	adds	r7, #16
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
	...

08003fe0 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8003fe6:	4b07      	ldr	r3, [pc, #28]	; (8004004 <ssd1306_I2C_Init+0x24>)
 8003fe8:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003fea:	e002      	b.n	8003ff2 <ssd1306_I2C_Init+0x12>
		p--;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1f9      	bne.n	8003fec <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bc80      	pop	{r7}
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	0003d090 	.word	0x0003d090

08004008 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8004008:	b5b0      	push	{r4, r5, r7, lr}
 800400a:	b088      	sub	sp, #32
 800400c:	af02      	add	r7, sp, #8
 800400e:	603a      	str	r2, [r7, #0]
 8004010:	461a      	mov	r2, r3
 8004012:	4603      	mov	r3, r0
 8004014:	71fb      	strb	r3, [r7, #7]
 8004016:	460b      	mov	r3, r1
 8004018:	71bb      	strb	r3, [r7, #6]
 800401a:	4613      	mov	r3, r2
 800401c:	80bb      	strh	r3, [r7, #4]
 800401e:	466b      	mov	r3, sp
 8004020:	461d      	mov	r5, r3
	uint8_t dt[count + 1];
 8004022:	88bb      	ldrh	r3, [r7, #4]
 8004024:	1c58      	adds	r0, r3, #1
 8004026:	1e43      	subs	r3, r0, #1
 8004028:	613b      	str	r3, [r7, #16]
 800402a:	4603      	mov	r3, r0
 800402c:	4619      	mov	r1, r3
 800402e:	f04f 0200 	mov.w	r2, #0
 8004032:	f04f 0300 	mov.w	r3, #0
 8004036:	f04f 0400 	mov.w	r4, #0
 800403a:	00d4      	lsls	r4, r2, #3
 800403c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8004040:	00cb      	lsls	r3, r1, #3
 8004042:	4603      	mov	r3, r0
 8004044:	4619      	mov	r1, r3
 8004046:	f04f 0200 	mov.w	r2, #0
 800404a:	f04f 0300 	mov.w	r3, #0
 800404e:	f04f 0400 	mov.w	r4, #0
 8004052:	00d4      	lsls	r4, r2, #3
 8004054:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8004058:	00cb      	lsls	r3, r1, #3
 800405a:	4603      	mov	r3, r0
 800405c:	3307      	adds	r3, #7
 800405e:	08db      	lsrs	r3, r3, #3
 8004060:	00db      	lsls	r3, r3, #3
 8004062:	ebad 0d03 	sub.w	sp, sp, r3
 8004066:	ab02      	add	r3, sp, #8
 8004068:	3300      	adds	r3, #0
 800406a:	60fb      	str	r3, [r7, #12]
	dt[0] = reg;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	79ba      	ldrb	r2, [r7, #6]
 8004070:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 1; i <= count; i++)
 8004072:	2301      	movs	r3, #1
 8004074:	75fb      	strb	r3, [r7, #23]
 8004076:	e00a      	b.n	800408e <ssd1306_I2C_WriteMulti+0x86>
		dt[i] = data[i-1];
 8004078:	7dfb      	ldrb	r3, [r7, #23]
 800407a:	3b01      	subs	r3, #1
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	441a      	add	r2, r3
 8004080:	7dfb      	ldrb	r3, [r7, #23]
 8004082:	7811      	ldrb	r1, [r2, #0]
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	54d1      	strb	r1, [r2, r3]
	for(i = 1; i <= count; i++)
 8004088:	7dfb      	ldrb	r3, [r7, #23]
 800408a:	3301      	adds	r3, #1
 800408c:	75fb      	strb	r3, [r7, #23]
 800408e:	7dfb      	ldrb	r3, [r7, #23]
 8004090:	b29b      	uxth	r3, r3
 8004092:	88ba      	ldrh	r2, [r7, #4]
 8004094:	429a      	cmp	r2, r3
 8004096:	d2ef      	bcs.n	8004078 <ssd1306_I2C_WriteMulti+0x70>
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, count, 10);
 8004098:	79fb      	ldrb	r3, [r7, #7]
 800409a:	b299      	uxth	r1, r3
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	88b8      	ldrh	r0, [r7, #4]
 80040a0:	230a      	movs	r3, #10
 80040a2:	9300      	str	r3, [sp, #0]
 80040a4:	4603      	mov	r3, r0
 80040a6:	4804      	ldr	r0, [pc, #16]	; (80040b8 <ssd1306_I2C_WriteMulti+0xb0>)
 80040a8:	f001 fc8c 	bl	80059c4 <HAL_I2C_Master_Transmit>
 80040ac:	46ad      	mov	sp, r5
}
 80040ae:	bf00      	nop
 80040b0:	3718      	adds	r7, #24
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bdb0      	pop	{r4, r5, r7, pc}
 80040b6:	bf00      	nop
 80040b8:	2000098c 	.word	0x2000098c

080040bc <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80040bc:	b580      	push	{r7, lr}
 80040be:	b086      	sub	sp, #24
 80040c0:	af02      	add	r7, sp, #8
 80040c2:	4603      	mov	r3, r0
 80040c4:	71fb      	strb	r3, [r7, #7]
 80040c6:	460b      	mov	r3, r1
 80040c8:	71bb      	strb	r3, [r7, #6]
 80040ca:	4613      	mov	r3, r2
 80040cc:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80040ce:	79bb      	ldrb	r3, [r7, #6]
 80040d0:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80040d2:	797b      	ldrb	r3, [r7, #5]
 80040d4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80040d6:	79fb      	ldrb	r3, [r7, #7]
 80040d8:	b299      	uxth	r1, r3
 80040da:	f107 020c 	add.w	r2, r7, #12
 80040de:	230a      	movs	r3, #10
 80040e0:	9300      	str	r3, [sp, #0]
 80040e2:	2302      	movs	r3, #2
 80040e4:	4803      	ldr	r0, [pc, #12]	; (80040f4 <ssd1306_I2C_Write+0x38>)
 80040e6:	f001 fc6d 	bl	80059c4 <HAL_I2C_Master_Transmit>
}
 80040ea:	bf00      	nop
 80040ec:	3710      	adds	r7, #16
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	2000098c 	.word	0x2000098c

080040f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80040fe:	4b15      	ldr	r3, [pc, #84]	; (8004154 <HAL_MspInit+0x5c>)
 8004100:	699b      	ldr	r3, [r3, #24]
 8004102:	4a14      	ldr	r2, [pc, #80]	; (8004154 <HAL_MspInit+0x5c>)
 8004104:	f043 0301 	orr.w	r3, r3, #1
 8004108:	6193      	str	r3, [r2, #24]
 800410a:	4b12      	ldr	r3, [pc, #72]	; (8004154 <HAL_MspInit+0x5c>)
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	60bb      	str	r3, [r7, #8]
 8004114:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004116:	4b0f      	ldr	r3, [pc, #60]	; (8004154 <HAL_MspInit+0x5c>)
 8004118:	69db      	ldr	r3, [r3, #28]
 800411a:	4a0e      	ldr	r2, [pc, #56]	; (8004154 <HAL_MspInit+0x5c>)
 800411c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004120:	61d3      	str	r3, [r2, #28]
 8004122:	4b0c      	ldr	r3, [pc, #48]	; (8004154 <HAL_MspInit+0x5c>)
 8004124:	69db      	ldr	r3, [r3, #28]
 8004126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800412a:	607b      	str	r3, [r7, #4]
 800412c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800412e:	4b0a      	ldr	r3, [pc, #40]	; (8004158 <HAL_MspInit+0x60>)
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	60fb      	str	r3, [r7, #12]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800413a:	60fb      	str	r3, [r7, #12]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004142:	60fb      	str	r3, [r7, #12]
 8004144:	4a04      	ldr	r2, [pc, #16]	; (8004158 <HAL_MspInit+0x60>)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800414a:	bf00      	nop
 800414c:	3714      	adds	r7, #20
 800414e:	46bd      	mov	sp, r7
 8004150:	bc80      	pop	{r7}
 8004152:	4770      	bx	lr
 8004154:	40021000 	.word	0x40021000
 8004158:	40010000 	.word	0x40010000

0800415c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b088      	sub	sp, #32
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004164:	f107 0310 	add.w	r3, r7, #16
 8004168:	2200      	movs	r2, #0
 800416a:	601a      	str	r2, [r3, #0]
 800416c:	605a      	str	r2, [r3, #4]
 800416e:	609a      	str	r2, [r3, #8]
 8004170:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a14      	ldr	r2, [pc, #80]	; (80041c8 <HAL_ADC_MspInit+0x6c>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d121      	bne.n	80041c0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800417c:	4b13      	ldr	r3, [pc, #76]	; (80041cc <HAL_ADC_MspInit+0x70>)
 800417e:	699b      	ldr	r3, [r3, #24]
 8004180:	4a12      	ldr	r2, [pc, #72]	; (80041cc <HAL_ADC_MspInit+0x70>)
 8004182:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004186:	6193      	str	r3, [r2, #24]
 8004188:	4b10      	ldr	r3, [pc, #64]	; (80041cc <HAL_ADC_MspInit+0x70>)
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004190:	60fb      	str	r3, [r7, #12]
 8004192:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004194:	4b0d      	ldr	r3, [pc, #52]	; (80041cc <HAL_ADC_MspInit+0x70>)
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	4a0c      	ldr	r2, [pc, #48]	; (80041cc <HAL_ADC_MspInit+0x70>)
 800419a:	f043 0304 	orr.w	r3, r3, #4
 800419e:	6193      	str	r3, [r2, #24]
 80041a0:	4b0a      	ldr	r3, [pc, #40]	; (80041cc <HAL_ADC_MspInit+0x70>)
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	f003 0304 	and.w	r3, r3, #4
 80041a8:	60bb      	str	r3, [r7, #8]
 80041aa:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = HORISONTAL_Pin|VERTICAL_Pin|BAT_Pin;
 80041ac:	2313      	movs	r3, #19
 80041ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80041b0:	2303      	movs	r3, #3
 80041b2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041b4:	f107 0310 	add.w	r3, r7, #16
 80041b8:	4619      	mov	r1, r3
 80041ba:	4805      	ldr	r0, [pc, #20]	; (80041d0 <HAL_ADC_MspInit+0x74>)
 80041bc:	f001 f84c 	bl	8005258 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80041c0:	bf00      	nop
 80041c2:	3720      	adds	r7, #32
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	40012400 	.word	0x40012400
 80041cc:	40021000 	.word	0x40021000
 80041d0:	40010800 	.word	0x40010800

080041d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b08a      	sub	sp, #40	; 0x28
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041dc:	f107 0318 	add.w	r3, r7, #24
 80041e0:	2200      	movs	r2, #0
 80041e2:	601a      	str	r2, [r3, #0]
 80041e4:	605a      	str	r2, [r3, #4]
 80041e6:	609a      	str	r2, [r3, #8]
 80041e8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a2b      	ldr	r2, [pc, #172]	; (800429c <HAL_I2C_MspInit+0xc8>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d124      	bne.n	800423e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041f4:	4b2a      	ldr	r3, [pc, #168]	; (80042a0 <HAL_I2C_MspInit+0xcc>)
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	4a29      	ldr	r2, [pc, #164]	; (80042a0 <HAL_I2C_MspInit+0xcc>)
 80041fa:	f043 0308 	orr.w	r3, r3, #8
 80041fe:	6193      	str	r3, [r2, #24]
 8004200:	4b27      	ldr	r3, [pc, #156]	; (80042a0 <HAL_I2C_MspInit+0xcc>)
 8004202:	699b      	ldr	r3, [r3, #24]
 8004204:	f003 0308 	and.w	r3, r3, #8
 8004208:	617b      	str	r3, [r7, #20]
 800420a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 800420c:	23c0      	movs	r3, #192	; 0xc0
 800420e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004210:	2312      	movs	r3, #18
 8004212:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004214:	2303      	movs	r3, #3
 8004216:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004218:	f107 0318 	add.w	r3, r7, #24
 800421c:	4619      	mov	r1, r3
 800421e:	4821      	ldr	r0, [pc, #132]	; (80042a4 <HAL_I2C_MspInit+0xd0>)
 8004220:	f001 f81a 	bl	8005258 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004224:	4b1e      	ldr	r3, [pc, #120]	; (80042a0 <HAL_I2C_MspInit+0xcc>)
 8004226:	69db      	ldr	r3, [r3, #28]
 8004228:	4a1d      	ldr	r2, [pc, #116]	; (80042a0 <HAL_I2C_MspInit+0xcc>)
 800422a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800422e:	61d3      	str	r3, [r2, #28]
 8004230:	4b1b      	ldr	r3, [pc, #108]	; (80042a0 <HAL_I2C_MspInit+0xcc>)
 8004232:	69db      	ldr	r3, [r3, #28]
 8004234:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004238:	613b      	str	r3, [r7, #16]
 800423a:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800423c:	e029      	b.n	8004292 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a19      	ldr	r2, [pc, #100]	; (80042a8 <HAL_I2C_MspInit+0xd4>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d124      	bne.n	8004292 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004248:	4b15      	ldr	r3, [pc, #84]	; (80042a0 <HAL_I2C_MspInit+0xcc>)
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	4a14      	ldr	r2, [pc, #80]	; (80042a0 <HAL_I2C_MspInit+0xcc>)
 800424e:	f043 0308 	orr.w	r3, r3, #8
 8004252:	6193      	str	r3, [r2, #24]
 8004254:	4b12      	ldr	r3, [pc, #72]	; (80042a0 <HAL_I2C_MspInit+0xcc>)
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	f003 0308 	and.w	r3, r3, #8
 800425c:	60fb      	str	r3, [r7, #12]
 800425e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SCL_IMU_Pin|SDA_IMU_Pin;
 8004260:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004264:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004266:	2312      	movs	r3, #18
 8004268:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800426a:	2303      	movs	r3, #3
 800426c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800426e:	f107 0318 	add.w	r3, r7, #24
 8004272:	4619      	mov	r1, r3
 8004274:	480b      	ldr	r0, [pc, #44]	; (80042a4 <HAL_I2C_MspInit+0xd0>)
 8004276:	f000 ffef 	bl	8005258 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800427a:	4b09      	ldr	r3, [pc, #36]	; (80042a0 <HAL_I2C_MspInit+0xcc>)
 800427c:	69db      	ldr	r3, [r3, #28]
 800427e:	4a08      	ldr	r2, [pc, #32]	; (80042a0 <HAL_I2C_MspInit+0xcc>)
 8004280:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004284:	61d3      	str	r3, [r2, #28]
 8004286:	4b06      	ldr	r3, [pc, #24]	; (80042a0 <HAL_I2C_MspInit+0xcc>)
 8004288:	69db      	ldr	r3, [r3, #28]
 800428a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800428e:	60bb      	str	r3, [r7, #8]
 8004290:	68bb      	ldr	r3, [r7, #8]
}
 8004292:	bf00      	nop
 8004294:	3728      	adds	r7, #40	; 0x28
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	40005400 	.word	0x40005400
 80042a0:	40021000 	.word	0x40021000
 80042a4:	40010c00 	.word	0x40010c00
 80042a8:	40005800 	.word	0x40005800

080042ac <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a10      	ldr	r2, [pc, #64]	; (80042fc <HAL_I2C_MspDeInit+0x50>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d10a      	bne.n	80042d4 <HAL_I2C_MspDeInit+0x28>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80042be:	4b10      	ldr	r3, [pc, #64]	; (8004300 <HAL_I2C_MspDeInit+0x54>)
 80042c0:	69db      	ldr	r3, [r3, #28]
 80042c2:	4a0f      	ldr	r2, [pc, #60]	; (8004300 <HAL_I2C_MspDeInit+0x54>)
 80042c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80042c8:	61d3      	str	r3, [r2, #28]
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, SCL_Pin|SDA_Pin);
 80042ca:	21c0      	movs	r1, #192	; 0xc0
 80042cc:	480d      	ldr	r0, [pc, #52]	; (8004304 <HAL_I2C_MspDeInit+0x58>)
 80042ce:	f001 f91d 	bl	800550c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80042d2:	e00f      	b.n	80042f4 <HAL_I2C_MspDeInit+0x48>
  else if(hi2c->Instance==I2C2)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a0b      	ldr	r2, [pc, #44]	; (8004308 <HAL_I2C_MspDeInit+0x5c>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d10a      	bne.n	80042f4 <HAL_I2C_MspDeInit+0x48>
    __HAL_RCC_I2C2_CLK_DISABLE();
 80042de:	4b08      	ldr	r3, [pc, #32]	; (8004300 <HAL_I2C_MspDeInit+0x54>)
 80042e0:	69db      	ldr	r3, [r3, #28]
 80042e2:	4a07      	ldr	r2, [pc, #28]	; (8004300 <HAL_I2C_MspDeInit+0x54>)
 80042e4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80042e8:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, SCL_IMU_Pin|SDA_IMU_Pin);
 80042ea:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80042ee:	4805      	ldr	r0, [pc, #20]	; (8004304 <HAL_I2C_MspDeInit+0x58>)
 80042f0:	f001 f90c 	bl	800550c <HAL_GPIO_DeInit>
}
 80042f4:	bf00      	nop
 80042f6:	3708      	adds	r7, #8
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	40005400 	.word	0x40005400
 8004300:	40021000 	.word	0x40021000
 8004304:	40010c00 	.word	0x40010c00
 8004308:	40005800 	.word	0x40005800

0800430c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b088      	sub	sp, #32
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004314:	f107 0310 	add.w	r3, r7, #16
 8004318:	2200      	movs	r2, #0
 800431a:	601a      	str	r2, [r3, #0]
 800431c:	605a      	str	r2, [r3, #4]
 800431e:	609a      	str	r2, [r3, #8]
 8004320:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a1b      	ldr	r2, [pc, #108]	; (8004394 <HAL_SPI_MspInit+0x88>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d12f      	bne.n	800438c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800432c:	4b1a      	ldr	r3, [pc, #104]	; (8004398 <HAL_SPI_MspInit+0x8c>)
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	4a19      	ldr	r2, [pc, #100]	; (8004398 <HAL_SPI_MspInit+0x8c>)
 8004332:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004336:	6193      	str	r3, [r2, #24]
 8004338:	4b17      	ldr	r3, [pc, #92]	; (8004398 <HAL_SPI_MspInit+0x8c>)
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004340:	60fb      	str	r3, [r7, #12]
 8004342:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004344:	4b14      	ldr	r3, [pc, #80]	; (8004398 <HAL_SPI_MspInit+0x8c>)
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	4a13      	ldr	r2, [pc, #76]	; (8004398 <HAL_SPI_MspInit+0x8c>)
 800434a:	f043 0304 	orr.w	r3, r3, #4
 800434e:	6193      	str	r3, [r2, #24]
 8004350:	4b11      	ldr	r3, [pc, #68]	; (8004398 <HAL_SPI_MspInit+0x8c>)
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	f003 0304 	and.w	r3, r3, #4
 8004358:	60bb      	str	r3, [r7, #8]
 800435a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800435c:	23a0      	movs	r3, #160	; 0xa0
 800435e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004360:	2302      	movs	r3, #2
 8004362:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004364:	2303      	movs	r3, #3
 8004366:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004368:	f107 0310 	add.w	r3, r7, #16
 800436c:	4619      	mov	r1, r3
 800436e:	480b      	ldr	r0, [pc, #44]	; (800439c <HAL_SPI_MspInit+0x90>)
 8004370:	f000 ff72 	bl	8005258 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004374:	2340      	movs	r3, #64	; 0x40
 8004376:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004378:	2300      	movs	r3, #0
 800437a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800437c:	2300      	movs	r3, #0
 800437e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004380:	f107 0310 	add.w	r3, r7, #16
 8004384:	4619      	mov	r1, r3
 8004386:	4805      	ldr	r0, [pc, #20]	; (800439c <HAL_SPI_MspInit+0x90>)
 8004388:	f000 ff66 	bl	8005258 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800438c:	bf00      	nop
 800438e:	3720      	adds	r7, #32
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	40013000 	.word	0x40013000
 8004398:	40021000 	.word	0x40021000
 800439c:	40010800 	.word	0x40010800

080043a0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b085      	sub	sp, #20
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a09      	ldr	r2, [pc, #36]	; (80043d4 <HAL_TIM_PWM_MspInit+0x34>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d10b      	bne.n	80043ca <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80043b2:	4b09      	ldr	r3, [pc, #36]	; (80043d8 <HAL_TIM_PWM_MspInit+0x38>)
 80043b4:	69db      	ldr	r3, [r3, #28]
 80043b6:	4a08      	ldr	r2, [pc, #32]	; (80043d8 <HAL_TIM_PWM_MspInit+0x38>)
 80043b8:	f043 0302 	orr.w	r3, r3, #2
 80043bc:	61d3      	str	r3, [r2, #28]
 80043be:	4b06      	ldr	r3, [pc, #24]	; (80043d8 <HAL_TIM_PWM_MspInit+0x38>)
 80043c0:	69db      	ldr	r3, [r3, #28]
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	60fb      	str	r3, [r7, #12]
 80043c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80043ca:	bf00      	nop
 80043cc:	3714      	adds	r7, #20
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bc80      	pop	{r7}
 80043d2:	4770      	bx	lr
 80043d4:	40000400 	.word	0x40000400
 80043d8:	40021000 	.word	0x40021000

080043dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b088      	sub	sp, #32
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043e4:	f107 0310 	add.w	r3, r7, #16
 80043e8:	2200      	movs	r2, #0
 80043ea:	601a      	str	r2, [r3, #0]
 80043ec:	605a      	str	r2, [r3, #4]
 80043ee:	609a      	str	r2, [r3, #8]
 80043f0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a0f      	ldr	r2, [pc, #60]	; (8004434 <HAL_TIM_MspPostInit+0x58>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d117      	bne.n	800442c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043fc:	4b0e      	ldr	r3, [pc, #56]	; (8004438 <HAL_TIM_MspPostInit+0x5c>)
 80043fe:	699b      	ldr	r3, [r3, #24]
 8004400:	4a0d      	ldr	r2, [pc, #52]	; (8004438 <HAL_TIM_MspPostInit+0x5c>)
 8004402:	f043 0308 	orr.w	r3, r3, #8
 8004406:	6193      	str	r3, [r2, #24]
 8004408:	4b0b      	ldr	r3, [pc, #44]	; (8004438 <HAL_TIM_MspPostInit+0x5c>)
 800440a:	699b      	ldr	r3, [r3, #24]
 800440c:	f003 0308 	and.w	r3, r3, #8
 8004410:	60fb      	str	r3, [r7, #12]
 8004412:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration    
    PB0     ------> TIM3_CH3 
    */
    GPIO_InitStruct.Pin = BUZZ_Pin;
 8004414:	2301      	movs	r3, #1
 8004416:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004418:	2302      	movs	r3, #2
 800441a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800441c:	2302      	movs	r3, #2
 800441e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUZZ_GPIO_Port, &GPIO_InitStruct);
 8004420:	f107 0310 	add.w	r3, r7, #16
 8004424:	4619      	mov	r1, r3
 8004426:	4805      	ldr	r0, [pc, #20]	; (800443c <HAL_TIM_MspPostInit+0x60>)
 8004428:	f000 ff16 	bl	8005258 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800442c:	bf00      	nop
 800442e:	3720      	adds	r7, #32
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}
 8004434:	40000400 	.word	0x40000400
 8004438:	40021000 	.word	0x40021000
 800443c:	40010c00 	.word	0x40010c00

08004440 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b08a      	sub	sp, #40	; 0x28
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004448:	f107 0318 	add.w	r3, r7, #24
 800444c:	2200      	movs	r2, #0
 800444e:	601a      	str	r2, [r3, #0]
 8004450:	605a      	str	r2, [r3, #4]
 8004452:	609a      	str	r2, [r3, #8]
 8004454:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a37      	ldr	r2, [pc, #220]	; (8004538 <HAL_UART_MspInit+0xf8>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d132      	bne.n	80044c6 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004460:	4b36      	ldr	r3, [pc, #216]	; (800453c <HAL_UART_MspInit+0xfc>)
 8004462:	699b      	ldr	r3, [r3, #24]
 8004464:	4a35      	ldr	r2, [pc, #212]	; (800453c <HAL_UART_MspInit+0xfc>)
 8004466:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800446a:	6193      	str	r3, [r2, #24]
 800446c:	4b33      	ldr	r3, [pc, #204]	; (800453c <HAL_UART_MspInit+0xfc>)
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004474:	617b      	str	r3, [r7, #20]
 8004476:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004478:	4b30      	ldr	r3, [pc, #192]	; (800453c <HAL_UART_MspInit+0xfc>)
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	4a2f      	ldr	r2, [pc, #188]	; (800453c <HAL_UART_MspInit+0xfc>)
 800447e:	f043 0304 	orr.w	r3, r3, #4
 8004482:	6193      	str	r3, [r2, #24]
 8004484:	4b2d      	ldr	r3, [pc, #180]	; (800453c <HAL_UART_MspInit+0xfc>)
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	f003 0304 	and.w	r3, r3, #4
 800448c:	613b      	str	r3, [r7, #16]
 800448e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004490:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004494:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004496:	2302      	movs	r3, #2
 8004498:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800449a:	2303      	movs	r3, #3
 800449c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800449e:	f107 0318 	add.w	r3, r7, #24
 80044a2:	4619      	mov	r1, r3
 80044a4:	4826      	ldr	r0, [pc, #152]	; (8004540 <HAL_UART_MspInit+0x100>)
 80044a6:	f000 fed7 	bl	8005258 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80044aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80044b0:	2300      	movs	r3, #0
 80044b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044b4:	2300      	movs	r3, #0
 80044b6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044b8:	f107 0318 	add.w	r3, r7, #24
 80044bc:	4619      	mov	r1, r3
 80044be:	4820      	ldr	r0, [pc, #128]	; (8004540 <HAL_UART_MspInit+0x100>)
 80044c0:	f000 feca 	bl	8005258 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80044c4:	e034      	b.n	8004530 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a1e      	ldr	r2, [pc, #120]	; (8004544 <HAL_UART_MspInit+0x104>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d12f      	bne.n	8004530 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80044d0:	4b1a      	ldr	r3, [pc, #104]	; (800453c <HAL_UART_MspInit+0xfc>)
 80044d2:	69db      	ldr	r3, [r3, #28]
 80044d4:	4a19      	ldr	r2, [pc, #100]	; (800453c <HAL_UART_MspInit+0xfc>)
 80044d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044da:	61d3      	str	r3, [r2, #28]
 80044dc:	4b17      	ldr	r3, [pc, #92]	; (800453c <HAL_UART_MspInit+0xfc>)
 80044de:	69db      	ldr	r3, [r3, #28]
 80044e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044e4:	60fb      	str	r3, [r7, #12]
 80044e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044e8:	4b14      	ldr	r3, [pc, #80]	; (800453c <HAL_UART_MspInit+0xfc>)
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	4a13      	ldr	r2, [pc, #76]	; (800453c <HAL_UART_MspInit+0xfc>)
 80044ee:	f043 0304 	orr.w	r3, r3, #4
 80044f2:	6193      	str	r3, [r2, #24]
 80044f4:	4b11      	ldr	r3, [pc, #68]	; (800453c <HAL_UART_MspInit+0xfc>)
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	f003 0304 	and.w	r3, r3, #4
 80044fc:	60bb      	str	r3, [r7, #8]
 80044fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BT_TX_Pin;
 8004500:	2304      	movs	r3, #4
 8004502:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004504:	2302      	movs	r3, #2
 8004506:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004508:	2303      	movs	r3, #3
 800450a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BT_TX_GPIO_Port, &GPIO_InitStruct);
 800450c:	f107 0318 	add.w	r3, r7, #24
 8004510:	4619      	mov	r1, r3
 8004512:	480b      	ldr	r0, [pc, #44]	; (8004540 <HAL_UART_MspInit+0x100>)
 8004514:	f000 fea0 	bl	8005258 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BT_RX_Pin;
 8004518:	2308      	movs	r3, #8
 800451a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800451c:	2300      	movs	r3, #0
 800451e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004520:	2300      	movs	r3, #0
 8004522:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BT_RX_GPIO_Port, &GPIO_InitStruct);
 8004524:	f107 0318 	add.w	r3, r7, #24
 8004528:	4619      	mov	r1, r3
 800452a:	4805      	ldr	r0, [pc, #20]	; (8004540 <HAL_UART_MspInit+0x100>)
 800452c:	f000 fe94 	bl	8005258 <HAL_GPIO_Init>
}
 8004530:	bf00      	nop
 8004532:	3728      	adds	r7, #40	; 0x28
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}
 8004538:	40013800 	.word	0x40013800
 800453c:	40021000 	.word	0x40021000
 8004540:	40010800 	.word	0x40010800
 8004544:	40004400 	.word	0x40004400

08004548 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004548:	b480      	push	{r7}
 800454a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800454c:	bf00      	nop
 800454e:	46bd      	mov	sp, r7
 8004550:	bc80      	pop	{r7}
 8004552:	4770      	bx	lr

08004554 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004554:	b480      	push	{r7}
 8004556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004558:	e7fe      	b.n	8004558 <HardFault_Handler+0x4>

0800455a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800455a:	b480      	push	{r7}
 800455c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800455e:	e7fe      	b.n	800455e <MemManage_Handler+0x4>

08004560 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004560:	b480      	push	{r7}
 8004562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004564:	e7fe      	b.n	8004564 <BusFault_Handler+0x4>

08004566 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004566:	b480      	push	{r7}
 8004568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800456a:	e7fe      	b.n	800456a <UsageFault_Handler+0x4>

0800456c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800456c:	b480      	push	{r7}
 800456e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004570:	bf00      	nop
 8004572:	46bd      	mov	sp, r7
 8004574:	bc80      	pop	{r7}
 8004576:	4770      	bx	lr

08004578 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004578:	b480      	push	{r7}
 800457a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800457c:	bf00      	nop
 800457e:	46bd      	mov	sp, r7
 8004580:	bc80      	pop	{r7}
 8004582:	4770      	bx	lr

08004584 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004584:	b480      	push	{r7}
 8004586:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004588:	bf00      	nop
 800458a:	46bd      	mov	sp, r7
 800458c:	bc80      	pop	{r7}
 800458e:	4770      	bx	lr

08004590 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004594:	f000 f8d8 	bl	8004748 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004598:	bf00      	nop
 800459a:	bd80      	pop	{r7, pc}

0800459c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80045a0:	4802      	ldr	r0, [pc, #8]	; (80045ac <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80045a2:	f002 fa6c 	bl	8006a7e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80045a6:	bf00      	nop
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	200010a4 	.word	0x200010a4

080045b0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80045b8:	4b11      	ldr	r3, [pc, #68]	; (8004600 <_sbrk+0x50>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d102      	bne.n	80045c6 <_sbrk+0x16>
		heap_end = &end;
 80045c0:	4b0f      	ldr	r3, [pc, #60]	; (8004600 <_sbrk+0x50>)
 80045c2:	4a10      	ldr	r2, [pc, #64]	; (8004604 <_sbrk+0x54>)
 80045c4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80045c6:	4b0e      	ldr	r3, [pc, #56]	; (8004600 <_sbrk+0x50>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80045cc:	4b0c      	ldr	r3, [pc, #48]	; (8004600 <_sbrk+0x50>)
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4413      	add	r3, r2
 80045d4:	466a      	mov	r2, sp
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d907      	bls.n	80045ea <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80045da:	f007 fe33 	bl	800c244 <__errno>
 80045de:	4602      	mov	r2, r0
 80045e0:	230c      	movs	r3, #12
 80045e2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80045e4:	f04f 33ff 	mov.w	r3, #4294967295
 80045e8:	e006      	b.n	80045f8 <_sbrk+0x48>
	}

	heap_end += incr;
 80045ea:	4b05      	ldr	r3, [pc, #20]	; (8004600 <_sbrk+0x50>)
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4413      	add	r3, r2
 80045f2:	4a03      	ldr	r2, [pc, #12]	; (8004600 <_sbrk+0x50>)
 80045f4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80045f6:	68fb      	ldr	r3, [r7, #12]
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3710      	adds	r7, #16
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	2000074c 	.word	0x2000074c
 8004604:	20001318 	.word	0x20001318

08004608 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004608:	b480      	push	{r7}
 800460a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800460c:	4b15      	ldr	r3, [pc, #84]	; (8004664 <SystemInit+0x5c>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a14      	ldr	r2, [pc, #80]	; (8004664 <SystemInit+0x5c>)
 8004612:	f043 0301 	orr.w	r3, r3, #1
 8004616:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8004618:	4b12      	ldr	r3, [pc, #72]	; (8004664 <SystemInit+0x5c>)
 800461a:	685a      	ldr	r2, [r3, #4]
 800461c:	4911      	ldr	r1, [pc, #68]	; (8004664 <SystemInit+0x5c>)
 800461e:	4b12      	ldr	r3, [pc, #72]	; (8004668 <SystemInit+0x60>)
 8004620:	4013      	ands	r3, r2
 8004622:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004624:	4b0f      	ldr	r3, [pc, #60]	; (8004664 <SystemInit+0x5c>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a0e      	ldr	r2, [pc, #56]	; (8004664 <SystemInit+0x5c>)
 800462a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800462e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004632:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004634:	4b0b      	ldr	r3, [pc, #44]	; (8004664 <SystemInit+0x5c>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a0a      	ldr	r2, [pc, #40]	; (8004664 <SystemInit+0x5c>)
 800463a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800463e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8004640:	4b08      	ldr	r3, [pc, #32]	; (8004664 <SystemInit+0x5c>)
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	4a07      	ldr	r2, [pc, #28]	; (8004664 <SystemInit+0x5c>)
 8004646:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800464a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800464c:	4b05      	ldr	r3, [pc, #20]	; (8004664 <SystemInit+0x5c>)
 800464e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8004652:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004654:	4b05      	ldr	r3, [pc, #20]	; (800466c <SystemInit+0x64>)
 8004656:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800465a:	609a      	str	r2, [r3, #8]
#endif 
}
 800465c:	bf00      	nop
 800465e:	46bd      	mov	sp, r7
 8004660:	bc80      	pop	{r7}
 8004662:	4770      	bx	lr
 8004664:	40021000 	.word	0x40021000
 8004668:	f8ff0000 	.word	0xf8ff0000
 800466c:	e000ed00 	.word	0xe000ed00

08004670 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004670:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004672:	e003      	b.n	800467c <LoopCopyDataInit>

08004674 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004674:	4b0b      	ldr	r3, [pc, #44]	; (80046a4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004676:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004678:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800467a:	3104      	adds	r1, #4

0800467c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800467c:	480a      	ldr	r0, [pc, #40]	; (80046a8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800467e:	4b0b      	ldr	r3, [pc, #44]	; (80046ac <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004680:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004682:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004684:	d3f6      	bcc.n	8004674 <CopyDataInit>
  ldr r2, =_sbss
 8004686:	4a0a      	ldr	r2, [pc, #40]	; (80046b0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004688:	e002      	b.n	8004690 <LoopFillZerobss>

0800468a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800468a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800468c:	f842 3b04 	str.w	r3, [r2], #4

08004690 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004690:	4b08      	ldr	r3, [pc, #32]	; (80046b4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8004692:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004694:	d3f9      	bcc.n	800468a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004696:	f7ff ffb7 	bl	8004608 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800469a:	f007 fdd9 	bl	800c250 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800469e:	f7fe f923 	bl	80028e8 <main>
  bx lr
 80046a2:	4770      	bx	lr
  ldr r3, =_sidata
 80046a4:	0800df20 	.word	0x0800df20
  ldr r0, =_sdata
 80046a8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80046ac:	20000208 	.word	0x20000208
  ldr r2, =_sbss
 80046b0:	20000208 	.word	0x20000208
  ldr r3, = _ebss
 80046b4:	20001314 	.word	0x20001314

080046b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80046b8:	e7fe      	b.n	80046b8 <ADC1_2_IRQHandler>
	...

080046bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80046c0:	4b08      	ldr	r3, [pc, #32]	; (80046e4 <HAL_Init+0x28>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a07      	ldr	r2, [pc, #28]	; (80046e4 <HAL_Init+0x28>)
 80046c6:	f043 0310 	orr.w	r3, r3, #16
 80046ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046cc:	2003      	movs	r0, #3
 80046ce:	f000 fd81 	bl	80051d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80046d2:	2000      	movs	r0, #0
 80046d4:	f000 f808 	bl	80046e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80046d8:	f7ff fd0e 	bl	80040f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	40022000 	.word	0x40022000

080046e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80046f0:	4b12      	ldr	r3, [pc, #72]	; (800473c <HAL_InitTick+0x54>)
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	4b12      	ldr	r3, [pc, #72]	; (8004740 <HAL_InitTick+0x58>)
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	4619      	mov	r1, r3
 80046fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80046fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8004702:	fbb2 f3f3 	udiv	r3, r2, r3
 8004706:	4618      	mov	r0, r3
 8004708:	f000 fd99 	bl	800523e <HAL_SYSTICK_Config>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d001      	beq.n	8004716 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e00e      	b.n	8004734 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2b0f      	cmp	r3, #15
 800471a:	d80a      	bhi.n	8004732 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800471c:	2200      	movs	r2, #0
 800471e:	6879      	ldr	r1, [r7, #4]
 8004720:	f04f 30ff 	mov.w	r0, #4294967295
 8004724:	f000 fd61 	bl	80051ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004728:	4a06      	ldr	r2, [pc, #24]	; (8004744 <HAL_InitTick+0x5c>)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800472e:	2300      	movs	r3, #0
 8004730:	e000      	b.n	8004734 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
}
 8004734:	4618      	mov	r0, r3
 8004736:	3708      	adds	r7, #8
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	20000134 	.word	0x20000134
 8004740:	2000013c 	.word	0x2000013c
 8004744:	20000138 	.word	0x20000138

08004748 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004748:	b480      	push	{r7}
 800474a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800474c:	4b05      	ldr	r3, [pc, #20]	; (8004764 <HAL_IncTick+0x1c>)
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	461a      	mov	r2, r3
 8004752:	4b05      	ldr	r3, [pc, #20]	; (8004768 <HAL_IncTick+0x20>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4413      	add	r3, r2
 8004758:	4a03      	ldr	r2, [pc, #12]	; (8004768 <HAL_IncTick+0x20>)
 800475a:	6013      	str	r3, [r2, #0]
}
 800475c:	bf00      	nop
 800475e:	46bd      	mov	sp, r7
 8004760:	bc80      	pop	{r7}
 8004762:	4770      	bx	lr
 8004764:	2000013c 	.word	0x2000013c
 8004768:	20000bdc 	.word	0x20000bdc

0800476c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800476c:	b480      	push	{r7}
 800476e:	af00      	add	r7, sp, #0
  return uwTick;
 8004770:	4b02      	ldr	r3, [pc, #8]	; (800477c <HAL_GetTick+0x10>)
 8004772:	681b      	ldr	r3, [r3, #0]
}
 8004774:	4618      	mov	r0, r3
 8004776:	46bd      	mov	sp, r7
 8004778:	bc80      	pop	{r7}
 800477a:	4770      	bx	lr
 800477c:	20000bdc 	.word	0x20000bdc

08004780 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004788:	f7ff fff0 	bl	800476c <HAL_GetTick>
 800478c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004798:	d005      	beq.n	80047a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800479a:	4b09      	ldr	r3, [pc, #36]	; (80047c0 <HAL_Delay+0x40>)
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	461a      	mov	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	4413      	add	r3, r2
 80047a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80047a6:	bf00      	nop
 80047a8:	f7ff ffe0 	bl	800476c <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d8f7      	bhi.n	80047a8 <HAL_Delay+0x28>
  {
  }
}
 80047b8:	bf00      	nop
 80047ba:	3710      	adds	r7, #16
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	2000013c 	.word	0x2000013c

080047c4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b086      	sub	sp, #24
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047cc:	2300      	movs	r3, #0
 80047ce:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80047d0:	2300      	movs	r3, #0
 80047d2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80047d4:	2300      	movs	r3, #0
 80047d6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80047d8:	2300      	movs	r3, #0
 80047da:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d101      	bne.n	80047e6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e0be      	b.n	8004964 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d109      	bne.n	8004808 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f7ff fcaa 	bl	800415c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f000 fbdd 	bl	8004fc8 <ADC_ConversionStop_Disable>
 800480e:	4603      	mov	r3, r0
 8004810:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004816:	f003 0310 	and.w	r3, r3, #16
 800481a:	2b00      	cmp	r3, #0
 800481c:	f040 8099 	bne.w	8004952 <HAL_ADC_Init+0x18e>
 8004820:	7dfb      	ldrb	r3, [r7, #23]
 8004822:	2b00      	cmp	r3, #0
 8004824:	f040 8095 	bne.w	8004952 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004830:	f023 0302 	bic.w	r3, r3, #2
 8004834:	f043 0202 	orr.w	r2, r3, #2
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004844:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	7b1b      	ldrb	r3, [r3, #12]
 800484a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800484c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800484e:	68ba      	ldr	r2, [r7, #8]
 8004850:	4313      	orrs	r3, r2
 8004852:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800485c:	d003      	beq.n	8004866 <HAL_ADC_Init+0xa2>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	2b01      	cmp	r3, #1
 8004864:	d102      	bne.n	800486c <HAL_ADC_Init+0xa8>
 8004866:	f44f 7380 	mov.w	r3, #256	; 0x100
 800486a:	e000      	b.n	800486e <HAL_ADC_Init+0xaa>
 800486c:	2300      	movs	r3, #0
 800486e:	693a      	ldr	r2, [r7, #16]
 8004870:	4313      	orrs	r3, r2
 8004872:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	7d1b      	ldrb	r3, [r3, #20]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d119      	bne.n	80048b0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	7b1b      	ldrb	r3, [r3, #12]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d109      	bne.n	8004898 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	3b01      	subs	r3, #1
 800488a:	035a      	lsls	r2, r3, #13
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	4313      	orrs	r3, r2
 8004890:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004894:	613b      	str	r3, [r7, #16]
 8004896:	e00b      	b.n	80048b0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800489c:	f043 0220 	orr.w	r2, r3, #32
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a8:	f043 0201 	orr.w	r2, r3, #1
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	430a      	orrs	r2, r1
 80048c2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	689a      	ldr	r2, [r3, #8]
 80048ca:	4b28      	ldr	r3, [pc, #160]	; (800496c <HAL_ADC_Init+0x1a8>)
 80048cc:	4013      	ands	r3, r2
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	6812      	ldr	r2, [r2, #0]
 80048d2:	68b9      	ldr	r1, [r7, #8]
 80048d4:	430b      	orrs	r3, r1
 80048d6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048e0:	d003      	beq.n	80048ea <HAL_ADC_Init+0x126>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d104      	bne.n	80048f4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	3b01      	subs	r3, #1
 80048f0:	051b      	lsls	r3, r3, #20
 80048f2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048fa:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	430a      	orrs	r2, r1
 8004906:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	689a      	ldr	r2, [r3, #8]
 800490e:	4b18      	ldr	r3, [pc, #96]	; (8004970 <HAL_ADC_Init+0x1ac>)
 8004910:	4013      	ands	r3, r2
 8004912:	68ba      	ldr	r2, [r7, #8]
 8004914:	429a      	cmp	r2, r3
 8004916:	d10b      	bne.n	8004930 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004922:	f023 0303 	bic.w	r3, r3, #3
 8004926:	f043 0201 	orr.w	r2, r3, #1
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800492e:	e018      	b.n	8004962 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004934:	f023 0312 	bic.w	r3, r3, #18
 8004938:	f043 0210 	orr.w	r2, r3, #16
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004944:	f043 0201 	orr.w	r2, r3, #1
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004950:	e007      	b.n	8004962 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004956:	f043 0210 	orr.w	r2, r3, #16
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004962:	7dfb      	ldrb	r3, [r7, #23]
}
 8004964:	4618      	mov	r0, r3
 8004966:	3718      	adds	r7, #24
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	ffe1f7fd 	.word	0xffe1f7fd
 8004970:	ff1f0efe 	.word	0xff1f0efe

08004974 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800497c:	2300      	movs	r3, #0
 800497e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004986:	2b01      	cmp	r3, #1
 8004988:	d101      	bne.n	800498e <HAL_ADC_Start+0x1a>
 800498a:	2302      	movs	r3, #2
 800498c:	e098      	b.n	8004ac0 <HAL_ADC_Start+0x14c>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 fac4 	bl	8004f24 <ADC_Enable>
 800499c:	4603      	mov	r3, r0
 800499e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80049a0:	7bfb      	ldrb	r3, [r7, #15]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	f040 8087 	bne.w	8004ab6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049b0:	f023 0301 	bic.w	r3, r3, #1
 80049b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a41      	ldr	r2, [pc, #260]	; (8004ac8 <HAL_ADC_Start+0x154>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d105      	bne.n	80049d2 <HAL_ADC_Start+0x5e>
 80049c6:	4b41      	ldr	r3, [pc, #260]	; (8004acc <HAL_ADC_Start+0x158>)
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d115      	bne.n	80049fe <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d026      	beq.n	8004a3a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80049f4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80049fc:	e01d      	b.n	8004a3a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a02:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a2f      	ldr	r2, [pc, #188]	; (8004acc <HAL_ADC_Start+0x158>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d004      	beq.n	8004a1e <HAL_ADC_Start+0xaa>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a2b      	ldr	r2, [pc, #172]	; (8004ac8 <HAL_ADC_Start+0x154>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d10d      	bne.n	8004a3a <HAL_ADC_Start+0xc6>
 8004a1e:	4b2b      	ldr	r3, [pc, #172]	; (8004acc <HAL_ADC_Start+0x158>)
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d007      	beq.n	8004a3a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a2e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004a32:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d006      	beq.n	8004a54 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4a:	f023 0206 	bic.w	r2, r3, #6
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	62da      	str	r2, [r3, #44]	; 0x2c
 8004a52:	e002      	b.n	8004a5a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f06f 0202 	mvn.w	r2, #2
 8004a6a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004a76:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004a7a:	d113      	bne.n	8004aa4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004a80:	4a11      	ldr	r2, [pc, #68]	; (8004ac8 <HAL_ADC_Start+0x154>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d105      	bne.n	8004a92 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8004a86:	4b11      	ldr	r3, [pc, #68]	; (8004acc <HAL_ADC_Start+0x158>)
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d108      	bne.n	8004aa4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	689a      	ldr	r2, [r3, #8]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8004aa0:	609a      	str	r2, [r3, #8]
 8004aa2:	e00c      	b.n	8004abe <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	689a      	ldr	r2, [r3, #8]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004ab2:	609a      	str	r2, [r3, #8]
 8004ab4:	e003      	b.n	8004abe <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8004abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3710      	adds	r7, #16
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	40012800 	.word	0x40012800
 8004acc:	40012400 	.word	0x40012400

08004ad0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d101      	bne.n	8004aea <HAL_ADC_Stop+0x1a>
 8004ae6:	2302      	movs	r3, #2
 8004ae8:	e01a      	b.n	8004b20 <HAL_ADC_Stop+0x50>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2201      	movs	r2, #1
 8004aee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 fa68 	bl	8004fc8 <ADC_ConversionStop_Disable>
 8004af8:	4603      	mov	r3, r0
 8004afa:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004afc:	7bfb      	ldrb	r3, [r7, #15]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d109      	bne.n	8004b16 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b06:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004b0a:	f023 0301 	bic.w	r3, r3, #1
 8004b0e:	f043 0201 	orr.w	r2, r3, #1
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3710      	adds	r7, #16
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004b28:	b590      	push	{r4, r7, lr}
 8004b2a:	b087      	sub	sp, #28
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004b32:	2300      	movs	r3, #0
 8004b34:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8004b36:	2300      	movs	r3, #0
 8004b38:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8004b3e:	f7ff fe15 	bl	800476c <HAL_GetTick>
 8004b42:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00b      	beq.n	8004b6a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b56:	f043 0220 	orr.w	r2, r3, #32
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e0c8      	b.n	8004cfc <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d12a      	bne.n	8004bce <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d123      	bne.n	8004bce <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8004b86:	e01a      	b.n	8004bbe <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b8e:	d016      	beq.n	8004bbe <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d007      	beq.n	8004ba6 <HAL_ADC_PollForConversion+0x7e>
 8004b96:	f7ff fde9 	bl	800476c <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	683a      	ldr	r2, [r7, #0]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d20b      	bcs.n	8004bbe <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004baa:	f043 0204 	orr.w	r2, r3, #4
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e09e      	b.n	8004cfc <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0302 	and.w	r3, r3, #2
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d0dd      	beq.n	8004b88 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8004bcc:	e06c      	b.n	8004ca8 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8004bce:	4b4d      	ldr	r3, [pc, #308]	; (8004d04 <HAL_ADC_PollForConversion+0x1dc>)
 8004bd0:	681c      	ldr	r4, [r3, #0]
 8004bd2:	2002      	movs	r0, #2
 8004bd4:	f003 f9ec 	bl	8007fb0 <HAL_RCCEx_GetPeriphCLKFreq>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	6919      	ldr	r1, [r3, #16]
 8004be4:	4b48      	ldr	r3, [pc, #288]	; (8004d08 <HAL_ADC_PollForConversion+0x1e0>)
 8004be6:	400b      	ands	r3, r1
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d118      	bne.n	8004c1e <HAL_ADC_PollForConversion+0xf6>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68d9      	ldr	r1, [r3, #12]
 8004bf2:	4b46      	ldr	r3, [pc, #280]	; (8004d0c <HAL_ADC_PollForConversion+0x1e4>)
 8004bf4:	400b      	ands	r3, r1
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d111      	bne.n	8004c1e <HAL_ADC_PollForConversion+0xf6>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	6919      	ldr	r1, [r3, #16]
 8004c00:	4b43      	ldr	r3, [pc, #268]	; (8004d10 <HAL_ADC_PollForConversion+0x1e8>)
 8004c02:	400b      	ands	r3, r1
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d108      	bne.n	8004c1a <HAL_ADC_PollForConversion+0xf2>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68d9      	ldr	r1, [r3, #12]
 8004c0e:	4b41      	ldr	r3, [pc, #260]	; (8004d14 <HAL_ADC_PollForConversion+0x1ec>)
 8004c10:	400b      	ands	r3, r1
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d101      	bne.n	8004c1a <HAL_ADC_PollForConversion+0xf2>
 8004c16:	2314      	movs	r3, #20
 8004c18:	e020      	b.n	8004c5c <HAL_ADC_PollForConversion+0x134>
 8004c1a:	2329      	movs	r3, #41	; 0x29
 8004c1c:	e01e      	b.n	8004c5c <HAL_ADC_PollForConversion+0x134>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	6919      	ldr	r1, [r3, #16]
 8004c24:	4b3a      	ldr	r3, [pc, #232]	; (8004d10 <HAL_ADC_PollForConversion+0x1e8>)
 8004c26:	400b      	ands	r3, r1
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d106      	bne.n	8004c3a <HAL_ADC_PollForConversion+0x112>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68d9      	ldr	r1, [r3, #12]
 8004c32:	4b38      	ldr	r3, [pc, #224]	; (8004d14 <HAL_ADC_PollForConversion+0x1ec>)
 8004c34:	400b      	ands	r3, r1
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00d      	beq.n	8004c56 <HAL_ADC_PollForConversion+0x12e>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	6919      	ldr	r1, [r3, #16]
 8004c40:	4b35      	ldr	r3, [pc, #212]	; (8004d18 <HAL_ADC_PollForConversion+0x1f0>)
 8004c42:	400b      	ands	r3, r1
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d108      	bne.n	8004c5a <HAL_ADC_PollForConversion+0x132>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	68d9      	ldr	r1, [r3, #12]
 8004c4e:	4b32      	ldr	r3, [pc, #200]	; (8004d18 <HAL_ADC_PollForConversion+0x1f0>)
 8004c50:	400b      	ands	r3, r1
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d101      	bne.n	8004c5a <HAL_ADC_PollForConversion+0x132>
 8004c56:	2354      	movs	r3, #84	; 0x54
 8004c58:	e000      	b.n	8004c5c <HAL_ADC_PollForConversion+0x134>
 8004c5a:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8004c5c:	fb02 f303 	mul.w	r3, r2, r3
 8004c60:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8004c62:	e01d      	b.n	8004ca0 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c6a:	d016      	beq.n	8004c9a <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d007      	beq.n	8004c82 <HAL_ADC_PollForConversion+0x15a>
 8004c72:	f7ff fd7b 	bl	800476c <HAL_GetTick>
 8004c76:	4602      	mov	r2, r0
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	683a      	ldr	r2, [r7, #0]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d20b      	bcs.n	8004c9a <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c86:	f043 0204 	orr.w	r2, r3, #4
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e030      	b.n	8004cfc <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	693a      	ldr	r2, [r7, #16]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d8dd      	bhi.n	8004c64 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f06f 0212 	mvn.w	r2, #18
 8004cb0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004cc8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004ccc:	d115      	bne.n	8004cfa <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d111      	bne.n	8004cfa <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d105      	bne.n	8004cfa <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf2:	f043 0201 	orr.w	r2, r3, #1
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	371c      	adds	r7, #28
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd90      	pop	{r4, r7, pc}
 8004d04:	20000134 	.word	0x20000134
 8004d08:	24924924 	.word	0x24924924
 8004d0c:	00924924 	.word	0x00924924
 8004d10:	12492492 	.word	0x12492492
 8004d14:	00492492 	.word	0x00492492
 8004d18:	00249249 	.word	0x00249249

08004d1c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	370c      	adds	r7, #12
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bc80      	pop	{r7}
 8004d32:	4770      	bx	lr

08004d34 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004d34:	b480      	push	{r7}
 8004d36:	b085      	sub	sp, #20
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8004d42:	2300      	movs	r3, #0
 8004d44:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d101      	bne.n	8004d54 <HAL_ADC_ConfigChannel+0x20>
 8004d50:	2302      	movs	r3, #2
 8004d52:	e0dc      	b.n	8004f0e <HAL_ADC_ConfigChannel+0x1da>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	2b06      	cmp	r3, #6
 8004d62:	d81c      	bhi.n	8004d9e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	685a      	ldr	r2, [r3, #4]
 8004d6e:	4613      	mov	r3, r2
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	4413      	add	r3, r2
 8004d74:	3b05      	subs	r3, #5
 8004d76:	221f      	movs	r2, #31
 8004d78:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7c:	43db      	mvns	r3, r3
 8004d7e:	4019      	ands	r1, r3
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	6818      	ldr	r0, [r3, #0]
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	685a      	ldr	r2, [r3, #4]
 8004d88:	4613      	mov	r3, r2
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	4413      	add	r3, r2
 8004d8e:	3b05      	subs	r3, #5
 8004d90:	fa00 f203 	lsl.w	r2, r0, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	430a      	orrs	r2, r1
 8004d9a:	635a      	str	r2, [r3, #52]	; 0x34
 8004d9c:	e03c      	b.n	8004e18 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	2b0c      	cmp	r3, #12
 8004da4:	d81c      	bhi.n	8004de0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	685a      	ldr	r2, [r3, #4]
 8004db0:	4613      	mov	r3, r2
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	4413      	add	r3, r2
 8004db6:	3b23      	subs	r3, #35	; 0x23
 8004db8:	221f      	movs	r2, #31
 8004dba:	fa02 f303 	lsl.w	r3, r2, r3
 8004dbe:	43db      	mvns	r3, r3
 8004dc0:	4019      	ands	r1, r3
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	6818      	ldr	r0, [r3, #0]
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	685a      	ldr	r2, [r3, #4]
 8004dca:	4613      	mov	r3, r2
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	4413      	add	r3, r2
 8004dd0:	3b23      	subs	r3, #35	; 0x23
 8004dd2:	fa00 f203 	lsl.w	r2, r0, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	631a      	str	r2, [r3, #48]	; 0x30
 8004dde:	e01b      	b.n	8004e18 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	685a      	ldr	r2, [r3, #4]
 8004dea:	4613      	mov	r3, r2
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	4413      	add	r3, r2
 8004df0:	3b41      	subs	r3, #65	; 0x41
 8004df2:	221f      	movs	r2, #31
 8004df4:	fa02 f303 	lsl.w	r3, r2, r3
 8004df8:	43db      	mvns	r3, r3
 8004dfa:	4019      	ands	r1, r3
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	6818      	ldr	r0, [r3, #0]
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	685a      	ldr	r2, [r3, #4]
 8004e04:	4613      	mov	r3, r2
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	4413      	add	r3, r2
 8004e0a:	3b41      	subs	r3, #65	; 0x41
 8004e0c:	fa00 f203 	lsl.w	r2, r0, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	430a      	orrs	r2, r1
 8004e16:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2b09      	cmp	r3, #9
 8004e1e:	d91c      	bls.n	8004e5a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68d9      	ldr	r1, [r3, #12]
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	005b      	lsls	r3, r3, #1
 8004e2e:	4413      	add	r3, r2
 8004e30:	3b1e      	subs	r3, #30
 8004e32:	2207      	movs	r2, #7
 8004e34:	fa02 f303 	lsl.w	r3, r2, r3
 8004e38:	43db      	mvns	r3, r3
 8004e3a:	4019      	ands	r1, r3
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	6898      	ldr	r0, [r3, #8]
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	4613      	mov	r3, r2
 8004e46:	005b      	lsls	r3, r3, #1
 8004e48:	4413      	add	r3, r2
 8004e4a:	3b1e      	subs	r3, #30
 8004e4c:	fa00 f203 	lsl.w	r2, r0, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	430a      	orrs	r2, r1
 8004e56:	60da      	str	r2, [r3, #12]
 8004e58:	e019      	b.n	8004e8e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	6919      	ldr	r1, [r3, #16]
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	4613      	mov	r3, r2
 8004e66:	005b      	lsls	r3, r3, #1
 8004e68:	4413      	add	r3, r2
 8004e6a:	2207      	movs	r2, #7
 8004e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e70:	43db      	mvns	r3, r3
 8004e72:	4019      	ands	r1, r3
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	6898      	ldr	r0, [r3, #8]
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	005b      	lsls	r3, r3, #1
 8004e80:	4413      	add	r3, r2
 8004e82:	fa00 f203 	lsl.w	r2, r0, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	430a      	orrs	r2, r1
 8004e8c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2b10      	cmp	r3, #16
 8004e94:	d003      	beq.n	8004e9e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004e9a:	2b11      	cmp	r3, #17
 8004e9c:	d132      	bne.n	8004f04 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a1d      	ldr	r2, [pc, #116]	; (8004f18 <HAL_ADC_ConfigChannel+0x1e4>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d125      	bne.n	8004ef4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d126      	bne.n	8004f04 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	689a      	ldr	r2, [r3, #8]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004ec4:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2b10      	cmp	r3, #16
 8004ecc:	d11a      	bne.n	8004f04 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004ece:	4b13      	ldr	r3, [pc, #76]	; (8004f1c <HAL_ADC_ConfigChannel+0x1e8>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a13      	ldr	r2, [pc, #76]	; (8004f20 <HAL_ADC_ConfigChannel+0x1ec>)
 8004ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed8:	0c9a      	lsrs	r2, r3, #18
 8004eda:	4613      	mov	r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	4413      	add	r3, r2
 8004ee0:	005b      	lsls	r3, r3, #1
 8004ee2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004ee4:	e002      	b.n	8004eec <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1f9      	bne.n	8004ee6 <HAL_ADC_ConfigChannel+0x1b2>
 8004ef2:	e007      	b.n	8004f04 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef8:	f043 0220 	orr.w	r2, r3, #32
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3714      	adds	r7, #20
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bc80      	pop	{r7}
 8004f16:	4770      	bx	lr
 8004f18:	40012400 	.word	0x40012400
 8004f1c:	20000134 	.word	0x20000134
 8004f20:	431bde83 	.word	0x431bde83

08004f24 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004f30:	2300      	movs	r3, #0
 8004f32:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f003 0301 	and.w	r3, r3, #1
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d039      	beq.n	8004fb6 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	689a      	ldr	r2, [r3, #8]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f042 0201 	orr.w	r2, r2, #1
 8004f50:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004f52:	4b1b      	ldr	r3, [pc, #108]	; (8004fc0 <ADC_Enable+0x9c>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a1b      	ldr	r2, [pc, #108]	; (8004fc4 <ADC_Enable+0xa0>)
 8004f58:	fba2 2303 	umull	r2, r3, r2, r3
 8004f5c:	0c9b      	lsrs	r3, r3, #18
 8004f5e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004f60:	e002      	b.n	8004f68 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	3b01      	subs	r3, #1
 8004f66:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1f9      	bne.n	8004f62 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004f6e:	f7ff fbfd 	bl	800476c <HAL_GetTick>
 8004f72:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004f74:	e018      	b.n	8004fa8 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004f76:	f7ff fbf9 	bl	800476c <HAL_GetTick>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d911      	bls.n	8004fa8 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f88:	f043 0210 	orr.w	r2, r3, #16
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f94:	f043 0201 	orr.w	r2, r3, #1
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e007      	b.n	8004fb8 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	f003 0301 	and.w	r3, r3, #1
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d1df      	bne.n	8004f76 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004fb6:	2300      	movs	r3, #0
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3710      	adds	r7, #16
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	20000134 	.word	0x20000134
 8004fc4:	431bde83 	.word	0x431bde83

08004fc8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f003 0301 	and.w	r3, r3, #1
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d127      	bne.n	8005032 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	689a      	ldr	r2, [r3, #8]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f022 0201 	bic.w	r2, r2, #1
 8004ff0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004ff2:	f7ff fbbb 	bl	800476c <HAL_GetTick>
 8004ff6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004ff8:	e014      	b.n	8005024 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004ffa:	f7ff fbb7 	bl	800476c <HAL_GetTick>
 8004ffe:	4602      	mov	r2, r0
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	2b02      	cmp	r3, #2
 8005006:	d90d      	bls.n	8005024 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500c:	f043 0210 	orr.w	r2, r3, #16
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005018:	f043 0201 	orr.w	r2, r3, #1
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e007      	b.n	8005034 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f003 0301 	and.w	r3, r3, #1
 800502e:	2b01      	cmp	r3, #1
 8005030:	d0e3      	beq.n	8004ffa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005032:	2300      	movs	r3, #0
}
 8005034:	4618      	mov	r0, r3
 8005036:	3710      	adds	r7, #16
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800503c:	b480      	push	{r7}
 800503e:	b085      	sub	sp, #20
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f003 0307 	and.w	r3, r3, #7
 800504a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800504c:	4b0c      	ldr	r3, [pc, #48]	; (8005080 <__NVIC_SetPriorityGrouping+0x44>)
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005052:	68ba      	ldr	r2, [r7, #8]
 8005054:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005058:	4013      	ands	r3, r2
 800505a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005064:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005068:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800506c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800506e:	4a04      	ldr	r2, [pc, #16]	; (8005080 <__NVIC_SetPriorityGrouping+0x44>)
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	60d3      	str	r3, [r2, #12]
}
 8005074:	bf00      	nop
 8005076:	3714      	adds	r7, #20
 8005078:	46bd      	mov	sp, r7
 800507a:	bc80      	pop	{r7}
 800507c:	4770      	bx	lr
 800507e:	bf00      	nop
 8005080:	e000ed00 	.word	0xe000ed00

08005084 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005084:	b480      	push	{r7}
 8005086:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005088:	4b04      	ldr	r3, [pc, #16]	; (800509c <__NVIC_GetPriorityGrouping+0x18>)
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	0a1b      	lsrs	r3, r3, #8
 800508e:	f003 0307 	and.w	r3, r3, #7
}
 8005092:	4618      	mov	r0, r3
 8005094:	46bd      	mov	sp, r7
 8005096:	bc80      	pop	{r7}
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	e000ed00 	.word	0xe000ed00

080050a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	4603      	mov	r3, r0
 80050a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	db0b      	blt.n	80050ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80050b2:	79fb      	ldrb	r3, [r7, #7]
 80050b4:	f003 021f 	and.w	r2, r3, #31
 80050b8:	4906      	ldr	r1, [pc, #24]	; (80050d4 <__NVIC_EnableIRQ+0x34>)
 80050ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050be:	095b      	lsrs	r3, r3, #5
 80050c0:	2001      	movs	r0, #1
 80050c2:	fa00 f202 	lsl.w	r2, r0, r2
 80050c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80050ca:	bf00      	nop
 80050cc:	370c      	adds	r7, #12
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bc80      	pop	{r7}
 80050d2:	4770      	bx	lr
 80050d4:	e000e100 	.word	0xe000e100

080050d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	4603      	mov	r3, r0
 80050e0:	6039      	str	r1, [r7, #0]
 80050e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	db0a      	blt.n	8005102 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	b2da      	uxtb	r2, r3
 80050f0:	490c      	ldr	r1, [pc, #48]	; (8005124 <__NVIC_SetPriority+0x4c>)
 80050f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050f6:	0112      	lsls	r2, r2, #4
 80050f8:	b2d2      	uxtb	r2, r2
 80050fa:	440b      	add	r3, r1
 80050fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005100:	e00a      	b.n	8005118 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	b2da      	uxtb	r2, r3
 8005106:	4908      	ldr	r1, [pc, #32]	; (8005128 <__NVIC_SetPriority+0x50>)
 8005108:	79fb      	ldrb	r3, [r7, #7]
 800510a:	f003 030f 	and.w	r3, r3, #15
 800510e:	3b04      	subs	r3, #4
 8005110:	0112      	lsls	r2, r2, #4
 8005112:	b2d2      	uxtb	r2, r2
 8005114:	440b      	add	r3, r1
 8005116:	761a      	strb	r2, [r3, #24]
}
 8005118:	bf00      	nop
 800511a:	370c      	adds	r7, #12
 800511c:	46bd      	mov	sp, r7
 800511e:	bc80      	pop	{r7}
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	e000e100 	.word	0xe000e100
 8005128:	e000ed00 	.word	0xe000ed00

0800512c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800512c:	b480      	push	{r7}
 800512e:	b089      	sub	sp, #36	; 0x24
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f003 0307 	and.w	r3, r3, #7
 800513e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	f1c3 0307 	rsb	r3, r3, #7
 8005146:	2b04      	cmp	r3, #4
 8005148:	bf28      	it	cs
 800514a:	2304      	movcs	r3, #4
 800514c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	3304      	adds	r3, #4
 8005152:	2b06      	cmp	r3, #6
 8005154:	d902      	bls.n	800515c <NVIC_EncodePriority+0x30>
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	3b03      	subs	r3, #3
 800515a:	e000      	b.n	800515e <NVIC_EncodePriority+0x32>
 800515c:	2300      	movs	r3, #0
 800515e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005160:	f04f 32ff 	mov.w	r2, #4294967295
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	fa02 f303 	lsl.w	r3, r2, r3
 800516a:	43da      	mvns	r2, r3
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	401a      	ands	r2, r3
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005174:	f04f 31ff 	mov.w	r1, #4294967295
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	fa01 f303 	lsl.w	r3, r1, r3
 800517e:	43d9      	mvns	r1, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005184:	4313      	orrs	r3, r2
         );
}
 8005186:	4618      	mov	r0, r3
 8005188:	3724      	adds	r7, #36	; 0x24
 800518a:	46bd      	mov	sp, r7
 800518c:	bc80      	pop	{r7}
 800518e:	4770      	bx	lr

08005190 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	3b01      	subs	r3, #1
 800519c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80051a0:	d301      	bcc.n	80051a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80051a2:	2301      	movs	r3, #1
 80051a4:	e00f      	b.n	80051c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80051a6:	4a0a      	ldr	r2, [pc, #40]	; (80051d0 <SysTick_Config+0x40>)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	3b01      	subs	r3, #1
 80051ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80051ae:	210f      	movs	r1, #15
 80051b0:	f04f 30ff 	mov.w	r0, #4294967295
 80051b4:	f7ff ff90 	bl	80050d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80051b8:	4b05      	ldr	r3, [pc, #20]	; (80051d0 <SysTick_Config+0x40>)
 80051ba:	2200      	movs	r2, #0
 80051bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80051be:	4b04      	ldr	r3, [pc, #16]	; (80051d0 <SysTick_Config+0x40>)
 80051c0:	2207      	movs	r2, #7
 80051c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3708      	adds	r7, #8
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	e000e010 	.word	0xe000e010

080051d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f7ff ff2d 	bl	800503c <__NVIC_SetPriorityGrouping>
}
 80051e2:	bf00      	nop
 80051e4:	3708      	adds	r7, #8
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}

080051ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80051ea:	b580      	push	{r7, lr}
 80051ec:	b086      	sub	sp, #24
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	4603      	mov	r3, r0
 80051f2:	60b9      	str	r1, [r7, #8]
 80051f4:	607a      	str	r2, [r7, #4]
 80051f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80051f8:	2300      	movs	r3, #0
 80051fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80051fc:	f7ff ff42 	bl	8005084 <__NVIC_GetPriorityGrouping>
 8005200:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	68b9      	ldr	r1, [r7, #8]
 8005206:	6978      	ldr	r0, [r7, #20]
 8005208:	f7ff ff90 	bl	800512c <NVIC_EncodePriority>
 800520c:	4602      	mov	r2, r0
 800520e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005212:	4611      	mov	r1, r2
 8005214:	4618      	mov	r0, r3
 8005216:	f7ff ff5f 	bl	80050d8 <__NVIC_SetPriority>
}
 800521a:	bf00      	nop
 800521c:	3718      	adds	r7, #24
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}

08005222 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005222:	b580      	push	{r7, lr}
 8005224:	b082      	sub	sp, #8
 8005226:	af00      	add	r7, sp, #0
 8005228:	4603      	mov	r3, r0
 800522a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800522c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005230:	4618      	mov	r0, r3
 8005232:	f7ff ff35 	bl	80050a0 <__NVIC_EnableIRQ>
}
 8005236:	bf00      	nop
 8005238:	3708      	adds	r7, #8
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}

0800523e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800523e:	b580      	push	{r7, lr}
 8005240:	b082      	sub	sp, #8
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f7ff ffa2 	bl	8005190 <SysTick_Config>
 800524c:	4603      	mov	r3, r0
}
 800524e:	4618      	mov	r0, r3
 8005250:	3708      	adds	r7, #8
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
	...

08005258 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005258:	b480      	push	{r7}
 800525a:	b08b      	sub	sp, #44	; 0x2c
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005262:	2300      	movs	r3, #0
 8005264:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005266:	2300      	movs	r3, #0
 8005268:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800526a:	e127      	b.n	80054bc <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800526c:	2201      	movs	r2, #1
 800526e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005270:	fa02 f303 	lsl.w	r3, r2, r3
 8005274:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	69fa      	ldr	r2, [r7, #28]
 800527c:	4013      	ands	r3, r2
 800527e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005280:	69ba      	ldr	r2, [r7, #24]
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	429a      	cmp	r2, r3
 8005286:	f040 8116 	bne.w	80054b6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	2b12      	cmp	r3, #18
 8005290:	d034      	beq.n	80052fc <HAL_GPIO_Init+0xa4>
 8005292:	2b12      	cmp	r3, #18
 8005294:	d80d      	bhi.n	80052b2 <HAL_GPIO_Init+0x5a>
 8005296:	2b02      	cmp	r3, #2
 8005298:	d02b      	beq.n	80052f2 <HAL_GPIO_Init+0x9a>
 800529a:	2b02      	cmp	r3, #2
 800529c:	d804      	bhi.n	80052a8 <HAL_GPIO_Init+0x50>
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d031      	beq.n	8005306 <HAL_GPIO_Init+0xae>
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d01c      	beq.n	80052e0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80052a6:	e048      	b.n	800533a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80052a8:	2b03      	cmp	r3, #3
 80052aa:	d043      	beq.n	8005334 <HAL_GPIO_Init+0xdc>
 80052ac:	2b11      	cmp	r3, #17
 80052ae:	d01b      	beq.n	80052e8 <HAL_GPIO_Init+0x90>
          break;
 80052b0:	e043      	b.n	800533a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80052b2:	4a89      	ldr	r2, [pc, #548]	; (80054d8 <HAL_GPIO_Init+0x280>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d026      	beq.n	8005306 <HAL_GPIO_Init+0xae>
 80052b8:	4a87      	ldr	r2, [pc, #540]	; (80054d8 <HAL_GPIO_Init+0x280>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d806      	bhi.n	80052cc <HAL_GPIO_Init+0x74>
 80052be:	4a87      	ldr	r2, [pc, #540]	; (80054dc <HAL_GPIO_Init+0x284>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d020      	beq.n	8005306 <HAL_GPIO_Init+0xae>
 80052c4:	4a86      	ldr	r2, [pc, #536]	; (80054e0 <HAL_GPIO_Init+0x288>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d01d      	beq.n	8005306 <HAL_GPIO_Init+0xae>
          break;
 80052ca:	e036      	b.n	800533a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80052cc:	4a85      	ldr	r2, [pc, #532]	; (80054e4 <HAL_GPIO_Init+0x28c>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d019      	beq.n	8005306 <HAL_GPIO_Init+0xae>
 80052d2:	4a85      	ldr	r2, [pc, #532]	; (80054e8 <HAL_GPIO_Init+0x290>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d016      	beq.n	8005306 <HAL_GPIO_Init+0xae>
 80052d8:	4a84      	ldr	r2, [pc, #528]	; (80054ec <HAL_GPIO_Init+0x294>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d013      	beq.n	8005306 <HAL_GPIO_Init+0xae>
          break;
 80052de:	e02c      	b.n	800533a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	623b      	str	r3, [r7, #32]
          break;
 80052e6:	e028      	b.n	800533a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	3304      	adds	r3, #4
 80052ee:	623b      	str	r3, [r7, #32]
          break;
 80052f0:	e023      	b.n	800533a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	3308      	adds	r3, #8
 80052f8:	623b      	str	r3, [r7, #32]
          break;
 80052fa:	e01e      	b.n	800533a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	330c      	adds	r3, #12
 8005302:	623b      	str	r3, [r7, #32]
          break;
 8005304:	e019      	b.n	800533a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d102      	bne.n	8005314 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800530e:	2304      	movs	r3, #4
 8005310:	623b      	str	r3, [r7, #32]
          break;
 8005312:	e012      	b.n	800533a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	2b01      	cmp	r3, #1
 800531a:	d105      	bne.n	8005328 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800531c:	2308      	movs	r3, #8
 800531e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	69fa      	ldr	r2, [r7, #28]
 8005324:	611a      	str	r2, [r3, #16]
          break;
 8005326:	e008      	b.n	800533a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005328:	2308      	movs	r3, #8
 800532a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	69fa      	ldr	r2, [r7, #28]
 8005330:	615a      	str	r2, [r3, #20]
          break;
 8005332:	e002      	b.n	800533a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005334:	2300      	movs	r3, #0
 8005336:	623b      	str	r3, [r7, #32]
          break;
 8005338:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	2bff      	cmp	r3, #255	; 0xff
 800533e:	d801      	bhi.n	8005344 <HAL_GPIO_Init+0xec>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	e001      	b.n	8005348 <HAL_GPIO_Init+0xf0>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	3304      	adds	r3, #4
 8005348:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	2bff      	cmp	r3, #255	; 0xff
 800534e:	d802      	bhi.n	8005356 <HAL_GPIO_Init+0xfe>
 8005350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	e002      	b.n	800535c <HAL_GPIO_Init+0x104>
 8005356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005358:	3b08      	subs	r3, #8
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	210f      	movs	r1, #15
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	fa01 f303 	lsl.w	r3, r1, r3
 800536a:	43db      	mvns	r3, r3
 800536c:	401a      	ands	r2, r3
 800536e:	6a39      	ldr	r1, [r7, #32]
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	fa01 f303 	lsl.w	r3, r1, r3
 8005376:	431a      	orrs	r2, r3
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005384:	2b00      	cmp	r3, #0
 8005386:	f000 8096 	beq.w	80054b6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800538a:	4b59      	ldr	r3, [pc, #356]	; (80054f0 <HAL_GPIO_Init+0x298>)
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	4a58      	ldr	r2, [pc, #352]	; (80054f0 <HAL_GPIO_Init+0x298>)
 8005390:	f043 0301 	orr.w	r3, r3, #1
 8005394:	6193      	str	r3, [r2, #24]
 8005396:	4b56      	ldr	r3, [pc, #344]	; (80054f0 <HAL_GPIO_Init+0x298>)
 8005398:	699b      	ldr	r3, [r3, #24]
 800539a:	f003 0301 	and.w	r3, r3, #1
 800539e:	60bb      	str	r3, [r7, #8]
 80053a0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80053a2:	4a54      	ldr	r2, [pc, #336]	; (80054f4 <HAL_GPIO_Init+0x29c>)
 80053a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a6:	089b      	lsrs	r3, r3, #2
 80053a8:	3302      	adds	r3, #2
 80053aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053ae:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80053b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b2:	f003 0303 	and.w	r3, r3, #3
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	220f      	movs	r2, #15
 80053ba:	fa02 f303 	lsl.w	r3, r2, r3
 80053be:	43db      	mvns	r3, r3
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	4013      	ands	r3, r2
 80053c4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a4b      	ldr	r2, [pc, #300]	; (80054f8 <HAL_GPIO_Init+0x2a0>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d013      	beq.n	80053f6 <HAL_GPIO_Init+0x19e>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a4a      	ldr	r2, [pc, #296]	; (80054fc <HAL_GPIO_Init+0x2a4>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d00d      	beq.n	80053f2 <HAL_GPIO_Init+0x19a>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a49      	ldr	r2, [pc, #292]	; (8005500 <HAL_GPIO_Init+0x2a8>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d007      	beq.n	80053ee <HAL_GPIO_Init+0x196>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a48      	ldr	r2, [pc, #288]	; (8005504 <HAL_GPIO_Init+0x2ac>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d101      	bne.n	80053ea <HAL_GPIO_Init+0x192>
 80053e6:	2303      	movs	r3, #3
 80053e8:	e006      	b.n	80053f8 <HAL_GPIO_Init+0x1a0>
 80053ea:	2304      	movs	r3, #4
 80053ec:	e004      	b.n	80053f8 <HAL_GPIO_Init+0x1a0>
 80053ee:	2302      	movs	r3, #2
 80053f0:	e002      	b.n	80053f8 <HAL_GPIO_Init+0x1a0>
 80053f2:	2301      	movs	r3, #1
 80053f4:	e000      	b.n	80053f8 <HAL_GPIO_Init+0x1a0>
 80053f6:	2300      	movs	r3, #0
 80053f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053fa:	f002 0203 	and.w	r2, r2, #3
 80053fe:	0092      	lsls	r2, r2, #2
 8005400:	4093      	lsls	r3, r2
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	4313      	orrs	r3, r2
 8005406:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005408:	493a      	ldr	r1, [pc, #232]	; (80054f4 <HAL_GPIO_Init+0x29c>)
 800540a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540c:	089b      	lsrs	r3, r3, #2
 800540e:	3302      	adds	r3, #2
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d006      	beq.n	8005430 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005422:	4b39      	ldr	r3, [pc, #228]	; (8005508 <HAL_GPIO_Init+0x2b0>)
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	4938      	ldr	r1, [pc, #224]	; (8005508 <HAL_GPIO_Init+0x2b0>)
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	4313      	orrs	r3, r2
 800542c:	600b      	str	r3, [r1, #0]
 800542e:	e006      	b.n	800543e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005430:	4b35      	ldr	r3, [pc, #212]	; (8005508 <HAL_GPIO_Init+0x2b0>)
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	43db      	mvns	r3, r3
 8005438:	4933      	ldr	r1, [pc, #204]	; (8005508 <HAL_GPIO_Init+0x2b0>)
 800543a:	4013      	ands	r3, r2
 800543c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d006      	beq.n	8005458 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800544a:	4b2f      	ldr	r3, [pc, #188]	; (8005508 <HAL_GPIO_Init+0x2b0>)
 800544c:	685a      	ldr	r2, [r3, #4]
 800544e:	492e      	ldr	r1, [pc, #184]	; (8005508 <HAL_GPIO_Init+0x2b0>)
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	4313      	orrs	r3, r2
 8005454:	604b      	str	r3, [r1, #4]
 8005456:	e006      	b.n	8005466 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005458:	4b2b      	ldr	r3, [pc, #172]	; (8005508 <HAL_GPIO_Init+0x2b0>)
 800545a:	685a      	ldr	r2, [r3, #4]
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	43db      	mvns	r3, r3
 8005460:	4929      	ldr	r1, [pc, #164]	; (8005508 <HAL_GPIO_Init+0x2b0>)
 8005462:	4013      	ands	r3, r2
 8005464:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800546e:	2b00      	cmp	r3, #0
 8005470:	d006      	beq.n	8005480 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005472:	4b25      	ldr	r3, [pc, #148]	; (8005508 <HAL_GPIO_Init+0x2b0>)
 8005474:	689a      	ldr	r2, [r3, #8]
 8005476:	4924      	ldr	r1, [pc, #144]	; (8005508 <HAL_GPIO_Init+0x2b0>)
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	4313      	orrs	r3, r2
 800547c:	608b      	str	r3, [r1, #8]
 800547e:	e006      	b.n	800548e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005480:	4b21      	ldr	r3, [pc, #132]	; (8005508 <HAL_GPIO_Init+0x2b0>)
 8005482:	689a      	ldr	r2, [r3, #8]
 8005484:	69bb      	ldr	r3, [r7, #24]
 8005486:	43db      	mvns	r3, r3
 8005488:	491f      	ldr	r1, [pc, #124]	; (8005508 <HAL_GPIO_Init+0x2b0>)
 800548a:	4013      	ands	r3, r2
 800548c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d006      	beq.n	80054a8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800549a:	4b1b      	ldr	r3, [pc, #108]	; (8005508 <HAL_GPIO_Init+0x2b0>)
 800549c:	68da      	ldr	r2, [r3, #12]
 800549e:	491a      	ldr	r1, [pc, #104]	; (8005508 <HAL_GPIO_Init+0x2b0>)
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	60cb      	str	r3, [r1, #12]
 80054a6:	e006      	b.n	80054b6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80054a8:	4b17      	ldr	r3, [pc, #92]	; (8005508 <HAL_GPIO_Init+0x2b0>)
 80054aa:	68da      	ldr	r2, [r3, #12]
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	43db      	mvns	r3, r3
 80054b0:	4915      	ldr	r1, [pc, #84]	; (8005508 <HAL_GPIO_Init+0x2b0>)
 80054b2:	4013      	ands	r3, r2
 80054b4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80054b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b8:	3301      	adds	r3, #1
 80054ba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c2:	fa22 f303 	lsr.w	r3, r2, r3
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	f47f aed0 	bne.w	800526c <HAL_GPIO_Init+0x14>
  }
}
 80054cc:	bf00      	nop
 80054ce:	372c      	adds	r7, #44	; 0x2c
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bc80      	pop	{r7}
 80054d4:	4770      	bx	lr
 80054d6:	bf00      	nop
 80054d8:	10210000 	.word	0x10210000
 80054dc:	10110000 	.word	0x10110000
 80054e0:	10120000 	.word	0x10120000
 80054e4:	10310000 	.word	0x10310000
 80054e8:	10320000 	.word	0x10320000
 80054ec:	10220000 	.word	0x10220000
 80054f0:	40021000 	.word	0x40021000
 80054f4:	40010000 	.word	0x40010000
 80054f8:	40010800 	.word	0x40010800
 80054fc:	40010c00 	.word	0x40010c00
 8005500:	40011000 	.word	0x40011000
 8005504:	40011400 	.word	0x40011400
 8005508:	40010400 	.word	0x40010400

0800550c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800550c:	b480      	push	{r7}
 800550e:	b089      	sub	sp, #36	; 0x24
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005516:	2300      	movs	r3, #0
 8005518:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800551a:	e09a      	b.n	8005652 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800551c:	2201      	movs	r2, #1
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	fa02 f303 	lsl.w	r3, r2, r3
 8005524:	683a      	ldr	r2, [r7, #0]
 8005526:	4013      	ands	r3, r2
 8005528:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	2b00      	cmp	r3, #0
 800552e:	f000 808d 	beq.w	800564c <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8005532:	4a4e      	ldr	r2, [pc, #312]	; (800566c <HAL_GPIO_DeInit+0x160>)
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	089b      	lsrs	r3, r3, #2
 8005538:	3302      	adds	r3, #2
 800553a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800553e:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	f003 0303 	and.w	r3, r3, #3
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	220f      	movs	r2, #15
 800554a:	fa02 f303 	lsl.w	r3, r2, r3
 800554e:	697a      	ldr	r2, [r7, #20]
 8005550:	4013      	ands	r3, r2
 8005552:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a46      	ldr	r2, [pc, #280]	; (8005670 <HAL_GPIO_DeInit+0x164>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d013      	beq.n	8005584 <HAL_GPIO_DeInit+0x78>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a45      	ldr	r2, [pc, #276]	; (8005674 <HAL_GPIO_DeInit+0x168>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d00d      	beq.n	8005580 <HAL_GPIO_DeInit+0x74>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a44      	ldr	r2, [pc, #272]	; (8005678 <HAL_GPIO_DeInit+0x16c>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d007      	beq.n	800557c <HAL_GPIO_DeInit+0x70>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a43      	ldr	r2, [pc, #268]	; (800567c <HAL_GPIO_DeInit+0x170>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d101      	bne.n	8005578 <HAL_GPIO_DeInit+0x6c>
 8005574:	2303      	movs	r3, #3
 8005576:	e006      	b.n	8005586 <HAL_GPIO_DeInit+0x7a>
 8005578:	2304      	movs	r3, #4
 800557a:	e004      	b.n	8005586 <HAL_GPIO_DeInit+0x7a>
 800557c:	2302      	movs	r3, #2
 800557e:	e002      	b.n	8005586 <HAL_GPIO_DeInit+0x7a>
 8005580:	2301      	movs	r3, #1
 8005582:	e000      	b.n	8005586 <HAL_GPIO_DeInit+0x7a>
 8005584:	2300      	movs	r3, #0
 8005586:	69fa      	ldr	r2, [r7, #28]
 8005588:	f002 0203 	and.w	r2, r2, #3
 800558c:	0092      	lsls	r2, r2, #2
 800558e:	4093      	lsls	r3, r2
 8005590:	697a      	ldr	r2, [r7, #20]
 8005592:	429a      	cmp	r2, r3
 8005594:	d132      	bne.n	80055fc <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	f003 0303 	and.w	r3, r3, #3
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	220f      	movs	r2, #15
 80055a0:	fa02 f303 	lsl.w	r3, r2, r3
 80055a4:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80055a6:	4a31      	ldr	r2, [pc, #196]	; (800566c <HAL_GPIO_DeInit+0x160>)
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	089b      	lsrs	r3, r3, #2
 80055ac:	3302      	adds	r3, #2
 80055ae:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	43da      	mvns	r2, r3
 80055b6:	482d      	ldr	r0, [pc, #180]	; (800566c <HAL_GPIO_DeInit+0x160>)
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	089b      	lsrs	r3, r3, #2
 80055bc:	400a      	ands	r2, r1
 80055be:	3302      	adds	r3, #2
 80055c0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80055c4:	4b2e      	ldr	r3, [pc, #184]	; (8005680 <HAL_GPIO_DeInit+0x174>)
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	43db      	mvns	r3, r3
 80055cc:	492c      	ldr	r1, [pc, #176]	; (8005680 <HAL_GPIO_DeInit+0x174>)
 80055ce:	4013      	ands	r3, r2
 80055d0:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80055d2:	4b2b      	ldr	r3, [pc, #172]	; (8005680 <HAL_GPIO_DeInit+0x174>)
 80055d4:	685a      	ldr	r2, [r3, #4]
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	43db      	mvns	r3, r3
 80055da:	4929      	ldr	r1, [pc, #164]	; (8005680 <HAL_GPIO_DeInit+0x174>)
 80055dc:	4013      	ands	r3, r2
 80055de:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80055e0:	4b27      	ldr	r3, [pc, #156]	; (8005680 <HAL_GPIO_DeInit+0x174>)
 80055e2:	689a      	ldr	r2, [r3, #8]
 80055e4:	69bb      	ldr	r3, [r7, #24]
 80055e6:	43db      	mvns	r3, r3
 80055e8:	4925      	ldr	r1, [pc, #148]	; (8005680 <HAL_GPIO_DeInit+0x174>)
 80055ea:	4013      	ands	r3, r2
 80055ec:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80055ee:	4b24      	ldr	r3, [pc, #144]	; (8005680 <HAL_GPIO_DeInit+0x174>)
 80055f0:	68da      	ldr	r2, [r3, #12]
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	43db      	mvns	r3, r3
 80055f6:	4922      	ldr	r1, [pc, #136]	; (8005680 <HAL_GPIO_DeInit+0x174>)
 80055f8:	4013      	ands	r3, r2
 80055fa:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	2bff      	cmp	r3, #255	; 0xff
 8005600:	d801      	bhi.n	8005606 <HAL_GPIO_DeInit+0xfa>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	e001      	b.n	800560a <HAL_GPIO_DeInit+0xfe>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	3304      	adds	r3, #4
 800560a:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	2bff      	cmp	r3, #255	; 0xff
 8005610:	d802      	bhi.n	8005618 <HAL_GPIO_DeInit+0x10c>
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	e002      	b.n	800561e <HAL_GPIO_DeInit+0x112>
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	3b08      	subs	r3, #8
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	210f      	movs	r1, #15
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	fa01 f303 	lsl.w	r3, r1, r3
 800562c:	43db      	mvns	r3, r3
 800562e:	401a      	ands	r2, r3
 8005630:	2104      	movs	r1, #4
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	fa01 f303 	lsl.w	r3, r1, r3
 8005638:	431a      	orrs	r2, r3
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	68da      	ldr	r2, [r3, #12]
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	43db      	mvns	r3, r3
 8005646:	401a      	ands	r2, r3
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	60da      	str	r2, [r3, #12]
    }

    position++;
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	3301      	adds	r3, #1
 8005650:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8005652:	683a      	ldr	r2, [r7, #0]
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	fa22 f303 	lsr.w	r3, r2, r3
 800565a:	2b00      	cmp	r3, #0
 800565c:	f47f af5e 	bne.w	800551c <HAL_GPIO_DeInit+0x10>
  }
}
 8005660:	bf00      	nop
 8005662:	3724      	adds	r7, #36	; 0x24
 8005664:	46bd      	mov	sp, r7
 8005666:	bc80      	pop	{r7}
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop
 800566c:	40010000 	.word	0x40010000
 8005670:	40010800 	.word	0x40010800
 8005674:	40010c00 	.word	0x40010c00
 8005678:	40011000 	.word	0x40011000
 800567c:	40011400 	.word	0x40011400
 8005680:	40010400 	.word	0x40010400

08005684 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005684:	b480      	push	{r7}
 8005686:	b085      	sub	sp, #20
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	460b      	mov	r3, r1
 800568e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	689a      	ldr	r2, [r3, #8]
 8005694:	887b      	ldrh	r3, [r7, #2]
 8005696:	4013      	ands	r3, r2
 8005698:	2b00      	cmp	r3, #0
 800569a:	d002      	beq.n	80056a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800569c:	2301      	movs	r3, #1
 800569e:	73fb      	strb	r3, [r7, #15]
 80056a0:	e001      	b.n	80056a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80056a2:	2300      	movs	r3, #0
 80056a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80056a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3714      	adds	r7, #20
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bc80      	pop	{r7}
 80056b0:	4770      	bx	lr

080056b2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80056b2:	b480      	push	{r7}
 80056b4:	b083      	sub	sp, #12
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
 80056ba:	460b      	mov	r3, r1
 80056bc:	807b      	strh	r3, [r7, #2]
 80056be:	4613      	mov	r3, r2
 80056c0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80056c2:	787b      	ldrb	r3, [r7, #1]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d003      	beq.n	80056d0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80056c8:	887a      	ldrh	r2, [r7, #2]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80056ce:	e003      	b.n	80056d8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80056d0:	887b      	ldrh	r3, [r7, #2]
 80056d2:	041a      	lsls	r2, r3, #16
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	611a      	str	r2, [r3, #16]
}
 80056d8:	bf00      	nop
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	bc80      	pop	{r7}
 80056e0:	4770      	bx	lr

080056e2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80056e2:	b480      	push	{r7}
 80056e4:	b083      	sub	sp, #12
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
 80056ea:	460b      	mov	r3, r1
 80056ec:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	68da      	ldr	r2, [r3, #12]
 80056f2:	887b      	ldrh	r3, [r7, #2]
 80056f4:	4013      	ands	r3, r2
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d003      	beq.n	8005702 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80056fa:	887a      	ldrh	r2, [r7, #2]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8005700:	e002      	b.n	8005708 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005702:	887a      	ldrh	r2, [r7, #2]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	611a      	str	r2, [r3, #16]
}
 8005708:	bf00      	nop
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	bc80      	pop	{r7}
 8005710:	4770      	bx	lr
	...

08005714 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d101      	bne.n	8005726 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e10f      	b.n	8005946 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800572c:	b2db      	uxtb	r3, r3
 800572e:	2b00      	cmp	r3, #0
 8005730:	d106      	bne.n	8005740 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f7fe fd4a 	bl	80041d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2224      	movs	r2, #36	; 0x24
 8005744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f022 0201 	bic.w	r2, r2, #1
 8005756:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005758:	f002 fb2e 	bl	8007db8 <HAL_RCC_GetPCLK1Freq>
 800575c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	4a7b      	ldr	r2, [pc, #492]	; (8005950 <HAL_I2C_Init+0x23c>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d807      	bhi.n	8005778 <HAL_I2C_Init+0x64>
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	4a7a      	ldr	r2, [pc, #488]	; (8005954 <HAL_I2C_Init+0x240>)
 800576c:	4293      	cmp	r3, r2
 800576e:	bf94      	ite	ls
 8005770:	2301      	movls	r3, #1
 8005772:	2300      	movhi	r3, #0
 8005774:	b2db      	uxtb	r3, r3
 8005776:	e006      	b.n	8005786 <HAL_I2C_Init+0x72>
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	4a77      	ldr	r2, [pc, #476]	; (8005958 <HAL_I2C_Init+0x244>)
 800577c:	4293      	cmp	r3, r2
 800577e:	bf94      	ite	ls
 8005780:	2301      	movls	r3, #1
 8005782:	2300      	movhi	r3, #0
 8005784:	b2db      	uxtb	r3, r3
 8005786:	2b00      	cmp	r3, #0
 8005788:	d001      	beq.n	800578e <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e0db      	b.n	8005946 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	4a72      	ldr	r2, [pc, #456]	; (800595c <HAL_I2C_Init+0x248>)
 8005792:	fba2 2303 	umull	r2, r3, r2, r3
 8005796:	0c9b      	lsrs	r3, r3, #18
 8005798:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68ba      	ldr	r2, [r7, #8]
 80057aa:	430a      	orrs	r2, r1
 80057ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	6a1b      	ldr	r3, [r3, #32]
 80057b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	4a64      	ldr	r2, [pc, #400]	; (8005950 <HAL_I2C_Init+0x23c>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d802      	bhi.n	80057c8 <HAL_I2C_Init+0xb4>
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	3301      	adds	r3, #1
 80057c6:	e009      	b.n	80057dc <HAL_I2C_Init+0xc8>
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80057ce:	fb02 f303 	mul.w	r3, r2, r3
 80057d2:	4a63      	ldr	r2, [pc, #396]	; (8005960 <HAL_I2C_Init+0x24c>)
 80057d4:	fba2 2303 	umull	r2, r3, r2, r3
 80057d8:	099b      	lsrs	r3, r3, #6
 80057da:	3301      	adds	r3, #1
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	6812      	ldr	r2, [r2, #0]
 80057e0:	430b      	orrs	r3, r1
 80057e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	69db      	ldr	r3, [r3, #28]
 80057ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80057ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	4956      	ldr	r1, [pc, #344]	; (8005950 <HAL_I2C_Init+0x23c>)
 80057f8:	428b      	cmp	r3, r1
 80057fa:	d80d      	bhi.n	8005818 <HAL_I2C_Init+0x104>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	1e59      	subs	r1, r3, #1
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	005b      	lsls	r3, r3, #1
 8005806:	fbb1 f3f3 	udiv	r3, r1, r3
 800580a:	3301      	adds	r3, #1
 800580c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005810:	2b04      	cmp	r3, #4
 8005812:	bf38      	it	cc
 8005814:	2304      	movcc	r3, #4
 8005816:	e04f      	b.n	80058b8 <HAL_I2C_Init+0x1a4>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d111      	bne.n	8005844 <HAL_I2C_Init+0x130>
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	1e58      	subs	r0, r3, #1
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6859      	ldr	r1, [r3, #4]
 8005828:	460b      	mov	r3, r1
 800582a:	005b      	lsls	r3, r3, #1
 800582c:	440b      	add	r3, r1
 800582e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005832:	3301      	adds	r3, #1
 8005834:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005838:	2b00      	cmp	r3, #0
 800583a:	bf0c      	ite	eq
 800583c:	2301      	moveq	r3, #1
 800583e:	2300      	movne	r3, #0
 8005840:	b2db      	uxtb	r3, r3
 8005842:	e012      	b.n	800586a <HAL_I2C_Init+0x156>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	1e58      	subs	r0, r3, #1
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6859      	ldr	r1, [r3, #4]
 800584c:	460b      	mov	r3, r1
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	440b      	add	r3, r1
 8005852:	0099      	lsls	r1, r3, #2
 8005854:	440b      	add	r3, r1
 8005856:	fbb0 f3f3 	udiv	r3, r0, r3
 800585a:	3301      	adds	r3, #1
 800585c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005860:	2b00      	cmp	r3, #0
 8005862:	bf0c      	ite	eq
 8005864:	2301      	moveq	r3, #1
 8005866:	2300      	movne	r3, #0
 8005868:	b2db      	uxtb	r3, r3
 800586a:	2b00      	cmp	r3, #0
 800586c:	d001      	beq.n	8005872 <HAL_I2C_Init+0x15e>
 800586e:	2301      	movs	r3, #1
 8005870:	e022      	b.n	80058b8 <HAL_I2C_Init+0x1a4>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d10e      	bne.n	8005898 <HAL_I2C_Init+0x184>
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	1e58      	subs	r0, r3, #1
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6859      	ldr	r1, [r3, #4]
 8005882:	460b      	mov	r3, r1
 8005884:	005b      	lsls	r3, r3, #1
 8005886:	440b      	add	r3, r1
 8005888:	fbb0 f3f3 	udiv	r3, r0, r3
 800588c:	3301      	adds	r3, #1
 800588e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005892:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005896:	e00f      	b.n	80058b8 <HAL_I2C_Init+0x1a4>
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	1e58      	subs	r0, r3, #1
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6859      	ldr	r1, [r3, #4]
 80058a0:	460b      	mov	r3, r1
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	440b      	add	r3, r1
 80058a6:	0099      	lsls	r1, r3, #2
 80058a8:	440b      	add	r3, r1
 80058aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80058ae:	3301      	adds	r3, #1
 80058b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80058b8:	6879      	ldr	r1, [r7, #4]
 80058ba:	6809      	ldr	r1, [r1, #0]
 80058bc:	4313      	orrs	r3, r2
 80058be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	69da      	ldr	r2, [r3, #28]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a1b      	ldr	r3, [r3, #32]
 80058d2:	431a      	orrs	r2, r3
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	430a      	orrs	r2, r1
 80058da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80058e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	6911      	ldr	r1, [r2, #16]
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	68d2      	ldr	r2, [r2, #12]
 80058f2:	4311      	orrs	r1, r2
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	6812      	ldr	r2, [r2, #0]
 80058f8:	430b      	orrs	r3, r1
 80058fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	695a      	ldr	r2, [r3, #20]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	699b      	ldr	r3, [r3, #24]
 800590e:	431a      	orrs	r2, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	430a      	orrs	r2, r1
 8005916:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f042 0201 	orr.w	r2, r2, #1
 8005926:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2220      	movs	r2, #32
 8005932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005944:	2300      	movs	r3, #0
}
 8005946:	4618      	mov	r0, r3
 8005948:	3710      	adds	r7, #16
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	000186a0 	.word	0x000186a0
 8005954:	001e847f 	.word	0x001e847f
 8005958:	003d08ff 	.word	0x003d08ff
 800595c:	431bde83 	.word	0x431bde83
 8005960:	10624dd3 	.word	0x10624dd3

08005964 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b082      	sub	sp, #8
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d101      	bne.n	8005976 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e021      	b.n	80059ba <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2224      	movs	r2, #36	; 0x24
 800597a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f022 0201 	bic.w	r2, r2, #1
 800598c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f7fe fc8c 	bl	80042ac <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3708      	adds	r7, #8
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
	...

080059c4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b088      	sub	sp, #32
 80059c8:	af02      	add	r7, sp, #8
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	607a      	str	r2, [r7, #4]
 80059ce:	461a      	mov	r2, r3
 80059d0:	460b      	mov	r3, r1
 80059d2:	817b      	strh	r3, [r7, #10]
 80059d4:	4613      	mov	r3, r2
 80059d6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80059d8:	f7fe fec8 	bl	800476c <HAL_GetTick>
 80059dc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	2b20      	cmp	r3, #32
 80059e8:	f040 80e0 	bne.w	8005bac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	9300      	str	r3, [sp, #0]
 80059f0:	2319      	movs	r3, #25
 80059f2:	2201      	movs	r2, #1
 80059f4:	4970      	ldr	r1, [pc, #448]	; (8005bb8 <HAL_I2C_Master_Transmit+0x1f4>)
 80059f6:	68f8      	ldr	r0, [r7, #12]
 80059f8:	f000 fd5e 	bl	80064b8 <I2C_WaitOnFlagUntilTimeout>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d001      	beq.n	8005a06 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005a02:	2302      	movs	r3, #2
 8005a04:	e0d3      	b.n	8005bae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d101      	bne.n	8005a14 <HAL_I2C_Master_Transmit+0x50>
 8005a10:	2302      	movs	r3, #2
 8005a12:	e0cc      	b.n	8005bae <HAL_I2C_Master_Transmit+0x1ea>
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 0301 	and.w	r3, r3, #1
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d007      	beq.n	8005a3a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f042 0201 	orr.w	r2, r2, #1
 8005a38:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a48:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2221      	movs	r2, #33	; 0x21
 8005a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2210      	movs	r2, #16
 8005a56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	893a      	ldrh	r2, [r7, #8]
 8005a6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a70:	b29a      	uxth	r2, r3
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	4a50      	ldr	r2, [pc, #320]	; (8005bbc <HAL_I2C_Master_Transmit+0x1f8>)
 8005a7a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005a7c:	8979      	ldrh	r1, [r7, #10]
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	6a3a      	ldr	r2, [r7, #32]
 8005a82:	68f8      	ldr	r0, [r7, #12]
 8005a84:	f000 fbec 	bl	8006260 <I2C_MasterRequestWrite>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d001      	beq.n	8005a92 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e08d      	b.n	8005bae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a92:	2300      	movs	r3, #0
 8005a94:	613b      	str	r3, [r7, #16]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	695b      	ldr	r3, [r3, #20]
 8005a9c:	613b      	str	r3, [r7, #16]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	699b      	ldr	r3, [r3, #24]
 8005aa4:	613b      	str	r3, [r7, #16]
 8005aa6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005aa8:	e066      	b.n	8005b78 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005aaa:	697a      	ldr	r2, [r7, #20]
 8005aac:	6a39      	ldr	r1, [r7, #32]
 8005aae:	68f8      	ldr	r0, [r7, #12]
 8005ab0:	f000 fdd8 	bl	8006664 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d00d      	beq.n	8005ad6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005abe:	2b04      	cmp	r3, #4
 8005ac0:	d107      	bne.n	8005ad2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ad0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e06b      	b.n	8005bae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ada:	781a      	ldrb	r2, [r3, #0]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae6:	1c5a      	adds	r2, r3, #1
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	3b01      	subs	r3, #1
 8005af4:	b29a      	uxth	r2, r3
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005afe:	3b01      	subs	r3, #1
 8005b00:	b29a      	uxth	r2, r3
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	695b      	ldr	r3, [r3, #20]
 8005b0c:	f003 0304 	and.w	r3, r3, #4
 8005b10:	2b04      	cmp	r3, #4
 8005b12:	d11b      	bne.n	8005b4c <HAL_I2C_Master_Transmit+0x188>
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d017      	beq.n	8005b4c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b20:	781a      	ldrb	r2, [r3, #0]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2c:	1c5a      	adds	r2, r3, #1
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	3b01      	subs	r3, #1
 8005b3a:	b29a      	uxth	r2, r3
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b44:	3b01      	subs	r3, #1
 8005b46:	b29a      	uxth	r2, r3
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b4c:	697a      	ldr	r2, [r7, #20]
 8005b4e:	6a39      	ldr	r1, [r7, #32]
 8005b50:	68f8      	ldr	r0, [r7, #12]
 8005b52:	f000 fdc8 	bl	80066e6 <I2C_WaitOnBTFFlagUntilTimeout>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d00d      	beq.n	8005b78 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b60:	2b04      	cmp	r3, #4
 8005b62:	d107      	bne.n	8005b74 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b72:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	e01a      	b.n	8005bae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d194      	bne.n	8005aaa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2220      	movs	r2, #32
 8005b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	e000      	b.n	8005bae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005bac:	2302      	movs	r3, #2
  }
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3718      	adds	r7, #24
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	00100002 	.word	0x00100002
 8005bbc:	ffff0000 	.word	0xffff0000

08005bc0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b08c      	sub	sp, #48	; 0x30
 8005bc4:	af02      	add	r7, sp, #8
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	607a      	str	r2, [r7, #4]
 8005bca:	461a      	mov	r2, r3
 8005bcc:	460b      	mov	r3, r1
 8005bce:	817b      	strh	r3, [r7, #10]
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005bd4:	f7fe fdca 	bl	800476c <HAL_GetTick>
 8005bd8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	2b20      	cmp	r3, #32
 8005be4:	f040 8213 	bne.w	800600e <HAL_I2C_Master_Receive+0x44e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bea:	9300      	str	r3, [sp, #0]
 8005bec:	2319      	movs	r3, #25
 8005bee:	2201      	movs	r2, #1
 8005bf0:	497e      	ldr	r1, [pc, #504]	; (8005dec <HAL_I2C_Master_Receive+0x22c>)
 8005bf2:	68f8      	ldr	r0, [r7, #12]
 8005bf4:	f000 fc60 	bl	80064b8 <I2C_WaitOnFlagUntilTimeout>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d001      	beq.n	8005c02 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005bfe:	2302      	movs	r3, #2
 8005c00:	e206      	b.n	8006010 <HAL_I2C_Master_Receive+0x450>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d101      	bne.n	8005c10 <HAL_I2C_Master_Receive+0x50>
 8005c0c:	2302      	movs	r3, #2
 8005c0e:	e1ff      	b.n	8006010 <HAL_I2C_Master_Receive+0x450>
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 0301 	and.w	r3, r3, #1
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d007      	beq.n	8005c36 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f042 0201 	orr.w	r2, r2, #1
 8005c34:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c44:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2222      	movs	r2, #34	; 0x22
 8005c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2210      	movs	r2, #16
 8005c52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	893a      	ldrh	r2, [r7, #8]
 8005c66:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c6c:	b29a      	uxth	r2, r3
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	4a5e      	ldr	r2, [pc, #376]	; (8005df0 <HAL_I2C_Master_Receive+0x230>)
 8005c76:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005c78:	8979      	ldrh	r1, [r7, #10]
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c7e:	68f8      	ldr	r0, [r7, #12]
 8005c80:	f000 fb64 	bl	800634c <I2C_MasterRequestRead>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d001      	beq.n	8005c8e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e1c0      	b.n	8006010 <HAL_I2C_Master_Receive+0x450>
    }

    if (hi2c->XferSize == 0U)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d113      	bne.n	8005cbe <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c96:	2300      	movs	r3, #0
 8005c98:	623b      	str	r3, [r7, #32]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	695b      	ldr	r3, [r3, #20]
 8005ca0:	623b      	str	r3, [r7, #32]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	699b      	ldr	r3, [r3, #24]
 8005ca8:	623b      	str	r3, [r7, #32]
 8005caa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cba:	601a      	str	r2, [r3, #0]
 8005cbc:	e194      	b.n	8005fe8 <HAL_I2C_Master_Receive+0x428>
    }
    else if (hi2c->XferSize == 1U)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d11d      	bne.n	8005d02 <HAL_I2C_Master_Receive+0x142>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cd4:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005cd6:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cd8:	2300      	movs	r3, #0
 8005cda:	61fb      	str	r3, [r7, #28]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	695b      	ldr	r3, [r3, #20]
 8005ce2:	61fb      	str	r3, [r7, #28]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	699b      	ldr	r3, [r3, #24]
 8005cea:	61fb      	str	r3, [r7, #28]
 8005cec:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cfc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005cfe:	b662      	cpsie	i
 8005d00:	e172      	b.n	8005fe8 <HAL_I2C_Master_Receive+0x428>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d06:	2b02      	cmp	r3, #2
 8005d08:	d11d      	bne.n	8005d46 <HAL_I2C_Master_Receive+0x186>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d18:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005d1a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	61bb      	str	r3, [r7, #24]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	695b      	ldr	r3, [r3, #20]
 8005d26:	61bb      	str	r3, [r7, #24]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	699b      	ldr	r3, [r3, #24]
 8005d2e:	61bb      	str	r3, [r7, #24]
 8005d30:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d40:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005d42:	b662      	cpsie	i
 8005d44:	e150      	b.n	8005fe8 <HAL_I2C_Master_Receive+0x428>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d54:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d56:	2300      	movs	r3, #0
 8005d58:	617b      	str	r3, [r7, #20]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	695b      	ldr	r3, [r3, #20]
 8005d60:	617b      	str	r3, [r7, #20]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	699b      	ldr	r3, [r3, #24]
 8005d68:	617b      	str	r3, [r7, #20]
 8005d6a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005d6c:	e13c      	b.n	8005fe8 <HAL_I2C_Master_Receive+0x428>
    {
      if (hi2c->XferSize <= 3U)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d72:	2b03      	cmp	r3, #3
 8005d74:	f200 80f5 	bhi.w	8005f62 <HAL_I2C_Master_Receive+0x3a2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d123      	bne.n	8005dc8 <HAL_I2C_Master_Receive+0x208>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d82:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d84:	68f8      	ldr	r0, [r7, #12]
 8005d86:	f000 fcef 	bl	8006768 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d001      	beq.n	8005d94 <HAL_I2C_Master_Receive+0x1d4>
          {
            return HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	e13d      	b.n	8006010 <HAL_I2C_Master_Receive+0x450>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	691a      	ldr	r2, [r3, #16]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9e:	b2d2      	uxtb	r2, r2
 8005da0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da6:	1c5a      	adds	r2, r3, #1
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005db0:	3b01      	subs	r3, #1
 8005db2:	b29a      	uxth	r2, r3
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	3b01      	subs	r3, #1
 8005dc0:	b29a      	uxth	r2, r3
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005dc6:	e10f      	b.n	8005fe8 <HAL_I2C_Master_Receive+0x428>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d150      	bne.n	8005e72 <HAL_I2C_Master_Receive+0x2b2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd2:	9300      	str	r3, [sp, #0]
 8005dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	4906      	ldr	r1, [pc, #24]	; (8005df4 <HAL_I2C_Master_Receive+0x234>)
 8005dda:	68f8      	ldr	r0, [r7, #12]
 8005ddc:	f000 fb6c 	bl	80064b8 <I2C_WaitOnFlagUntilTimeout>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d008      	beq.n	8005df8 <HAL_I2C_Master_Receive+0x238>
          {
            return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e112      	b.n	8006010 <HAL_I2C_Master_Receive+0x450>
 8005dea:	bf00      	nop
 8005dec:	00100002 	.word	0x00100002
 8005df0:	ffff0000 	.word	0xffff0000
 8005df4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005df8:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e08:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	691a      	ldr	r2, [r3, #16]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e14:	b2d2      	uxtb	r2, r2
 8005e16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1c:	1c5a      	adds	r2, r3, #1
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e26:	3b01      	subs	r3, #1
 8005e28:	b29a      	uxth	r2, r3
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	3b01      	subs	r3, #1
 8005e36:	b29a      	uxth	r2, r3
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005e3c:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	691a      	ldr	r2, [r3, #16]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e48:	b2d2      	uxtb	r2, r2
 8005e4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e50:	1c5a      	adds	r2, r3, #1
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	b29a      	uxth	r2, r3
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	3b01      	subs	r3, #1
 8005e6a:	b29a      	uxth	r2, r3
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005e70:	e0ba      	b.n	8005fe8 <HAL_I2C_Master_Receive+0x428>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e74:	9300      	str	r3, [sp, #0]
 8005e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e78:	2200      	movs	r2, #0
 8005e7a:	4967      	ldr	r1, [pc, #412]	; (8006018 <HAL_I2C_Master_Receive+0x458>)
 8005e7c:	68f8      	ldr	r0, [r7, #12]
 8005e7e:	f000 fb1b 	bl	80064b8 <I2C_WaitOnFlagUntilTimeout>
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d001      	beq.n	8005e8c <HAL_I2C_Master_Receive+0x2cc>
          {
            return HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e0c1      	b.n	8006010 <HAL_I2C_Master_Receive+0x450>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e9a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005e9c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	691a      	ldr	r2, [r3, #16]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea8:	b2d2      	uxtb	r2, r2
 8005eaa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb0:	1c5a      	adds	r2, r3, #1
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	b29a      	uxth	r2, r3
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	3b01      	subs	r3, #1
 8005eca:	b29a      	uxth	r2, r3
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed2:	9300      	str	r3, [sp, #0]
 8005ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	494f      	ldr	r1, [pc, #316]	; (8006018 <HAL_I2C_Master_Receive+0x458>)
 8005eda:	68f8      	ldr	r0, [r7, #12]
 8005edc:	f000 faec 	bl	80064b8 <I2C_WaitOnFlagUntilTimeout>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d001      	beq.n	8005eea <HAL_I2C_Master_Receive+0x32a>
          {
            return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e092      	b.n	8006010 <HAL_I2C_Master_Receive+0x450>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ef8:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	691a      	ldr	r2, [r3, #16]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f04:	b2d2      	uxtb	r2, r2
 8005f06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0c:	1c5a      	adds	r2, r3, #1
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f16:	3b01      	subs	r3, #1
 8005f18:	b29a      	uxth	r2, r3
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	3b01      	subs	r3, #1
 8005f26:	b29a      	uxth	r2, r3
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005f2c:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	691a      	ldr	r2, [r3, #16]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f38:	b2d2      	uxtb	r2, r2
 8005f3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f40:	1c5a      	adds	r2, r3, #1
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f4a:	3b01      	subs	r3, #1
 8005f4c:	b29a      	uxth	r2, r3
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	3b01      	subs	r3, #1
 8005f5a:	b29a      	uxth	r2, r3
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f60:	e042      	b.n	8005fe8 <HAL_I2C_Master_Receive+0x428>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f66:	68f8      	ldr	r0, [r7, #12]
 8005f68:	f000 fbfe 	bl	8006768 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d001      	beq.n	8005f76 <HAL_I2C_Master_Receive+0x3b6>
        {
          return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e04c      	b.n	8006010 <HAL_I2C_Master_Receive+0x450>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	691a      	ldr	r2, [r3, #16]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f80:	b2d2      	uxtb	r2, r2
 8005f82:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f88:	1c5a      	adds	r2, r3, #1
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f92:	3b01      	subs	r3, #1
 8005f94:	b29a      	uxth	r2, r3
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	3b01      	subs	r3, #1
 8005fa2:	b29a      	uxth	r2, r3
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	695b      	ldr	r3, [r3, #20]
 8005fae:	f003 0304 	and.w	r3, r3, #4
 8005fb2:	2b04      	cmp	r3, #4
 8005fb4:	d118      	bne.n	8005fe8 <HAL_I2C_Master_Receive+0x428>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	691a      	ldr	r2, [r3, #16]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc0:	b2d2      	uxtb	r2, r2
 8005fc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc8:	1c5a      	adds	r2, r3, #1
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fd2:	3b01      	subs	r3, #1
 8005fd4:	b29a      	uxth	r2, r3
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	3b01      	subs	r3, #1
 8005fe2:	b29a      	uxth	r2, r3
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	f47f aebe 	bne.w	8005d6e <HAL_I2C_Master_Receive+0x1ae>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2220      	movs	r2, #32
 8005ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2200      	movs	r2, #0
 8006006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800600a:	2300      	movs	r3, #0
 800600c:	e000      	b.n	8006010 <HAL_I2C_Master_Receive+0x450>
  }
  else
  {
    return HAL_BUSY;
 800600e:	2302      	movs	r3, #2
  }
}
 8006010:	4618      	mov	r0, r3
 8006012:	3728      	adds	r7, #40	; 0x28
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}
 8006018:	00010004 	.word	0x00010004

0800601c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b08a      	sub	sp, #40	; 0x28
 8006020:	af02      	add	r7, sp, #8
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	607a      	str	r2, [r7, #4]
 8006026:	603b      	str	r3, [r7, #0]
 8006028:	460b      	mov	r3, r1
 800602a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800602c:	f7fe fb9e 	bl	800476c <HAL_GetTick>
 8006030:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8006032:	2301      	movs	r3, #1
 8006034:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800603c:	b2db      	uxtb	r3, r3
 800603e:	2b20      	cmp	r3, #32
 8006040:	f040 8105 	bne.w	800624e <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006044:	69fb      	ldr	r3, [r7, #28]
 8006046:	9300      	str	r3, [sp, #0]
 8006048:	2319      	movs	r3, #25
 800604a:	2201      	movs	r2, #1
 800604c:	4982      	ldr	r1, [pc, #520]	; (8006258 <HAL_I2C_IsDeviceReady+0x23c>)
 800604e:	68f8      	ldr	r0, [r7, #12]
 8006050:	f000 fa32 	bl	80064b8 <I2C_WaitOnFlagUntilTimeout>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d001      	beq.n	800605e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800605a:	2302      	movs	r3, #2
 800605c:	e0f8      	b.n	8006250 <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006064:	2b01      	cmp	r3, #1
 8006066:	d101      	bne.n	800606c <HAL_I2C_IsDeviceReady+0x50>
 8006068:	2302      	movs	r3, #2
 800606a:	e0f1      	b.n	8006250 <HAL_I2C_IsDeviceReady+0x234>
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 0301 	and.w	r3, r3, #1
 800607e:	2b01      	cmp	r3, #1
 8006080:	d007      	beq.n	8006092 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f042 0201 	orr.w	r2, r2, #1
 8006090:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060a0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2224      	movs	r2, #36	; 0x24
 80060a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2200      	movs	r2, #0
 80060ae:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	4a6a      	ldr	r2, [pc, #424]	; (800625c <HAL_I2C_IsDeviceReady+0x240>)
 80060b4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060c4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	9300      	str	r3, [sp, #0]
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80060d2:	68f8      	ldr	r0, [r7, #12]
 80060d4:	f000 f9f0 	bl	80064b8 <I2C_WaitOnFlagUntilTimeout>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d001      	beq.n	80060e2 <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e0b6      	b.n	8006250 <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80060e2:	897b      	ldrh	r3, [r7, #10]
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	461a      	mov	r2, r3
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80060f0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80060f2:	f7fe fb3b 	bl	800476c <HAL_GetTick>
 80060f6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	695b      	ldr	r3, [r3, #20]
 80060fe:	f003 0302 	and.w	r3, r3, #2
 8006102:	2b02      	cmp	r3, #2
 8006104:	bf0c      	ite	eq
 8006106:	2301      	moveq	r3, #1
 8006108:	2300      	movne	r3, #0
 800610a:	b2db      	uxtb	r3, r3
 800610c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	695b      	ldr	r3, [r3, #20]
 8006114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006118:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800611c:	bf0c      	ite	eq
 800611e:	2301      	moveq	r3, #1
 8006120:	2300      	movne	r3, #0
 8006122:	b2db      	uxtb	r3, r3
 8006124:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006126:	e025      	b.n	8006174 <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006128:	f7fe fb20 	bl	800476c <HAL_GetTick>
 800612c:	4602      	mov	r2, r0
 800612e:	69fb      	ldr	r3, [r7, #28]
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	683a      	ldr	r2, [r7, #0]
 8006134:	429a      	cmp	r2, r3
 8006136:	d302      	bcc.n	800613e <HAL_I2C_IsDeviceReady+0x122>
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d103      	bne.n	8006146 <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	22a0      	movs	r2, #160	; 0xa0
 8006142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	695b      	ldr	r3, [r3, #20]
 800614c:	f003 0302 	and.w	r3, r3, #2
 8006150:	2b02      	cmp	r3, #2
 8006152:	bf0c      	ite	eq
 8006154:	2301      	moveq	r3, #1
 8006156:	2300      	movne	r3, #0
 8006158:	b2db      	uxtb	r3, r3
 800615a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	695b      	ldr	r3, [r3, #20]
 8006162:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006166:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800616a:	bf0c      	ite	eq
 800616c:	2301      	moveq	r3, #1
 800616e:	2300      	movne	r3, #0
 8006170:	b2db      	uxtb	r3, r3
 8006172:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800617a:	b2db      	uxtb	r3, r3
 800617c:	2ba0      	cmp	r3, #160	; 0xa0
 800617e:	d005      	beq.n	800618c <HAL_I2C_IsDeviceReady+0x170>
 8006180:	7dfb      	ldrb	r3, [r7, #23]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d102      	bne.n	800618c <HAL_I2C_IsDeviceReady+0x170>
 8006186:	7dbb      	ldrb	r3, [r7, #22]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d0cd      	beq.n	8006128 <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2220      	movs	r2, #32
 8006190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	695b      	ldr	r3, [r3, #20]
 800619a:	f003 0302 	and.w	r3, r3, #2
 800619e:	2b02      	cmp	r3, #2
 80061a0:	d129      	bne.n	80061f6 <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061b0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061b2:	2300      	movs	r3, #0
 80061b4:	613b      	str	r3, [r7, #16]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	695b      	ldr	r3, [r3, #20]
 80061bc:	613b      	str	r3, [r7, #16]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	699b      	ldr	r3, [r3, #24]
 80061c4:	613b      	str	r3, [r7, #16]
 80061c6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	9300      	str	r3, [sp, #0]
 80061cc:	2319      	movs	r3, #25
 80061ce:	2201      	movs	r2, #1
 80061d0:	4921      	ldr	r1, [pc, #132]	; (8006258 <HAL_I2C_IsDeviceReady+0x23c>)
 80061d2:	68f8      	ldr	r0, [r7, #12]
 80061d4:	f000 f970 	bl	80064b8 <I2C_WaitOnFlagUntilTimeout>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d001      	beq.n	80061e2 <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e036      	b.n	8006250 <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2220      	movs	r2, #32
 80061e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2200      	movs	r2, #0
 80061ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80061f2:	2300      	movs	r3, #0
 80061f4:	e02c      	b.n	8006250 <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006204:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800620e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	9300      	str	r3, [sp, #0]
 8006214:	2319      	movs	r3, #25
 8006216:	2201      	movs	r2, #1
 8006218:	490f      	ldr	r1, [pc, #60]	; (8006258 <HAL_I2C_IsDeviceReady+0x23c>)
 800621a:	68f8      	ldr	r0, [r7, #12]
 800621c:	f000 f94c 	bl	80064b8 <I2C_WaitOnFlagUntilTimeout>
 8006220:	4603      	mov	r3, r0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d001      	beq.n	800622a <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	e012      	b.n	8006250 <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	3301      	adds	r3, #1
 800622e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8006230:	69ba      	ldr	r2, [r7, #24]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	429a      	cmp	r2, r3
 8006236:	f4ff af3e 	bcc.w	80060b6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2220      	movs	r2, #32
 800623e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2200      	movs	r2, #0
 8006246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e000      	b.n	8006250 <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 800624e:	2302      	movs	r3, #2
  }
}
 8006250:	4618      	mov	r0, r3
 8006252:	3720      	adds	r7, #32
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}
 8006258:	00100002 	.word	0x00100002
 800625c:	ffff0000 	.word	0xffff0000

08006260 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b088      	sub	sp, #32
 8006264:	af02      	add	r7, sp, #8
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	607a      	str	r2, [r7, #4]
 800626a:	603b      	str	r3, [r7, #0]
 800626c:	460b      	mov	r3, r1
 800626e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006274:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	2b08      	cmp	r3, #8
 800627a:	d006      	beq.n	800628a <I2C_MasterRequestWrite+0x2a>
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	2b01      	cmp	r3, #1
 8006280:	d003      	beq.n	800628a <I2C_MasterRequestWrite+0x2a>
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006288:	d108      	bne.n	800629c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006298:	601a      	str	r2, [r3, #0]
 800629a:	e00b      	b.n	80062b4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a0:	2b12      	cmp	r3, #18
 80062a2:	d107      	bne.n	80062b4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	9300      	str	r3, [sp, #0]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	f000 f8f9 	bl	80064b8 <I2C_WaitOnFlagUntilTimeout>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d001      	beq.n	80062d0 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	e035      	b.n	800633c <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	691b      	ldr	r3, [r3, #16]
 80062d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062d8:	d108      	bne.n	80062ec <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80062da:	897b      	ldrh	r3, [r7, #10]
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	461a      	mov	r2, r3
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80062e8:	611a      	str	r2, [r3, #16]
 80062ea:	e01b      	b.n	8006324 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80062ec:	897b      	ldrh	r3, [r7, #10]
 80062ee:	11db      	asrs	r3, r3, #7
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	f003 0306 	and.w	r3, r3, #6
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	f063 030f 	orn	r3, r3, #15
 80062fc:	b2da      	uxtb	r2, r3
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	490e      	ldr	r1, [pc, #56]	; (8006344 <I2C_MasterRequestWrite+0xe4>)
 800630a:	68f8      	ldr	r0, [r7, #12]
 800630c:	f000 f92b 	bl	8006566 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006310:	4603      	mov	r3, r0
 8006312:	2b00      	cmp	r3, #0
 8006314:	d001      	beq.n	800631a <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	e010      	b.n	800633c <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800631a:	897b      	ldrh	r3, [r7, #10]
 800631c:	b2da      	uxtb	r2, r3
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	4907      	ldr	r1, [pc, #28]	; (8006348 <I2C_MasterRequestWrite+0xe8>)
 800632a:	68f8      	ldr	r0, [r7, #12]
 800632c:	f000 f91b 	bl	8006566 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006330:	4603      	mov	r3, r0
 8006332:	2b00      	cmp	r3, #0
 8006334:	d001      	beq.n	800633a <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	e000      	b.n	800633c <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 800633a:	2300      	movs	r3, #0
}
 800633c:	4618      	mov	r0, r3
 800633e:	3718      	adds	r7, #24
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}
 8006344:	00010008 	.word	0x00010008
 8006348:	00010002 	.word	0x00010002

0800634c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b088      	sub	sp, #32
 8006350:	af02      	add	r7, sp, #8
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	607a      	str	r2, [r7, #4]
 8006356:	603b      	str	r3, [r7, #0]
 8006358:	460b      	mov	r3, r1
 800635a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006360:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006370:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	2b08      	cmp	r3, #8
 8006376:	d006      	beq.n	8006386 <I2C_MasterRequestRead+0x3a>
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	2b01      	cmp	r3, #1
 800637c:	d003      	beq.n	8006386 <I2C_MasterRequestRead+0x3a>
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006384:	d108      	bne.n	8006398 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006394:	601a      	str	r2, [r3, #0]
 8006396:	e00b      	b.n	80063b0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800639c:	2b11      	cmp	r3, #17
 800639e:	d107      	bne.n	80063b0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063ae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	9300      	str	r3, [sp, #0]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80063bc:	68f8      	ldr	r0, [r7, #12]
 80063be:	f000 f87b 	bl	80064b8 <I2C_WaitOnFlagUntilTimeout>
 80063c2:	4603      	mov	r3, r0
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d001      	beq.n	80063cc <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	e06d      	b.n	80064a8 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	691b      	ldr	r3, [r3, #16]
 80063d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063d4:	d108      	bne.n	80063e8 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80063d6:	897b      	ldrh	r3, [r7, #10]
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	f043 0301 	orr.w	r3, r3, #1
 80063de:	b2da      	uxtb	r2, r3
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	611a      	str	r2, [r3, #16]
 80063e6:	e053      	b.n	8006490 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80063e8:	897b      	ldrh	r3, [r7, #10]
 80063ea:	11db      	asrs	r3, r3, #7
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	f003 0306 	and.w	r3, r3, #6
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	f063 030f 	orn	r3, r3, #15
 80063f8:	b2da      	uxtb	r2, r3
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	492a      	ldr	r1, [pc, #168]	; (80064b0 <I2C_MasterRequestRead+0x164>)
 8006406:	68f8      	ldr	r0, [r7, #12]
 8006408:	f000 f8ad 	bl	8006566 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d001      	beq.n	8006416 <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e048      	b.n	80064a8 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006416:	897b      	ldrh	r3, [r7, #10]
 8006418:	b2da      	uxtb	r2, r3
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	4923      	ldr	r1, [pc, #140]	; (80064b4 <I2C_MasterRequestRead+0x168>)
 8006426:	68f8      	ldr	r0, [r7, #12]
 8006428:	f000 f89d 	bl	8006566 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800642c:	4603      	mov	r3, r0
 800642e:	2b00      	cmp	r3, #0
 8006430:	d001      	beq.n	8006436 <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	e038      	b.n	80064a8 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006436:	2300      	movs	r3, #0
 8006438:	613b      	str	r3, [r7, #16]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	695b      	ldr	r3, [r3, #20]
 8006440:	613b      	str	r3, [r7, #16]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	699b      	ldr	r3, [r3, #24]
 8006448:	613b      	str	r3, [r7, #16]
 800644a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800645a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	9300      	str	r3, [sp, #0]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006468:	68f8      	ldr	r0, [r7, #12]
 800646a:	f000 f825 	bl	80064b8 <I2C_WaitOnFlagUntilTimeout>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d001      	beq.n	8006478 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	e017      	b.n	80064a8 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006478:	897b      	ldrh	r3, [r7, #10]
 800647a:	11db      	asrs	r3, r3, #7
 800647c:	b2db      	uxtb	r3, r3
 800647e:	f003 0306 	and.w	r3, r3, #6
 8006482:	b2db      	uxtb	r3, r3
 8006484:	f063 030e 	orn	r3, r3, #14
 8006488:	b2da      	uxtb	r2, r3
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	4907      	ldr	r1, [pc, #28]	; (80064b4 <I2C_MasterRequestRead+0x168>)
 8006496:	68f8      	ldr	r0, [r7, #12]
 8006498:	f000 f865 	bl	8006566 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800649c:	4603      	mov	r3, r0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d001      	beq.n	80064a6 <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	e000      	b.n	80064a8 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 80064a6:	2300      	movs	r3, #0
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3718      	adds	r7, #24
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	00010008 	.word	0x00010008
 80064b4:	00010002 	.word	0x00010002

080064b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	60b9      	str	r1, [r7, #8]
 80064c2:	603b      	str	r3, [r7, #0]
 80064c4:	4613      	mov	r3, r2
 80064c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80064c8:	e025      	b.n	8006516 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064d0:	d021      	beq.n	8006516 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064d2:	f7fe f94b 	bl	800476c <HAL_GetTick>
 80064d6:	4602      	mov	r2, r0
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	1ad3      	subs	r3, r2, r3
 80064dc:	683a      	ldr	r2, [r7, #0]
 80064de:	429a      	cmp	r2, r3
 80064e0:	d302      	bcc.n	80064e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d116      	bne.n	8006516 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2200      	movs	r2, #0
 80064ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2220      	movs	r2, #32
 80064f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2200      	movs	r2, #0
 80064fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006502:	f043 0220 	orr.w	r2, r3, #32
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2200      	movs	r2, #0
 800650e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e023      	b.n	800655e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	0c1b      	lsrs	r3, r3, #16
 800651a:	b2db      	uxtb	r3, r3
 800651c:	2b01      	cmp	r3, #1
 800651e:	d10d      	bne.n	800653c <I2C_WaitOnFlagUntilTimeout+0x84>
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	695b      	ldr	r3, [r3, #20]
 8006526:	43da      	mvns	r2, r3
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	4013      	ands	r3, r2
 800652c:	b29b      	uxth	r3, r3
 800652e:	2b00      	cmp	r3, #0
 8006530:	bf0c      	ite	eq
 8006532:	2301      	moveq	r3, #1
 8006534:	2300      	movne	r3, #0
 8006536:	b2db      	uxtb	r3, r3
 8006538:	461a      	mov	r2, r3
 800653a:	e00c      	b.n	8006556 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	699b      	ldr	r3, [r3, #24]
 8006542:	43da      	mvns	r2, r3
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	4013      	ands	r3, r2
 8006548:	b29b      	uxth	r3, r3
 800654a:	2b00      	cmp	r3, #0
 800654c:	bf0c      	ite	eq
 800654e:	2301      	moveq	r3, #1
 8006550:	2300      	movne	r3, #0
 8006552:	b2db      	uxtb	r3, r3
 8006554:	461a      	mov	r2, r3
 8006556:	79fb      	ldrb	r3, [r7, #7]
 8006558:	429a      	cmp	r2, r3
 800655a:	d0b6      	beq.n	80064ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3710      	adds	r7, #16
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}

08006566 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006566:	b580      	push	{r7, lr}
 8006568:	b084      	sub	sp, #16
 800656a:	af00      	add	r7, sp, #0
 800656c:	60f8      	str	r0, [r7, #12]
 800656e:	60b9      	str	r1, [r7, #8]
 8006570:	607a      	str	r2, [r7, #4]
 8006572:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006574:	e051      	b.n	800661a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	695b      	ldr	r3, [r3, #20]
 800657c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006580:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006584:	d123      	bne.n	80065ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006594:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800659e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2200      	movs	r2, #0
 80065a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2220      	movs	r2, #32
 80065aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ba:	f043 0204 	orr.w	r2, r3, #4
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2200      	movs	r2, #0
 80065c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	e046      	b.n	800665c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065d4:	d021      	beq.n	800661a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065d6:	f7fe f8c9 	bl	800476c <HAL_GetTick>
 80065da:	4602      	mov	r2, r0
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	1ad3      	subs	r3, r2, r3
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d302      	bcc.n	80065ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d116      	bne.n	800661a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2200      	movs	r2, #0
 80065f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2220      	movs	r2, #32
 80065f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2200      	movs	r2, #0
 80065fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006606:	f043 0220 	orr.w	r2, r3, #32
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2200      	movs	r2, #0
 8006612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e020      	b.n	800665c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	0c1b      	lsrs	r3, r3, #16
 800661e:	b2db      	uxtb	r3, r3
 8006620:	2b01      	cmp	r3, #1
 8006622:	d10c      	bne.n	800663e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	695b      	ldr	r3, [r3, #20]
 800662a:	43da      	mvns	r2, r3
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	4013      	ands	r3, r2
 8006630:	b29b      	uxth	r3, r3
 8006632:	2b00      	cmp	r3, #0
 8006634:	bf14      	ite	ne
 8006636:	2301      	movne	r3, #1
 8006638:	2300      	moveq	r3, #0
 800663a:	b2db      	uxtb	r3, r3
 800663c:	e00b      	b.n	8006656 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	699b      	ldr	r3, [r3, #24]
 8006644:	43da      	mvns	r2, r3
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	4013      	ands	r3, r2
 800664a:	b29b      	uxth	r3, r3
 800664c:	2b00      	cmp	r3, #0
 800664e:	bf14      	ite	ne
 8006650:	2301      	movne	r3, #1
 8006652:	2300      	moveq	r3, #0
 8006654:	b2db      	uxtb	r3, r3
 8006656:	2b00      	cmp	r3, #0
 8006658:	d18d      	bne.n	8006576 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800665a:	2300      	movs	r3, #0
}
 800665c:	4618      	mov	r0, r3
 800665e:	3710      	adds	r7, #16
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	60b9      	str	r1, [r7, #8]
 800666e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006670:	e02d      	b.n	80066ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006672:	68f8      	ldr	r0, [r7, #12]
 8006674:	f000 f8ce 	bl	8006814 <I2C_IsAcknowledgeFailed>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d001      	beq.n	8006682 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	e02d      	b.n	80066de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006688:	d021      	beq.n	80066ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800668a:	f7fe f86f 	bl	800476c <HAL_GetTick>
 800668e:	4602      	mov	r2, r0
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	1ad3      	subs	r3, r2, r3
 8006694:	68ba      	ldr	r2, [r7, #8]
 8006696:	429a      	cmp	r2, r3
 8006698:	d302      	bcc.n	80066a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d116      	bne.n	80066ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2200      	movs	r2, #0
 80066a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2220      	movs	r2, #32
 80066aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2200      	movs	r2, #0
 80066b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ba:	f043 0220 	orr.w	r2, r3, #32
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2200      	movs	r2, #0
 80066c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	e007      	b.n	80066de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	695b      	ldr	r3, [r3, #20]
 80066d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066d8:	2b80      	cmp	r3, #128	; 0x80
 80066da:	d1ca      	bne.n	8006672 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80066dc:	2300      	movs	r3, #0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3710      	adds	r7, #16
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}

080066e6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80066e6:	b580      	push	{r7, lr}
 80066e8:	b084      	sub	sp, #16
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	60f8      	str	r0, [r7, #12]
 80066ee:	60b9      	str	r1, [r7, #8]
 80066f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80066f2:	e02d      	b.n	8006750 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80066f4:	68f8      	ldr	r0, [r7, #12]
 80066f6:	f000 f88d 	bl	8006814 <I2C_IsAcknowledgeFailed>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d001      	beq.n	8006704 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	e02d      	b.n	8006760 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800670a:	d021      	beq.n	8006750 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800670c:	f7fe f82e 	bl	800476c <HAL_GetTick>
 8006710:	4602      	mov	r2, r0
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	1ad3      	subs	r3, r2, r3
 8006716:	68ba      	ldr	r2, [r7, #8]
 8006718:	429a      	cmp	r2, r3
 800671a:	d302      	bcc.n	8006722 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d116      	bne.n	8006750 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2200      	movs	r2, #0
 8006726:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2220      	movs	r2, #32
 800672c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2200      	movs	r2, #0
 8006734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800673c:	f043 0220 	orr.w	r2, r3, #32
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2200      	movs	r2, #0
 8006748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800674c:	2301      	movs	r3, #1
 800674e:	e007      	b.n	8006760 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	695b      	ldr	r3, [r3, #20]
 8006756:	f003 0304 	and.w	r3, r3, #4
 800675a:	2b04      	cmp	r3, #4
 800675c:	d1ca      	bne.n	80066f4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800675e:	2300      	movs	r3, #0
}
 8006760:	4618      	mov	r0, r3
 8006762:	3710      	adds	r7, #16
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006774:	e042      	b.n	80067fc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	695b      	ldr	r3, [r3, #20]
 800677c:	f003 0310 	and.w	r3, r3, #16
 8006780:	2b10      	cmp	r3, #16
 8006782:	d119      	bne.n	80067b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f06f 0210 	mvn.w	r2, #16
 800678c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2200      	movs	r2, #0
 8006792:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2220      	movs	r2, #32
 8006798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2200      	movs	r2, #0
 80067a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	e029      	b.n	800680c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067b8:	f7fd ffd8 	bl	800476c <HAL_GetTick>
 80067bc:	4602      	mov	r2, r0
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	1ad3      	subs	r3, r2, r3
 80067c2:	68ba      	ldr	r2, [r7, #8]
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d302      	bcc.n	80067ce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d116      	bne.n	80067fc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2200      	movs	r2, #0
 80067d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2220      	movs	r2, #32
 80067d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2200      	movs	r2, #0
 80067e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e8:	f043 0220 	orr.w	r2, r3, #32
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	e007      	b.n	800680c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	695b      	ldr	r3, [r3, #20]
 8006802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006806:	2b40      	cmp	r3, #64	; 0x40
 8006808:	d1b5      	bne.n	8006776 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800680a:	2300      	movs	r3, #0
}
 800680c:	4618      	mov	r0, r3
 800680e:	3710      	adds	r7, #16
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}

08006814 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006814:	b480      	push	{r7}
 8006816:	b083      	sub	sp, #12
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	695b      	ldr	r3, [r3, #20]
 8006822:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006826:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800682a:	d11b      	bne.n	8006864 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006834:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2220      	movs	r2, #32
 8006840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006850:	f043 0204 	orr.w	r2, r3, #4
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	e000      	b.n	8006866 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006864:	2300      	movs	r3, #0
}
 8006866:	4618      	mov	r0, r3
 8006868:	370c      	adds	r7, #12
 800686a:	46bd      	mov	sp, r7
 800686c:	bc80      	pop	{r7}
 800686e:	4770      	bx	lr

08006870 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006872:	b08b      	sub	sp, #44	; 0x2c
 8006874:	af06      	add	r7, sp, #24
 8006876:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d101      	bne.n	8006882 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	e0d3      	b.n	8006a2a <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8006888:	b2db      	uxtb	r3, r3
 800688a:	2b00      	cmp	r3, #0
 800688c:	d106      	bne.n	800689c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f005 fa4a 	bl	800bd30 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2203      	movs	r2, #3
 80068a0:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4618      	mov	r0, r3
 80068aa:	f002 fea8 	bl	80095fe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	603b      	str	r3, [r7, #0]
 80068b4:	687e      	ldr	r6, [r7, #4]
 80068b6:	466d      	mov	r5, sp
 80068b8:	f106 0410 	add.w	r4, r6, #16
 80068bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80068be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80068c0:	6823      	ldr	r3, [r4, #0]
 80068c2:	602b      	str	r3, [r5, #0]
 80068c4:	1d33      	adds	r3, r6, #4
 80068c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80068c8:	6838      	ldr	r0, [r7, #0]
 80068ca:	f002 fe71 	bl	80095b0 <USB_CoreInit>
 80068ce:	4603      	mov	r3, r0
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d005      	beq.n	80068e0 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2202      	movs	r2, #2
 80068d8:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	e0a4      	b.n	8006a2a <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2100      	movs	r1, #0
 80068e6:	4618      	mov	r0, r3
 80068e8:	f002 fea5 	bl	8009636 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80068ec:	2300      	movs	r3, #0
 80068ee:	73fb      	strb	r3, [r7, #15]
 80068f0:	e035      	b.n	800695e <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80068f2:	7bfb      	ldrb	r3, [r7, #15]
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	015b      	lsls	r3, r3, #5
 80068f8:	4413      	add	r3, r2
 80068fa:	3329      	adds	r3, #41	; 0x29
 80068fc:	2201      	movs	r2, #1
 80068fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006900:	7bfb      	ldrb	r3, [r7, #15]
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	015b      	lsls	r3, r3, #5
 8006906:	4413      	add	r3, r2
 8006908:	3328      	adds	r3, #40	; 0x28
 800690a:	7bfa      	ldrb	r2, [r7, #15]
 800690c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800690e:	7bfb      	ldrb	r3, [r7, #15]
 8006910:	7bfa      	ldrb	r2, [r7, #15]
 8006912:	b291      	uxth	r1, r2
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	015b      	lsls	r3, r3, #5
 8006918:	4413      	add	r3, r2
 800691a:	3336      	adds	r3, #54	; 0x36
 800691c:	460a      	mov	r2, r1
 800691e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006920:	7bfb      	ldrb	r3, [r7, #15]
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	015b      	lsls	r3, r3, #5
 8006926:	4413      	add	r3, r2
 8006928:	332b      	adds	r3, #43	; 0x2b
 800692a:	2200      	movs	r2, #0
 800692c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800692e:	7bfb      	ldrb	r3, [r7, #15]
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	015b      	lsls	r3, r3, #5
 8006934:	4413      	add	r3, r2
 8006936:	3338      	adds	r3, #56	; 0x38
 8006938:	2200      	movs	r2, #0
 800693a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800693c:	7bfb      	ldrb	r3, [r7, #15]
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	015b      	lsls	r3, r3, #5
 8006942:	4413      	add	r3, r2
 8006944:	333c      	adds	r3, #60	; 0x3c
 8006946:	2200      	movs	r2, #0
 8006948:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800694a:	7bfb      	ldrb	r3, [r7, #15]
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	3302      	adds	r3, #2
 8006950:	015b      	lsls	r3, r3, #5
 8006952:	4413      	add	r3, r2
 8006954:	2200      	movs	r2, #0
 8006956:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006958:	7bfb      	ldrb	r3, [r7, #15]
 800695a:	3301      	adds	r3, #1
 800695c:	73fb      	strb	r3, [r7, #15]
 800695e:	7bfa      	ldrb	r2, [r7, #15]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	429a      	cmp	r2, r3
 8006966:	d3c4      	bcc.n	80068f2 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006968:	2300      	movs	r3, #0
 800696a:	73fb      	strb	r3, [r7, #15]
 800696c:	e031      	b.n	80069d2 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800696e:	7bfb      	ldrb	r3, [r7, #15]
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	015b      	lsls	r3, r3, #5
 8006974:	4413      	add	r3, r2
 8006976:	f203 1329 	addw	r3, r3, #297	; 0x129
 800697a:	2200      	movs	r2, #0
 800697c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800697e:	7bfb      	ldrb	r3, [r7, #15]
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	015b      	lsls	r3, r3, #5
 8006984:	4413      	add	r3, r2
 8006986:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800698a:	7bfa      	ldrb	r2, [r7, #15]
 800698c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800698e:	7bfb      	ldrb	r3, [r7, #15]
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	015b      	lsls	r3, r3, #5
 8006994:	4413      	add	r3, r2
 8006996:	f203 132b 	addw	r3, r3, #299	; 0x12b
 800699a:	2200      	movs	r2, #0
 800699c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800699e:	7bfb      	ldrb	r3, [r7, #15]
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	015b      	lsls	r3, r3, #5
 80069a4:	4413      	add	r3, r2
 80069a6:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80069aa:	2200      	movs	r2, #0
 80069ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80069ae:	7bfb      	ldrb	r3, [r7, #15]
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	015b      	lsls	r3, r3, #5
 80069b4:	4413      	add	r3, r2
 80069b6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80069ba:	2200      	movs	r2, #0
 80069bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80069be:	7bfb      	ldrb	r3, [r7, #15]
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	330a      	adds	r3, #10
 80069c4:	015b      	lsls	r3, r3, #5
 80069c6:	4413      	add	r3, r2
 80069c8:	2200      	movs	r2, #0
 80069ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80069cc:	7bfb      	ldrb	r3, [r7, #15]
 80069ce:	3301      	adds	r3, #1
 80069d0:	73fb      	strb	r3, [r7, #15]
 80069d2:	7bfa      	ldrb	r2, [r7, #15]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d3c8      	bcc.n	800696e <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	603b      	str	r3, [r7, #0]
 80069e2:	687e      	ldr	r6, [r7, #4]
 80069e4:	466d      	mov	r5, sp
 80069e6:	f106 0410 	add.w	r4, r6, #16
 80069ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80069ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80069ee:	6823      	ldr	r3, [r4, #0]
 80069f0:	602b      	str	r3, [r5, #0]
 80069f2:	1d33      	adds	r3, r6, #4
 80069f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80069f6:	6838      	ldr	r0, [r7, #0]
 80069f8:	f002 fe29 	bl	800964e <USB_DevInit>
 80069fc:	4603      	mov	r3, r0
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d005      	beq.n	8006a0e <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2202      	movs	r2, #2
 8006a06:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e00d      	b.n	8006a2a <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2201      	movs	r2, #1
 8006a1a:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4618      	mov	r0, r3
 8006a24:	f003 fe67 	bl	800a6f6 <USB_DevDisconnect>

  return HAL_OK;
 8006a28:	2300      	movs	r3, #0
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3714      	adds	r7, #20
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006a32 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006a32:	b580      	push	{r7, lr}
 8006a34:	b082      	sub	sp, #8
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d101      	bne.n	8006a48 <HAL_PCD_Start+0x16>
 8006a44:	2302      	movs	r3, #2
 8006a46:	e016      	b.n	8006a76 <HAL_PCD_Start+0x44>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8006a50:	2101      	movs	r1, #1
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f005 fbbf 	bl	800c1d6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f003 fe40 	bl	800a6e2 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4618      	mov	r0, r3
 8006a68:	f002 fdb2 	bl	80095d0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8006a74:	2300      	movs	r3, #0
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3708      	adds	r7, #8
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}

08006a7e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006a7e:	b580      	push	{r7, lr}
 8006a80:	b082      	sub	sp, #8
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f003 fe3d 	bl	800a70a <USB_ReadInterrupts>
 8006a90:	4603      	mov	r3, r0
 8006a92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a9a:	d102      	bne.n	8006aa2 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f000 fadf 	bl	8007060 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f003 fe2f 	bl	800a70a <USB_ReadInterrupts>
 8006aac:	4603      	mov	r3, r0
 8006aae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ab6:	d112      	bne.n	8006ade <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006ac0:	b29a      	uxth	r2, r3
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006aca:	b292      	uxth	r2, r2
 8006acc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f005 f9a2 	bl	800be1a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8006ad6:	2100      	movs	r1, #0
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f000 f8de 	bl	8006c9a <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f003 fe11 	bl	800a70a <USB_ReadInterrupts>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006aee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006af2:	d10b      	bne.n	8006b0c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006afc:	b29a      	uxth	r2, r3
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006b06:	b292      	uxth	r2, r2
 8006b08:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4618      	mov	r0, r3
 8006b12:	f003 fdfa 	bl	800a70a <USB_ReadInterrupts>
 8006b16:	4603      	mov	r3, r0
 8006b18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b20:	d10b      	bne.n	8006b3a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006b2a:	b29a      	uxth	r2, r3
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b34:	b292      	uxth	r2, r2
 8006b36:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f003 fde3 	bl	800a70a <USB_ReadInterrupts>
 8006b44:	4603      	mov	r3, r0
 8006b46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b4e:	d126      	bne.n	8006b9e <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006b58:	b29a      	uxth	r2, r3
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f022 0204 	bic.w	r2, r2, #4
 8006b62:	b292      	uxth	r2, r2
 8006b64:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006b70:	b29a      	uxth	r2, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f022 0208 	bic.w	r2, r2, #8
 8006b7a:	b292      	uxth	r2, r2
 8006b7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f005 f983 	bl	800be8c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006b8e:	b29a      	uxth	r2, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006b98:	b292      	uxth	r2, r2
 8006b9a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f003 fdb1 	bl	800a70a <USB_ReadInterrupts>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bb2:	d13d      	bne.n	8006c30 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006bbc:	b29a      	uxth	r2, r3
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f042 0208 	orr.w	r2, r2, #8
 8006bc6:	b292      	uxth	r2, r2
 8006bc8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006bd4:	b29a      	uxth	r2, r3
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006bde:	b292      	uxth	r2, r2
 8006be0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006bec:	b29a      	uxth	r2, r3
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f042 0204 	orr.w	r2, r2, #4
 8006bf6:	b292      	uxth	r2, r2
 8006bf8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4618      	mov	r0, r3
 8006c02:	f003 fd82 	bl	800a70a <USB_ReadInterrupts>
 8006c06:	4603      	mov	r3, r0
 8006c08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c10:	d10b      	bne.n	8006c2a <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006c1a:	b29a      	uxth	r2, r3
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006c24:	b292      	uxth	r2, r2
 8006c26:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f005 f914 	bl	800be58 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4618      	mov	r0, r3
 8006c36:	f003 fd68 	bl	800a70a <USB_ReadInterrupts>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c44:	d10e      	bne.n	8006c64 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006c4e:	b29a      	uxth	r2, r3
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006c58:	b292      	uxth	r2, r2
 8006c5a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f005 f8cd 	bl	800bdfe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f003 fd4e 	bl	800a70a <USB_ReadInterrupts>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c78:	d10b      	bne.n	8006c92 <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006c82:	b29a      	uxth	r2, r3
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c8c:	b292      	uxth	r2, r2
 8006c8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8006c92:	bf00      	nop
 8006c94:	3708      	adds	r7, #8
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}

08006c9a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006c9a:	b580      	push	{r7, lr}
 8006c9c:	b082      	sub	sp, #8
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d101      	bne.n	8006cb4 <HAL_PCD_SetAddress+0x1a>
 8006cb0:	2302      	movs	r3, #2
 8006cb2:	e013      	b.n	8006cdc <HAL_PCD_SetAddress+0x42>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	78fa      	ldrb	r2, [r7, #3]
 8006cc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	78fa      	ldrb	r2, [r7, #3]
 8006cca:	4611      	mov	r1, r2
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f003 fcf5 	bl	800a6bc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8006cda:	2300      	movs	r3, #0
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3708      	adds	r7, #8
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	4608      	mov	r0, r1
 8006cee:	4611      	mov	r1, r2
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	70fb      	strb	r3, [r7, #3]
 8006cf6:	460b      	mov	r3, r1
 8006cf8:	803b      	strh	r3, [r7, #0]
 8006cfa:	4613      	mov	r3, r2
 8006cfc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006d02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	da0b      	bge.n	8006d22 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006d0a:	78fb      	ldrb	r3, [r7, #3]
 8006d0c:	f003 0307 	and.w	r3, r3, #7
 8006d10:	015b      	lsls	r3, r3, #5
 8006d12:	3328      	adds	r3, #40	; 0x28
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	4413      	add	r3, r2
 8006d18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	705a      	strb	r2, [r3, #1]
 8006d20:	e00b      	b.n	8006d3a <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006d22:	78fb      	ldrb	r3, [r7, #3]
 8006d24:	f003 0307 	and.w	r3, r3, #7
 8006d28:	015b      	lsls	r3, r3, #5
 8006d2a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	4413      	add	r3, r2
 8006d32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2200      	movs	r2, #0
 8006d38:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006d3a:	78fb      	ldrb	r3, [r7, #3]
 8006d3c:	f003 0307 	and.w	r3, r3, #7
 8006d40:	b2da      	uxtb	r2, r3
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006d46:	883a      	ldrh	r2, [r7, #0]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	78ba      	ldrb	r2, [r7, #2]
 8006d50:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	785b      	ldrb	r3, [r3, #1]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d004      	beq.n	8006d64 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	b29a      	uxth	r2, r3
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006d64:	78bb      	ldrb	r3, [r7, #2]
 8006d66:	2b02      	cmp	r3, #2
 8006d68:	d102      	bne.n	8006d70 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d101      	bne.n	8006d7e <HAL_PCD_EP_Open+0x9a>
 8006d7a:	2302      	movs	r3, #2
 8006d7c:	e00e      	b.n	8006d9c <HAL_PCD_EP_Open+0xb8>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2201      	movs	r2, #1
 8006d82:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68f9      	ldr	r1, [r7, #12]
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f002 fc83 	bl	8009698 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8006d9a:	7afb      	ldrb	r3, [r7, #11]
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3710      	adds	r7, #16
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b084      	sub	sp, #16
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	460b      	mov	r3, r1
 8006dae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006db0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	da0b      	bge.n	8006dd0 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006db8:	78fb      	ldrb	r3, [r7, #3]
 8006dba:	f003 0307 	and.w	r3, r3, #7
 8006dbe:	015b      	lsls	r3, r3, #5
 8006dc0:	3328      	adds	r3, #40	; 0x28
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	4413      	add	r3, r2
 8006dc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	705a      	strb	r2, [r3, #1]
 8006dce:	e00b      	b.n	8006de8 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006dd0:	78fb      	ldrb	r3, [r7, #3]
 8006dd2:	f003 0307 	and.w	r3, r3, #7
 8006dd6:	015b      	lsls	r3, r3, #5
 8006dd8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	4413      	add	r3, r2
 8006de0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2200      	movs	r2, #0
 8006de6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006de8:	78fb      	ldrb	r3, [r7, #3]
 8006dea:	f003 0307 	and.w	r3, r3, #7
 8006dee:	b2da      	uxtb	r2, r3
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d101      	bne.n	8006e02 <HAL_PCD_EP_Close+0x5e>
 8006dfe:	2302      	movs	r3, #2
 8006e00:	e00e      	b.n	8006e20 <HAL_PCD_EP_Close+0x7c>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2201      	movs	r2, #1
 8006e06:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	68f9      	ldr	r1, [r7, #12]
 8006e10:	4618      	mov	r0, r3
 8006e12:	f002 ff2f 	bl	8009c74 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8006e1e:	2300      	movs	r3, #0
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3710      	adds	r7, #16
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b086      	sub	sp, #24
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	60f8      	str	r0, [r7, #12]
 8006e30:	607a      	str	r2, [r7, #4]
 8006e32:	603b      	str	r3, [r7, #0]
 8006e34:	460b      	mov	r3, r1
 8006e36:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006e38:	7afb      	ldrb	r3, [r7, #11]
 8006e3a:	f003 0307 	and.w	r3, r3, #7
 8006e3e:	015b      	lsls	r3, r3, #5
 8006e40:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8006e44:	68fa      	ldr	r2, [r7, #12]
 8006e46:	4413      	add	r3, r2
 8006e48:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	683a      	ldr	r2, [r7, #0]
 8006e54:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006e62:	7afb      	ldrb	r3, [r7, #11]
 8006e64:	f003 0307 	and.w	r3, r3, #7
 8006e68:	b2da      	uxtb	r2, r3
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006e6e:	7afb      	ldrb	r3, [r7, #11]
 8006e70:	f003 0307 	and.w	r3, r3, #7
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d106      	bne.n	8006e86 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	6979      	ldr	r1, [r7, #20]
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f003 f88e 	bl	8009fa0 <USB_EPStartXfer>
 8006e84:	e005      	b.n	8006e92 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	6979      	ldr	r1, [r7, #20]
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f003 f887 	bl	8009fa0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006e92:	2300      	movs	r3, #0
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3718      	adds	r7, #24
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b086      	sub	sp, #24
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	60f8      	str	r0, [r7, #12]
 8006ea4:	607a      	str	r2, [r7, #4]
 8006ea6:	603b      	str	r3, [r7, #0]
 8006ea8:	460b      	mov	r3, r1
 8006eaa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006eac:	7afb      	ldrb	r3, [r7, #11]
 8006eae:	f003 0307 	and.w	r3, r3, #7
 8006eb2:	015b      	lsls	r3, r3, #5
 8006eb4:	3328      	adds	r3, #40	; 0x28
 8006eb6:	68fa      	ldr	r2, [r7, #12]
 8006eb8:	4413      	add	r3, r2
 8006eba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	683a      	ldr	r2, [r7, #0]
 8006ec6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006ed4:	7afb      	ldrb	r3, [r7, #11]
 8006ed6:	f003 0307 	and.w	r3, r3, #7
 8006eda:	b2da      	uxtb	r2, r3
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006ee0:	7afb      	ldrb	r3, [r7, #11]
 8006ee2:	f003 0307 	and.w	r3, r3, #7
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d106      	bne.n	8006ef8 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	6979      	ldr	r1, [r7, #20]
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f003 f855 	bl	8009fa0 <USB_EPStartXfer>
 8006ef6:	e005      	b.n	8006f04 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	6979      	ldr	r1, [r7, #20]
 8006efe:	4618      	mov	r0, r3
 8006f00:	f003 f84e 	bl	8009fa0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3718      	adds	r7, #24
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}

08006f0e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006f0e:	b580      	push	{r7, lr}
 8006f10:	b084      	sub	sp, #16
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
 8006f16:	460b      	mov	r3, r1
 8006f18:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006f1a:	78fb      	ldrb	r3, [r7, #3]
 8006f1c:	f003 0207 	and.w	r2, r3, #7
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d901      	bls.n	8006f2c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e046      	b.n	8006fba <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006f2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	da0b      	bge.n	8006f4c <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006f34:	78fb      	ldrb	r3, [r7, #3]
 8006f36:	f003 0307 	and.w	r3, r3, #7
 8006f3a:	015b      	lsls	r3, r3, #5
 8006f3c:	3328      	adds	r3, #40	; 0x28
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	4413      	add	r3, r2
 8006f42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2201      	movs	r2, #1
 8006f48:	705a      	strb	r2, [r3, #1]
 8006f4a:	e009      	b.n	8006f60 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006f4c:	78fb      	ldrb	r3, [r7, #3]
 8006f4e:	015b      	lsls	r3, r3, #5
 8006f50:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	4413      	add	r3, r2
 8006f58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2201      	movs	r2, #1
 8006f64:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006f66:	78fb      	ldrb	r3, [r7, #3]
 8006f68:	f003 0307 	and.w	r3, r3, #7
 8006f6c:	b2da      	uxtb	r2, r3
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d101      	bne.n	8006f80 <HAL_PCD_EP_SetStall+0x72>
 8006f7c:	2302      	movs	r3, #2
 8006f7e:	e01c      	b.n	8006fba <HAL_PCD_EP_SetStall+0xac>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2201      	movs	r2, #1
 8006f84:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	68f9      	ldr	r1, [r7, #12]
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f003 fabe 	bl	800a510 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006f94:	78fb      	ldrb	r3, [r7, #3]
 8006f96:	f003 0307 	and.w	r3, r3, #7
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d108      	bne.n	8006fb0 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8006fa8:	4619      	mov	r1, r3
 8006faa:	4610      	mov	r0, r2
 8006fac:	f003 fbbc 	bl	800a728 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8006fb8:	2300      	movs	r3, #0
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3710      	adds	r7, #16
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}

08006fc2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006fc2:	b580      	push	{r7, lr}
 8006fc4:	b084      	sub	sp, #16
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]
 8006fca:	460b      	mov	r3, r1
 8006fcc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006fce:	78fb      	ldrb	r3, [r7, #3]
 8006fd0:	f003 020f 	and.w	r2, r3, #15
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d901      	bls.n	8006fe0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	e03a      	b.n	8007056 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006fe0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	da0b      	bge.n	8007000 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006fe8:	78fb      	ldrb	r3, [r7, #3]
 8006fea:	f003 0307 	and.w	r3, r3, #7
 8006fee:	015b      	lsls	r3, r3, #5
 8006ff0:	3328      	adds	r3, #40	; 0x28
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	4413      	add	r3, r2
 8006ff6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	705a      	strb	r2, [r3, #1]
 8006ffe:	e00b      	b.n	8007018 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007000:	78fb      	ldrb	r3, [r7, #3]
 8007002:	f003 0307 	and.w	r3, r3, #7
 8007006:	015b      	lsls	r3, r3, #5
 8007008:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	4413      	add	r3, r2
 8007010:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2200      	movs	r2, #0
 8007016:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2200      	movs	r2, #0
 800701c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800701e:	78fb      	ldrb	r3, [r7, #3]
 8007020:	f003 0307 	and.w	r3, r3, #7
 8007024:	b2da      	uxtb	r2, r3
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8007030:	2b01      	cmp	r3, #1
 8007032:	d101      	bne.n	8007038 <HAL_PCD_EP_ClrStall+0x76>
 8007034:	2302      	movs	r3, #2
 8007036:	e00e      	b.n	8007056 <HAL_PCD_EP_ClrStall+0x94>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	68f9      	ldr	r1, [r7, #12]
 8007046:	4618      	mov	r0, r3
 8007048:	f003 faa4 	bl	800a594 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8007054:	2300      	movs	r3, #0
}
 8007056:	4618      	mov	r0, r3
 8007058:	3710      	adds	r7, #16
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
	...

08007060 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8007060:	b590      	push	{r4, r7, lr}
 8007062:	b089      	sub	sp, #36	; 0x24
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007068:	e282      	b.n	8007570 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007072:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8007074:	8afb      	ldrh	r3, [r7, #22]
 8007076:	b2db      	uxtb	r3, r3
 8007078:	f003 030f 	and.w	r3, r3, #15
 800707c:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 800707e:	7d7b      	ldrb	r3, [r7, #21]
 8007080:	2b00      	cmp	r3, #0
 8007082:	f040 8142 	bne.w	800730a <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8007086:	8afb      	ldrh	r3, [r7, #22]
 8007088:	f003 0310 	and.w	r3, r3, #16
 800708c:	2b00      	cmp	r3, #0
 800708e:	d151      	bne.n	8007134 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	881b      	ldrh	r3, [r3, #0]
 8007096:	b29b      	uxth	r3, r3
 8007098:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800709c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070a0:	b29c      	uxth	r4, r3
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80070aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	3328      	adds	r3, #40	; 0x28
 80070b6:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	461a      	mov	r2, r3
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	00db      	lsls	r3, r3, #3
 80070ca:	4413      	add	r3, r2
 80070cc:	3302      	adds	r3, #2
 80070ce:	005b      	lsls	r3, r3, #1
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	6812      	ldr	r2, [r2, #0]
 80070d4:	4413      	add	r3, r2
 80070d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070da:	881b      	ldrh	r3, [r3, #0]
 80070dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	695a      	ldr	r2, [r3, #20]
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	69db      	ldr	r3, [r3, #28]
 80070ec:	441a      	add	r2, r3
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80070f2:	2100      	movs	r1, #0
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f004 fe6b 	bl	800bdd0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007100:	b2db      	uxtb	r3, r3
 8007102:	2b00      	cmp	r3, #0
 8007104:	f000 8234 	beq.w	8007570 <PCD_EP_ISR_Handler+0x510>
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	699b      	ldr	r3, [r3, #24]
 800710c:	2b00      	cmp	r3, #0
 800710e:	f040 822f 	bne.w	8007570 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007118:	b2db      	uxtb	r3, r3
 800711a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800711e:	b2da      	uxtb	r2, r3
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	b292      	uxth	r2, r2
 8007126:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007132:	e21d      	b.n	8007570 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800713a:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	881b      	ldrh	r3, [r3, #0]
 8007142:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8007144:	8a7b      	ldrh	r3, [r7, #18]
 8007146:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800714a:	2b00      	cmp	r3, #0
 800714c:	d033      	beq.n	80071b6 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007156:	b29b      	uxth	r3, r3
 8007158:	461a      	mov	r2, r3
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	00db      	lsls	r3, r3, #3
 8007160:	4413      	add	r3, r2
 8007162:	3306      	adds	r3, #6
 8007164:	005b      	lsls	r3, r3, #1
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	6812      	ldr	r2, [r2, #0]
 800716a:	4413      	add	r3, r2
 800716c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007170:	881b      	ldrh	r3, [r3, #0]
 8007172:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6818      	ldr	r0, [r3, #0]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800718c:	b29b      	uxth	r3, r3
 800718e:	f003 fb1a 	bl	800a7c6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	881b      	ldrh	r3, [r3, #0]
 8007198:	b29a      	uxth	r2, r3
 800719a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800719e:	4013      	ands	r3, r2
 80071a0:	b29c      	uxth	r4, r3
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80071aa:	b292      	uxth	r2, r2
 80071ac:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f004 fde4 	bl	800bd7c <HAL_PCD_SetupStageCallback>
 80071b4:	e1dc      	b.n	8007570 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80071b6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	f280 81d8 	bge.w	8007570 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	881b      	ldrh	r3, [r3, #0]
 80071c6:	b29a      	uxth	r2, r3
 80071c8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80071cc:	4013      	ands	r3, r2
 80071ce:	b29c      	uxth	r4, r3
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80071d8:	b292      	uxth	r2, r2
 80071da:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	461a      	mov	r2, r3
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	00db      	lsls	r3, r3, #3
 80071ee:	4413      	add	r3, r2
 80071f0:	3306      	adds	r3, #6
 80071f2:	005b      	lsls	r3, r3, #1
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	6812      	ldr	r2, [r2, #0]
 80071f8:	4413      	add	r3, r2
 80071fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071fe:	881b      	ldrh	r3, [r3, #0]
 8007200:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	69db      	ldr	r3, [r3, #28]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d019      	beq.n	8007244 <PCD_EP_ISR_Handler+0x1e4>
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	695b      	ldr	r3, [r3, #20]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d015      	beq.n	8007244 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6818      	ldr	r0, [r3, #0]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6959      	ldr	r1, [r3, #20]
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007228:	b29b      	uxth	r3, r3
 800722a:	f003 facc 	bl	800a7c6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	695a      	ldr	r2, [r3, #20]
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	69db      	ldr	r3, [r3, #28]
 8007236:	441a      	add	r2, r3
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800723c:	2100      	movs	r1, #0
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f004 fdae 	bl	800bda0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	461c      	mov	r4, r3
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007252:	b29b      	uxth	r3, r3
 8007254:	441c      	add	r4, r3
 8007256:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 800725a:	461c      	mov	r4, r3
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	691b      	ldr	r3, [r3, #16]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d10e      	bne.n	8007282 <PCD_EP_ISR_Handler+0x222>
 8007264:	8823      	ldrh	r3, [r4, #0]
 8007266:	b29b      	uxth	r3, r3
 8007268:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800726c:	b29b      	uxth	r3, r3
 800726e:	8023      	strh	r3, [r4, #0]
 8007270:	8823      	ldrh	r3, [r4, #0]
 8007272:	b29b      	uxth	r3, r3
 8007274:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007278:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800727c:	b29b      	uxth	r3, r3
 800727e:	8023      	strh	r3, [r4, #0]
 8007280:	e02d      	b.n	80072de <PCD_EP_ISR_Handler+0x27e>
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	691b      	ldr	r3, [r3, #16]
 8007286:	2b3e      	cmp	r3, #62	; 0x3e
 8007288:	d812      	bhi.n	80072b0 <PCD_EP_ISR_Handler+0x250>
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	691b      	ldr	r3, [r3, #16]
 800728e:	085b      	lsrs	r3, r3, #1
 8007290:	61bb      	str	r3, [r7, #24]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	691b      	ldr	r3, [r3, #16]
 8007296:	f003 0301 	and.w	r3, r3, #1
 800729a:	2b00      	cmp	r3, #0
 800729c:	d002      	beq.n	80072a4 <PCD_EP_ISR_Handler+0x244>
 800729e:	69bb      	ldr	r3, [r7, #24]
 80072a0:	3301      	adds	r3, #1
 80072a2:	61bb      	str	r3, [r7, #24]
 80072a4:	69bb      	ldr	r3, [r7, #24]
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	029b      	lsls	r3, r3, #10
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	8023      	strh	r3, [r4, #0]
 80072ae:	e016      	b.n	80072de <PCD_EP_ISR_Handler+0x27e>
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	691b      	ldr	r3, [r3, #16]
 80072b4:	095b      	lsrs	r3, r3, #5
 80072b6:	61bb      	str	r3, [r7, #24]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	691b      	ldr	r3, [r3, #16]
 80072bc:	f003 031f 	and.w	r3, r3, #31
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d102      	bne.n	80072ca <PCD_EP_ISR_Handler+0x26a>
 80072c4:	69bb      	ldr	r3, [r7, #24]
 80072c6:	3b01      	subs	r3, #1
 80072c8:	61bb      	str	r3, [r7, #24]
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	029b      	lsls	r3, r3, #10
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072da:	b29b      	uxth	r3, r3
 80072dc:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	881b      	ldrh	r3, [r3, #0]
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072ee:	b29c      	uxth	r4, r3
 80072f0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80072f4:	b29c      	uxth	r4, r3
 80072f6:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80072fa:	b29c      	uxth	r4, r3
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	4ba2      	ldr	r3, [pc, #648]	; (800758c <PCD_EP_ISR_Handler+0x52c>)
 8007302:	4323      	orrs	r3, r4
 8007304:	b29b      	uxth	r3, r3
 8007306:	8013      	strh	r3, [r2, #0]
 8007308:	e132      	b.n	8007570 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	461a      	mov	r2, r3
 8007310:	7d7b      	ldrb	r3, [r7, #21]
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	4413      	add	r3, r2
 8007316:	881b      	ldrh	r3, [r3, #0]
 8007318:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800731a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800731e:	2b00      	cmp	r3, #0
 8007320:	f280 80d1 	bge.w	80074c6 <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	461a      	mov	r2, r3
 800732a:	7d7b      	ldrb	r3, [r7, #21]
 800732c:	009b      	lsls	r3, r3, #2
 800732e:	4413      	add	r3, r2
 8007330:	881b      	ldrh	r3, [r3, #0]
 8007332:	b29a      	uxth	r2, r3
 8007334:	f640 738f 	movw	r3, #3983	; 0xf8f
 8007338:	4013      	ands	r3, r2
 800733a:	b29c      	uxth	r4, r3
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	461a      	mov	r2, r3
 8007342:	7d7b      	ldrb	r3, [r7, #21]
 8007344:	009b      	lsls	r3, r3, #2
 8007346:	4413      	add	r3, r2
 8007348:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800734c:	b292      	uxth	r2, r2
 800734e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8007350:	7d7b      	ldrb	r3, [r7, #21]
 8007352:	015b      	lsls	r3, r3, #5
 8007354:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	4413      	add	r3, r2
 800735c:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	7b1b      	ldrb	r3, [r3, #12]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d121      	bne.n	80073aa <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800736e:	b29b      	uxth	r3, r3
 8007370:	461a      	mov	r2, r3
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	00db      	lsls	r3, r3, #3
 8007378:	4413      	add	r3, r2
 800737a:	3306      	adds	r3, #6
 800737c:	005b      	lsls	r3, r3, #1
 800737e:	687a      	ldr	r2, [r7, #4]
 8007380:	6812      	ldr	r2, [r2, #0]
 8007382:	4413      	add	r3, r2
 8007384:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007388:	881b      	ldrh	r3, [r3, #0]
 800738a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800738e:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8007390:	8bfb      	ldrh	r3, [r7, #30]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d072      	beq.n	800747c <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6818      	ldr	r0, [r3, #0]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	6959      	ldr	r1, [r3, #20]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	88da      	ldrh	r2, [r3, #6]
 80073a2:	8bfb      	ldrh	r3, [r7, #30]
 80073a4:	f003 fa0f 	bl	800a7c6 <USB_ReadPMA>
 80073a8:	e068      	b.n	800747c <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	461a      	mov	r2, r3
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	009b      	lsls	r3, r3, #2
 80073b6:	4413      	add	r3, r2
 80073b8:	881b      	ldrh	r3, [r3, #0]
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d021      	beq.n	8007408 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	461a      	mov	r2, r3
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	00db      	lsls	r3, r3, #3
 80073d6:	4413      	add	r3, r2
 80073d8:	3302      	adds	r3, #2
 80073da:	005b      	lsls	r3, r3, #1
 80073dc:	687a      	ldr	r2, [r7, #4]
 80073de:	6812      	ldr	r2, [r2, #0]
 80073e0:	4413      	add	r3, r2
 80073e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073e6:	881b      	ldrh	r3, [r3, #0]
 80073e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80073ec:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80073ee:	8bfb      	ldrh	r3, [r7, #30]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d02a      	beq.n	800744a <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6818      	ldr	r0, [r3, #0]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	6959      	ldr	r1, [r3, #20]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	891a      	ldrh	r2, [r3, #8]
 8007400:	8bfb      	ldrh	r3, [r7, #30]
 8007402:	f003 f9e0 	bl	800a7c6 <USB_ReadPMA>
 8007406:	e020      	b.n	800744a <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007410:	b29b      	uxth	r3, r3
 8007412:	461a      	mov	r2, r3
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	00db      	lsls	r3, r3, #3
 800741a:	4413      	add	r3, r2
 800741c:	3306      	adds	r3, #6
 800741e:	005b      	lsls	r3, r3, #1
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	6812      	ldr	r2, [r2, #0]
 8007424:	4413      	add	r3, r2
 8007426:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800742a:	881b      	ldrh	r3, [r3, #0]
 800742c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007430:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8007432:	8bfb      	ldrh	r3, [r7, #30]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d008      	beq.n	800744a <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6818      	ldr	r0, [r3, #0]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	6959      	ldr	r1, [r3, #20]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	895a      	ldrh	r2, [r3, #10]
 8007444:	8bfb      	ldrh	r3, [r7, #30]
 8007446:	f003 f9be 	bl	800a7c6 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	461a      	mov	r2, r3
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	4413      	add	r3, r2
 8007458:	881b      	ldrh	r3, [r3, #0]
 800745a:	b29b      	uxth	r3, r3
 800745c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007460:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007464:	b29c      	uxth	r4, r3
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	461a      	mov	r2, r3
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	441a      	add	r2, r3
 8007474:	4b46      	ldr	r3, [pc, #280]	; (8007590 <PCD_EP_ISR_Handler+0x530>)
 8007476:	4323      	orrs	r3, r4
 8007478:	b29b      	uxth	r3, r3
 800747a:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	69da      	ldr	r2, [r3, #28]
 8007480:	8bfb      	ldrh	r3, [r7, #30]
 8007482:	441a      	add	r2, r3
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	695a      	ldr	r2, [r3, #20]
 800748c:	8bfb      	ldrh	r3, [r7, #30]
 800748e:	441a      	add	r2, r3
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	699b      	ldr	r3, [r3, #24]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d004      	beq.n	80074a6 <PCD_EP_ISR_Handler+0x446>
 800749c:	8bfa      	ldrh	r2, [r7, #30]
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	691b      	ldr	r3, [r3, #16]
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d206      	bcs.n	80074b4 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	4619      	mov	r1, r3
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f004 fc77 	bl	800bda0 <HAL_PCD_DataOutStageCallback>
 80074b2:	e008      	b.n	80074c6 <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	7819      	ldrb	r1, [r3, #0]
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	695a      	ldr	r2, [r3, #20]
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	699b      	ldr	r3, [r3, #24]
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f7ff fcb1 	bl	8006e28 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80074c6:	8a7b      	ldrh	r3, [r7, #18]
 80074c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d04f      	beq.n	8007570 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 80074d0:	7d7b      	ldrb	r3, [r7, #21]
 80074d2:	015b      	lsls	r3, r3, #5
 80074d4:	3328      	adds	r3, #40	; 0x28
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	4413      	add	r3, r2
 80074da:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	461a      	mov	r2, r3
 80074e2:	7d7b      	ldrb	r3, [r7, #21]
 80074e4:	009b      	lsls	r3, r3, #2
 80074e6:	4413      	add	r3, r2
 80074e8:	881b      	ldrh	r3, [r3, #0]
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80074f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074f4:	b29c      	uxth	r4, r3
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	461a      	mov	r2, r3
 80074fc:	7d7b      	ldrb	r3, [r7, #21]
 80074fe:	009b      	lsls	r3, r3, #2
 8007500:	441a      	add	r2, r3
 8007502:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8007506:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800750a:	b29b      	uxth	r3, r3
 800750c:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007516:	b29b      	uxth	r3, r3
 8007518:	461a      	mov	r2, r3
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	00db      	lsls	r3, r3, #3
 8007520:	4413      	add	r3, r2
 8007522:	3302      	adds	r3, #2
 8007524:	005b      	lsls	r3, r3, #1
 8007526:	687a      	ldr	r2, [r7, #4]
 8007528:	6812      	ldr	r2, [r2, #0]
 800752a:	4413      	add	r3, r2
 800752c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007530:	881b      	ldrh	r3, [r3, #0]
 8007532:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	695a      	ldr	r2, [r3, #20]
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	69db      	ldr	r3, [r3, #28]
 8007542:	441a      	add	r2, r3
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	699b      	ldr	r3, [r3, #24]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d106      	bne.n	800755e <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	4619      	mov	r1, r3
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f004 fc3a 	bl	800bdd0 <HAL_PCD_DataInStageCallback>
 800755c:	e008      	b.n	8007570 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	7819      	ldrb	r1, [r3, #0]
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	695a      	ldr	r2, [r3, #20]
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	699b      	ldr	r3, [r3, #24]
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f7ff fc96 	bl	8006e9c <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007578:	b29b      	uxth	r3, r3
 800757a:	b21b      	sxth	r3, r3
 800757c:	2b00      	cmp	r3, #0
 800757e:	f6ff ad74 	blt.w	800706a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8007582:	2300      	movs	r3, #0
}
 8007584:	4618      	mov	r0, r3
 8007586:	3724      	adds	r7, #36	; 0x24
 8007588:	46bd      	mov	sp, r7
 800758a:	bd90      	pop	{r4, r7, pc}
 800758c:	ffff8080 	.word	0xffff8080
 8007590:	ffff80c0 	.word	0xffff80c0

08007594 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8007594:	b480      	push	{r7}
 8007596:	b087      	sub	sp, #28
 8007598:	af00      	add	r7, sp, #0
 800759a:	60f8      	str	r0, [r7, #12]
 800759c:	607b      	str	r3, [r7, #4]
 800759e:	460b      	mov	r3, r1
 80075a0:	817b      	strh	r3, [r7, #10]
 80075a2:	4613      	mov	r3, r2
 80075a4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80075a6:	897b      	ldrh	r3, [r7, #10]
 80075a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d008      	beq.n	80075c4 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80075b2:	897b      	ldrh	r3, [r7, #10]
 80075b4:	f003 0307 	and.w	r3, r3, #7
 80075b8:	015b      	lsls	r3, r3, #5
 80075ba:	3328      	adds	r3, #40	; 0x28
 80075bc:	68fa      	ldr	r2, [r7, #12]
 80075be:	4413      	add	r3, r2
 80075c0:	617b      	str	r3, [r7, #20]
 80075c2:	e006      	b.n	80075d2 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80075c4:	897b      	ldrh	r3, [r7, #10]
 80075c6:	015b      	lsls	r3, r3, #5
 80075c8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80075cc:	68fa      	ldr	r2, [r7, #12]
 80075ce:	4413      	add	r3, r2
 80075d0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80075d2:	893b      	ldrh	r3, [r7, #8]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d107      	bne.n	80075e8 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	2200      	movs	r2, #0
 80075dc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	b29a      	uxth	r2, r3
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	80da      	strh	r2, [r3, #6]
 80075e6:	e00b      	b.n	8007600 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	2201      	movs	r2, #1
 80075ec:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	b29a      	uxth	r2, r3
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	0c1b      	lsrs	r3, r3, #16
 80075fa:	b29a      	uxth	r2, r3
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8007600:	2300      	movs	r3, #0
}
 8007602:	4618      	mov	r0, r3
 8007604:	371c      	adds	r7, #28
 8007606:	46bd      	mov	sp, r7
 8007608:	bc80      	pop	{r7}
 800760a:	4770      	bx	lr

0800760c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b086      	sub	sp, #24
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d101      	bne.n	800761e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800761a:	2301      	movs	r3, #1
 800761c:	e26c      	b.n	8007af8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f003 0301 	and.w	r3, r3, #1
 8007626:	2b00      	cmp	r3, #0
 8007628:	f000 8087 	beq.w	800773a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800762c:	4b92      	ldr	r3, [pc, #584]	; (8007878 <HAL_RCC_OscConfig+0x26c>)
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	f003 030c 	and.w	r3, r3, #12
 8007634:	2b04      	cmp	r3, #4
 8007636:	d00c      	beq.n	8007652 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007638:	4b8f      	ldr	r3, [pc, #572]	; (8007878 <HAL_RCC_OscConfig+0x26c>)
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	f003 030c 	and.w	r3, r3, #12
 8007640:	2b08      	cmp	r3, #8
 8007642:	d112      	bne.n	800766a <HAL_RCC_OscConfig+0x5e>
 8007644:	4b8c      	ldr	r3, [pc, #560]	; (8007878 <HAL_RCC_OscConfig+0x26c>)
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800764c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007650:	d10b      	bne.n	800766a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007652:	4b89      	ldr	r3, [pc, #548]	; (8007878 <HAL_RCC_OscConfig+0x26c>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800765a:	2b00      	cmp	r3, #0
 800765c:	d06c      	beq.n	8007738 <HAL_RCC_OscConfig+0x12c>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d168      	bne.n	8007738 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	e246      	b.n	8007af8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007672:	d106      	bne.n	8007682 <HAL_RCC_OscConfig+0x76>
 8007674:	4b80      	ldr	r3, [pc, #512]	; (8007878 <HAL_RCC_OscConfig+0x26c>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a7f      	ldr	r2, [pc, #508]	; (8007878 <HAL_RCC_OscConfig+0x26c>)
 800767a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800767e:	6013      	str	r3, [r2, #0]
 8007680:	e02e      	b.n	80076e0 <HAL_RCC_OscConfig+0xd4>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d10c      	bne.n	80076a4 <HAL_RCC_OscConfig+0x98>
 800768a:	4b7b      	ldr	r3, [pc, #492]	; (8007878 <HAL_RCC_OscConfig+0x26c>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a7a      	ldr	r2, [pc, #488]	; (8007878 <HAL_RCC_OscConfig+0x26c>)
 8007690:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007694:	6013      	str	r3, [r2, #0]
 8007696:	4b78      	ldr	r3, [pc, #480]	; (8007878 <HAL_RCC_OscConfig+0x26c>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a77      	ldr	r2, [pc, #476]	; (8007878 <HAL_RCC_OscConfig+0x26c>)
 800769c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80076a0:	6013      	str	r3, [r2, #0]
 80076a2:	e01d      	b.n	80076e0 <HAL_RCC_OscConfig+0xd4>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80076ac:	d10c      	bne.n	80076c8 <HAL_RCC_OscConfig+0xbc>
 80076ae:	4b72      	ldr	r3, [pc, #456]	; (8007878 <HAL_RCC_OscConfig+0x26c>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a71      	ldr	r2, [pc, #452]	; (8007878 <HAL_RCC_OscConfig+0x26c>)
 80076b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80076b8:	6013      	str	r3, [r2, #0]
 80076ba:	4b6f      	ldr	r3, [pc, #444]	; (8007878 <HAL_RCC_OscConfig+0x26c>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a6e      	ldr	r2, [pc, #440]	; (8007878 <HAL_RCC_OscConfig+0x26c>)
 80076c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076c4:	6013      	str	r3, [r2, #0]
 80076c6:	e00b      	b.n	80076e0 <HAL_RCC_OscConfig+0xd4>
 80076c8:	4b6b      	ldr	r3, [pc, #428]	; (8007878 <HAL_RCC_OscConfig+0x26c>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a6a      	ldr	r2, [pc, #424]	; (8007878 <HAL_RCC_OscConfig+0x26c>)
 80076ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076d2:	6013      	str	r3, [r2, #0]
 80076d4:	4b68      	ldr	r3, [pc, #416]	; (8007878 <HAL_RCC_OscConfig+0x26c>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a67      	ldr	r2, [pc, #412]	; (8007878 <HAL_RCC_OscConfig+0x26c>)
 80076da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80076de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d013      	beq.n	8007710 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076e8:	f7fd f840 	bl	800476c <HAL_GetTick>
 80076ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076ee:	e008      	b.n	8007702 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80076f0:	f7fd f83c 	bl	800476c <HAL_GetTick>
 80076f4:	4602      	mov	r2, r0
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	1ad3      	subs	r3, r2, r3
 80076fa:	2b64      	cmp	r3, #100	; 0x64
 80076fc:	d901      	bls.n	8007702 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80076fe:	2303      	movs	r3, #3
 8007700:	e1fa      	b.n	8007af8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007702:	4b5d      	ldr	r3, [pc, #372]	; (8007878 <HAL_RCC_OscConfig+0x26c>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800770a:	2b00      	cmp	r3, #0
 800770c:	d0f0      	beq.n	80076f0 <HAL_RCC_OscConfig+0xe4>
 800770e:	e014      	b.n	800773a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007710:	f7fd f82c 	bl	800476c <HAL_GetTick>
 8007714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007716:	e008      	b.n	800772a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007718:	f7fd f828 	bl	800476c <HAL_GetTick>
 800771c:	4602      	mov	r2, r0
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	1ad3      	subs	r3, r2, r3
 8007722:	2b64      	cmp	r3, #100	; 0x64
 8007724:	d901      	bls.n	800772a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007726:	2303      	movs	r3, #3
 8007728:	e1e6      	b.n	8007af8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800772a:	4b53      	ldr	r3, [pc, #332]	; (8007878 <HAL_RCC_OscConfig+0x26c>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007732:	2b00      	cmp	r3, #0
 8007734:	d1f0      	bne.n	8007718 <HAL_RCC_OscConfig+0x10c>
 8007736:	e000      	b.n	800773a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007738:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f003 0302 	and.w	r3, r3, #2
 8007742:	2b00      	cmp	r3, #0
 8007744:	d063      	beq.n	800780e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007746:	4b4c      	ldr	r3, [pc, #304]	; (8007878 <HAL_RCC_OscConfig+0x26c>)
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	f003 030c 	and.w	r3, r3, #12
 800774e:	2b00      	cmp	r3, #0
 8007750:	d00b      	beq.n	800776a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007752:	4b49      	ldr	r3, [pc, #292]	; (8007878 <HAL_RCC_OscConfig+0x26c>)
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	f003 030c 	and.w	r3, r3, #12
 800775a:	2b08      	cmp	r3, #8
 800775c:	d11c      	bne.n	8007798 <HAL_RCC_OscConfig+0x18c>
 800775e:	4b46      	ldr	r3, [pc, #280]	; (8007878 <HAL_RCC_OscConfig+0x26c>)
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007766:	2b00      	cmp	r3, #0
 8007768:	d116      	bne.n	8007798 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800776a:	4b43      	ldr	r3, [pc, #268]	; (8007878 <HAL_RCC_OscConfig+0x26c>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f003 0302 	and.w	r3, r3, #2
 8007772:	2b00      	cmp	r3, #0
 8007774:	d005      	beq.n	8007782 <HAL_RCC_OscConfig+0x176>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	691b      	ldr	r3, [r3, #16]
 800777a:	2b01      	cmp	r3, #1
 800777c:	d001      	beq.n	8007782 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800777e:	2301      	movs	r3, #1
 8007780:	e1ba      	b.n	8007af8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007782:	4b3d      	ldr	r3, [pc, #244]	; (8007878 <HAL_RCC_OscConfig+0x26c>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	695b      	ldr	r3, [r3, #20]
 800778e:	00db      	lsls	r3, r3, #3
 8007790:	4939      	ldr	r1, [pc, #228]	; (8007878 <HAL_RCC_OscConfig+0x26c>)
 8007792:	4313      	orrs	r3, r2
 8007794:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007796:	e03a      	b.n	800780e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	691b      	ldr	r3, [r3, #16]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d020      	beq.n	80077e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80077a0:	4b36      	ldr	r3, [pc, #216]	; (800787c <HAL_RCC_OscConfig+0x270>)
 80077a2:	2201      	movs	r2, #1
 80077a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077a6:	f7fc ffe1 	bl	800476c <HAL_GetTick>
 80077aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077ac:	e008      	b.n	80077c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80077ae:	f7fc ffdd 	bl	800476c <HAL_GetTick>
 80077b2:	4602      	mov	r2, r0
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	1ad3      	subs	r3, r2, r3
 80077b8:	2b02      	cmp	r3, #2
 80077ba:	d901      	bls.n	80077c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80077bc:	2303      	movs	r3, #3
 80077be:	e19b      	b.n	8007af8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077c0:	4b2d      	ldr	r3, [pc, #180]	; (8007878 <HAL_RCC_OscConfig+0x26c>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f003 0302 	and.w	r3, r3, #2
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d0f0      	beq.n	80077ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077cc:	4b2a      	ldr	r3, [pc, #168]	; (8007878 <HAL_RCC_OscConfig+0x26c>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	695b      	ldr	r3, [r3, #20]
 80077d8:	00db      	lsls	r3, r3, #3
 80077da:	4927      	ldr	r1, [pc, #156]	; (8007878 <HAL_RCC_OscConfig+0x26c>)
 80077dc:	4313      	orrs	r3, r2
 80077de:	600b      	str	r3, [r1, #0]
 80077e0:	e015      	b.n	800780e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80077e2:	4b26      	ldr	r3, [pc, #152]	; (800787c <HAL_RCC_OscConfig+0x270>)
 80077e4:	2200      	movs	r2, #0
 80077e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077e8:	f7fc ffc0 	bl	800476c <HAL_GetTick>
 80077ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80077ee:	e008      	b.n	8007802 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80077f0:	f7fc ffbc 	bl	800476c <HAL_GetTick>
 80077f4:	4602      	mov	r2, r0
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	1ad3      	subs	r3, r2, r3
 80077fa:	2b02      	cmp	r3, #2
 80077fc:	d901      	bls.n	8007802 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80077fe:	2303      	movs	r3, #3
 8007800:	e17a      	b.n	8007af8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007802:	4b1d      	ldr	r3, [pc, #116]	; (8007878 <HAL_RCC_OscConfig+0x26c>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f003 0302 	and.w	r3, r3, #2
 800780a:	2b00      	cmp	r3, #0
 800780c:	d1f0      	bne.n	80077f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f003 0308 	and.w	r3, r3, #8
 8007816:	2b00      	cmp	r3, #0
 8007818:	d03a      	beq.n	8007890 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	699b      	ldr	r3, [r3, #24]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d019      	beq.n	8007856 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007822:	4b17      	ldr	r3, [pc, #92]	; (8007880 <HAL_RCC_OscConfig+0x274>)
 8007824:	2201      	movs	r2, #1
 8007826:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007828:	f7fc ffa0 	bl	800476c <HAL_GetTick>
 800782c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800782e:	e008      	b.n	8007842 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007830:	f7fc ff9c 	bl	800476c <HAL_GetTick>
 8007834:	4602      	mov	r2, r0
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	1ad3      	subs	r3, r2, r3
 800783a:	2b02      	cmp	r3, #2
 800783c:	d901      	bls.n	8007842 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800783e:	2303      	movs	r3, #3
 8007840:	e15a      	b.n	8007af8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007842:	4b0d      	ldr	r3, [pc, #52]	; (8007878 <HAL_RCC_OscConfig+0x26c>)
 8007844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007846:	f003 0302 	and.w	r3, r3, #2
 800784a:	2b00      	cmp	r3, #0
 800784c:	d0f0      	beq.n	8007830 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800784e:	2001      	movs	r0, #1
 8007850:	f000 fada 	bl	8007e08 <RCC_Delay>
 8007854:	e01c      	b.n	8007890 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007856:	4b0a      	ldr	r3, [pc, #40]	; (8007880 <HAL_RCC_OscConfig+0x274>)
 8007858:	2200      	movs	r2, #0
 800785a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800785c:	f7fc ff86 	bl	800476c <HAL_GetTick>
 8007860:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007862:	e00f      	b.n	8007884 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007864:	f7fc ff82 	bl	800476c <HAL_GetTick>
 8007868:	4602      	mov	r2, r0
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	1ad3      	subs	r3, r2, r3
 800786e:	2b02      	cmp	r3, #2
 8007870:	d908      	bls.n	8007884 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007872:	2303      	movs	r3, #3
 8007874:	e140      	b.n	8007af8 <HAL_RCC_OscConfig+0x4ec>
 8007876:	bf00      	nop
 8007878:	40021000 	.word	0x40021000
 800787c:	42420000 	.word	0x42420000
 8007880:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007884:	4b9e      	ldr	r3, [pc, #632]	; (8007b00 <HAL_RCC_OscConfig+0x4f4>)
 8007886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007888:	f003 0302 	and.w	r3, r3, #2
 800788c:	2b00      	cmp	r3, #0
 800788e:	d1e9      	bne.n	8007864 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f003 0304 	and.w	r3, r3, #4
 8007898:	2b00      	cmp	r3, #0
 800789a:	f000 80a6 	beq.w	80079ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800789e:	2300      	movs	r3, #0
 80078a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80078a2:	4b97      	ldr	r3, [pc, #604]	; (8007b00 <HAL_RCC_OscConfig+0x4f4>)
 80078a4:	69db      	ldr	r3, [r3, #28]
 80078a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d10d      	bne.n	80078ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80078ae:	4b94      	ldr	r3, [pc, #592]	; (8007b00 <HAL_RCC_OscConfig+0x4f4>)
 80078b0:	69db      	ldr	r3, [r3, #28]
 80078b2:	4a93      	ldr	r2, [pc, #588]	; (8007b00 <HAL_RCC_OscConfig+0x4f4>)
 80078b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078b8:	61d3      	str	r3, [r2, #28]
 80078ba:	4b91      	ldr	r3, [pc, #580]	; (8007b00 <HAL_RCC_OscConfig+0x4f4>)
 80078bc:	69db      	ldr	r3, [r3, #28]
 80078be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078c2:	60bb      	str	r3, [r7, #8]
 80078c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80078c6:	2301      	movs	r3, #1
 80078c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078ca:	4b8e      	ldr	r3, [pc, #568]	; (8007b04 <HAL_RCC_OscConfig+0x4f8>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d118      	bne.n	8007908 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80078d6:	4b8b      	ldr	r3, [pc, #556]	; (8007b04 <HAL_RCC_OscConfig+0x4f8>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a8a      	ldr	r2, [pc, #552]	; (8007b04 <HAL_RCC_OscConfig+0x4f8>)
 80078dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80078e2:	f7fc ff43 	bl	800476c <HAL_GetTick>
 80078e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078e8:	e008      	b.n	80078fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078ea:	f7fc ff3f 	bl	800476c <HAL_GetTick>
 80078ee:	4602      	mov	r2, r0
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	1ad3      	subs	r3, r2, r3
 80078f4:	2b64      	cmp	r3, #100	; 0x64
 80078f6:	d901      	bls.n	80078fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80078f8:	2303      	movs	r3, #3
 80078fa:	e0fd      	b.n	8007af8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078fc:	4b81      	ldr	r3, [pc, #516]	; (8007b04 <HAL_RCC_OscConfig+0x4f8>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007904:	2b00      	cmp	r3, #0
 8007906:	d0f0      	beq.n	80078ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	68db      	ldr	r3, [r3, #12]
 800790c:	2b01      	cmp	r3, #1
 800790e:	d106      	bne.n	800791e <HAL_RCC_OscConfig+0x312>
 8007910:	4b7b      	ldr	r3, [pc, #492]	; (8007b00 <HAL_RCC_OscConfig+0x4f4>)
 8007912:	6a1b      	ldr	r3, [r3, #32]
 8007914:	4a7a      	ldr	r2, [pc, #488]	; (8007b00 <HAL_RCC_OscConfig+0x4f4>)
 8007916:	f043 0301 	orr.w	r3, r3, #1
 800791a:	6213      	str	r3, [r2, #32]
 800791c:	e02d      	b.n	800797a <HAL_RCC_OscConfig+0x36e>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d10c      	bne.n	8007940 <HAL_RCC_OscConfig+0x334>
 8007926:	4b76      	ldr	r3, [pc, #472]	; (8007b00 <HAL_RCC_OscConfig+0x4f4>)
 8007928:	6a1b      	ldr	r3, [r3, #32]
 800792a:	4a75      	ldr	r2, [pc, #468]	; (8007b00 <HAL_RCC_OscConfig+0x4f4>)
 800792c:	f023 0301 	bic.w	r3, r3, #1
 8007930:	6213      	str	r3, [r2, #32]
 8007932:	4b73      	ldr	r3, [pc, #460]	; (8007b00 <HAL_RCC_OscConfig+0x4f4>)
 8007934:	6a1b      	ldr	r3, [r3, #32]
 8007936:	4a72      	ldr	r2, [pc, #456]	; (8007b00 <HAL_RCC_OscConfig+0x4f4>)
 8007938:	f023 0304 	bic.w	r3, r3, #4
 800793c:	6213      	str	r3, [r2, #32]
 800793e:	e01c      	b.n	800797a <HAL_RCC_OscConfig+0x36e>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	68db      	ldr	r3, [r3, #12]
 8007944:	2b05      	cmp	r3, #5
 8007946:	d10c      	bne.n	8007962 <HAL_RCC_OscConfig+0x356>
 8007948:	4b6d      	ldr	r3, [pc, #436]	; (8007b00 <HAL_RCC_OscConfig+0x4f4>)
 800794a:	6a1b      	ldr	r3, [r3, #32]
 800794c:	4a6c      	ldr	r2, [pc, #432]	; (8007b00 <HAL_RCC_OscConfig+0x4f4>)
 800794e:	f043 0304 	orr.w	r3, r3, #4
 8007952:	6213      	str	r3, [r2, #32]
 8007954:	4b6a      	ldr	r3, [pc, #424]	; (8007b00 <HAL_RCC_OscConfig+0x4f4>)
 8007956:	6a1b      	ldr	r3, [r3, #32]
 8007958:	4a69      	ldr	r2, [pc, #420]	; (8007b00 <HAL_RCC_OscConfig+0x4f4>)
 800795a:	f043 0301 	orr.w	r3, r3, #1
 800795e:	6213      	str	r3, [r2, #32]
 8007960:	e00b      	b.n	800797a <HAL_RCC_OscConfig+0x36e>
 8007962:	4b67      	ldr	r3, [pc, #412]	; (8007b00 <HAL_RCC_OscConfig+0x4f4>)
 8007964:	6a1b      	ldr	r3, [r3, #32]
 8007966:	4a66      	ldr	r2, [pc, #408]	; (8007b00 <HAL_RCC_OscConfig+0x4f4>)
 8007968:	f023 0301 	bic.w	r3, r3, #1
 800796c:	6213      	str	r3, [r2, #32]
 800796e:	4b64      	ldr	r3, [pc, #400]	; (8007b00 <HAL_RCC_OscConfig+0x4f4>)
 8007970:	6a1b      	ldr	r3, [r3, #32]
 8007972:	4a63      	ldr	r2, [pc, #396]	; (8007b00 <HAL_RCC_OscConfig+0x4f4>)
 8007974:	f023 0304 	bic.w	r3, r3, #4
 8007978:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	68db      	ldr	r3, [r3, #12]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d015      	beq.n	80079ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007982:	f7fc fef3 	bl	800476c <HAL_GetTick>
 8007986:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007988:	e00a      	b.n	80079a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800798a:	f7fc feef 	bl	800476c <HAL_GetTick>
 800798e:	4602      	mov	r2, r0
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	1ad3      	subs	r3, r2, r3
 8007994:	f241 3288 	movw	r2, #5000	; 0x1388
 8007998:	4293      	cmp	r3, r2
 800799a:	d901      	bls.n	80079a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800799c:	2303      	movs	r3, #3
 800799e:	e0ab      	b.n	8007af8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079a0:	4b57      	ldr	r3, [pc, #348]	; (8007b00 <HAL_RCC_OscConfig+0x4f4>)
 80079a2:	6a1b      	ldr	r3, [r3, #32]
 80079a4:	f003 0302 	and.w	r3, r3, #2
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d0ee      	beq.n	800798a <HAL_RCC_OscConfig+0x37e>
 80079ac:	e014      	b.n	80079d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80079ae:	f7fc fedd 	bl	800476c <HAL_GetTick>
 80079b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079b4:	e00a      	b.n	80079cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079b6:	f7fc fed9 	bl	800476c <HAL_GetTick>
 80079ba:	4602      	mov	r2, r0
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	1ad3      	subs	r3, r2, r3
 80079c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d901      	bls.n	80079cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80079c8:	2303      	movs	r3, #3
 80079ca:	e095      	b.n	8007af8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079cc:	4b4c      	ldr	r3, [pc, #304]	; (8007b00 <HAL_RCC_OscConfig+0x4f4>)
 80079ce:	6a1b      	ldr	r3, [r3, #32]
 80079d0:	f003 0302 	and.w	r3, r3, #2
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d1ee      	bne.n	80079b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80079d8:	7dfb      	ldrb	r3, [r7, #23]
 80079da:	2b01      	cmp	r3, #1
 80079dc:	d105      	bne.n	80079ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80079de:	4b48      	ldr	r3, [pc, #288]	; (8007b00 <HAL_RCC_OscConfig+0x4f4>)
 80079e0:	69db      	ldr	r3, [r3, #28]
 80079e2:	4a47      	ldr	r2, [pc, #284]	; (8007b00 <HAL_RCC_OscConfig+0x4f4>)
 80079e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	69db      	ldr	r3, [r3, #28]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	f000 8081 	beq.w	8007af6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80079f4:	4b42      	ldr	r3, [pc, #264]	; (8007b00 <HAL_RCC_OscConfig+0x4f4>)
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	f003 030c 	and.w	r3, r3, #12
 80079fc:	2b08      	cmp	r3, #8
 80079fe:	d061      	beq.n	8007ac4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	69db      	ldr	r3, [r3, #28]
 8007a04:	2b02      	cmp	r3, #2
 8007a06:	d146      	bne.n	8007a96 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a08:	4b3f      	ldr	r3, [pc, #252]	; (8007b08 <HAL_RCC_OscConfig+0x4fc>)
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a0e:	f7fc fead 	bl	800476c <HAL_GetTick>
 8007a12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007a14:	e008      	b.n	8007a28 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a16:	f7fc fea9 	bl	800476c <HAL_GetTick>
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	1ad3      	subs	r3, r2, r3
 8007a20:	2b02      	cmp	r3, #2
 8007a22:	d901      	bls.n	8007a28 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007a24:	2303      	movs	r3, #3
 8007a26:	e067      	b.n	8007af8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007a28:	4b35      	ldr	r3, [pc, #212]	; (8007b00 <HAL_RCC_OscConfig+0x4f4>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d1f0      	bne.n	8007a16 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6a1b      	ldr	r3, [r3, #32]
 8007a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a3c:	d108      	bne.n	8007a50 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007a3e:	4b30      	ldr	r3, [pc, #192]	; (8007b00 <HAL_RCC_OscConfig+0x4f4>)
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	689b      	ldr	r3, [r3, #8]
 8007a4a:	492d      	ldr	r1, [pc, #180]	; (8007b00 <HAL_RCC_OscConfig+0x4f4>)
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007a50:	4b2b      	ldr	r3, [pc, #172]	; (8007b00 <HAL_RCC_OscConfig+0x4f4>)
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6a19      	ldr	r1, [r3, #32]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a60:	430b      	orrs	r3, r1
 8007a62:	4927      	ldr	r1, [pc, #156]	; (8007b00 <HAL_RCC_OscConfig+0x4f4>)
 8007a64:	4313      	orrs	r3, r2
 8007a66:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007a68:	4b27      	ldr	r3, [pc, #156]	; (8007b08 <HAL_RCC_OscConfig+0x4fc>)
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a6e:	f7fc fe7d 	bl	800476c <HAL_GetTick>
 8007a72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007a74:	e008      	b.n	8007a88 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a76:	f7fc fe79 	bl	800476c <HAL_GetTick>
 8007a7a:	4602      	mov	r2, r0
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	1ad3      	subs	r3, r2, r3
 8007a80:	2b02      	cmp	r3, #2
 8007a82:	d901      	bls.n	8007a88 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007a84:	2303      	movs	r3, #3
 8007a86:	e037      	b.n	8007af8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007a88:	4b1d      	ldr	r3, [pc, #116]	; (8007b00 <HAL_RCC_OscConfig+0x4f4>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d0f0      	beq.n	8007a76 <HAL_RCC_OscConfig+0x46a>
 8007a94:	e02f      	b.n	8007af6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a96:	4b1c      	ldr	r3, [pc, #112]	; (8007b08 <HAL_RCC_OscConfig+0x4fc>)
 8007a98:	2200      	movs	r2, #0
 8007a9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a9c:	f7fc fe66 	bl	800476c <HAL_GetTick>
 8007aa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007aa2:	e008      	b.n	8007ab6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007aa4:	f7fc fe62 	bl	800476c <HAL_GetTick>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	1ad3      	subs	r3, r2, r3
 8007aae:	2b02      	cmp	r3, #2
 8007ab0:	d901      	bls.n	8007ab6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007ab2:	2303      	movs	r3, #3
 8007ab4:	e020      	b.n	8007af8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007ab6:	4b12      	ldr	r3, [pc, #72]	; (8007b00 <HAL_RCC_OscConfig+0x4f4>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d1f0      	bne.n	8007aa4 <HAL_RCC_OscConfig+0x498>
 8007ac2:	e018      	b.n	8007af6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	69db      	ldr	r3, [r3, #28]
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d101      	bne.n	8007ad0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8007acc:	2301      	movs	r3, #1
 8007ace:	e013      	b.n	8007af8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007ad0:	4b0b      	ldr	r3, [pc, #44]	; (8007b00 <HAL_RCC_OscConfig+0x4f4>)
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6a1b      	ldr	r3, [r3, #32]
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d106      	bne.n	8007af2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d001      	beq.n	8007af6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	e000      	b.n	8007af8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8007af6:	2300      	movs	r3, #0
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3718      	adds	r7, #24
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}
 8007b00:	40021000 	.word	0x40021000
 8007b04:	40007000 	.word	0x40007000
 8007b08:	42420060 	.word	0x42420060

08007b0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b084      	sub	sp, #16
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d101      	bne.n	8007b20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	e0d0      	b.n	8007cc2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007b20:	4b6a      	ldr	r3, [pc, #424]	; (8007ccc <HAL_RCC_ClockConfig+0x1c0>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f003 0307 	and.w	r3, r3, #7
 8007b28:	683a      	ldr	r2, [r7, #0]
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d910      	bls.n	8007b50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b2e:	4b67      	ldr	r3, [pc, #412]	; (8007ccc <HAL_RCC_ClockConfig+0x1c0>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f023 0207 	bic.w	r2, r3, #7
 8007b36:	4965      	ldr	r1, [pc, #404]	; (8007ccc <HAL_RCC_ClockConfig+0x1c0>)
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b3e:	4b63      	ldr	r3, [pc, #396]	; (8007ccc <HAL_RCC_ClockConfig+0x1c0>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f003 0307 	and.w	r3, r3, #7
 8007b46:	683a      	ldr	r2, [r7, #0]
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d001      	beq.n	8007b50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	e0b8      	b.n	8007cc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f003 0302 	and.w	r3, r3, #2
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d020      	beq.n	8007b9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f003 0304 	and.w	r3, r3, #4
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d005      	beq.n	8007b74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007b68:	4b59      	ldr	r3, [pc, #356]	; (8007cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	4a58      	ldr	r2, [pc, #352]	; (8007cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8007b6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007b72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f003 0308 	and.w	r3, r3, #8
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d005      	beq.n	8007b8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007b80:	4b53      	ldr	r3, [pc, #332]	; (8007cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	4a52      	ldr	r2, [pc, #328]	; (8007cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8007b86:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8007b8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b8c:	4b50      	ldr	r3, [pc, #320]	; (8007cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	494d      	ldr	r1, [pc, #308]	; (8007cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f003 0301 	and.w	r3, r3, #1
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d040      	beq.n	8007c2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d107      	bne.n	8007bc2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007bb2:	4b47      	ldr	r3, [pc, #284]	; (8007cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d115      	bne.n	8007bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	e07f      	b.n	8007cc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	2b02      	cmp	r3, #2
 8007bc8:	d107      	bne.n	8007bda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007bca:	4b41      	ldr	r3, [pc, #260]	; (8007cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d109      	bne.n	8007bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	e073      	b.n	8007cc2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007bda:	4b3d      	ldr	r3, [pc, #244]	; (8007cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f003 0302 	and.w	r3, r3, #2
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d101      	bne.n	8007bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007be6:	2301      	movs	r3, #1
 8007be8:	e06b      	b.n	8007cc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007bea:	4b39      	ldr	r3, [pc, #228]	; (8007cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	f023 0203 	bic.w	r2, r3, #3
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	4936      	ldr	r1, [pc, #216]	; (8007cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007bfc:	f7fc fdb6 	bl	800476c <HAL_GetTick>
 8007c00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c02:	e00a      	b.n	8007c1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c04:	f7fc fdb2 	bl	800476c <HAL_GetTick>
 8007c08:	4602      	mov	r2, r0
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	1ad3      	subs	r3, r2, r3
 8007c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d901      	bls.n	8007c1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007c16:	2303      	movs	r3, #3
 8007c18:	e053      	b.n	8007cc2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c1a:	4b2d      	ldr	r3, [pc, #180]	; (8007cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	f003 020c 	and.w	r2, r3, #12
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	d1eb      	bne.n	8007c04 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007c2c:	4b27      	ldr	r3, [pc, #156]	; (8007ccc <HAL_RCC_ClockConfig+0x1c0>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f003 0307 	and.w	r3, r3, #7
 8007c34:	683a      	ldr	r2, [r7, #0]
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d210      	bcs.n	8007c5c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c3a:	4b24      	ldr	r3, [pc, #144]	; (8007ccc <HAL_RCC_ClockConfig+0x1c0>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f023 0207 	bic.w	r2, r3, #7
 8007c42:	4922      	ldr	r1, [pc, #136]	; (8007ccc <HAL_RCC_ClockConfig+0x1c0>)
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	4313      	orrs	r3, r2
 8007c48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c4a:	4b20      	ldr	r3, [pc, #128]	; (8007ccc <HAL_RCC_ClockConfig+0x1c0>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f003 0307 	and.w	r3, r3, #7
 8007c52:	683a      	ldr	r2, [r7, #0]
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d001      	beq.n	8007c5c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	e032      	b.n	8007cc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f003 0304 	and.w	r3, r3, #4
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d008      	beq.n	8007c7a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007c68:	4b19      	ldr	r3, [pc, #100]	; (8007cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	68db      	ldr	r3, [r3, #12]
 8007c74:	4916      	ldr	r1, [pc, #88]	; (8007cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8007c76:	4313      	orrs	r3, r2
 8007c78:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f003 0308 	and.w	r3, r3, #8
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d009      	beq.n	8007c9a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007c86:	4b12      	ldr	r3, [pc, #72]	; (8007cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	691b      	ldr	r3, [r3, #16]
 8007c92:	00db      	lsls	r3, r3, #3
 8007c94:	490e      	ldr	r1, [pc, #56]	; (8007cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8007c96:	4313      	orrs	r3, r2
 8007c98:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007c9a:	f000 f821 	bl	8007ce0 <HAL_RCC_GetSysClockFreq>
 8007c9e:	4601      	mov	r1, r0
 8007ca0:	4b0b      	ldr	r3, [pc, #44]	; (8007cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	091b      	lsrs	r3, r3, #4
 8007ca6:	f003 030f 	and.w	r3, r3, #15
 8007caa:	4a0a      	ldr	r2, [pc, #40]	; (8007cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8007cac:	5cd3      	ldrb	r3, [r2, r3]
 8007cae:	fa21 f303 	lsr.w	r3, r1, r3
 8007cb2:	4a09      	ldr	r2, [pc, #36]	; (8007cd8 <HAL_RCC_ClockConfig+0x1cc>)
 8007cb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007cb6:	4b09      	ldr	r3, [pc, #36]	; (8007cdc <HAL_RCC_ClockConfig+0x1d0>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f7fc fd14 	bl	80046e8 <HAL_InitTick>

  return HAL_OK;
 8007cc0:	2300      	movs	r3, #0
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3710      	adds	r7, #16
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
 8007cca:	bf00      	nop
 8007ccc:	40022000 	.word	0x40022000
 8007cd0:	40021000 	.word	0x40021000
 8007cd4:	0800decc 	.word	0x0800decc
 8007cd8:	20000134 	.word	0x20000134
 8007cdc:	20000138 	.word	0x20000138

08007ce0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007ce0:	b490      	push	{r4, r7}
 8007ce2:	b08a      	sub	sp, #40	; 0x28
 8007ce4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8007ce6:	4b2a      	ldr	r3, [pc, #168]	; (8007d90 <HAL_RCC_GetSysClockFreq+0xb0>)
 8007ce8:	1d3c      	adds	r4, r7, #4
 8007cea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007cec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007cf0:	4b28      	ldr	r3, [pc, #160]	; (8007d94 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007cf2:	881b      	ldrh	r3, [r3, #0]
 8007cf4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	61fb      	str	r3, [r7, #28]
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	61bb      	str	r3, [r7, #24]
 8007cfe:	2300      	movs	r3, #0
 8007d00:	627b      	str	r3, [r7, #36]	; 0x24
 8007d02:	2300      	movs	r3, #0
 8007d04:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007d06:	2300      	movs	r3, #0
 8007d08:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007d0a:	4b23      	ldr	r3, [pc, #140]	; (8007d98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007d10:	69fb      	ldr	r3, [r7, #28]
 8007d12:	f003 030c 	and.w	r3, r3, #12
 8007d16:	2b04      	cmp	r3, #4
 8007d18:	d002      	beq.n	8007d20 <HAL_RCC_GetSysClockFreq+0x40>
 8007d1a:	2b08      	cmp	r3, #8
 8007d1c:	d003      	beq.n	8007d26 <HAL_RCC_GetSysClockFreq+0x46>
 8007d1e:	e02d      	b.n	8007d7c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007d20:	4b1e      	ldr	r3, [pc, #120]	; (8007d9c <HAL_RCC_GetSysClockFreq+0xbc>)
 8007d22:	623b      	str	r3, [r7, #32]
      break;
 8007d24:	e02d      	b.n	8007d82 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007d26:	69fb      	ldr	r3, [r7, #28]
 8007d28:	0c9b      	lsrs	r3, r3, #18
 8007d2a:	f003 030f 	and.w	r3, r3, #15
 8007d2e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007d32:	4413      	add	r3, r2
 8007d34:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8007d38:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007d3a:	69fb      	ldr	r3, [r7, #28]
 8007d3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d013      	beq.n	8007d6c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007d44:	4b14      	ldr	r3, [pc, #80]	; (8007d98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	0c5b      	lsrs	r3, r3, #17
 8007d4a:	f003 0301 	and.w	r3, r3, #1
 8007d4e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007d52:	4413      	add	r3, r2
 8007d54:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007d58:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	4a0f      	ldr	r2, [pc, #60]	; (8007d9c <HAL_RCC_GetSysClockFreq+0xbc>)
 8007d5e:	fb02 f203 	mul.w	r2, r2, r3
 8007d62:	69bb      	ldr	r3, [r7, #24]
 8007d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d68:	627b      	str	r3, [r7, #36]	; 0x24
 8007d6a:	e004      	b.n	8007d76 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	4a0c      	ldr	r2, [pc, #48]	; (8007da0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007d70:	fb02 f303 	mul.w	r3, r2, r3
 8007d74:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8007d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d78:	623b      	str	r3, [r7, #32]
      break;
 8007d7a:	e002      	b.n	8007d82 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007d7c:	4b07      	ldr	r3, [pc, #28]	; (8007d9c <HAL_RCC_GetSysClockFreq+0xbc>)
 8007d7e:	623b      	str	r3, [r7, #32]
      break;
 8007d80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007d82:	6a3b      	ldr	r3, [r7, #32]
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	3728      	adds	r7, #40	; 0x28
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bc90      	pop	{r4, r7}
 8007d8c:	4770      	bx	lr
 8007d8e:	bf00      	nop
 8007d90:	0800d040 	.word	0x0800d040
 8007d94:	0800d050 	.word	0x0800d050
 8007d98:	40021000 	.word	0x40021000
 8007d9c:	007a1200 	.word	0x007a1200
 8007da0:	003d0900 	.word	0x003d0900

08007da4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007da4:	b480      	push	{r7}
 8007da6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007da8:	4b02      	ldr	r3, [pc, #8]	; (8007db4 <HAL_RCC_GetHCLKFreq+0x10>)
 8007daa:	681b      	ldr	r3, [r3, #0]
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bc80      	pop	{r7}
 8007db2:	4770      	bx	lr
 8007db4:	20000134 	.word	0x20000134

08007db8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007dbc:	f7ff fff2 	bl	8007da4 <HAL_RCC_GetHCLKFreq>
 8007dc0:	4601      	mov	r1, r0
 8007dc2:	4b05      	ldr	r3, [pc, #20]	; (8007dd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	0a1b      	lsrs	r3, r3, #8
 8007dc8:	f003 0307 	and.w	r3, r3, #7
 8007dcc:	4a03      	ldr	r2, [pc, #12]	; (8007ddc <HAL_RCC_GetPCLK1Freq+0x24>)
 8007dce:	5cd3      	ldrb	r3, [r2, r3]
 8007dd0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	bd80      	pop	{r7, pc}
 8007dd8:	40021000 	.word	0x40021000
 8007ddc:	0800dedc 	.word	0x0800dedc

08007de0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007de4:	f7ff ffde 	bl	8007da4 <HAL_RCC_GetHCLKFreq>
 8007de8:	4601      	mov	r1, r0
 8007dea:	4b05      	ldr	r3, [pc, #20]	; (8007e00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	0adb      	lsrs	r3, r3, #11
 8007df0:	f003 0307 	and.w	r3, r3, #7
 8007df4:	4a03      	ldr	r2, [pc, #12]	; (8007e04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007df6:	5cd3      	ldrb	r3, [r2, r3]
 8007df8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	bd80      	pop	{r7, pc}
 8007e00:	40021000 	.word	0x40021000
 8007e04:	0800dedc 	.word	0x0800dedc

08007e08 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b085      	sub	sp, #20
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007e10:	4b0a      	ldr	r3, [pc, #40]	; (8007e3c <RCC_Delay+0x34>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a0a      	ldr	r2, [pc, #40]	; (8007e40 <RCC_Delay+0x38>)
 8007e16:	fba2 2303 	umull	r2, r3, r2, r3
 8007e1a:	0a5b      	lsrs	r3, r3, #9
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	fb02 f303 	mul.w	r3, r2, r3
 8007e22:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007e24:	bf00      	nop
  }
  while (Delay --);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	1e5a      	subs	r2, r3, #1
 8007e2a:	60fa      	str	r2, [r7, #12]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d1f9      	bne.n	8007e24 <RCC_Delay+0x1c>
}
 8007e30:	bf00      	nop
 8007e32:	3714      	adds	r7, #20
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bc80      	pop	{r7}
 8007e38:	4770      	bx	lr
 8007e3a:	bf00      	nop
 8007e3c:	20000134 	.word	0x20000134
 8007e40:	10624dd3 	.word	0x10624dd3

08007e44 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b086      	sub	sp, #24
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	613b      	str	r3, [r7, #16]
 8007e50:	2300      	movs	r3, #0
 8007e52:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f003 0301 	and.w	r3, r3, #1
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d07d      	beq.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8007e60:	2300      	movs	r3, #0
 8007e62:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007e64:	4b4f      	ldr	r3, [pc, #316]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e66:	69db      	ldr	r3, [r3, #28]
 8007e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d10d      	bne.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e70:	4b4c      	ldr	r3, [pc, #304]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e72:	69db      	ldr	r3, [r3, #28]
 8007e74:	4a4b      	ldr	r2, [pc, #300]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e7a:	61d3      	str	r3, [r2, #28]
 8007e7c:	4b49      	ldr	r3, [pc, #292]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e7e:	69db      	ldr	r3, [r3, #28]
 8007e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e84:	60bb      	str	r3, [r7, #8]
 8007e86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e8c:	4b46      	ldr	r3, [pc, #280]	; (8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d118      	bne.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007e98:	4b43      	ldr	r3, [pc, #268]	; (8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a42      	ldr	r2, [pc, #264]	; (8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007e9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ea2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007ea4:	f7fc fc62 	bl	800476c <HAL_GetTick>
 8007ea8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007eaa:	e008      	b.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007eac:	f7fc fc5e 	bl	800476c <HAL_GetTick>
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	1ad3      	subs	r3, r2, r3
 8007eb6:	2b64      	cmp	r3, #100	; 0x64
 8007eb8:	d901      	bls.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8007eba:	2303      	movs	r3, #3
 8007ebc:	e06d      	b.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ebe:	4b3a      	ldr	r3, [pc, #232]	; (8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d0f0      	beq.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007eca:	4b36      	ldr	r3, [pc, #216]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ecc:	6a1b      	ldr	r3, [r3, #32]
 8007ece:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ed2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d02e      	beq.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ee2:	68fa      	ldr	r2, [r7, #12]
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d027      	beq.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007ee8:	4b2e      	ldr	r3, [pc, #184]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007eea:	6a1b      	ldr	r3, [r3, #32]
 8007eec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ef0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007ef2:	4b2e      	ldr	r3, [pc, #184]	; (8007fac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007ef8:	4b2c      	ldr	r3, [pc, #176]	; (8007fac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007efa:	2200      	movs	r2, #0
 8007efc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007efe:	4a29      	ldr	r2, [pc, #164]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f003 0301 	and.w	r3, r3, #1
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d014      	beq.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f0e:	f7fc fc2d 	bl	800476c <HAL_GetTick>
 8007f12:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f14:	e00a      	b.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f16:	f7fc fc29 	bl	800476c <HAL_GetTick>
 8007f1a:	4602      	mov	r2, r0
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	1ad3      	subs	r3, r2, r3
 8007f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d901      	bls.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007f28:	2303      	movs	r3, #3
 8007f2a:	e036      	b.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f2c:	4b1d      	ldr	r3, [pc, #116]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f2e:	6a1b      	ldr	r3, [r3, #32]
 8007f30:	f003 0302 	and.w	r3, r3, #2
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d0ee      	beq.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007f38:	4b1a      	ldr	r3, [pc, #104]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f3a:	6a1b      	ldr	r3, [r3, #32]
 8007f3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	4917      	ldr	r1, [pc, #92]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f46:	4313      	orrs	r3, r2
 8007f48:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007f4a:	7dfb      	ldrb	r3, [r7, #23]
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d105      	bne.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f50:	4b14      	ldr	r3, [pc, #80]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f52:	69db      	ldr	r3, [r3, #28]
 8007f54:	4a13      	ldr	r2, [pc, #76]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f5a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f003 0302 	and.w	r3, r3, #2
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d008      	beq.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007f68:	4b0e      	ldr	r3, [pc, #56]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	689b      	ldr	r3, [r3, #8]
 8007f74:	490b      	ldr	r1, [pc, #44]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f76:	4313      	orrs	r3, r2
 8007f78:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f003 0310 	and.w	r3, r3, #16
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d008      	beq.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007f86:	4b07      	ldr	r3, [pc, #28]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	68db      	ldr	r3, [r3, #12]
 8007f92:	4904      	ldr	r1, [pc, #16]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f94:	4313      	orrs	r3, r2
 8007f96:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007f98:	2300      	movs	r3, #0
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3718      	adds	r7, #24
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	bf00      	nop
 8007fa4:	40021000 	.word	0x40021000
 8007fa8:	40007000 	.word	0x40007000
 8007fac:	42420440 	.word	0x42420440

08007fb0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007fb0:	b590      	push	{r4, r7, lr}
 8007fb2:	b08d      	sub	sp, #52	; 0x34
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8007fb8:	4b55      	ldr	r3, [pc, #340]	; (8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8007fba:	f107 040c 	add.w	r4, r7, #12
 8007fbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007fc0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007fc4:	4b53      	ldr	r3, [pc, #332]	; (8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8007fc6:	881b      	ldrh	r3, [r3, #0]
 8007fc8:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	627b      	str	r3, [r7, #36]	; 0x24
 8007fce:	2300      	movs	r3, #0
 8007fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	61fb      	str	r3, [r7, #28]
 8007fda:	2300      	movs	r3, #0
 8007fdc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2b02      	cmp	r3, #2
 8007fe2:	d07f      	beq.n	80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8007fe4:	2b10      	cmp	r3, #16
 8007fe6:	d002      	beq.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d048      	beq.n	800807e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8007fec:	e08b      	b.n	8008106 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8007fee:	4b4a      	ldr	r3, [pc, #296]	; (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8007ff4:	4b48      	ldr	r3, [pc, #288]	; (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d07f      	beq.n	8008100 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008000:	69fb      	ldr	r3, [r7, #28]
 8008002:	0c9b      	lsrs	r3, r3, #18
 8008004:	f003 030f 	and.w	r3, r3, #15
 8008008:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800800c:	4413      	add	r3, r2
 800800e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8008012:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008014:	69fb      	ldr	r3, [r7, #28]
 8008016:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800801a:	2b00      	cmp	r3, #0
 800801c:	d018      	beq.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800801e:	4b3e      	ldr	r3, [pc, #248]	; (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	0c5b      	lsrs	r3, r3, #17
 8008024:	f003 0301 	and.w	r3, r3, #1
 8008028:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800802c:	4413      	add	r3, r2
 800802e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008032:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008034:	69fb      	ldr	r3, [r7, #28]
 8008036:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800803a:	2b00      	cmp	r3, #0
 800803c:	d00d      	beq.n	800805a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800803e:	4a37      	ldr	r2, [pc, #220]	; (800811c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8008040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008042:	fbb2 f2f3 	udiv	r2, r2, r3
 8008046:	6a3b      	ldr	r3, [r7, #32]
 8008048:	fb02 f303 	mul.w	r3, r2, r3
 800804c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800804e:	e004      	b.n	800805a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008050:	6a3b      	ldr	r3, [r7, #32]
 8008052:	4a33      	ldr	r2, [pc, #204]	; (8008120 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8008054:	fb02 f303 	mul.w	r3, r2, r3
 8008058:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800805a:	4b2f      	ldr	r3, [pc, #188]	; (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008062:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008066:	d102      	bne.n	800806e <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8008068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800806a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800806c:	e048      	b.n	8008100 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 800806e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008070:	005b      	lsls	r3, r3, #1
 8008072:	4a2c      	ldr	r2, [pc, #176]	; (8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8008074:	fba2 2303 	umull	r2, r3, r2, r3
 8008078:	085b      	lsrs	r3, r3, #1
 800807a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800807c:	e040      	b.n	8008100 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 800807e:	4b26      	ldr	r3, [pc, #152]	; (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8008080:	6a1b      	ldr	r3, [r3, #32]
 8008082:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8008084:	69fb      	ldr	r3, [r7, #28]
 8008086:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800808a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800808e:	d108      	bne.n	80080a2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8008090:	69fb      	ldr	r3, [r7, #28]
 8008092:	f003 0302 	and.w	r3, r3, #2
 8008096:	2b00      	cmp	r3, #0
 8008098:	d003      	beq.n	80080a2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 800809a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800809e:	62bb      	str	r3, [r7, #40]	; 0x28
 80080a0:	e01f      	b.n	80080e2 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80080a2:	69fb      	ldr	r3, [r7, #28]
 80080a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080ac:	d109      	bne.n	80080c2 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 80080ae:	4b1a      	ldr	r3, [pc, #104]	; (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80080b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b2:	f003 0302 	and.w	r3, r3, #2
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d003      	beq.n	80080c2 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 80080ba:	f649 4340 	movw	r3, #40000	; 0x9c40
 80080be:	62bb      	str	r3, [r7, #40]	; 0x28
 80080c0:	e00f      	b.n	80080e2 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80080c2:	69fb      	ldr	r3, [r7, #28]
 80080c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080cc:	d11a      	bne.n	8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80080ce:	4b12      	ldr	r3, [pc, #72]	; (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d014      	beq.n	8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 80080da:	f24f 4324 	movw	r3, #62500	; 0xf424
 80080de:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80080e0:	e010      	b.n	8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80080e2:	e00f      	b.n	8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80080e4:	f7ff fe7c 	bl	8007de0 <HAL_RCC_GetPCLK2Freq>
 80080e8:	4602      	mov	r2, r0
 80080ea:	4b0b      	ldr	r3, [pc, #44]	; (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	0b9b      	lsrs	r3, r3, #14
 80080f0:	f003 0303 	and.w	r3, r3, #3
 80080f4:	3301      	adds	r3, #1
 80080f6:	005b      	lsls	r3, r3, #1
 80080f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80080fc:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80080fe:	e002      	b.n	8008106 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8008100:	bf00      	nop
 8008102:	e000      	b.n	8008106 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8008104:	bf00      	nop
    }
  }
  return (frequency);
 8008106:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8008108:	4618      	mov	r0, r3
 800810a:	3734      	adds	r7, #52	; 0x34
 800810c:	46bd      	mov	sp, r7
 800810e:	bd90      	pop	{r4, r7, pc}
 8008110:	0800d054 	.word	0x0800d054
 8008114:	0800d064 	.word	0x0800d064
 8008118:	40021000 	.word	0x40021000
 800811c:	007a1200 	.word	0x007a1200
 8008120:	003d0900 	.word	0x003d0900
 8008124:	aaaaaaab 	.word	0xaaaaaaab

08008128 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d101      	bne.n	800813a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008136:	2301      	movs	r3, #1
 8008138:	e053      	b.n	80081e2 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2200      	movs	r2, #0
 800813e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008146:	b2db      	uxtb	r3, r3
 8008148:	2b00      	cmp	r3, #0
 800814a:	d106      	bne.n	800815a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2200      	movs	r2, #0
 8008150:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f7fc f8d9 	bl	800430c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2202      	movs	r2, #2
 800815e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	681a      	ldr	r2, [r3, #0]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008170:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	685a      	ldr	r2, [r3, #4]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	689b      	ldr	r3, [r3, #8]
 800817a:	431a      	orrs	r2, r3
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	68db      	ldr	r3, [r3, #12]
 8008180:	431a      	orrs	r2, r3
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	691b      	ldr	r3, [r3, #16]
 8008186:	431a      	orrs	r2, r3
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	695b      	ldr	r3, [r3, #20]
 800818c:	431a      	orrs	r2, r3
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	699b      	ldr	r3, [r3, #24]
 8008192:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008196:	431a      	orrs	r2, r3
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	69db      	ldr	r3, [r3, #28]
 800819c:	431a      	orrs	r2, r3
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6a1b      	ldr	r3, [r3, #32]
 80081a2:	ea42 0103 	orr.w	r1, r2, r3
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	430a      	orrs	r2, r1
 80081b0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	699b      	ldr	r3, [r3, #24]
 80081b6:	0c1a      	lsrs	r2, r3, #16
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f002 0204 	and.w	r2, r2, #4
 80081c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	69da      	ldr	r2, [r3, #28]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80081d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2200      	movs	r2, #0
 80081d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2201      	movs	r2, #1
 80081dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3708      	adds	r7, #8
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}

080081ea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80081ea:	b580      	push	{r7, lr}
 80081ec:	b088      	sub	sp, #32
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	60f8      	str	r0, [r7, #12]
 80081f2:	60b9      	str	r1, [r7, #8]
 80081f4:	603b      	str	r3, [r7, #0]
 80081f6:	4613      	mov	r3, r2
 80081f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80081fa:	2300      	movs	r3, #0
 80081fc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008204:	2b01      	cmp	r3, #1
 8008206:	d101      	bne.n	800820c <HAL_SPI_Transmit+0x22>
 8008208:	2302      	movs	r3, #2
 800820a:	e11e      	b.n	800844a <HAL_SPI_Transmit+0x260>
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2201      	movs	r2, #1
 8008210:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008214:	f7fc faaa 	bl	800476c <HAL_GetTick>
 8008218:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800821a:	88fb      	ldrh	r3, [r7, #6]
 800821c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008224:	b2db      	uxtb	r3, r3
 8008226:	2b01      	cmp	r3, #1
 8008228:	d002      	beq.n	8008230 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800822a:	2302      	movs	r3, #2
 800822c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800822e:	e103      	b.n	8008438 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d002      	beq.n	800823c <HAL_SPI_Transmit+0x52>
 8008236:	88fb      	ldrh	r3, [r7, #6]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d102      	bne.n	8008242 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800823c:	2301      	movs	r3, #1
 800823e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008240:	e0fa      	b.n	8008438 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2203      	movs	r2, #3
 8008246:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2200      	movs	r2, #0
 800824e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	68ba      	ldr	r2, [r7, #8]
 8008254:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	88fa      	ldrh	r2, [r7, #6]
 800825a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	88fa      	ldrh	r2, [r7, #6]
 8008260:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2200      	movs	r2, #0
 8008266:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2200      	movs	r2, #0
 800826c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2200      	movs	r2, #0
 8008272:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2200      	movs	r2, #0
 8008278:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2200      	movs	r2, #0
 800827e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008288:	d107      	bne.n	800829a <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	681a      	ldr	r2, [r3, #0]
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008298:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082a4:	2b40      	cmp	r3, #64	; 0x40
 80082a6:	d007      	beq.n	80082b8 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	68db      	ldr	r3, [r3, #12]
 80082bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082c0:	d14b      	bne.n	800835a <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d002      	beq.n	80082d0 <HAL_SPI_Transmit+0xe6>
 80082ca:	8afb      	ldrh	r3, [r7, #22]
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	d13e      	bne.n	800834e <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082d4:	881a      	ldrh	r2, [r3, #0]
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082e0:	1c9a      	adds	r2, r3, #2
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	3b01      	subs	r3, #1
 80082ee:	b29a      	uxth	r2, r3
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80082f4:	e02b      	b.n	800834e <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	689b      	ldr	r3, [r3, #8]
 80082fc:	f003 0302 	and.w	r3, r3, #2
 8008300:	2b02      	cmp	r3, #2
 8008302:	d112      	bne.n	800832a <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008308:	881a      	ldrh	r2, [r3, #0]
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008314:	1c9a      	adds	r2, r3, #2
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800831e:	b29b      	uxth	r3, r3
 8008320:	3b01      	subs	r3, #1
 8008322:	b29a      	uxth	r2, r3
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	86da      	strh	r2, [r3, #54]	; 0x36
 8008328:	e011      	b.n	800834e <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800832a:	f7fc fa1f 	bl	800476c <HAL_GetTick>
 800832e:	4602      	mov	r2, r0
 8008330:	69bb      	ldr	r3, [r7, #24]
 8008332:	1ad3      	subs	r3, r2, r3
 8008334:	683a      	ldr	r2, [r7, #0]
 8008336:	429a      	cmp	r2, r3
 8008338:	d803      	bhi.n	8008342 <HAL_SPI_Transmit+0x158>
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008340:	d102      	bne.n	8008348 <HAL_SPI_Transmit+0x15e>
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d102      	bne.n	800834e <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8008348:	2303      	movs	r3, #3
 800834a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800834c:	e074      	b.n	8008438 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008352:	b29b      	uxth	r3, r3
 8008354:	2b00      	cmp	r3, #0
 8008356:	d1ce      	bne.n	80082f6 <HAL_SPI_Transmit+0x10c>
 8008358:	e04c      	b.n	80083f4 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d002      	beq.n	8008368 <HAL_SPI_Transmit+0x17e>
 8008362:	8afb      	ldrh	r3, [r7, #22]
 8008364:	2b01      	cmp	r3, #1
 8008366:	d140      	bne.n	80083ea <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	330c      	adds	r3, #12
 8008372:	7812      	ldrb	r2, [r2, #0]
 8008374:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800837a:	1c5a      	adds	r2, r3, #1
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008384:	b29b      	uxth	r3, r3
 8008386:	3b01      	subs	r3, #1
 8008388:	b29a      	uxth	r2, r3
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800838e:	e02c      	b.n	80083ea <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	689b      	ldr	r3, [r3, #8]
 8008396:	f003 0302 	and.w	r3, r3, #2
 800839a:	2b02      	cmp	r3, #2
 800839c:	d113      	bne.n	80083c6 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	330c      	adds	r3, #12
 80083a8:	7812      	ldrb	r2, [r2, #0]
 80083aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083b0:	1c5a      	adds	r2, r3, #1
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	3b01      	subs	r3, #1
 80083be:	b29a      	uxth	r2, r3
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	86da      	strh	r2, [r3, #54]	; 0x36
 80083c4:	e011      	b.n	80083ea <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80083c6:	f7fc f9d1 	bl	800476c <HAL_GetTick>
 80083ca:	4602      	mov	r2, r0
 80083cc:	69bb      	ldr	r3, [r7, #24]
 80083ce:	1ad3      	subs	r3, r2, r3
 80083d0:	683a      	ldr	r2, [r7, #0]
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d803      	bhi.n	80083de <HAL_SPI_Transmit+0x1f4>
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083dc:	d102      	bne.n	80083e4 <HAL_SPI_Transmit+0x1fa>
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d102      	bne.n	80083ea <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80083e4:	2303      	movs	r3, #3
 80083e6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80083e8:	e026      	b.n	8008438 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d1cd      	bne.n	8008390 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80083f4:	69ba      	ldr	r2, [r7, #24]
 80083f6:	6839      	ldr	r1, [r7, #0]
 80083f8:	68f8      	ldr	r0, [r7, #12]
 80083fa:	f000 fb91 	bl	8008b20 <SPI_EndRxTxTransaction>
 80083fe:	4603      	mov	r3, r0
 8008400:	2b00      	cmp	r3, #0
 8008402:	d002      	beq.n	800840a <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2220      	movs	r2, #32
 8008408:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	689b      	ldr	r3, [r3, #8]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d10a      	bne.n	8008428 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008412:	2300      	movs	r3, #0
 8008414:	613b      	str	r3, [r7, #16]
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	68db      	ldr	r3, [r3, #12]
 800841c:	613b      	str	r3, [r7, #16]
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	689b      	ldr	r3, [r3, #8]
 8008424:	613b      	str	r3, [r7, #16]
 8008426:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800842c:	2b00      	cmp	r3, #0
 800842e:	d002      	beq.n	8008436 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8008430:	2301      	movs	r3, #1
 8008432:	77fb      	strb	r3, [r7, #31]
 8008434:	e000      	b.n	8008438 <HAL_SPI_Transmit+0x24e>
  }

error:
 8008436:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2201      	movs	r2, #1
 800843c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2200      	movs	r2, #0
 8008444:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008448:	7ffb      	ldrb	r3, [r7, #31]
}
 800844a:	4618      	mov	r0, r3
 800844c:	3720      	adds	r7, #32
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}

08008452 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008452:	b580      	push	{r7, lr}
 8008454:	b088      	sub	sp, #32
 8008456:	af02      	add	r7, sp, #8
 8008458:	60f8      	str	r0, [r7, #12]
 800845a:	60b9      	str	r1, [r7, #8]
 800845c:	603b      	str	r3, [r7, #0]
 800845e:	4613      	mov	r3, r2
 8008460:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008462:	2300      	movs	r3, #0
 8008464:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800846e:	d112      	bne.n	8008496 <HAL_SPI_Receive+0x44>
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	689b      	ldr	r3, [r3, #8]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d10e      	bne.n	8008496 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2204      	movs	r2, #4
 800847c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008480:	88fa      	ldrh	r2, [r7, #6]
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	9300      	str	r3, [sp, #0]
 8008486:	4613      	mov	r3, r2
 8008488:	68ba      	ldr	r2, [r7, #8]
 800848a:	68b9      	ldr	r1, [r7, #8]
 800848c:	68f8      	ldr	r0, [r7, #12]
 800848e:	f000 f8e9 	bl	8008664 <HAL_SPI_TransmitReceive>
 8008492:	4603      	mov	r3, r0
 8008494:	e0e2      	b.n	800865c <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800849c:	2b01      	cmp	r3, #1
 800849e:	d101      	bne.n	80084a4 <HAL_SPI_Receive+0x52>
 80084a0:	2302      	movs	r3, #2
 80084a2:	e0db      	b.n	800865c <HAL_SPI_Receive+0x20a>
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2201      	movs	r2, #1
 80084a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80084ac:	f7fc f95e 	bl	800476c <HAL_GetTick>
 80084b0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80084b8:	b2db      	uxtb	r3, r3
 80084ba:	2b01      	cmp	r3, #1
 80084bc:	d002      	beq.n	80084c4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80084be:	2302      	movs	r3, #2
 80084c0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80084c2:	e0c2      	b.n	800864a <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d002      	beq.n	80084d0 <HAL_SPI_Receive+0x7e>
 80084ca:	88fb      	ldrh	r3, [r7, #6]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d102      	bne.n	80084d6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80084d0:	2301      	movs	r3, #1
 80084d2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80084d4:	e0b9      	b.n	800864a <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2204      	movs	r2, #4
 80084da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2200      	movs	r2, #0
 80084e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	68ba      	ldr	r2, [r7, #8]
 80084e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	88fa      	ldrh	r2, [r7, #6]
 80084ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	88fa      	ldrh	r2, [r7, #6]
 80084f4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2200      	movs	r2, #0
 80084fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	2200      	movs	r2, #0
 8008500:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	2200      	movs	r2, #0
 8008506:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2200      	movs	r2, #0
 800850c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2200      	movs	r2, #0
 8008512:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	689b      	ldr	r3, [r3, #8]
 8008518:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800851c:	d107      	bne.n	800852e <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	681a      	ldr	r2, [r3, #0]
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800852c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008538:	2b40      	cmp	r3, #64	; 0x40
 800853a:	d007      	beq.n	800854c <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	681a      	ldr	r2, [r3, #0]
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800854a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	68db      	ldr	r3, [r3, #12]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d162      	bne.n	800861a <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008554:	e02e      	b.n	80085b4 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	689b      	ldr	r3, [r3, #8]
 800855c:	f003 0301 	and.w	r3, r3, #1
 8008560:	2b01      	cmp	r3, #1
 8008562:	d115      	bne.n	8008590 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f103 020c 	add.w	r2, r3, #12
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008570:	7812      	ldrb	r2, [r2, #0]
 8008572:	b2d2      	uxtb	r2, r2
 8008574:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800857a:	1c5a      	adds	r2, r3, #1
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008584:	b29b      	uxth	r3, r3
 8008586:	3b01      	subs	r3, #1
 8008588:	b29a      	uxth	r2, r3
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800858e:	e011      	b.n	80085b4 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008590:	f7fc f8ec 	bl	800476c <HAL_GetTick>
 8008594:	4602      	mov	r2, r0
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	1ad3      	subs	r3, r2, r3
 800859a:	683a      	ldr	r2, [r7, #0]
 800859c:	429a      	cmp	r2, r3
 800859e:	d803      	bhi.n	80085a8 <HAL_SPI_Receive+0x156>
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085a6:	d102      	bne.n	80085ae <HAL_SPI_Receive+0x15c>
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d102      	bne.n	80085b4 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80085ae:	2303      	movs	r3, #3
 80085b0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80085b2:	e04a      	b.n	800864a <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085b8:	b29b      	uxth	r3, r3
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d1cb      	bne.n	8008556 <HAL_SPI_Receive+0x104>
 80085be:	e031      	b.n	8008624 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	689b      	ldr	r3, [r3, #8]
 80085c6:	f003 0301 	and.w	r3, r3, #1
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	d113      	bne.n	80085f6 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	68da      	ldr	r2, [r3, #12]
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085d8:	b292      	uxth	r2, r2
 80085da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085e0:	1c9a      	adds	r2, r3, #2
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085ea:	b29b      	uxth	r3, r3
 80085ec:	3b01      	subs	r3, #1
 80085ee:	b29a      	uxth	r2, r3
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80085f4:	e011      	b.n	800861a <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80085f6:	f7fc f8b9 	bl	800476c <HAL_GetTick>
 80085fa:	4602      	mov	r2, r0
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	1ad3      	subs	r3, r2, r3
 8008600:	683a      	ldr	r2, [r7, #0]
 8008602:	429a      	cmp	r2, r3
 8008604:	d803      	bhi.n	800860e <HAL_SPI_Receive+0x1bc>
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800860c:	d102      	bne.n	8008614 <HAL_SPI_Receive+0x1c2>
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d102      	bne.n	800861a <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8008614:	2303      	movs	r3, #3
 8008616:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008618:	e017      	b.n	800864a <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800861e:	b29b      	uxth	r3, r3
 8008620:	2b00      	cmp	r3, #0
 8008622:	d1cd      	bne.n	80085c0 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008624:	693a      	ldr	r2, [r7, #16]
 8008626:	6839      	ldr	r1, [r7, #0]
 8008628:	68f8      	ldr	r0, [r7, #12]
 800862a:	f000 fa27 	bl	8008a7c <SPI_EndRxTransaction>
 800862e:	4603      	mov	r3, r0
 8008630:	2b00      	cmp	r3, #0
 8008632:	d002      	beq.n	800863a <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2220      	movs	r2, #32
 8008638:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800863e:	2b00      	cmp	r3, #0
 8008640:	d002      	beq.n	8008648 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8008642:	2301      	movs	r3, #1
 8008644:	75fb      	strb	r3, [r7, #23]
 8008646:	e000      	b.n	800864a <HAL_SPI_Receive+0x1f8>
  }

error :
 8008648:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2201      	movs	r2, #1
 800864e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2200      	movs	r2, #0
 8008656:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800865a:	7dfb      	ldrb	r3, [r7, #23]
}
 800865c:	4618      	mov	r0, r3
 800865e:	3718      	adds	r7, #24
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}

08008664 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b08c      	sub	sp, #48	; 0x30
 8008668:	af00      	add	r7, sp, #0
 800866a:	60f8      	str	r0, [r7, #12]
 800866c:	60b9      	str	r1, [r7, #8]
 800866e:	607a      	str	r2, [r7, #4]
 8008670:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008672:	2301      	movs	r3, #1
 8008674:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008676:	2300      	movs	r3, #0
 8008678:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008682:	2b01      	cmp	r3, #1
 8008684:	d101      	bne.n	800868a <HAL_SPI_TransmitReceive+0x26>
 8008686:	2302      	movs	r3, #2
 8008688:	e18a      	b.n	80089a0 <HAL_SPI_TransmitReceive+0x33c>
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2201      	movs	r2, #1
 800868e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008692:	f7fc f86b 	bl	800476c <HAL_GetTick>
 8008696:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800869e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80086a8:	887b      	ldrh	r3, [r7, #2]
 80086aa:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80086ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	d00f      	beq.n	80086d4 <HAL_SPI_TransmitReceive+0x70>
 80086b4:	69fb      	ldr	r3, [r7, #28]
 80086b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80086ba:	d107      	bne.n	80086cc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	689b      	ldr	r3, [r3, #8]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d103      	bne.n	80086cc <HAL_SPI_TransmitReceive+0x68>
 80086c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80086c8:	2b04      	cmp	r3, #4
 80086ca:	d003      	beq.n	80086d4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80086cc:	2302      	movs	r3, #2
 80086ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80086d2:	e15b      	b.n	800898c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d005      	beq.n	80086e6 <HAL_SPI_TransmitReceive+0x82>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d002      	beq.n	80086e6 <HAL_SPI_TransmitReceive+0x82>
 80086e0:	887b      	ldrh	r3, [r7, #2]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d103      	bne.n	80086ee <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80086e6:	2301      	movs	r3, #1
 80086e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80086ec:	e14e      	b.n	800898c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80086f4:	b2db      	uxtb	r3, r3
 80086f6:	2b04      	cmp	r3, #4
 80086f8:	d003      	beq.n	8008702 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2205      	movs	r2, #5
 80086fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	2200      	movs	r2, #0
 8008706:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	687a      	ldr	r2, [r7, #4]
 800870c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	887a      	ldrh	r2, [r7, #2]
 8008712:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	887a      	ldrh	r2, [r7, #2]
 8008718:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	68ba      	ldr	r2, [r7, #8]
 800871e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	887a      	ldrh	r2, [r7, #2]
 8008724:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	887a      	ldrh	r2, [r7, #2]
 800872a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2200      	movs	r2, #0
 8008730:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2200      	movs	r2, #0
 8008736:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008742:	2b40      	cmp	r3, #64	; 0x40
 8008744:	d007      	beq.n	8008756 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	681a      	ldr	r2, [r3, #0]
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008754:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	68db      	ldr	r3, [r3, #12]
 800875a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800875e:	d178      	bne.n	8008852 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d002      	beq.n	800876e <HAL_SPI_TransmitReceive+0x10a>
 8008768:	8b7b      	ldrh	r3, [r7, #26]
 800876a:	2b01      	cmp	r3, #1
 800876c:	d166      	bne.n	800883c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008772:	881a      	ldrh	r2, [r3, #0]
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800877e:	1c9a      	adds	r2, r3, #2
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008788:	b29b      	uxth	r3, r3
 800878a:	3b01      	subs	r3, #1
 800878c:	b29a      	uxth	r2, r3
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008792:	e053      	b.n	800883c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	689b      	ldr	r3, [r3, #8]
 800879a:	f003 0302 	and.w	r3, r3, #2
 800879e:	2b02      	cmp	r3, #2
 80087a0:	d11b      	bne.n	80087da <HAL_SPI_TransmitReceive+0x176>
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80087a6:	b29b      	uxth	r3, r3
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d016      	beq.n	80087da <HAL_SPI_TransmitReceive+0x176>
 80087ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ae:	2b01      	cmp	r3, #1
 80087b0:	d113      	bne.n	80087da <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087b6:	881a      	ldrh	r2, [r3, #0]
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087c2:	1c9a      	adds	r2, r3, #2
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	3b01      	subs	r3, #1
 80087d0:	b29a      	uxth	r2, r3
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80087d6:	2300      	movs	r3, #0
 80087d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	689b      	ldr	r3, [r3, #8]
 80087e0:	f003 0301 	and.w	r3, r3, #1
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	d119      	bne.n	800881c <HAL_SPI_TransmitReceive+0x1b8>
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d014      	beq.n	800881c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	68da      	ldr	r2, [r3, #12]
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087fc:	b292      	uxth	r2, r2
 80087fe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008804:	1c9a      	adds	r2, r3, #2
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800880e:	b29b      	uxth	r3, r3
 8008810:	3b01      	subs	r3, #1
 8008812:	b29a      	uxth	r2, r3
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008818:	2301      	movs	r3, #1
 800881a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800881c:	f7fb ffa6 	bl	800476c <HAL_GetTick>
 8008820:	4602      	mov	r2, r0
 8008822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008824:	1ad3      	subs	r3, r2, r3
 8008826:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008828:	429a      	cmp	r2, r3
 800882a:	d807      	bhi.n	800883c <HAL_SPI_TransmitReceive+0x1d8>
 800882c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800882e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008832:	d003      	beq.n	800883c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008834:	2303      	movs	r3, #3
 8008836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800883a:	e0a7      	b.n	800898c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008840:	b29b      	uxth	r3, r3
 8008842:	2b00      	cmp	r3, #0
 8008844:	d1a6      	bne.n	8008794 <HAL_SPI_TransmitReceive+0x130>
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800884a:	b29b      	uxth	r3, r3
 800884c:	2b00      	cmp	r3, #0
 800884e:	d1a1      	bne.n	8008794 <HAL_SPI_TransmitReceive+0x130>
 8008850:	e07c      	b.n	800894c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d002      	beq.n	8008860 <HAL_SPI_TransmitReceive+0x1fc>
 800885a:	8b7b      	ldrh	r3, [r7, #26]
 800885c:	2b01      	cmp	r3, #1
 800885e:	d16b      	bne.n	8008938 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	330c      	adds	r3, #12
 800886a:	7812      	ldrb	r2, [r2, #0]
 800886c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008872:	1c5a      	adds	r2, r3, #1
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800887c:	b29b      	uxth	r3, r3
 800887e:	3b01      	subs	r3, #1
 8008880:	b29a      	uxth	r2, r3
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008886:	e057      	b.n	8008938 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	689b      	ldr	r3, [r3, #8]
 800888e:	f003 0302 	and.w	r3, r3, #2
 8008892:	2b02      	cmp	r3, #2
 8008894:	d11c      	bne.n	80088d0 <HAL_SPI_TransmitReceive+0x26c>
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800889a:	b29b      	uxth	r3, r3
 800889c:	2b00      	cmp	r3, #0
 800889e:	d017      	beq.n	80088d0 <HAL_SPI_TransmitReceive+0x26c>
 80088a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088a2:	2b01      	cmp	r3, #1
 80088a4:	d114      	bne.n	80088d0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	330c      	adds	r3, #12
 80088b0:	7812      	ldrb	r2, [r2, #0]
 80088b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088b8:	1c5a      	adds	r2, r3, #1
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80088c2:	b29b      	uxth	r3, r3
 80088c4:	3b01      	subs	r3, #1
 80088c6:	b29a      	uxth	r2, r3
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80088cc:	2300      	movs	r3, #0
 80088ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	689b      	ldr	r3, [r3, #8]
 80088d6:	f003 0301 	and.w	r3, r3, #1
 80088da:	2b01      	cmp	r3, #1
 80088dc:	d119      	bne.n	8008912 <HAL_SPI_TransmitReceive+0x2ae>
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d014      	beq.n	8008912 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	68da      	ldr	r2, [r3, #12]
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088f2:	b2d2      	uxtb	r2, r2
 80088f4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088fa:	1c5a      	adds	r2, r3, #1
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008904:	b29b      	uxth	r3, r3
 8008906:	3b01      	subs	r3, #1
 8008908:	b29a      	uxth	r2, r3
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800890e:	2301      	movs	r3, #1
 8008910:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008912:	f7fb ff2b 	bl	800476c <HAL_GetTick>
 8008916:	4602      	mov	r2, r0
 8008918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800891a:	1ad3      	subs	r3, r2, r3
 800891c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800891e:	429a      	cmp	r2, r3
 8008920:	d803      	bhi.n	800892a <HAL_SPI_TransmitReceive+0x2c6>
 8008922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008928:	d102      	bne.n	8008930 <HAL_SPI_TransmitReceive+0x2cc>
 800892a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800892c:	2b00      	cmp	r3, #0
 800892e:	d103      	bne.n	8008938 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008930:	2303      	movs	r3, #3
 8008932:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008936:	e029      	b.n	800898c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800893c:	b29b      	uxth	r3, r3
 800893e:	2b00      	cmp	r3, #0
 8008940:	d1a2      	bne.n	8008888 <HAL_SPI_TransmitReceive+0x224>
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008946:	b29b      	uxth	r3, r3
 8008948:	2b00      	cmp	r3, #0
 800894a:	d19d      	bne.n	8008888 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800894c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800894e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008950:	68f8      	ldr	r0, [r7, #12]
 8008952:	f000 f8e5 	bl	8008b20 <SPI_EndRxTxTransaction>
 8008956:	4603      	mov	r3, r0
 8008958:	2b00      	cmp	r3, #0
 800895a:	d006      	beq.n	800896a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800895c:	2301      	movs	r3, #1
 800895e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2220      	movs	r2, #32
 8008966:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008968:	e010      	b.n	800898c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	689b      	ldr	r3, [r3, #8]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d10b      	bne.n	800898a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008972:	2300      	movs	r3, #0
 8008974:	617b      	str	r3, [r7, #20]
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	68db      	ldr	r3, [r3, #12]
 800897c:	617b      	str	r3, [r7, #20]
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	689b      	ldr	r3, [r3, #8]
 8008984:	617b      	str	r3, [r7, #20]
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	e000      	b.n	800898c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800898a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2201      	movs	r2, #1
 8008990:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2200      	movs	r2, #0
 8008998:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800899c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3730      	adds	r7, #48	; 0x30
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b084      	sub	sp, #16
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	60f8      	str	r0, [r7, #12]
 80089b0:	60b9      	str	r1, [r7, #8]
 80089b2:	603b      	str	r3, [r7, #0]
 80089b4:	4613      	mov	r3, r2
 80089b6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80089b8:	e04c      	b.n	8008a54 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089c0:	d048      	beq.n	8008a54 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80089c2:	f7fb fed3 	bl	800476c <HAL_GetTick>
 80089c6:	4602      	mov	r2, r0
 80089c8:	69bb      	ldr	r3, [r7, #24]
 80089ca:	1ad3      	subs	r3, r2, r3
 80089cc:	683a      	ldr	r2, [r7, #0]
 80089ce:	429a      	cmp	r2, r3
 80089d0:	d902      	bls.n	80089d8 <SPI_WaitFlagStateUntilTimeout+0x30>
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d13d      	bne.n	8008a54 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	685a      	ldr	r2, [r3, #4]
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80089e6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80089f0:	d111      	bne.n	8008a16 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	689b      	ldr	r3, [r3, #8]
 80089f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089fa:	d004      	beq.n	8008a06 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	689b      	ldr	r3, [r3, #8]
 8008a00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a04:	d107      	bne.n	8008a16 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	681a      	ldr	r2, [r3, #0]
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a14:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a1e:	d10f      	bne.n	8008a40 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	681a      	ldr	r2, [r3, #0]
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008a2e:	601a      	str	r2, [r3, #0]
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	681a      	ldr	r2, [r3, #0]
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008a3e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2201      	movs	r2, #1
 8008a44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008a50:	2303      	movs	r3, #3
 8008a52:	e00f      	b.n	8008a74 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	689a      	ldr	r2, [r3, #8]
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	4013      	ands	r3, r2
 8008a5e:	68ba      	ldr	r2, [r7, #8]
 8008a60:	429a      	cmp	r2, r3
 8008a62:	bf0c      	ite	eq
 8008a64:	2301      	moveq	r3, #1
 8008a66:	2300      	movne	r3, #0
 8008a68:	b2db      	uxtb	r3, r3
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	79fb      	ldrb	r3, [r7, #7]
 8008a6e:	429a      	cmp	r2, r3
 8008a70:	d1a3      	bne.n	80089ba <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8008a72:	2300      	movs	r3, #0
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3710      	adds	r7, #16
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b086      	sub	sp, #24
 8008a80:	af02      	add	r7, sp, #8
 8008a82:	60f8      	str	r0, [r7, #12]
 8008a84:	60b9      	str	r1, [r7, #8]
 8008a86:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008a90:	d111      	bne.n	8008ab6 <SPI_EndRxTransaction+0x3a>
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a9a:	d004      	beq.n	8008aa6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	689b      	ldr	r3, [r3, #8]
 8008aa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008aa4:	d107      	bne.n	8008ab6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	681a      	ldr	r2, [r3, #0]
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ab4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	685b      	ldr	r3, [r3, #4]
 8008aba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008abe:	d117      	bne.n	8008af0 <SPI_EndRxTransaction+0x74>
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	689b      	ldr	r3, [r3, #8]
 8008ac4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ac8:	d112      	bne.n	8008af0 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	9300      	str	r3, [sp, #0]
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	2101      	movs	r1, #1
 8008ad4:	68f8      	ldr	r0, [r7, #12]
 8008ad6:	f7ff ff67 	bl	80089a8 <SPI_WaitFlagStateUntilTimeout>
 8008ada:	4603      	mov	r3, r0
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d01a      	beq.n	8008b16 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ae4:	f043 0220 	orr.w	r2, r3, #32
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008aec:	2303      	movs	r3, #3
 8008aee:	e013      	b.n	8008b18 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	9300      	str	r3, [sp, #0]
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	2200      	movs	r2, #0
 8008af8:	2180      	movs	r1, #128	; 0x80
 8008afa:	68f8      	ldr	r0, [r7, #12]
 8008afc:	f7ff ff54 	bl	80089a8 <SPI_WaitFlagStateUntilTimeout>
 8008b00:	4603      	mov	r3, r0
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d007      	beq.n	8008b16 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b0a:	f043 0220 	orr.w	r2, r3, #32
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008b12:	2303      	movs	r3, #3
 8008b14:	e000      	b.n	8008b18 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8008b16:	2300      	movs	r3, #0
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3710      	adds	r7, #16
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}

08008b20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b086      	sub	sp, #24
 8008b24:	af02      	add	r7, sp, #8
 8008b26:	60f8      	str	r0, [r7, #12]
 8008b28:	60b9      	str	r1, [r7, #8]
 8008b2a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	9300      	str	r3, [sp, #0]
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	2200      	movs	r2, #0
 8008b34:	2180      	movs	r1, #128	; 0x80
 8008b36:	68f8      	ldr	r0, [r7, #12]
 8008b38:	f7ff ff36 	bl	80089a8 <SPI_WaitFlagStateUntilTimeout>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d007      	beq.n	8008b52 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b46:	f043 0220 	orr.w	r2, r3, #32
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8008b4e:	2303      	movs	r3, #3
 8008b50:	e000      	b.n	8008b54 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8008b52:	2300      	movs	r3, #0
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3710      	adds	r7, #16
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b082      	sub	sp, #8
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d101      	bne.n	8008b6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	e01d      	b.n	8008baa <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b74:	b2db      	uxtb	r3, r3
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d106      	bne.n	8008b88 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f7fb fc0c 	bl	80043a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2202      	movs	r2, #2
 8008b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681a      	ldr	r2, [r3, #0]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	3304      	adds	r3, #4
 8008b98:	4619      	mov	r1, r3
 8008b9a:	4610      	mov	r0, r2
 8008b9c:	f000 f8d0 	bl	8008d40 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008ba8:	2300      	movs	r3, #0
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3708      	adds	r7, #8
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}
	...

08008bb4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b084      	sub	sp, #16
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	60f8      	str	r0, [r7, #12]
 8008bbc:	60b9      	str	r1, [r7, #8]
 8008bbe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bc6:	2b01      	cmp	r3, #1
 8008bc8:	d101      	bne.n	8008bce <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008bca:	2302      	movs	r3, #2
 8008bcc:	e0b4      	b.n	8008d38 <HAL_TIM_PWM_ConfigChannel+0x184>
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2201      	movs	r2, #1
 8008bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	2202      	movs	r2, #2
 8008bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2b0c      	cmp	r3, #12
 8008be2:	f200 809f 	bhi.w	8008d24 <HAL_TIM_PWM_ConfigChannel+0x170>
 8008be6:	a201      	add	r2, pc, #4	; (adr r2, 8008bec <HAL_TIM_PWM_ConfigChannel+0x38>)
 8008be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bec:	08008c21 	.word	0x08008c21
 8008bf0:	08008d25 	.word	0x08008d25
 8008bf4:	08008d25 	.word	0x08008d25
 8008bf8:	08008d25 	.word	0x08008d25
 8008bfc:	08008c61 	.word	0x08008c61
 8008c00:	08008d25 	.word	0x08008d25
 8008c04:	08008d25 	.word	0x08008d25
 8008c08:	08008d25 	.word	0x08008d25
 8008c0c:	08008ca3 	.word	0x08008ca3
 8008c10:	08008d25 	.word	0x08008d25
 8008c14:	08008d25 	.word	0x08008d25
 8008c18:	08008d25 	.word	0x08008d25
 8008c1c:	08008ce3 	.word	0x08008ce3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	68b9      	ldr	r1, [r7, #8]
 8008c26:	4618      	mov	r0, r3
 8008c28:	f000 f8ec 	bl	8008e04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	699a      	ldr	r2, [r3, #24]
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f042 0208 	orr.w	r2, r2, #8
 8008c3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	699a      	ldr	r2, [r3, #24]
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f022 0204 	bic.w	r2, r2, #4
 8008c4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	6999      	ldr	r1, [r3, #24]
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	691a      	ldr	r2, [r3, #16]
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	430a      	orrs	r2, r1
 8008c5c:	619a      	str	r2, [r3, #24]
      break;
 8008c5e:	e062      	b.n	8008d26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	68b9      	ldr	r1, [r7, #8]
 8008c66:	4618      	mov	r0, r3
 8008c68:	f000 f932 	bl	8008ed0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	699a      	ldr	r2, [r3, #24]
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	699a      	ldr	r2, [r3, #24]
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	6999      	ldr	r1, [r3, #24]
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	691b      	ldr	r3, [r3, #16]
 8008c96:	021a      	lsls	r2, r3, #8
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	430a      	orrs	r2, r1
 8008c9e:	619a      	str	r2, [r3, #24]
      break;
 8008ca0:	e041      	b.n	8008d26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	68b9      	ldr	r1, [r7, #8]
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f000 f97b 	bl	8008fa4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	69da      	ldr	r2, [r3, #28]
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f042 0208 	orr.w	r2, r2, #8
 8008cbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	69da      	ldr	r2, [r3, #28]
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f022 0204 	bic.w	r2, r2, #4
 8008ccc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	69d9      	ldr	r1, [r3, #28]
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	691a      	ldr	r2, [r3, #16]
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	430a      	orrs	r2, r1
 8008cde:	61da      	str	r2, [r3, #28]
      break;
 8008ce0:	e021      	b.n	8008d26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	68b9      	ldr	r1, [r7, #8]
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f000 f9c5 	bl	8009078 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	69da      	ldr	r2, [r3, #28]
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008cfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	69da      	ldr	r2, [r3, #28]
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	69d9      	ldr	r1, [r3, #28]
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	691b      	ldr	r3, [r3, #16]
 8008d18:	021a      	lsls	r2, r3, #8
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	430a      	orrs	r2, r1
 8008d20:	61da      	str	r2, [r3, #28]
      break;
 8008d22:	e000      	b.n	8008d26 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8008d24:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	2201      	movs	r2, #1
 8008d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	2200      	movs	r2, #0
 8008d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d36:	2300      	movs	r3, #0
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3710      	adds	r7, #16
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}

08008d40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b085      	sub	sp, #20
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	4a29      	ldr	r2, [pc, #164]	; (8008df8 <TIM_Base_SetConfig+0xb8>)
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d00b      	beq.n	8008d70 <TIM_Base_SetConfig+0x30>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d5e:	d007      	beq.n	8008d70 <TIM_Base_SetConfig+0x30>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	4a26      	ldr	r2, [pc, #152]	; (8008dfc <TIM_Base_SetConfig+0xbc>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d003      	beq.n	8008d70 <TIM_Base_SetConfig+0x30>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	4a25      	ldr	r2, [pc, #148]	; (8008e00 <TIM_Base_SetConfig+0xc0>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d108      	bne.n	8008d82 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	685b      	ldr	r3, [r3, #4]
 8008d7c:	68fa      	ldr	r2, [r7, #12]
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	4a1c      	ldr	r2, [pc, #112]	; (8008df8 <TIM_Base_SetConfig+0xb8>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d00b      	beq.n	8008da2 <TIM_Base_SetConfig+0x62>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d90:	d007      	beq.n	8008da2 <TIM_Base_SetConfig+0x62>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	4a19      	ldr	r2, [pc, #100]	; (8008dfc <TIM_Base_SetConfig+0xbc>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d003      	beq.n	8008da2 <TIM_Base_SetConfig+0x62>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	4a18      	ldr	r2, [pc, #96]	; (8008e00 <TIM_Base_SetConfig+0xc0>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d108      	bne.n	8008db4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008da8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	68db      	ldr	r3, [r3, #12]
 8008dae:	68fa      	ldr	r2, [r7, #12]
 8008db0:	4313      	orrs	r3, r2
 8008db2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	695b      	ldr	r3, [r3, #20]
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	68fa      	ldr	r2, [r7, #12]
 8008dc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	689a      	ldr	r2, [r3, #8]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	681a      	ldr	r2, [r3, #0]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	4a07      	ldr	r2, [pc, #28]	; (8008df8 <TIM_Base_SetConfig+0xb8>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d103      	bne.n	8008de8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	691a      	ldr	r2, [r3, #16]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2201      	movs	r2, #1
 8008dec:	615a      	str	r2, [r3, #20]
}
 8008dee:	bf00      	nop
 8008df0:	3714      	adds	r7, #20
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bc80      	pop	{r7}
 8008df6:	4770      	bx	lr
 8008df8:	40012c00 	.word	0x40012c00
 8008dfc:	40000400 	.word	0x40000400
 8008e00:	40000800 	.word	0x40000800

08008e04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b087      	sub	sp, #28
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6a1b      	ldr	r3, [r3, #32]
 8008e12:	f023 0201 	bic.w	r2, r3, #1
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6a1b      	ldr	r3, [r3, #32]
 8008e1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	699b      	ldr	r3, [r3, #24]
 8008e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	f023 0303 	bic.w	r3, r3, #3
 8008e3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	68fa      	ldr	r2, [r7, #12]
 8008e42:	4313      	orrs	r3, r2
 8008e44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	f023 0302 	bic.w	r3, r3, #2
 8008e4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	689b      	ldr	r3, [r3, #8]
 8008e52:	697a      	ldr	r2, [r7, #20]
 8008e54:	4313      	orrs	r3, r2
 8008e56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	4a1c      	ldr	r2, [pc, #112]	; (8008ecc <TIM_OC1_SetConfig+0xc8>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d10c      	bne.n	8008e7a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	f023 0308 	bic.w	r3, r3, #8
 8008e66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	68db      	ldr	r3, [r3, #12]
 8008e6c:	697a      	ldr	r2, [r7, #20]
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	f023 0304 	bic.w	r3, r3, #4
 8008e78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	4a13      	ldr	r2, [pc, #76]	; (8008ecc <TIM_OC1_SetConfig+0xc8>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d111      	bne.n	8008ea6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008e90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	695b      	ldr	r3, [r3, #20]
 8008e96:	693a      	ldr	r2, [r7, #16]
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	699b      	ldr	r3, [r3, #24]
 8008ea0:	693a      	ldr	r2, [r7, #16]
 8008ea2:	4313      	orrs	r3, r2
 8008ea4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	693a      	ldr	r2, [r7, #16]
 8008eaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	68fa      	ldr	r2, [r7, #12]
 8008eb0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	685a      	ldr	r2, [r3, #4]
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	697a      	ldr	r2, [r7, #20]
 8008ebe:	621a      	str	r2, [r3, #32]
}
 8008ec0:	bf00      	nop
 8008ec2:	371c      	adds	r7, #28
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bc80      	pop	{r7}
 8008ec8:	4770      	bx	lr
 8008eca:	bf00      	nop
 8008ecc:	40012c00 	.word	0x40012c00

08008ed0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b087      	sub	sp, #28
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
 8008ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6a1b      	ldr	r3, [r3, #32]
 8008ede:	f023 0210 	bic.w	r2, r3, #16
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6a1b      	ldr	r3, [r3, #32]
 8008eea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	699b      	ldr	r3, [r3, #24]
 8008ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008efe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	021b      	lsls	r3, r3, #8
 8008f0e:	68fa      	ldr	r2, [r7, #12]
 8008f10:	4313      	orrs	r3, r2
 8008f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	f023 0320 	bic.w	r3, r3, #32
 8008f1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	689b      	ldr	r3, [r3, #8]
 8008f20:	011b      	lsls	r3, r3, #4
 8008f22:	697a      	ldr	r2, [r7, #20]
 8008f24:	4313      	orrs	r3, r2
 8008f26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	4a1d      	ldr	r2, [pc, #116]	; (8008fa0 <TIM_OC2_SetConfig+0xd0>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d10d      	bne.n	8008f4c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	68db      	ldr	r3, [r3, #12]
 8008f3c:	011b      	lsls	r3, r3, #4
 8008f3e:	697a      	ldr	r2, [r7, #20]
 8008f40:	4313      	orrs	r3, r2
 8008f42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f4a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	4a14      	ldr	r2, [pc, #80]	; (8008fa0 <TIM_OC2_SetConfig+0xd0>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d113      	bne.n	8008f7c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008f5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008f62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	695b      	ldr	r3, [r3, #20]
 8008f68:	009b      	lsls	r3, r3, #2
 8008f6a:	693a      	ldr	r2, [r7, #16]
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	699b      	ldr	r3, [r3, #24]
 8008f74:	009b      	lsls	r3, r3, #2
 8008f76:	693a      	ldr	r2, [r7, #16]
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	693a      	ldr	r2, [r7, #16]
 8008f80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	68fa      	ldr	r2, [r7, #12]
 8008f86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	685a      	ldr	r2, [r3, #4]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	697a      	ldr	r2, [r7, #20]
 8008f94:	621a      	str	r2, [r3, #32]
}
 8008f96:	bf00      	nop
 8008f98:	371c      	adds	r7, #28
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bc80      	pop	{r7}
 8008f9e:	4770      	bx	lr
 8008fa0:	40012c00 	.word	0x40012c00

08008fa4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b087      	sub	sp, #28
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
 8008fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6a1b      	ldr	r3, [r3, #32]
 8008fb2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6a1b      	ldr	r3, [r3, #32]
 8008fbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	69db      	ldr	r3, [r3, #28]
 8008fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f023 0303 	bic.w	r3, r3, #3
 8008fda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	68fa      	ldr	r2, [r7, #12]
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008fec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	689b      	ldr	r3, [r3, #8]
 8008ff2:	021b      	lsls	r3, r3, #8
 8008ff4:	697a      	ldr	r2, [r7, #20]
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	4a1d      	ldr	r2, [pc, #116]	; (8009074 <TIM_OC3_SetConfig+0xd0>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d10d      	bne.n	800901e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009008:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	68db      	ldr	r3, [r3, #12]
 800900e:	021b      	lsls	r3, r3, #8
 8009010:	697a      	ldr	r2, [r7, #20]
 8009012:	4313      	orrs	r3, r2
 8009014:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800901c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	4a14      	ldr	r2, [pc, #80]	; (8009074 <TIM_OC3_SetConfig+0xd0>)
 8009022:	4293      	cmp	r3, r2
 8009024:	d113      	bne.n	800904e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800902c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009034:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	695b      	ldr	r3, [r3, #20]
 800903a:	011b      	lsls	r3, r3, #4
 800903c:	693a      	ldr	r2, [r7, #16]
 800903e:	4313      	orrs	r3, r2
 8009040:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	699b      	ldr	r3, [r3, #24]
 8009046:	011b      	lsls	r3, r3, #4
 8009048:	693a      	ldr	r2, [r7, #16]
 800904a:	4313      	orrs	r3, r2
 800904c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	693a      	ldr	r2, [r7, #16]
 8009052:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	68fa      	ldr	r2, [r7, #12]
 8009058:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	685a      	ldr	r2, [r3, #4]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	697a      	ldr	r2, [r7, #20]
 8009066:	621a      	str	r2, [r3, #32]
}
 8009068:	bf00      	nop
 800906a:	371c      	adds	r7, #28
 800906c:	46bd      	mov	sp, r7
 800906e:	bc80      	pop	{r7}
 8009070:	4770      	bx	lr
 8009072:	bf00      	nop
 8009074:	40012c00 	.word	0x40012c00

08009078 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009078:	b480      	push	{r7}
 800907a:	b087      	sub	sp, #28
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6a1b      	ldr	r3, [r3, #32]
 8009086:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6a1b      	ldr	r3, [r3, #32]
 8009092:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	69db      	ldr	r3, [r3, #28]
 800909e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	021b      	lsls	r3, r3, #8
 80090b6:	68fa      	ldr	r2, [r7, #12]
 80090b8:	4313      	orrs	r3, r2
 80090ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80090c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	689b      	ldr	r3, [r3, #8]
 80090c8:	031b      	lsls	r3, r3, #12
 80090ca:	693a      	ldr	r2, [r7, #16]
 80090cc:	4313      	orrs	r3, r2
 80090ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	4a0f      	ldr	r2, [pc, #60]	; (8009110 <TIM_OC4_SetConfig+0x98>)
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d109      	bne.n	80090ec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80090de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	695b      	ldr	r3, [r3, #20]
 80090e4:	019b      	lsls	r3, r3, #6
 80090e6:	697a      	ldr	r2, [r7, #20]
 80090e8:	4313      	orrs	r3, r2
 80090ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	697a      	ldr	r2, [r7, #20]
 80090f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	68fa      	ldr	r2, [r7, #12]
 80090f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	685a      	ldr	r2, [r3, #4]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	693a      	ldr	r2, [r7, #16]
 8009104:	621a      	str	r2, [r3, #32]
}
 8009106:	bf00      	nop
 8009108:	371c      	adds	r7, #28
 800910a:	46bd      	mov	sp, r7
 800910c:	bc80      	pop	{r7}
 800910e:	4770      	bx	lr
 8009110:	40012c00 	.word	0x40012c00

08009114 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009114:	b480      	push	{r7}
 8009116:	b085      	sub	sp, #20
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009124:	2b01      	cmp	r3, #1
 8009126:	d101      	bne.n	800912c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009128:	2302      	movs	r3, #2
 800912a:	e032      	b.n	8009192 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2201      	movs	r2, #1
 8009130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2202      	movs	r2, #2
 8009138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	685b      	ldr	r3, [r3, #4]
 8009142:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	689b      	ldr	r3, [r3, #8]
 800914a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009152:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	68fa      	ldr	r2, [r7, #12]
 800915a:	4313      	orrs	r3, r2
 800915c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009164:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	685b      	ldr	r3, [r3, #4]
 800916a:	68ba      	ldr	r2, [r7, #8]
 800916c:	4313      	orrs	r3, r2
 800916e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	68fa      	ldr	r2, [r7, #12]
 8009176:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	68ba      	ldr	r2, [r7, #8]
 800917e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2201      	movs	r2, #1
 8009184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2200      	movs	r2, #0
 800918c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009190:	2300      	movs	r3, #0
}
 8009192:	4618      	mov	r0, r3
 8009194:	3714      	adds	r7, #20
 8009196:	46bd      	mov	sp, r7
 8009198:	bc80      	pop	{r7}
 800919a:	4770      	bx	lr

0800919c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b082      	sub	sp, #8
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d101      	bne.n	80091ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80091aa:	2301      	movs	r3, #1
 80091ac:	e03f      	b.n	800922e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80091b4:	b2db      	uxtb	r3, r3
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d106      	bne.n	80091c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2200      	movs	r2, #0
 80091be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f7fb f93c 	bl	8004440 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2224      	movs	r2, #36	; 0x24
 80091cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	68da      	ldr	r2, [r3, #12]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80091de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f000 f90b 	bl	80093fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	691a      	ldr	r2, [r3, #16]
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80091f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	695a      	ldr	r2, [r3, #20]
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009204:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	68da      	ldr	r2, [r3, #12]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009214:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2200      	movs	r2, #0
 800921a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2220      	movs	r2, #32
 8009220:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2220      	movs	r2, #32
 8009228:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800922c:	2300      	movs	r3, #0
}
 800922e:	4618      	mov	r0, r3
 8009230:	3708      	adds	r7, #8
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}

08009236 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009236:	b580      	push	{r7, lr}
 8009238:	b088      	sub	sp, #32
 800923a:	af02      	add	r7, sp, #8
 800923c:	60f8      	str	r0, [r7, #12]
 800923e:	60b9      	str	r1, [r7, #8]
 8009240:	603b      	str	r3, [r7, #0]
 8009242:	4613      	mov	r3, r2
 8009244:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8009246:	2300      	movs	r3, #0
 8009248:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009250:	b2db      	uxtb	r3, r3
 8009252:	2b20      	cmp	r3, #32
 8009254:	f040 8083 	bne.w	800935e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d002      	beq.n	8009264 <HAL_UART_Transmit+0x2e>
 800925e:	88fb      	ldrh	r3, [r7, #6]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d101      	bne.n	8009268 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8009264:	2301      	movs	r3, #1
 8009266:	e07b      	b.n	8009360 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800926e:	2b01      	cmp	r3, #1
 8009270:	d101      	bne.n	8009276 <HAL_UART_Transmit+0x40>
 8009272:	2302      	movs	r3, #2
 8009274:	e074      	b.n	8009360 <HAL_UART_Transmit+0x12a>
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	2201      	movs	r2, #1
 800927a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	2200      	movs	r2, #0
 8009282:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	2221      	movs	r2, #33	; 0x21
 8009288:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800928c:	f7fb fa6e 	bl	800476c <HAL_GetTick>
 8009290:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	88fa      	ldrh	r2, [r7, #6]
 8009296:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	88fa      	ldrh	r2, [r7, #6]
 800929c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800929e:	e042      	b.n	8009326 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80092a4:	b29b      	uxth	r3, r3
 80092a6:	3b01      	subs	r3, #1
 80092a8:	b29a      	uxth	r2, r3
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	689b      	ldr	r3, [r3, #8]
 80092b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092b6:	d122      	bne.n	80092fe <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	9300      	str	r3, [sp, #0]
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	2200      	movs	r2, #0
 80092c0:	2180      	movs	r1, #128	; 0x80
 80092c2:	68f8      	ldr	r0, [r7, #12]
 80092c4:	f000 f850 	bl	8009368 <UART_WaitOnFlagUntilTimeout>
 80092c8:	4603      	mov	r3, r0
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d001      	beq.n	80092d2 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80092ce:	2303      	movs	r3, #3
 80092d0:	e046      	b.n	8009360 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	881b      	ldrh	r3, [r3, #0]
 80092da:	461a      	mov	r2, r3
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80092e4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	691b      	ldr	r3, [r3, #16]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d103      	bne.n	80092f6 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	3302      	adds	r3, #2
 80092f2:	60bb      	str	r3, [r7, #8]
 80092f4:	e017      	b.n	8009326 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	3301      	adds	r3, #1
 80092fa:	60bb      	str	r3, [r7, #8]
 80092fc:	e013      	b.n	8009326 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	9300      	str	r3, [sp, #0]
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	2200      	movs	r2, #0
 8009306:	2180      	movs	r1, #128	; 0x80
 8009308:	68f8      	ldr	r0, [r7, #12]
 800930a:	f000 f82d 	bl	8009368 <UART_WaitOnFlagUntilTimeout>
 800930e:	4603      	mov	r3, r0
 8009310:	2b00      	cmp	r3, #0
 8009312:	d001      	beq.n	8009318 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8009314:	2303      	movs	r3, #3
 8009316:	e023      	b.n	8009360 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	1c5a      	adds	r2, r3, #1
 800931c:	60ba      	str	r2, [r7, #8]
 800931e:	781a      	ldrb	r2, [r3, #0]
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800932a:	b29b      	uxth	r3, r3
 800932c:	2b00      	cmp	r3, #0
 800932e:	d1b7      	bne.n	80092a0 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	9300      	str	r3, [sp, #0]
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	2200      	movs	r2, #0
 8009338:	2140      	movs	r1, #64	; 0x40
 800933a:	68f8      	ldr	r0, [r7, #12]
 800933c:	f000 f814 	bl	8009368 <UART_WaitOnFlagUntilTimeout>
 8009340:	4603      	mov	r3, r0
 8009342:	2b00      	cmp	r3, #0
 8009344:	d001      	beq.n	800934a <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8009346:	2303      	movs	r3, #3
 8009348:	e00a      	b.n	8009360 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	2220      	movs	r2, #32
 800934e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	2200      	movs	r2, #0
 8009356:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800935a:	2300      	movs	r3, #0
 800935c:	e000      	b.n	8009360 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800935e:	2302      	movs	r3, #2
  }
}
 8009360:	4618      	mov	r0, r3
 8009362:	3718      	adds	r7, #24
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}

08009368 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b084      	sub	sp, #16
 800936c:	af00      	add	r7, sp, #0
 800936e:	60f8      	str	r0, [r7, #12]
 8009370:	60b9      	str	r1, [r7, #8]
 8009372:	603b      	str	r3, [r7, #0]
 8009374:	4613      	mov	r3, r2
 8009376:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009378:	e02c      	b.n	80093d4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800937a:	69bb      	ldr	r3, [r7, #24]
 800937c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009380:	d028      	beq.n	80093d4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009382:	69bb      	ldr	r3, [r7, #24]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d007      	beq.n	8009398 <UART_WaitOnFlagUntilTimeout+0x30>
 8009388:	f7fb f9f0 	bl	800476c <HAL_GetTick>
 800938c:	4602      	mov	r2, r0
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	1ad3      	subs	r3, r2, r3
 8009392:	69ba      	ldr	r2, [r7, #24]
 8009394:	429a      	cmp	r2, r3
 8009396:	d21d      	bcs.n	80093d4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	68da      	ldr	r2, [r3, #12]
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80093a6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	695a      	ldr	r2, [r3, #20]
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f022 0201 	bic.w	r2, r2, #1
 80093b6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	2220      	movs	r2, #32
 80093bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	2220      	movs	r2, #32
 80093c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	2200      	movs	r2, #0
 80093cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80093d0:	2303      	movs	r3, #3
 80093d2:	e00f      	b.n	80093f4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	681a      	ldr	r2, [r3, #0]
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	4013      	ands	r3, r2
 80093de:	68ba      	ldr	r2, [r7, #8]
 80093e0:	429a      	cmp	r2, r3
 80093e2:	bf0c      	ite	eq
 80093e4:	2301      	moveq	r3, #1
 80093e6:	2300      	movne	r3, #0
 80093e8:	b2db      	uxtb	r3, r3
 80093ea:	461a      	mov	r2, r3
 80093ec:	79fb      	ldrb	r3, [r7, #7]
 80093ee:	429a      	cmp	r2, r3
 80093f0:	d0c3      	beq.n	800937a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80093f2:	2300      	movs	r3, #0
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3710      	adds	r7, #16
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}

080093fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b084      	sub	sp, #16
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	691b      	ldr	r3, [r3, #16]
 800940a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	68da      	ldr	r2, [r3, #12]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	430a      	orrs	r2, r1
 8009418:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	689a      	ldr	r2, [r3, #8]
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	691b      	ldr	r3, [r3, #16]
 8009422:	431a      	orrs	r2, r3
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	695b      	ldr	r3, [r3, #20]
 8009428:	4313      	orrs	r3, r2
 800942a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	68db      	ldr	r3, [r3, #12]
 8009432:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8009436:	f023 030c 	bic.w	r3, r3, #12
 800943a:	687a      	ldr	r2, [r7, #4]
 800943c:	6812      	ldr	r2, [r2, #0]
 800943e:	68f9      	ldr	r1, [r7, #12]
 8009440:	430b      	orrs	r3, r1
 8009442:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	695b      	ldr	r3, [r3, #20]
 800944a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	699a      	ldr	r2, [r3, #24]
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	430a      	orrs	r2, r1
 8009458:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4a52      	ldr	r2, [pc, #328]	; (80095a8 <UART_SetConfig+0x1ac>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d14e      	bne.n	8009502 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009464:	f7fe fcbc 	bl	8007de0 <HAL_RCC_GetPCLK2Freq>
 8009468:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800946a:	68ba      	ldr	r2, [r7, #8]
 800946c:	4613      	mov	r3, r2
 800946e:	009b      	lsls	r3, r3, #2
 8009470:	4413      	add	r3, r2
 8009472:	009a      	lsls	r2, r3, #2
 8009474:	441a      	add	r2, r3
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	685b      	ldr	r3, [r3, #4]
 800947a:	009b      	lsls	r3, r3, #2
 800947c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009480:	4a4a      	ldr	r2, [pc, #296]	; (80095ac <UART_SetConfig+0x1b0>)
 8009482:	fba2 2303 	umull	r2, r3, r2, r3
 8009486:	095b      	lsrs	r3, r3, #5
 8009488:	0119      	lsls	r1, r3, #4
 800948a:	68ba      	ldr	r2, [r7, #8]
 800948c:	4613      	mov	r3, r2
 800948e:	009b      	lsls	r3, r3, #2
 8009490:	4413      	add	r3, r2
 8009492:	009a      	lsls	r2, r3, #2
 8009494:	441a      	add	r2, r3
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	685b      	ldr	r3, [r3, #4]
 800949a:	009b      	lsls	r3, r3, #2
 800949c:	fbb2 f2f3 	udiv	r2, r2, r3
 80094a0:	4b42      	ldr	r3, [pc, #264]	; (80095ac <UART_SetConfig+0x1b0>)
 80094a2:	fba3 0302 	umull	r0, r3, r3, r2
 80094a6:	095b      	lsrs	r3, r3, #5
 80094a8:	2064      	movs	r0, #100	; 0x64
 80094aa:	fb00 f303 	mul.w	r3, r0, r3
 80094ae:	1ad3      	subs	r3, r2, r3
 80094b0:	011b      	lsls	r3, r3, #4
 80094b2:	3332      	adds	r3, #50	; 0x32
 80094b4:	4a3d      	ldr	r2, [pc, #244]	; (80095ac <UART_SetConfig+0x1b0>)
 80094b6:	fba2 2303 	umull	r2, r3, r2, r3
 80094ba:	095b      	lsrs	r3, r3, #5
 80094bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80094c0:	4419      	add	r1, r3
 80094c2:	68ba      	ldr	r2, [r7, #8]
 80094c4:	4613      	mov	r3, r2
 80094c6:	009b      	lsls	r3, r3, #2
 80094c8:	4413      	add	r3, r2
 80094ca:	009a      	lsls	r2, r3, #2
 80094cc:	441a      	add	r2, r3
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	685b      	ldr	r3, [r3, #4]
 80094d2:	009b      	lsls	r3, r3, #2
 80094d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80094d8:	4b34      	ldr	r3, [pc, #208]	; (80095ac <UART_SetConfig+0x1b0>)
 80094da:	fba3 0302 	umull	r0, r3, r3, r2
 80094de:	095b      	lsrs	r3, r3, #5
 80094e0:	2064      	movs	r0, #100	; 0x64
 80094e2:	fb00 f303 	mul.w	r3, r0, r3
 80094e6:	1ad3      	subs	r3, r2, r3
 80094e8:	011b      	lsls	r3, r3, #4
 80094ea:	3332      	adds	r3, #50	; 0x32
 80094ec:	4a2f      	ldr	r2, [pc, #188]	; (80095ac <UART_SetConfig+0x1b0>)
 80094ee:	fba2 2303 	umull	r2, r3, r2, r3
 80094f2:	095b      	lsrs	r3, r3, #5
 80094f4:	f003 020f 	and.w	r2, r3, #15
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	440a      	add	r2, r1
 80094fe:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8009500:	e04d      	b.n	800959e <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8009502:	f7fe fc59 	bl	8007db8 <HAL_RCC_GetPCLK1Freq>
 8009506:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009508:	68ba      	ldr	r2, [r7, #8]
 800950a:	4613      	mov	r3, r2
 800950c:	009b      	lsls	r3, r3, #2
 800950e:	4413      	add	r3, r2
 8009510:	009a      	lsls	r2, r3, #2
 8009512:	441a      	add	r2, r3
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	685b      	ldr	r3, [r3, #4]
 8009518:	009b      	lsls	r3, r3, #2
 800951a:	fbb2 f3f3 	udiv	r3, r2, r3
 800951e:	4a23      	ldr	r2, [pc, #140]	; (80095ac <UART_SetConfig+0x1b0>)
 8009520:	fba2 2303 	umull	r2, r3, r2, r3
 8009524:	095b      	lsrs	r3, r3, #5
 8009526:	0119      	lsls	r1, r3, #4
 8009528:	68ba      	ldr	r2, [r7, #8]
 800952a:	4613      	mov	r3, r2
 800952c:	009b      	lsls	r3, r3, #2
 800952e:	4413      	add	r3, r2
 8009530:	009a      	lsls	r2, r3, #2
 8009532:	441a      	add	r2, r3
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	009b      	lsls	r3, r3, #2
 800953a:	fbb2 f2f3 	udiv	r2, r2, r3
 800953e:	4b1b      	ldr	r3, [pc, #108]	; (80095ac <UART_SetConfig+0x1b0>)
 8009540:	fba3 0302 	umull	r0, r3, r3, r2
 8009544:	095b      	lsrs	r3, r3, #5
 8009546:	2064      	movs	r0, #100	; 0x64
 8009548:	fb00 f303 	mul.w	r3, r0, r3
 800954c:	1ad3      	subs	r3, r2, r3
 800954e:	011b      	lsls	r3, r3, #4
 8009550:	3332      	adds	r3, #50	; 0x32
 8009552:	4a16      	ldr	r2, [pc, #88]	; (80095ac <UART_SetConfig+0x1b0>)
 8009554:	fba2 2303 	umull	r2, r3, r2, r3
 8009558:	095b      	lsrs	r3, r3, #5
 800955a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800955e:	4419      	add	r1, r3
 8009560:	68ba      	ldr	r2, [r7, #8]
 8009562:	4613      	mov	r3, r2
 8009564:	009b      	lsls	r3, r3, #2
 8009566:	4413      	add	r3, r2
 8009568:	009a      	lsls	r2, r3, #2
 800956a:	441a      	add	r2, r3
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	009b      	lsls	r3, r3, #2
 8009572:	fbb2 f2f3 	udiv	r2, r2, r3
 8009576:	4b0d      	ldr	r3, [pc, #52]	; (80095ac <UART_SetConfig+0x1b0>)
 8009578:	fba3 0302 	umull	r0, r3, r3, r2
 800957c:	095b      	lsrs	r3, r3, #5
 800957e:	2064      	movs	r0, #100	; 0x64
 8009580:	fb00 f303 	mul.w	r3, r0, r3
 8009584:	1ad3      	subs	r3, r2, r3
 8009586:	011b      	lsls	r3, r3, #4
 8009588:	3332      	adds	r3, #50	; 0x32
 800958a:	4a08      	ldr	r2, [pc, #32]	; (80095ac <UART_SetConfig+0x1b0>)
 800958c:	fba2 2303 	umull	r2, r3, r2, r3
 8009590:	095b      	lsrs	r3, r3, #5
 8009592:	f003 020f 	and.w	r2, r3, #15
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	440a      	add	r2, r1
 800959c:	609a      	str	r2, [r3, #8]
}
 800959e:	bf00      	nop
 80095a0:	3710      	adds	r7, #16
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}
 80095a6:	bf00      	nop
 80095a8:	40013800 	.word	0x40013800
 80095ac:	51eb851f 	.word	0x51eb851f

080095b0 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80095b0:	b084      	sub	sp, #16
 80095b2:	b480      	push	{r7}
 80095b4:	b083      	sub	sp, #12
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	6078      	str	r0, [r7, #4]
 80095ba:	f107 0014 	add.w	r0, r7, #20
 80095be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80095c2:	2300      	movs	r3, #0
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	370c      	adds	r7, #12
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bc80      	pop	{r7}
 80095cc:	b004      	add	sp, #16
 80095ce:	4770      	bx	lr

080095d0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b085      	sub	sp, #20
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80095d8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80095dc:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80095e4:	b29a      	uxth	r2, r3
 80095e6:	89fb      	ldrh	r3, [r7, #14]
 80095e8:	4313      	orrs	r3, r2
 80095ea:	b29a      	uxth	r2, r3
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80095f2:	2300      	movs	r3, #0
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	3714      	adds	r7, #20
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bc80      	pop	{r7}
 80095fc:	4770      	bx	lr

080095fe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80095fe:	b480      	push	{r7}
 8009600:	b085      	sub	sp, #20
 8009602:	af00      	add	r7, sp, #0
 8009604:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009606:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800960a:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009612:	b29b      	uxth	r3, r3
 8009614:	b21a      	sxth	r2, r3
 8009616:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800961a:	43db      	mvns	r3, r3
 800961c:	b21b      	sxth	r3, r3
 800961e:	4013      	ands	r3, r2
 8009620:	b21b      	sxth	r3, r3
 8009622:	b29a      	uxth	r2, r3
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800962a:	2300      	movs	r3, #0
}
 800962c:	4618      	mov	r0, r3
 800962e:	3714      	adds	r7, #20
 8009630:	46bd      	mov	sp, r7
 8009632:	bc80      	pop	{r7}
 8009634:	4770      	bx	lr

08009636 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8009636:	b480      	push	{r7}
 8009638:	b083      	sub	sp, #12
 800963a:	af00      	add	r7, sp, #0
 800963c:	6078      	str	r0, [r7, #4]
 800963e:	460b      	mov	r3, r1
 8009640:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009642:	2300      	movs	r3, #0
}
 8009644:	4618      	mov	r0, r3
 8009646:	370c      	adds	r7, #12
 8009648:	46bd      	mov	sp, r7
 800964a:	bc80      	pop	{r7}
 800964c:	4770      	bx	lr

0800964e <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800964e:	b084      	sub	sp, #16
 8009650:	b580      	push	{r7, lr}
 8009652:	b082      	sub	sp, #8
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
 8009658:	f107 0014 	add.w	r0, r7, #20
 800965c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2201      	movs	r2, #1
 8009664:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2200      	movs	r2, #0
 800966c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2200      	movs	r2, #0
 8009674:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2200      	movs	r2, #0
 800967c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f7ff ffa5 	bl	80095d0 <USB_EnableGlobalInt>

  return HAL_OK;
 8009686:	2300      	movs	r3, #0
}
 8009688:	4618      	mov	r0, r3
 800968a:	3708      	adds	r7, #8
 800968c:	46bd      	mov	sp, r7
 800968e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009692:	b004      	add	sp, #16
 8009694:	4770      	bx	lr
	...

08009698 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009698:	b490      	push	{r4, r7}
 800969a:	b084      	sub	sp, #16
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
 80096a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80096a2:	2300      	movs	r3, #0
 80096a4:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80096a6:	687a      	ldr	r2, [r7, #4]
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	781b      	ldrb	r3, [r3, #0]
 80096ac:	009b      	lsls	r3, r3, #2
 80096ae:	4413      	add	r3, r2
 80096b0:	881b      	ldrh	r3, [r3, #0]
 80096b2:	b29b      	uxth	r3, r3
 80096b4:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80096b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096bc:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	78db      	ldrb	r3, [r3, #3]
 80096c2:	2b03      	cmp	r3, #3
 80096c4:	d819      	bhi.n	80096fa <USB_ActivateEndpoint+0x62>
 80096c6:	a201      	add	r2, pc, #4	; (adr r2, 80096cc <USB_ActivateEndpoint+0x34>)
 80096c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096cc:	080096dd 	.word	0x080096dd
 80096d0:	080096f1 	.word	0x080096f1
 80096d4:	08009701 	.word	0x08009701
 80096d8:	080096e7 	.word	0x080096e7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80096dc:	89bb      	ldrh	r3, [r7, #12]
 80096de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80096e2:	81bb      	strh	r3, [r7, #12]
      break;
 80096e4:	e00d      	b.n	8009702 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80096e6:	89bb      	ldrh	r3, [r7, #12]
 80096e8:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80096ec:	81bb      	strh	r3, [r7, #12]
      break;
 80096ee:	e008      	b.n	8009702 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80096f0:	89bb      	ldrh	r3, [r7, #12]
 80096f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80096f6:	81bb      	strh	r3, [r7, #12]
      break;
 80096f8:	e003      	b.n	8009702 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 80096fa:	2301      	movs	r3, #1
 80096fc:	73fb      	strb	r3, [r7, #15]
      break;
 80096fe:	e000      	b.n	8009702 <USB_ActivateEndpoint+0x6a>
      break;
 8009700:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8009702:	687a      	ldr	r2, [r7, #4]
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	781b      	ldrb	r3, [r3, #0]
 8009708:	009b      	lsls	r3, r3, #2
 800970a:	441a      	add	r2, r3
 800970c:	89bb      	ldrh	r3, [r7, #12]
 800970e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009712:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009716:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800971a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800971e:	b29b      	uxth	r3, r3
 8009720:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009722:	687a      	ldr	r2, [r7, #4]
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	781b      	ldrb	r3, [r3, #0]
 8009728:	009b      	lsls	r3, r3, #2
 800972a:	4413      	add	r3, r2
 800972c:	881b      	ldrh	r3, [r3, #0]
 800972e:	b29b      	uxth	r3, r3
 8009730:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009734:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009738:	b29a      	uxth	r2, r3
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	781b      	ldrb	r3, [r3, #0]
 800973e:	b29b      	uxth	r3, r3
 8009740:	4313      	orrs	r3, r2
 8009742:	b29c      	uxth	r4, r3
 8009744:	687a      	ldr	r2, [r7, #4]
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	781b      	ldrb	r3, [r3, #0]
 800974a:	009b      	lsls	r3, r3, #2
 800974c:	441a      	add	r2, r3
 800974e:	4b8a      	ldr	r3, [pc, #552]	; (8009978 <USB_ActivateEndpoint+0x2e0>)
 8009750:	4323      	orrs	r3, r4
 8009752:	b29b      	uxth	r3, r3
 8009754:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	7b1b      	ldrb	r3, [r3, #12]
 800975a:	2b00      	cmp	r3, #0
 800975c:	f040 8112 	bne.w	8009984 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	785b      	ldrb	r3, [r3, #1]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d067      	beq.n	8009838 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009768:	687c      	ldr	r4, [r7, #4]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009770:	b29b      	uxth	r3, r3
 8009772:	441c      	add	r4, r3
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	781b      	ldrb	r3, [r3, #0]
 8009778:	011b      	lsls	r3, r3, #4
 800977a:	4423      	add	r3, r4
 800977c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009780:	461c      	mov	r4, r3
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	88db      	ldrh	r3, [r3, #6]
 8009786:	085b      	lsrs	r3, r3, #1
 8009788:	b29b      	uxth	r3, r3
 800978a:	005b      	lsls	r3, r3, #1
 800978c:	b29b      	uxth	r3, r3
 800978e:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009790:	687a      	ldr	r2, [r7, #4]
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	781b      	ldrb	r3, [r3, #0]
 8009796:	009b      	lsls	r3, r3, #2
 8009798:	4413      	add	r3, r2
 800979a:	881b      	ldrh	r3, [r3, #0]
 800979c:	b29c      	uxth	r4, r3
 800979e:	4623      	mov	r3, r4
 80097a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d014      	beq.n	80097d2 <USB_ActivateEndpoint+0x13a>
 80097a8:	687a      	ldr	r2, [r7, #4]
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	781b      	ldrb	r3, [r3, #0]
 80097ae:	009b      	lsls	r3, r3, #2
 80097b0:	4413      	add	r3, r2
 80097b2:	881b      	ldrh	r3, [r3, #0]
 80097b4:	b29b      	uxth	r3, r3
 80097b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097be:	b29c      	uxth	r4, r3
 80097c0:	687a      	ldr	r2, [r7, #4]
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	781b      	ldrb	r3, [r3, #0]
 80097c6:	009b      	lsls	r3, r3, #2
 80097c8:	441a      	add	r2, r3
 80097ca:	4b6c      	ldr	r3, [pc, #432]	; (800997c <USB_ActivateEndpoint+0x2e4>)
 80097cc:	4323      	orrs	r3, r4
 80097ce:	b29b      	uxth	r3, r3
 80097d0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	78db      	ldrb	r3, [r3, #3]
 80097d6:	2b01      	cmp	r3, #1
 80097d8:	d018      	beq.n	800980c <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80097da:	687a      	ldr	r2, [r7, #4]
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	781b      	ldrb	r3, [r3, #0]
 80097e0:	009b      	lsls	r3, r3, #2
 80097e2:	4413      	add	r3, r2
 80097e4:	881b      	ldrh	r3, [r3, #0]
 80097e6:	b29b      	uxth	r3, r3
 80097e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097f0:	b29c      	uxth	r4, r3
 80097f2:	f084 0320 	eor.w	r3, r4, #32
 80097f6:	b29c      	uxth	r4, r3
 80097f8:	687a      	ldr	r2, [r7, #4]
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	781b      	ldrb	r3, [r3, #0]
 80097fe:	009b      	lsls	r3, r3, #2
 8009800:	441a      	add	r2, r3
 8009802:	4b5d      	ldr	r3, [pc, #372]	; (8009978 <USB_ActivateEndpoint+0x2e0>)
 8009804:	4323      	orrs	r3, r4
 8009806:	b29b      	uxth	r3, r3
 8009808:	8013      	strh	r3, [r2, #0]
 800980a:	e22b      	b.n	8009c64 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800980c:	687a      	ldr	r2, [r7, #4]
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	781b      	ldrb	r3, [r3, #0]
 8009812:	009b      	lsls	r3, r3, #2
 8009814:	4413      	add	r3, r2
 8009816:	881b      	ldrh	r3, [r3, #0]
 8009818:	b29b      	uxth	r3, r3
 800981a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800981e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009822:	b29c      	uxth	r4, r3
 8009824:	687a      	ldr	r2, [r7, #4]
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	781b      	ldrb	r3, [r3, #0]
 800982a:	009b      	lsls	r3, r3, #2
 800982c:	441a      	add	r2, r3
 800982e:	4b52      	ldr	r3, [pc, #328]	; (8009978 <USB_ActivateEndpoint+0x2e0>)
 8009830:	4323      	orrs	r3, r4
 8009832:	b29b      	uxth	r3, r3
 8009834:	8013      	strh	r3, [r2, #0]
 8009836:	e215      	b.n	8009c64 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009838:	687c      	ldr	r4, [r7, #4]
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009840:	b29b      	uxth	r3, r3
 8009842:	441c      	add	r4, r3
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	781b      	ldrb	r3, [r3, #0]
 8009848:	011b      	lsls	r3, r3, #4
 800984a:	4423      	add	r3, r4
 800984c:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8009850:	461c      	mov	r4, r3
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	88db      	ldrh	r3, [r3, #6]
 8009856:	085b      	lsrs	r3, r3, #1
 8009858:	b29b      	uxth	r3, r3
 800985a:	005b      	lsls	r3, r3, #1
 800985c:	b29b      	uxth	r3, r3
 800985e:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009860:	687c      	ldr	r4, [r7, #4]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009868:	b29b      	uxth	r3, r3
 800986a:	441c      	add	r4, r3
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	781b      	ldrb	r3, [r3, #0]
 8009870:	011b      	lsls	r3, r3, #4
 8009872:	4423      	add	r3, r4
 8009874:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009878:	461c      	mov	r4, r3
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	691b      	ldr	r3, [r3, #16]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d10e      	bne.n	80098a0 <USB_ActivateEndpoint+0x208>
 8009882:	8823      	ldrh	r3, [r4, #0]
 8009884:	b29b      	uxth	r3, r3
 8009886:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800988a:	b29b      	uxth	r3, r3
 800988c:	8023      	strh	r3, [r4, #0]
 800988e:	8823      	ldrh	r3, [r4, #0]
 8009890:	b29b      	uxth	r3, r3
 8009892:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009896:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800989a:	b29b      	uxth	r3, r3
 800989c:	8023      	strh	r3, [r4, #0]
 800989e:	e02d      	b.n	80098fc <USB_ActivateEndpoint+0x264>
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	691b      	ldr	r3, [r3, #16]
 80098a4:	2b3e      	cmp	r3, #62	; 0x3e
 80098a6:	d812      	bhi.n	80098ce <USB_ActivateEndpoint+0x236>
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	691b      	ldr	r3, [r3, #16]
 80098ac:	085b      	lsrs	r3, r3, #1
 80098ae:	60bb      	str	r3, [r7, #8]
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	691b      	ldr	r3, [r3, #16]
 80098b4:	f003 0301 	and.w	r3, r3, #1
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d002      	beq.n	80098c2 <USB_ActivateEndpoint+0x22a>
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	3301      	adds	r3, #1
 80098c0:	60bb      	str	r3, [r7, #8]
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	b29b      	uxth	r3, r3
 80098c6:	029b      	lsls	r3, r3, #10
 80098c8:	b29b      	uxth	r3, r3
 80098ca:	8023      	strh	r3, [r4, #0]
 80098cc:	e016      	b.n	80098fc <USB_ActivateEndpoint+0x264>
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	691b      	ldr	r3, [r3, #16]
 80098d2:	095b      	lsrs	r3, r3, #5
 80098d4:	60bb      	str	r3, [r7, #8]
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	691b      	ldr	r3, [r3, #16]
 80098da:	f003 031f 	and.w	r3, r3, #31
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d102      	bne.n	80098e8 <USB_ActivateEndpoint+0x250>
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	3b01      	subs	r3, #1
 80098e6:	60bb      	str	r3, [r7, #8]
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	b29b      	uxth	r3, r3
 80098ec:	029b      	lsls	r3, r3, #10
 80098ee:	b29b      	uxth	r3, r3
 80098f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098f8:	b29b      	uxth	r3, r3
 80098fa:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80098fc:	687a      	ldr	r2, [r7, #4]
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	781b      	ldrb	r3, [r3, #0]
 8009902:	009b      	lsls	r3, r3, #2
 8009904:	4413      	add	r3, r2
 8009906:	881b      	ldrh	r3, [r3, #0]
 8009908:	b29c      	uxth	r4, r3
 800990a:	4623      	mov	r3, r4
 800990c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009910:	2b00      	cmp	r3, #0
 8009912:	d014      	beq.n	800993e <USB_ActivateEndpoint+0x2a6>
 8009914:	687a      	ldr	r2, [r7, #4]
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	781b      	ldrb	r3, [r3, #0]
 800991a:	009b      	lsls	r3, r3, #2
 800991c:	4413      	add	r3, r2
 800991e:	881b      	ldrh	r3, [r3, #0]
 8009920:	b29b      	uxth	r3, r3
 8009922:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800992a:	b29c      	uxth	r4, r3
 800992c:	687a      	ldr	r2, [r7, #4]
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	781b      	ldrb	r3, [r3, #0]
 8009932:	009b      	lsls	r3, r3, #2
 8009934:	441a      	add	r2, r3
 8009936:	4b12      	ldr	r3, [pc, #72]	; (8009980 <USB_ActivateEndpoint+0x2e8>)
 8009938:	4323      	orrs	r3, r4
 800993a:	b29b      	uxth	r3, r3
 800993c:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800993e:	687a      	ldr	r2, [r7, #4]
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	781b      	ldrb	r3, [r3, #0]
 8009944:	009b      	lsls	r3, r3, #2
 8009946:	4413      	add	r3, r2
 8009948:	881b      	ldrh	r3, [r3, #0]
 800994a:	b29b      	uxth	r3, r3
 800994c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009950:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009954:	b29c      	uxth	r4, r3
 8009956:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800995a:	b29c      	uxth	r4, r3
 800995c:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8009960:	b29c      	uxth	r4, r3
 8009962:	687a      	ldr	r2, [r7, #4]
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	781b      	ldrb	r3, [r3, #0]
 8009968:	009b      	lsls	r3, r3, #2
 800996a:	441a      	add	r2, r3
 800996c:	4b02      	ldr	r3, [pc, #8]	; (8009978 <USB_ActivateEndpoint+0x2e0>)
 800996e:	4323      	orrs	r3, r4
 8009970:	b29b      	uxth	r3, r3
 8009972:	8013      	strh	r3, [r2, #0]
 8009974:	e176      	b.n	8009c64 <USB_ActivateEndpoint+0x5cc>
 8009976:	bf00      	nop
 8009978:	ffff8080 	.word	0xffff8080
 800997c:	ffff80c0 	.word	0xffff80c0
 8009980:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8009984:	687a      	ldr	r2, [r7, #4]
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	781b      	ldrb	r3, [r3, #0]
 800998a:	009b      	lsls	r3, r3, #2
 800998c:	4413      	add	r3, r2
 800998e:	881b      	ldrh	r3, [r3, #0]
 8009990:	b29b      	uxth	r3, r3
 8009992:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800999a:	b29c      	uxth	r4, r3
 800999c:	687a      	ldr	r2, [r7, #4]
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	781b      	ldrb	r3, [r3, #0]
 80099a2:	009b      	lsls	r3, r3, #2
 80099a4:	441a      	add	r2, r3
 80099a6:	4b96      	ldr	r3, [pc, #600]	; (8009c00 <USB_ActivateEndpoint+0x568>)
 80099a8:	4323      	orrs	r3, r4
 80099aa:	b29b      	uxth	r3, r3
 80099ac:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80099ae:	687c      	ldr	r4, [r7, #4]
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80099b6:	b29b      	uxth	r3, r3
 80099b8:	441c      	add	r4, r3
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	781b      	ldrb	r3, [r3, #0]
 80099be:	011b      	lsls	r3, r3, #4
 80099c0:	4423      	add	r3, r4
 80099c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80099c6:	461c      	mov	r4, r3
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	891b      	ldrh	r3, [r3, #8]
 80099cc:	085b      	lsrs	r3, r3, #1
 80099ce:	b29b      	uxth	r3, r3
 80099d0:	005b      	lsls	r3, r3, #1
 80099d2:	b29b      	uxth	r3, r3
 80099d4:	8023      	strh	r3, [r4, #0]
 80099d6:	687c      	ldr	r4, [r7, #4]
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80099de:	b29b      	uxth	r3, r3
 80099e0:	441c      	add	r4, r3
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	781b      	ldrb	r3, [r3, #0]
 80099e6:	011b      	lsls	r3, r3, #4
 80099e8:	4423      	add	r3, r4
 80099ea:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80099ee:	461c      	mov	r4, r3
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	895b      	ldrh	r3, [r3, #10]
 80099f4:	085b      	lsrs	r3, r3, #1
 80099f6:	b29b      	uxth	r3, r3
 80099f8:	005b      	lsls	r3, r3, #1
 80099fa:	b29b      	uxth	r3, r3
 80099fc:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	785b      	ldrb	r3, [r3, #1]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	f040 8088 	bne.w	8009b18 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009a08:	687a      	ldr	r2, [r7, #4]
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	781b      	ldrb	r3, [r3, #0]
 8009a0e:	009b      	lsls	r3, r3, #2
 8009a10:	4413      	add	r3, r2
 8009a12:	881b      	ldrh	r3, [r3, #0]
 8009a14:	b29c      	uxth	r4, r3
 8009a16:	4623      	mov	r3, r4
 8009a18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d014      	beq.n	8009a4a <USB_ActivateEndpoint+0x3b2>
 8009a20:	687a      	ldr	r2, [r7, #4]
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	781b      	ldrb	r3, [r3, #0]
 8009a26:	009b      	lsls	r3, r3, #2
 8009a28:	4413      	add	r3, r2
 8009a2a:	881b      	ldrh	r3, [r3, #0]
 8009a2c:	b29b      	uxth	r3, r3
 8009a2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a36:	b29c      	uxth	r4, r3
 8009a38:	687a      	ldr	r2, [r7, #4]
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	781b      	ldrb	r3, [r3, #0]
 8009a3e:	009b      	lsls	r3, r3, #2
 8009a40:	441a      	add	r2, r3
 8009a42:	4b70      	ldr	r3, [pc, #448]	; (8009c04 <USB_ActivateEndpoint+0x56c>)
 8009a44:	4323      	orrs	r3, r4
 8009a46:	b29b      	uxth	r3, r3
 8009a48:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009a4a:	687a      	ldr	r2, [r7, #4]
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	781b      	ldrb	r3, [r3, #0]
 8009a50:	009b      	lsls	r3, r3, #2
 8009a52:	4413      	add	r3, r2
 8009a54:	881b      	ldrh	r3, [r3, #0]
 8009a56:	b29c      	uxth	r4, r3
 8009a58:	4623      	mov	r3, r4
 8009a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d014      	beq.n	8009a8c <USB_ActivateEndpoint+0x3f4>
 8009a62:	687a      	ldr	r2, [r7, #4]
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	781b      	ldrb	r3, [r3, #0]
 8009a68:	009b      	lsls	r3, r3, #2
 8009a6a:	4413      	add	r3, r2
 8009a6c:	881b      	ldrh	r3, [r3, #0]
 8009a6e:	b29b      	uxth	r3, r3
 8009a70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a78:	b29c      	uxth	r4, r3
 8009a7a:	687a      	ldr	r2, [r7, #4]
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	781b      	ldrb	r3, [r3, #0]
 8009a80:	009b      	lsls	r3, r3, #2
 8009a82:	441a      	add	r2, r3
 8009a84:	4b60      	ldr	r3, [pc, #384]	; (8009c08 <USB_ActivateEndpoint+0x570>)
 8009a86:	4323      	orrs	r3, r4
 8009a88:	b29b      	uxth	r3, r3
 8009a8a:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8009a8c:	687a      	ldr	r2, [r7, #4]
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	781b      	ldrb	r3, [r3, #0]
 8009a92:	009b      	lsls	r3, r3, #2
 8009a94:	4413      	add	r3, r2
 8009a96:	881b      	ldrh	r3, [r3, #0]
 8009a98:	b29b      	uxth	r3, r3
 8009a9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009aa2:	b29c      	uxth	r4, r3
 8009aa4:	687a      	ldr	r2, [r7, #4]
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	781b      	ldrb	r3, [r3, #0]
 8009aaa:	009b      	lsls	r3, r3, #2
 8009aac:	441a      	add	r2, r3
 8009aae:	4b56      	ldr	r3, [pc, #344]	; (8009c08 <USB_ActivateEndpoint+0x570>)
 8009ab0:	4323      	orrs	r3, r4
 8009ab2:	b29b      	uxth	r3, r3
 8009ab4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009ab6:	687a      	ldr	r2, [r7, #4]
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	781b      	ldrb	r3, [r3, #0]
 8009abc:	009b      	lsls	r3, r3, #2
 8009abe:	4413      	add	r3, r2
 8009ac0:	881b      	ldrh	r3, [r3, #0]
 8009ac2:	b29b      	uxth	r3, r3
 8009ac4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009ac8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009acc:	b29c      	uxth	r4, r3
 8009ace:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8009ad2:	b29c      	uxth	r4, r3
 8009ad4:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8009ad8:	b29c      	uxth	r4, r3
 8009ada:	687a      	ldr	r2, [r7, #4]
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	781b      	ldrb	r3, [r3, #0]
 8009ae0:	009b      	lsls	r3, r3, #2
 8009ae2:	441a      	add	r2, r3
 8009ae4:	4b49      	ldr	r3, [pc, #292]	; (8009c0c <USB_ActivateEndpoint+0x574>)
 8009ae6:	4323      	orrs	r3, r4
 8009ae8:	b29b      	uxth	r3, r3
 8009aea:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009aec:	687a      	ldr	r2, [r7, #4]
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	781b      	ldrb	r3, [r3, #0]
 8009af2:	009b      	lsls	r3, r3, #2
 8009af4:	4413      	add	r3, r2
 8009af6:	881b      	ldrh	r3, [r3, #0]
 8009af8:	b29b      	uxth	r3, r3
 8009afa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009afe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b02:	b29c      	uxth	r4, r3
 8009b04:	687a      	ldr	r2, [r7, #4]
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	781b      	ldrb	r3, [r3, #0]
 8009b0a:	009b      	lsls	r3, r3, #2
 8009b0c:	441a      	add	r2, r3
 8009b0e:	4b3f      	ldr	r3, [pc, #252]	; (8009c0c <USB_ActivateEndpoint+0x574>)
 8009b10:	4323      	orrs	r3, r4
 8009b12:	b29b      	uxth	r3, r3
 8009b14:	8013      	strh	r3, [r2, #0]
 8009b16:	e0a5      	b.n	8009c64 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009b18:	687a      	ldr	r2, [r7, #4]
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	781b      	ldrb	r3, [r3, #0]
 8009b1e:	009b      	lsls	r3, r3, #2
 8009b20:	4413      	add	r3, r2
 8009b22:	881b      	ldrh	r3, [r3, #0]
 8009b24:	b29c      	uxth	r4, r3
 8009b26:	4623      	mov	r3, r4
 8009b28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d014      	beq.n	8009b5a <USB_ActivateEndpoint+0x4c2>
 8009b30:	687a      	ldr	r2, [r7, #4]
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	781b      	ldrb	r3, [r3, #0]
 8009b36:	009b      	lsls	r3, r3, #2
 8009b38:	4413      	add	r3, r2
 8009b3a:	881b      	ldrh	r3, [r3, #0]
 8009b3c:	b29b      	uxth	r3, r3
 8009b3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b46:	b29c      	uxth	r4, r3
 8009b48:	687a      	ldr	r2, [r7, #4]
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	781b      	ldrb	r3, [r3, #0]
 8009b4e:	009b      	lsls	r3, r3, #2
 8009b50:	441a      	add	r2, r3
 8009b52:	4b2c      	ldr	r3, [pc, #176]	; (8009c04 <USB_ActivateEndpoint+0x56c>)
 8009b54:	4323      	orrs	r3, r4
 8009b56:	b29b      	uxth	r3, r3
 8009b58:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009b5a:	687a      	ldr	r2, [r7, #4]
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	781b      	ldrb	r3, [r3, #0]
 8009b60:	009b      	lsls	r3, r3, #2
 8009b62:	4413      	add	r3, r2
 8009b64:	881b      	ldrh	r3, [r3, #0]
 8009b66:	b29c      	uxth	r4, r3
 8009b68:	4623      	mov	r3, r4
 8009b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d014      	beq.n	8009b9c <USB_ActivateEndpoint+0x504>
 8009b72:	687a      	ldr	r2, [r7, #4]
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	781b      	ldrb	r3, [r3, #0]
 8009b78:	009b      	lsls	r3, r3, #2
 8009b7a:	4413      	add	r3, r2
 8009b7c:	881b      	ldrh	r3, [r3, #0]
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b88:	b29c      	uxth	r4, r3
 8009b8a:	687a      	ldr	r2, [r7, #4]
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	781b      	ldrb	r3, [r3, #0]
 8009b90:	009b      	lsls	r3, r3, #2
 8009b92:	441a      	add	r2, r3
 8009b94:	4b1c      	ldr	r3, [pc, #112]	; (8009c08 <USB_ActivateEndpoint+0x570>)
 8009b96:	4323      	orrs	r3, r4
 8009b98:	b29b      	uxth	r3, r3
 8009b9a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009b9c:	687a      	ldr	r2, [r7, #4]
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	781b      	ldrb	r3, [r3, #0]
 8009ba2:	009b      	lsls	r3, r3, #2
 8009ba4:	4413      	add	r3, r2
 8009ba6:	881b      	ldrh	r3, [r3, #0]
 8009ba8:	b29b      	uxth	r3, r3
 8009baa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bb2:	b29c      	uxth	r4, r3
 8009bb4:	687a      	ldr	r2, [r7, #4]
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	781b      	ldrb	r3, [r3, #0]
 8009bba:	009b      	lsls	r3, r3, #2
 8009bbc:	441a      	add	r2, r3
 8009bbe:	4b11      	ldr	r3, [pc, #68]	; (8009c04 <USB_ActivateEndpoint+0x56c>)
 8009bc0:	4323      	orrs	r3, r4
 8009bc2:	b29b      	uxth	r3, r3
 8009bc4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	78db      	ldrb	r3, [r3, #3]
 8009bca:	2b01      	cmp	r3, #1
 8009bcc:	d020      	beq.n	8009c10 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009bce:	687a      	ldr	r2, [r7, #4]
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	781b      	ldrb	r3, [r3, #0]
 8009bd4:	009b      	lsls	r3, r3, #2
 8009bd6:	4413      	add	r3, r2
 8009bd8:	881b      	ldrh	r3, [r3, #0]
 8009bda:	b29b      	uxth	r3, r3
 8009bdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009be0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009be4:	b29c      	uxth	r4, r3
 8009be6:	f084 0320 	eor.w	r3, r4, #32
 8009bea:	b29c      	uxth	r4, r3
 8009bec:	687a      	ldr	r2, [r7, #4]
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	781b      	ldrb	r3, [r3, #0]
 8009bf2:	009b      	lsls	r3, r3, #2
 8009bf4:	441a      	add	r2, r3
 8009bf6:	4b05      	ldr	r3, [pc, #20]	; (8009c0c <USB_ActivateEndpoint+0x574>)
 8009bf8:	4323      	orrs	r3, r4
 8009bfa:	b29b      	uxth	r3, r3
 8009bfc:	8013      	strh	r3, [r2, #0]
 8009bfe:	e01c      	b.n	8009c3a <USB_ActivateEndpoint+0x5a2>
 8009c00:	ffff8180 	.word	0xffff8180
 8009c04:	ffffc080 	.word	0xffffc080
 8009c08:	ffff80c0 	.word	0xffff80c0
 8009c0c:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009c10:	687a      	ldr	r2, [r7, #4]
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	781b      	ldrb	r3, [r3, #0]
 8009c16:	009b      	lsls	r3, r3, #2
 8009c18:	4413      	add	r3, r2
 8009c1a:	881b      	ldrh	r3, [r3, #0]
 8009c1c:	b29b      	uxth	r3, r3
 8009c1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c26:	b29c      	uxth	r4, r3
 8009c28:	687a      	ldr	r2, [r7, #4]
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	781b      	ldrb	r3, [r3, #0]
 8009c2e:	009b      	lsls	r3, r3, #2
 8009c30:	441a      	add	r2, r3
 8009c32:	4b0f      	ldr	r3, [pc, #60]	; (8009c70 <USB_ActivateEndpoint+0x5d8>)
 8009c34:	4323      	orrs	r3, r4
 8009c36:	b29b      	uxth	r3, r3
 8009c38:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009c3a:	687a      	ldr	r2, [r7, #4]
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	781b      	ldrb	r3, [r3, #0]
 8009c40:	009b      	lsls	r3, r3, #2
 8009c42:	4413      	add	r3, r2
 8009c44:	881b      	ldrh	r3, [r3, #0]
 8009c46:	b29b      	uxth	r3, r3
 8009c48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c50:	b29c      	uxth	r4, r3
 8009c52:	687a      	ldr	r2, [r7, #4]
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	781b      	ldrb	r3, [r3, #0]
 8009c58:	009b      	lsls	r3, r3, #2
 8009c5a:	441a      	add	r2, r3
 8009c5c:	4b04      	ldr	r3, [pc, #16]	; (8009c70 <USB_ActivateEndpoint+0x5d8>)
 8009c5e:	4323      	orrs	r3, r4
 8009c60:	b29b      	uxth	r3, r3
 8009c62:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8009c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3710      	adds	r7, #16
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bc90      	pop	{r4, r7}
 8009c6e:	4770      	bx	lr
 8009c70:	ffff8080 	.word	0xffff8080

08009c74 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009c74:	b490      	push	{r4, r7}
 8009c76:	b082      	sub	sp, #8
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
 8009c7c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	7b1b      	ldrb	r3, [r3, #12]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d171      	bne.n	8009d6a <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	785b      	ldrb	r3, [r3, #1]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d036      	beq.n	8009cfc <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009c8e:	687a      	ldr	r2, [r7, #4]
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	781b      	ldrb	r3, [r3, #0]
 8009c94:	009b      	lsls	r3, r3, #2
 8009c96:	4413      	add	r3, r2
 8009c98:	881b      	ldrh	r3, [r3, #0]
 8009c9a:	b29c      	uxth	r4, r3
 8009c9c:	4623      	mov	r3, r4
 8009c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d014      	beq.n	8009cd0 <USB_DeactivateEndpoint+0x5c>
 8009ca6:	687a      	ldr	r2, [r7, #4]
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	781b      	ldrb	r3, [r3, #0]
 8009cac:	009b      	lsls	r3, r3, #2
 8009cae:	4413      	add	r3, r2
 8009cb0:	881b      	ldrh	r3, [r3, #0]
 8009cb2:	b29b      	uxth	r3, r3
 8009cb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009cb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cbc:	b29c      	uxth	r4, r3
 8009cbe:	687a      	ldr	r2, [r7, #4]
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	781b      	ldrb	r3, [r3, #0]
 8009cc4:	009b      	lsls	r3, r3, #2
 8009cc6:	441a      	add	r2, r3
 8009cc8:	4b6b      	ldr	r3, [pc, #428]	; (8009e78 <USB_DeactivateEndpoint+0x204>)
 8009cca:	4323      	orrs	r3, r4
 8009ccc:	b29b      	uxth	r3, r3
 8009cce:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009cd0:	687a      	ldr	r2, [r7, #4]
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	781b      	ldrb	r3, [r3, #0]
 8009cd6:	009b      	lsls	r3, r3, #2
 8009cd8:	4413      	add	r3, r2
 8009cda:	881b      	ldrh	r3, [r3, #0]
 8009cdc:	b29b      	uxth	r3, r3
 8009cde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ce2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ce6:	b29c      	uxth	r4, r3
 8009ce8:	687a      	ldr	r2, [r7, #4]
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	781b      	ldrb	r3, [r3, #0]
 8009cee:	009b      	lsls	r3, r3, #2
 8009cf0:	441a      	add	r2, r3
 8009cf2:	4b62      	ldr	r3, [pc, #392]	; (8009e7c <USB_DeactivateEndpoint+0x208>)
 8009cf4:	4323      	orrs	r3, r4
 8009cf6:	b29b      	uxth	r3, r3
 8009cf8:	8013      	strh	r3, [r2, #0]
 8009cfa:	e144      	b.n	8009f86 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009cfc:	687a      	ldr	r2, [r7, #4]
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	781b      	ldrb	r3, [r3, #0]
 8009d02:	009b      	lsls	r3, r3, #2
 8009d04:	4413      	add	r3, r2
 8009d06:	881b      	ldrh	r3, [r3, #0]
 8009d08:	b29c      	uxth	r4, r3
 8009d0a:	4623      	mov	r3, r4
 8009d0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d014      	beq.n	8009d3e <USB_DeactivateEndpoint+0xca>
 8009d14:	687a      	ldr	r2, [r7, #4]
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	781b      	ldrb	r3, [r3, #0]
 8009d1a:	009b      	lsls	r3, r3, #2
 8009d1c:	4413      	add	r3, r2
 8009d1e:	881b      	ldrh	r3, [r3, #0]
 8009d20:	b29b      	uxth	r3, r3
 8009d22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d2a:	b29c      	uxth	r4, r3
 8009d2c:	687a      	ldr	r2, [r7, #4]
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	781b      	ldrb	r3, [r3, #0]
 8009d32:	009b      	lsls	r3, r3, #2
 8009d34:	441a      	add	r2, r3
 8009d36:	4b52      	ldr	r3, [pc, #328]	; (8009e80 <USB_DeactivateEndpoint+0x20c>)
 8009d38:	4323      	orrs	r3, r4
 8009d3a:	b29b      	uxth	r3, r3
 8009d3c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009d3e:	687a      	ldr	r2, [r7, #4]
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	781b      	ldrb	r3, [r3, #0]
 8009d44:	009b      	lsls	r3, r3, #2
 8009d46:	4413      	add	r3, r2
 8009d48:	881b      	ldrh	r3, [r3, #0]
 8009d4a:	b29b      	uxth	r3, r3
 8009d4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d54:	b29c      	uxth	r4, r3
 8009d56:	687a      	ldr	r2, [r7, #4]
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	781b      	ldrb	r3, [r3, #0]
 8009d5c:	009b      	lsls	r3, r3, #2
 8009d5e:	441a      	add	r2, r3
 8009d60:	4b46      	ldr	r3, [pc, #280]	; (8009e7c <USB_DeactivateEndpoint+0x208>)
 8009d62:	4323      	orrs	r3, r4
 8009d64:	b29b      	uxth	r3, r3
 8009d66:	8013      	strh	r3, [r2, #0]
 8009d68:	e10d      	b.n	8009f86 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	785b      	ldrb	r3, [r3, #1]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	f040 8088 	bne.w	8009e84 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009d74:	687a      	ldr	r2, [r7, #4]
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	781b      	ldrb	r3, [r3, #0]
 8009d7a:	009b      	lsls	r3, r3, #2
 8009d7c:	4413      	add	r3, r2
 8009d7e:	881b      	ldrh	r3, [r3, #0]
 8009d80:	b29c      	uxth	r4, r3
 8009d82:	4623      	mov	r3, r4
 8009d84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d014      	beq.n	8009db6 <USB_DeactivateEndpoint+0x142>
 8009d8c:	687a      	ldr	r2, [r7, #4]
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	781b      	ldrb	r3, [r3, #0]
 8009d92:	009b      	lsls	r3, r3, #2
 8009d94:	4413      	add	r3, r2
 8009d96:	881b      	ldrh	r3, [r3, #0]
 8009d98:	b29b      	uxth	r3, r3
 8009d9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009da2:	b29c      	uxth	r4, r3
 8009da4:	687a      	ldr	r2, [r7, #4]
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	781b      	ldrb	r3, [r3, #0]
 8009daa:	009b      	lsls	r3, r3, #2
 8009dac:	441a      	add	r2, r3
 8009dae:	4b34      	ldr	r3, [pc, #208]	; (8009e80 <USB_DeactivateEndpoint+0x20c>)
 8009db0:	4323      	orrs	r3, r4
 8009db2:	b29b      	uxth	r3, r3
 8009db4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009db6:	687a      	ldr	r2, [r7, #4]
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	781b      	ldrb	r3, [r3, #0]
 8009dbc:	009b      	lsls	r3, r3, #2
 8009dbe:	4413      	add	r3, r2
 8009dc0:	881b      	ldrh	r3, [r3, #0]
 8009dc2:	b29c      	uxth	r4, r3
 8009dc4:	4623      	mov	r3, r4
 8009dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d014      	beq.n	8009df8 <USB_DeactivateEndpoint+0x184>
 8009dce:	687a      	ldr	r2, [r7, #4]
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	781b      	ldrb	r3, [r3, #0]
 8009dd4:	009b      	lsls	r3, r3, #2
 8009dd6:	4413      	add	r3, r2
 8009dd8:	881b      	ldrh	r3, [r3, #0]
 8009dda:	b29b      	uxth	r3, r3
 8009ddc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009de0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009de4:	b29c      	uxth	r4, r3
 8009de6:	687a      	ldr	r2, [r7, #4]
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	781b      	ldrb	r3, [r3, #0]
 8009dec:	009b      	lsls	r3, r3, #2
 8009dee:	441a      	add	r2, r3
 8009df0:	4b21      	ldr	r3, [pc, #132]	; (8009e78 <USB_DeactivateEndpoint+0x204>)
 8009df2:	4323      	orrs	r3, r4
 8009df4:	b29b      	uxth	r3, r3
 8009df6:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009df8:	687a      	ldr	r2, [r7, #4]
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	781b      	ldrb	r3, [r3, #0]
 8009dfe:	009b      	lsls	r3, r3, #2
 8009e00:	4413      	add	r3, r2
 8009e02:	881b      	ldrh	r3, [r3, #0]
 8009e04:	b29b      	uxth	r3, r3
 8009e06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e0e:	b29c      	uxth	r4, r3
 8009e10:	687a      	ldr	r2, [r7, #4]
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	781b      	ldrb	r3, [r3, #0]
 8009e16:	009b      	lsls	r3, r3, #2
 8009e18:	441a      	add	r2, r3
 8009e1a:	4b17      	ldr	r3, [pc, #92]	; (8009e78 <USB_DeactivateEndpoint+0x204>)
 8009e1c:	4323      	orrs	r3, r4
 8009e1e:	b29b      	uxth	r3, r3
 8009e20:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009e22:	687a      	ldr	r2, [r7, #4]
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	781b      	ldrb	r3, [r3, #0]
 8009e28:	009b      	lsls	r3, r3, #2
 8009e2a:	4413      	add	r3, r2
 8009e2c:	881b      	ldrh	r3, [r3, #0]
 8009e2e:	b29b      	uxth	r3, r3
 8009e30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009e34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e38:	b29c      	uxth	r4, r3
 8009e3a:	687a      	ldr	r2, [r7, #4]
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	781b      	ldrb	r3, [r3, #0]
 8009e40:	009b      	lsls	r3, r3, #2
 8009e42:	441a      	add	r2, r3
 8009e44:	4b0d      	ldr	r3, [pc, #52]	; (8009e7c <USB_DeactivateEndpoint+0x208>)
 8009e46:	4323      	orrs	r3, r4
 8009e48:	b29b      	uxth	r3, r3
 8009e4a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009e4c:	687a      	ldr	r2, [r7, #4]
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	781b      	ldrb	r3, [r3, #0]
 8009e52:	009b      	lsls	r3, r3, #2
 8009e54:	4413      	add	r3, r2
 8009e56:	881b      	ldrh	r3, [r3, #0]
 8009e58:	b29b      	uxth	r3, r3
 8009e5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e62:	b29c      	uxth	r4, r3
 8009e64:	687a      	ldr	r2, [r7, #4]
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	781b      	ldrb	r3, [r3, #0]
 8009e6a:	009b      	lsls	r3, r3, #2
 8009e6c:	441a      	add	r2, r3
 8009e6e:	4b03      	ldr	r3, [pc, #12]	; (8009e7c <USB_DeactivateEndpoint+0x208>)
 8009e70:	4323      	orrs	r3, r4
 8009e72:	b29b      	uxth	r3, r3
 8009e74:	8013      	strh	r3, [r2, #0]
 8009e76:	e086      	b.n	8009f86 <USB_DeactivateEndpoint+0x312>
 8009e78:	ffff80c0 	.word	0xffff80c0
 8009e7c:	ffff8080 	.word	0xffff8080
 8009e80:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009e84:	687a      	ldr	r2, [r7, #4]
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	781b      	ldrb	r3, [r3, #0]
 8009e8a:	009b      	lsls	r3, r3, #2
 8009e8c:	4413      	add	r3, r2
 8009e8e:	881b      	ldrh	r3, [r3, #0]
 8009e90:	b29c      	uxth	r4, r3
 8009e92:	4623      	mov	r3, r4
 8009e94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d014      	beq.n	8009ec6 <USB_DeactivateEndpoint+0x252>
 8009e9c:	687a      	ldr	r2, [r7, #4]
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	781b      	ldrb	r3, [r3, #0]
 8009ea2:	009b      	lsls	r3, r3, #2
 8009ea4:	4413      	add	r3, r2
 8009ea6:	881b      	ldrh	r3, [r3, #0]
 8009ea8:	b29b      	uxth	r3, r3
 8009eaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009eb2:	b29c      	uxth	r4, r3
 8009eb4:	687a      	ldr	r2, [r7, #4]
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	781b      	ldrb	r3, [r3, #0]
 8009eba:	009b      	lsls	r3, r3, #2
 8009ebc:	441a      	add	r2, r3
 8009ebe:	4b35      	ldr	r3, [pc, #212]	; (8009f94 <USB_DeactivateEndpoint+0x320>)
 8009ec0:	4323      	orrs	r3, r4
 8009ec2:	b29b      	uxth	r3, r3
 8009ec4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009ec6:	687a      	ldr	r2, [r7, #4]
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	781b      	ldrb	r3, [r3, #0]
 8009ecc:	009b      	lsls	r3, r3, #2
 8009ece:	4413      	add	r3, r2
 8009ed0:	881b      	ldrh	r3, [r3, #0]
 8009ed2:	b29c      	uxth	r4, r3
 8009ed4:	4623      	mov	r3, r4
 8009ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d014      	beq.n	8009f08 <USB_DeactivateEndpoint+0x294>
 8009ede:	687a      	ldr	r2, [r7, #4]
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	781b      	ldrb	r3, [r3, #0]
 8009ee4:	009b      	lsls	r3, r3, #2
 8009ee6:	4413      	add	r3, r2
 8009ee8:	881b      	ldrh	r3, [r3, #0]
 8009eea:	b29b      	uxth	r3, r3
 8009eec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ef0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ef4:	b29c      	uxth	r4, r3
 8009ef6:	687a      	ldr	r2, [r7, #4]
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	781b      	ldrb	r3, [r3, #0]
 8009efc:	009b      	lsls	r3, r3, #2
 8009efe:	441a      	add	r2, r3
 8009f00:	4b25      	ldr	r3, [pc, #148]	; (8009f98 <USB_DeactivateEndpoint+0x324>)
 8009f02:	4323      	orrs	r3, r4
 8009f04:	b29b      	uxth	r3, r3
 8009f06:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009f08:	687a      	ldr	r2, [r7, #4]
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	781b      	ldrb	r3, [r3, #0]
 8009f0e:	009b      	lsls	r3, r3, #2
 8009f10:	4413      	add	r3, r2
 8009f12:	881b      	ldrh	r3, [r3, #0]
 8009f14:	b29b      	uxth	r3, r3
 8009f16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f1e:	b29c      	uxth	r4, r3
 8009f20:	687a      	ldr	r2, [r7, #4]
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	781b      	ldrb	r3, [r3, #0]
 8009f26:	009b      	lsls	r3, r3, #2
 8009f28:	441a      	add	r2, r3
 8009f2a:	4b1a      	ldr	r3, [pc, #104]	; (8009f94 <USB_DeactivateEndpoint+0x320>)
 8009f2c:	4323      	orrs	r3, r4
 8009f2e:	b29b      	uxth	r3, r3
 8009f30:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009f32:	687a      	ldr	r2, [r7, #4]
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	781b      	ldrb	r3, [r3, #0]
 8009f38:	009b      	lsls	r3, r3, #2
 8009f3a:	4413      	add	r3, r2
 8009f3c:	881b      	ldrh	r3, [r3, #0]
 8009f3e:	b29b      	uxth	r3, r3
 8009f40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f48:	b29c      	uxth	r4, r3
 8009f4a:	687a      	ldr	r2, [r7, #4]
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	781b      	ldrb	r3, [r3, #0]
 8009f50:	009b      	lsls	r3, r3, #2
 8009f52:	441a      	add	r2, r3
 8009f54:	4b11      	ldr	r3, [pc, #68]	; (8009f9c <USB_DeactivateEndpoint+0x328>)
 8009f56:	4323      	orrs	r3, r4
 8009f58:	b29b      	uxth	r3, r3
 8009f5a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009f5c:	687a      	ldr	r2, [r7, #4]
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	781b      	ldrb	r3, [r3, #0]
 8009f62:	009b      	lsls	r3, r3, #2
 8009f64:	4413      	add	r3, r2
 8009f66:	881b      	ldrh	r3, [r3, #0]
 8009f68:	b29b      	uxth	r3, r3
 8009f6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f72:	b29c      	uxth	r4, r3
 8009f74:	687a      	ldr	r2, [r7, #4]
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	781b      	ldrb	r3, [r3, #0]
 8009f7a:	009b      	lsls	r3, r3, #2
 8009f7c:	441a      	add	r2, r3
 8009f7e:	4b07      	ldr	r3, [pc, #28]	; (8009f9c <USB_DeactivateEndpoint+0x328>)
 8009f80:	4323      	orrs	r3, r4
 8009f82:	b29b      	uxth	r3, r3
 8009f84:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009f86:	2300      	movs	r3, #0
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	3708      	adds	r7, #8
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bc90      	pop	{r4, r7}
 8009f90:	4770      	bx	lr
 8009f92:	bf00      	nop
 8009f94:	ffffc080 	.word	0xffffc080
 8009f98:	ffff80c0 	.word	0xffff80c0
 8009f9c:	ffff8080 	.word	0xffff8080

08009fa0 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009fa0:	b590      	push	{r4, r7, lr}
 8009fa2:	b08d      	sub	sp, #52	; 0x34
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
 8009fa8:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	785b      	ldrb	r3, [r3, #1]
 8009fae:	2b01      	cmp	r3, #1
 8009fb0:	f040 8160 	bne.w	800a274 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	699a      	ldr	r2, [r3, #24]
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	691b      	ldr	r3, [r3, #16]
 8009fbc:	429a      	cmp	r2, r3
 8009fbe:	d909      	bls.n	8009fd4 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	691b      	ldr	r3, [r3, #16]
 8009fc4:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	699a      	ldr	r2, [r3, #24]
 8009fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fcc:	1ad2      	subs	r2, r2, r3
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	619a      	str	r2, [r3, #24]
 8009fd2:	e005      	b.n	8009fe0 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	699b      	ldr	r3, [r3, #24]
 8009fd8:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	7b1b      	ldrb	r3, [r3, #12]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d119      	bne.n	800a01c <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	6959      	ldr	r1, [r3, #20]
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	88da      	ldrh	r2, [r3, #6]
 8009ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ff2:	b29b      	uxth	r3, r3
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f000 fba2 	bl	800a73e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009ffa:	687c      	ldr	r4, [r7, #4]
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a002:	b29b      	uxth	r3, r3
 800a004:	441c      	add	r4, r3
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	781b      	ldrb	r3, [r3, #0]
 800a00a:	011b      	lsls	r3, r3, #4
 800a00c:	4423      	add	r3, r4
 800a00e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a012:	461c      	mov	r4, r3
 800a014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a016:	b29b      	uxth	r3, r3
 800a018:	8023      	strh	r3, [r4, #0]
 800a01a:	e10f      	b.n	800a23c <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a01c:	687a      	ldr	r2, [r7, #4]
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	781b      	ldrb	r3, [r3, #0]
 800a022:	009b      	lsls	r3, r3, #2
 800a024:	4413      	add	r3, r2
 800a026:	881b      	ldrh	r3, [r3, #0]
 800a028:	b29b      	uxth	r3, r3
 800a02a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d065      	beq.n	800a0fe <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a032:	687c      	ldr	r4, [r7, #4]
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	785b      	ldrb	r3, [r3, #1]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d148      	bne.n	800a0ce <USB_EPStartXfer+0x12e>
 800a03c:	687c      	ldr	r4, [r7, #4]
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a044:	b29b      	uxth	r3, r3
 800a046:	441c      	add	r4, r3
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	781b      	ldrb	r3, [r3, #0]
 800a04c:	011b      	lsls	r3, r3, #4
 800a04e:	4423      	add	r3, r4
 800a050:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a054:	461c      	mov	r4, r3
 800a056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d10e      	bne.n	800a07a <USB_EPStartXfer+0xda>
 800a05c:	8823      	ldrh	r3, [r4, #0]
 800a05e:	b29b      	uxth	r3, r3
 800a060:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a064:	b29b      	uxth	r3, r3
 800a066:	8023      	strh	r3, [r4, #0]
 800a068:	8823      	ldrh	r3, [r4, #0]
 800a06a:	b29b      	uxth	r3, r3
 800a06c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a070:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a074:	b29b      	uxth	r3, r3
 800a076:	8023      	strh	r3, [r4, #0]
 800a078:	e03d      	b.n	800a0f6 <USB_EPStartXfer+0x156>
 800a07a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a07c:	2b3e      	cmp	r3, #62	; 0x3e
 800a07e:	d810      	bhi.n	800a0a2 <USB_EPStartXfer+0x102>
 800a080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a082:	085b      	lsrs	r3, r3, #1
 800a084:	627b      	str	r3, [r7, #36]	; 0x24
 800a086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a088:	f003 0301 	and.w	r3, r3, #1
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d002      	beq.n	800a096 <USB_EPStartXfer+0xf6>
 800a090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a092:	3301      	adds	r3, #1
 800a094:	627b      	str	r3, [r7, #36]	; 0x24
 800a096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a098:	b29b      	uxth	r3, r3
 800a09a:	029b      	lsls	r3, r3, #10
 800a09c:	b29b      	uxth	r3, r3
 800a09e:	8023      	strh	r3, [r4, #0]
 800a0a0:	e029      	b.n	800a0f6 <USB_EPStartXfer+0x156>
 800a0a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a4:	095b      	lsrs	r3, r3, #5
 800a0a6:	627b      	str	r3, [r7, #36]	; 0x24
 800a0a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0aa:	f003 031f 	and.w	r3, r3, #31
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d102      	bne.n	800a0b8 <USB_EPStartXfer+0x118>
 800a0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b4:	3b01      	subs	r3, #1
 800a0b6:	627b      	str	r3, [r7, #36]	; 0x24
 800a0b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ba:	b29b      	uxth	r3, r3
 800a0bc:	029b      	lsls	r3, r3, #10
 800a0be:	b29b      	uxth	r3, r3
 800a0c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0c8:	b29b      	uxth	r3, r3
 800a0ca:	8023      	strh	r3, [r4, #0]
 800a0cc:	e013      	b.n	800a0f6 <USB_EPStartXfer+0x156>
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	785b      	ldrb	r3, [r3, #1]
 800a0d2:	2b01      	cmp	r3, #1
 800a0d4:	d10f      	bne.n	800a0f6 <USB_EPStartXfer+0x156>
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a0dc:	b29b      	uxth	r3, r3
 800a0de:	441c      	add	r4, r3
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	781b      	ldrb	r3, [r3, #0]
 800a0e4:	011b      	lsls	r3, r3, #4
 800a0e6:	4423      	add	r3, r4
 800a0e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a0ec:	60fb      	str	r3, [r7, #12]
 800a0ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0f0:	b29a      	uxth	r2, r3
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	895b      	ldrh	r3, [r3, #10]
 800a0fa:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a0fc:	e063      	b.n	800a1c6 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	785b      	ldrb	r3, [r3, #1]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d148      	bne.n	800a198 <USB_EPStartXfer+0x1f8>
 800a106:	687c      	ldr	r4, [r7, #4]
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a10e:	b29b      	uxth	r3, r3
 800a110:	441c      	add	r4, r3
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	781b      	ldrb	r3, [r3, #0]
 800a116:	011b      	lsls	r3, r3, #4
 800a118:	4423      	add	r3, r4
 800a11a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a11e:	461c      	mov	r4, r3
 800a120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a122:	2b00      	cmp	r3, #0
 800a124:	d10e      	bne.n	800a144 <USB_EPStartXfer+0x1a4>
 800a126:	8823      	ldrh	r3, [r4, #0]
 800a128:	b29b      	uxth	r3, r3
 800a12a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a12e:	b29b      	uxth	r3, r3
 800a130:	8023      	strh	r3, [r4, #0]
 800a132:	8823      	ldrh	r3, [r4, #0]
 800a134:	b29b      	uxth	r3, r3
 800a136:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a13a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a13e:	b29b      	uxth	r3, r3
 800a140:	8023      	strh	r3, [r4, #0]
 800a142:	e03d      	b.n	800a1c0 <USB_EPStartXfer+0x220>
 800a144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a146:	2b3e      	cmp	r3, #62	; 0x3e
 800a148:	d810      	bhi.n	800a16c <USB_EPStartXfer+0x1cc>
 800a14a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a14c:	085b      	lsrs	r3, r3, #1
 800a14e:	623b      	str	r3, [r7, #32]
 800a150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a152:	f003 0301 	and.w	r3, r3, #1
 800a156:	2b00      	cmp	r3, #0
 800a158:	d002      	beq.n	800a160 <USB_EPStartXfer+0x1c0>
 800a15a:	6a3b      	ldr	r3, [r7, #32]
 800a15c:	3301      	adds	r3, #1
 800a15e:	623b      	str	r3, [r7, #32]
 800a160:	6a3b      	ldr	r3, [r7, #32]
 800a162:	b29b      	uxth	r3, r3
 800a164:	029b      	lsls	r3, r3, #10
 800a166:	b29b      	uxth	r3, r3
 800a168:	8023      	strh	r3, [r4, #0]
 800a16a:	e029      	b.n	800a1c0 <USB_EPStartXfer+0x220>
 800a16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a16e:	095b      	lsrs	r3, r3, #5
 800a170:	623b      	str	r3, [r7, #32]
 800a172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a174:	f003 031f 	and.w	r3, r3, #31
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d102      	bne.n	800a182 <USB_EPStartXfer+0x1e2>
 800a17c:	6a3b      	ldr	r3, [r7, #32]
 800a17e:	3b01      	subs	r3, #1
 800a180:	623b      	str	r3, [r7, #32]
 800a182:	6a3b      	ldr	r3, [r7, #32]
 800a184:	b29b      	uxth	r3, r3
 800a186:	029b      	lsls	r3, r3, #10
 800a188:	b29b      	uxth	r3, r3
 800a18a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a18e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a192:	b29b      	uxth	r3, r3
 800a194:	8023      	strh	r3, [r4, #0]
 800a196:	e013      	b.n	800a1c0 <USB_EPStartXfer+0x220>
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	785b      	ldrb	r3, [r3, #1]
 800a19c:	2b01      	cmp	r3, #1
 800a19e:	d10f      	bne.n	800a1c0 <USB_EPStartXfer+0x220>
 800a1a0:	687c      	ldr	r4, [r7, #4]
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a1a8:	b29b      	uxth	r3, r3
 800a1aa:	441c      	add	r4, r3
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	781b      	ldrb	r3, [r3, #0]
 800a1b0:	011b      	lsls	r3, r3, #4
 800a1b2:	4423      	add	r3, r4
 800a1b4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a1b8:	461c      	mov	r4, r3
 800a1ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1bc:	b29b      	uxth	r3, r3
 800a1be:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	891b      	ldrh	r3, [r3, #8]
 800a1c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	6959      	ldr	r1, [r3, #20]
 800a1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1cc:	b29b      	uxth	r3, r3
 800a1ce:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f000 fab4 	bl	800a73e <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	785b      	ldrb	r3, [r3, #1]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d115      	bne.n	800a20a <USB_EPStartXfer+0x26a>
 800a1de:	687a      	ldr	r2, [r7, #4]
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	781b      	ldrb	r3, [r3, #0]
 800a1e4:	009b      	lsls	r3, r3, #2
 800a1e6:	4413      	add	r3, r2
 800a1e8:	881b      	ldrh	r3, [r3, #0]
 800a1ea:	b29b      	uxth	r3, r3
 800a1ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1f4:	b29c      	uxth	r4, r3
 800a1f6:	687a      	ldr	r2, [r7, #4]
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	781b      	ldrb	r3, [r3, #0]
 800a1fc:	009b      	lsls	r3, r3, #2
 800a1fe:	441a      	add	r2, r3
 800a200:	4b9a      	ldr	r3, [pc, #616]	; (800a46c <USB_EPStartXfer+0x4cc>)
 800a202:	4323      	orrs	r3, r4
 800a204:	b29b      	uxth	r3, r3
 800a206:	8013      	strh	r3, [r2, #0]
 800a208:	e018      	b.n	800a23c <USB_EPStartXfer+0x29c>
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	785b      	ldrb	r3, [r3, #1]
 800a20e:	2b01      	cmp	r3, #1
 800a210:	d114      	bne.n	800a23c <USB_EPStartXfer+0x29c>
 800a212:	687a      	ldr	r2, [r7, #4]
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	781b      	ldrb	r3, [r3, #0]
 800a218:	009b      	lsls	r3, r3, #2
 800a21a:	4413      	add	r3, r2
 800a21c:	881b      	ldrh	r3, [r3, #0]
 800a21e:	b29b      	uxth	r3, r3
 800a220:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a224:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a228:	b29c      	uxth	r4, r3
 800a22a:	687a      	ldr	r2, [r7, #4]
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	781b      	ldrb	r3, [r3, #0]
 800a230:	009b      	lsls	r3, r3, #2
 800a232:	441a      	add	r2, r3
 800a234:	4b8e      	ldr	r3, [pc, #568]	; (800a470 <USB_EPStartXfer+0x4d0>)
 800a236:	4323      	orrs	r3, r4
 800a238:	b29b      	uxth	r3, r3
 800a23a:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a23c:	687a      	ldr	r2, [r7, #4]
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	781b      	ldrb	r3, [r3, #0]
 800a242:	009b      	lsls	r3, r3, #2
 800a244:	4413      	add	r3, r2
 800a246:	881b      	ldrh	r3, [r3, #0]
 800a248:	b29b      	uxth	r3, r3
 800a24a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a24e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a252:	b29c      	uxth	r4, r3
 800a254:	f084 0310 	eor.w	r3, r4, #16
 800a258:	b29c      	uxth	r4, r3
 800a25a:	f084 0320 	eor.w	r3, r4, #32
 800a25e:	b29c      	uxth	r4, r3
 800a260:	687a      	ldr	r2, [r7, #4]
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	781b      	ldrb	r3, [r3, #0]
 800a266:	009b      	lsls	r3, r3, #2
 800a268:	441a      	add	r2, r3
 800a26a:	4b82      	ldr	r3, [pc, #520]	; (800a474 <USB_EPStartXfer+0x4d4>)
 800a26c:	4323      	orrs	r3, r4
 800a26e:	b29b      	uxth	r3, r3
 800a270:	8013      	strh	r3, [r2, #0]
 800a272:	e146      	b.n	800a502 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	699a      	ldr	r2, [r3, #24]
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	691b      	ldr	r3, [r3, #16]
 800a27c:	429a      	cmp	r2, r3
 800a27e:	d909      	bls.n	800a294 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	691b      	ldr	r3, [r3, #16]
 800a284:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	699a      	ldr	r2, [r3, #24]
 800a28a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a28c:	1ad2      	subs	r2, r2, r3
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	619a      	str	r2, [r3, #24]
 800a292:	e005      	b.n	800a2a0 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	699b      	ldr	r3, [r3, #24]
 800a298:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	2200      	movs	r2, #0
 800a29e:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	7b1b      	ldrb	r3, [r3, #12]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d148      	bne.n	800a33a <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a2a8:	687c      	ldr	r4, [r7, #4]
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a2b0:	b29b      	uxth	r3, r3
 800a2b2:	441c      	add	r4, r3
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	781b      	ldrb	r3, [r3, #0]
 800a2b8:	011b      	lsls	r3, r3, #4
 800a2ba:	4423      	add	r3, r4
 800a2bc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a2c0:	461c      	mov	r4, r3
 800a2c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d10e      	bne.n	800a2e6 <USB_EPStartXfer+0x346>
 800a2c8:	8823      	ldrh	r3, [r4, #0]
 800a2ca:	b29b      	uxth	r3, r3
 800a2cc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a2d0:	b29b      	uxth	r3, r3
 800a2d2:	8023      	strh	r3, [r4, #0]
 800a2d4:	8823      	ldrh	r3, [r4, #0]
 800a2d6:	b29b      	uxth	r3, r3
 800a2d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2e0:	b29b      	uxth	r3, r3
 800a2e2:	8023      	strh	r3, [r4, #0]
 800a2e4:	e0f2      	b.n	800a4cc <USB_EPStartXfer+0x52c>
 800a2e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2e8:	2b3e      	cmp	r3, #62	; 0x3e
 800a2ea:	d810      	bhi.n	800a30e <USB_EPStartXfer+0x36e>
 800a2ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ee:	085b      	lsrs	r3, r3, #1
 800a2f0:	61fb      	str	r3, [r7, #28]
 800a2f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2f4:	f003 0301 	and.w	r3, r3, #1
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d002      	beq.n	800a302 <USB_EPStartXfer+0x362>
 800a2fc:	69fb      	ldr	r3, [r7, #28]
 800a2fe:	3301      	adds	r3, #1
 800a300:	61fb      	str	r3, [r7, #28]
 800a302:	69fb      	ldr	r3, [r7, #28]
 800a304:	b29b      	uxth	r3, r3
 800a306:	029b      	lsls	r3, r3, #10
 800a308:	b29b      	uxth	r3, r3
 800a30a:	8023      	strh	r3, [r4, #0]
 800a30c:	e0de      	b.n	800a4cc <USB_EPStartXfer+0x52c>
 800a30e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a310:	095b      	lsrs	r3, r3, #5
 800a312:	61fb      	str	r3, [r7, #28]
 800a314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a316:	f003 031f 	and.w	r3, r3, #31
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d102      	bne.n	800a324 <USB_EPStartXfer+0x384>
 800a31e:	69fb      	ldr	r3, [r7, #28]
 800a320:	3b01      	subs	r3, #1
 800a322:	61fb      	str	r3, [r7, #28]
 800a324:	69fb      	ldr	r3, [r7, #28]
 800a326:	b29b      	uxth	r3, r3
 800a328:	029b      	lsls	r3, r3, #10
 800a32a:	b29b      	uxth	r3, r3
 800a32c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a330:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a334:	b29b      	uxth	r3, r3
 800a336:	8023      	strh	r3, [r4, #0]
 800a338:	e0c8      	b.n	800a4cc <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	785b      	ldrb	r3, [r3, #1]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d148      	bne.n	800a3d4 <USB_EPStartXfer+0x434>
 800a342:	687c      	ldr	r4, [r7, #4]
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a34a:	b29b      	uxth	r3, r3
 800a34c:	441c      	add	r4, r3
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	781b      	ldrb	r3, [r3, #0]
 800a352:	011b      	lsls	r3, r3, #4
 800a354:	4423      	add	r3, r4
 800a356:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a35a:	461c      	mov	r4, r3
 800a35c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d10e      	bne.n	800a380 <USB_EPStartXfer+0x3e0>
 800a362:	8823      	ldrh	r3, [r4, #0]
 800a364:	b29b      	uxth	r3, r3
 800a366:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a36a:	b29b      	uxth	r3, r3
 800a36c:	8023      	strh	r3, [r4, #0]
 800a36e:	8823      	ldrh	r3, [r4, #0]
 800a370:	b29b      	uxth	r3, r3
 800a372:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a376:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a37a:	b29b      	uxth	r3, r3
 800a37c:	8023      	strh	r3, [r4, #0]
 800a37e:	e03d      	b.n	800a3fc <USB_EPStartXfer+0x45c>
 800a380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a382:	2b3e      	cmp	r3, #62	; 0x3e
 800a384:	d810      	bhi.n	800a3a8 <USB_EPStartXfer+0x408>
 800a386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a388:	085b      	lsrs	r3, r3, #1
 800a38a:	61bb      	str	r3, [r7, #24]
 800a38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a38e:	f003 0301 	and.w	r3, r3, #1
 800a392:	2b00      	cmp	r3, #0
 800a394:	d002      	beq.n	800a39c <USB_EPStartXfer+0x3fc>
 800a396:	69bb      	ldr	r3, [r7, #24]
 800a398:	3301      	adds	r3, #1
 800a39a:	61bb      	str	r3, [r7, #24]
 800a39c:	69bb      	ldr	r3, [r7, #24]
 800a39e:	b29b      	uxth	r3, r3
 800a3a0:	029b      	lsls	r3, r3, #10
 800a3a2:	b29b      	uxth	r3, r3
 800a3a4:	8023      	strh	r3, [r4, #0]
 800a3a6:	e029      	b.n	800a3fc <USB_EPStartXfer+0x45c>
 800a3a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3aa:	095b      	lsrs	r3, r3, #5
 800a3ac:	61bb      	str	r3, [r7, #24]
 800a3ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3b0:	f003 031f 	and.w	r3, r3, #31
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d102      	bne.n	800a3be <USB_EPStartXfer+0x41e>
 800a3b8:	69bb      	ldr	r3, [r7, #24]
 800a3ba:	3b01      	subs	r3, #1
 800a3bc:	61bb      	str	r3, [r7, #24]
 800a3be:	69bb      	ldr	r3, [r7, #24]
 800a3c0:	b29b      	uxth	r3, r3
 800a3c2:	029b      	lsls	r3, r3, #10
 800a3c4:	b29b      	uxth	r3, r3
 800a3c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3ce:	b29b      	uxth	r3, r3
 800a3d0:	8023      	strh	r3, [r4, #0]
 800a3d2:	e013      	b.n	800a3fc <USB_EPStartXfer+0x45c>
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	785b      	ldrb	r3, [r3, #1]
 800a3d8:	2b01      	cmp	r3, #1
 800a3da:	d10f      	bne.n	800a3fc <USB_EPStartXfer+0x45c>
 800a3dc:	687c      	ldr	r4, [r7, #4]
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a3e4:	b29b      	uxth	r3, r3
 800a3e6:	441c      	add	r4, r3
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	781b      	ldrb	r3, [r3, #0]
 800a3ec:	011b      	lsls	r3, r3, #4
 800a3ee:	4423      	add	r3, r4
 800a3f0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a3f4:	461c      	mov	r4, r3
 800a3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3f8:	b29b      	uxth	r3, r3
 800a3fa:	8023      	strh	r3, [r4, #0]
 800a3fc:	687c      	ldr	r4, [r7, #4]
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	785b      	ldrb	r3, [r3, #1]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d14e      	bne.n	800a4a4 <USB_EPStartXfer+0x504>
 800a406:	687c      	ldr	r4, [r7, #4]
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a40e:	b29b      	uxth	r3, r3
 800a410:	441c      	add	r4, r3
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	781b      	ldrb	r3, [r3, #0]
 800a416:	011b      	lsls	r3, r3, #4
 800a418:	4423      	add	r3, r4
 800a41a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a41e:	461c      	mov	r4, r3
 800a420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a422:	2b00      	cmp	r3, #0
 800a424:	d10e      	bne.n	800a444 <USB_EPStartXfer+0x4a4>
 800a426:	8823      	ldrh	r3, [r4, #0]
 800a428:	b29b      	uxth	r3, r3
 800a42a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a42e:	b29b      	uxth	r3, r3
 800a430:	8023      	strh	r3, [r4, #0]
 800a432:	8823      	ldrh	r3, [r4, #0]
 800a434:	b29b      	uxth	r3, r3
 800a436:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a43a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a43e:	b29b      	uxth	r3, r3
 800a440:	8023      	strh	r3, [r4, #0]
 800a442:	e043      	b.n	800a4cc <USB_EPStartXfer+0x52c>
 800a444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a446:	2b3e      	cmp	r3, #62	; 0x3e
 800a448:	d816      	bhi.n	800a478 <USB_EPStartXfer+0x4d8>
 800a44a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a44c:	085b      	lsrs	r3, r3, #1
 800a44e:	617b      	str	r3, [r7, #20]
 800a450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a452:	f003 0301 	and.w	r3, r3, #1
 800a456:	2b00      	cmp	r3, #0
 800a458:	d002      	beq.n	800a460 <USB_EPStartXfer+0x4c0>
 800a45a:	697b      	ldr	r3, [r7, #20]
 800a45c:	3301      	adds	r3, #1
 800a45e:	617b      	str	r3, [r7, #20]
 800a460:	697b      	ldr	r3, [r7, #20]
 800a462:	b29b      	uxth	r3, r3
 800a464:	029b      	lsls	r3, r3, #10
 800a466:	b29b      	uxth	r3, r3
 800a468:	8023      	strh	r3, [r4, #0]
 800a46a:	e02f      	b.n	800a4cc <USB_EPStartXfer+0x52c>
 800a46c:	ffff80c0 	.word	0xffff80c0
 800a470:	ffffc080 	.word	0xffffc080
 800a474:	ffff8080 	.word	0xffff8080
 800a478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a47a:	095b      	lsrs	r3, r3, #5
 800a47c:	617b      	str	r3, [r7, #20]
 800a47e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a480:	f003 031f 	and.w	r3, r3, #31
 800a484:	2b00      	cmp	r3, #0
 800a486:	d102      	bne.n	800a48e <USB_EPStartXfer+0x4ee>
 800a488:	697b      	ldr	r3, [r7, #20]
 800a48a:	3b01      	subs	r3, #1
 800a48c:	617b      	str	r3, [r7, #20]
 800a48e:	697b      	ldr	r3, [r7, #20]
 800a490:	b29b      	uxth	r3, r3
 800a492:	029b      	lsls	r3, r3, #10
 800a494:	b29b      	uxth	r3, r3
 800a496:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a49a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a49e:	b29b      	uxth	r3, r3
 800a4a0:	8023      	strh	r3, [r4, #0]
 800a4a2:	e013      	b.n	800a4cc <USB_EPStartXfer+0x52c>
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	785b      	ldrb	r3, [r3, #1]
 800a4a8:	2b01      	cmp	r3, #1
 800a4aa:	d10f      	bne.n	800a4cc <USB_EPStartXfer+0x52c>
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a4b2:	b29b      	uxth	r3, r3
 800a4b4:	441c      	add	r4, r3
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	781b      	ldrb	r3, [r3, #0]
 800a4ba:	011b      	lsls	r3, r3, #4
 800a4bc:	4423      	add	r3, r4
 800a4be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a4c2:	613b      	str	r3, [r7, #16]
 800a4c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4c6:	b29a      	uxth	r2, r3
 800a4c8:	693b      	ldr	r3, [r7, #16]
 800a4ca:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a4cc:	687a      	ldr	r2, [r7, #4]
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	781b      	ldrb	r3, [r3, #0]
 800a4d2:	009b      	lsls	r3, r3, #2
 800a4d4:	4413      	add	r3, r2
 800a4d6:	881b      	ldrh	r3, [r3, #0]
 800a4d8:	b29b      	uxth	r3, r3
 800a4da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a4de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4e2:	b29c      	uxth	r4, r3
 800a4e4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800a4e8:	b29c      	uxth	r4, r3
 800a4ea:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800a4ee:	b29c      	uxth	r4, r3
 800a4f0:	687a      	ldr	r2, [r7, #4]
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	781b      	ldrb	r3, [r3, #0]
 800a4f6:	009b      	lsls	r3, r3, #2
 800a4f8:	441a      	add	r2, r3
 800a4fa:	4b04      	ldr	r3, [pc, #16]	; (800a50c <USB_EPStartXfer+0x56c>)
 800a4fc:	4323      	orrs	r3, r4
 800a4fe:	b29b      	uxth	r3, r3
 800a500:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a502:	2300      	movs	r3, #0
}
 800a504:	4618      	mov	r0, r3
 800a506:	3734      	adds	r7, #52	; 0x34
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd90      	pop	{r4, r7, pc}
 800a50c:	ffff8080 	.word	0xffff8080

0800a510 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a510:	b490      	push	{r4, r7}
 800a512:	b082      	sub	sp, #8
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
 800a518:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	785b      	ldrb	r3, [r3, #1]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d018      	beq.n	800a554 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a522:	687a      	ldr	r2, [r7, #4]
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	781b      	ldrb	r3, [r3, #0]
 800a528:	009b      	lsls	r3, r3, #2
 800a52a:	4413      	add	r3, r2
 800a52c:	881b      	ldrh	r3, [r3, #0]
 800a52e:	b29b      	uxth	r3, r3
 800a530:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a534:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a538:	b29c      	uxth	r4, r3
 800a53a:	f084 0310 	eor.w	r3, r4, #16
 800a53e:	b29c      	uxth	r4, r3
 800a540:	687a      	ldr	r2, [r7, #4]
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	781b      	ldrb	r3, [r3, #0]
 800a546:	009b      	lsls	r3, r3, #2
 800a548:	441a      	add	r2, r3
 800a54a:	4b11      	ldr	r3, [pc, #68]	; (800a590 <USB_EPSetStall+0x80>)
 800a54c:	4323      	orrs	r3, r4
 800a54e:	b29b      	uxth	r3, r3
 800a550:	8013      	strh	r3, [r2, #0]
 800a552:	e017      	b.n	800a584 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a554:	687a      	ldr	r2, [r7, #4]
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	781b      	ldrb	r3, [r3, #0]
 800a55a:	009b      	lsls	r3, r3, #2
 800a55c:	4413      	add	r3, r2
 800a55e:	881b      	ldrh	r3, [r3, #0]
 800a560:	b29b      	uxth	r3, r3
 800a562:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a56a:	b29c      	uxth	r4, r3
 800a56c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800a570:	b29c      	uxth	r4, r3
 800a572:	687a      	ldr	r2, [r7, #4]
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	781b      	ldrb	r3, [r3, #0]
 800a578:	009b      	lsls	r3, r3, #2
 800a57a:	441a      	add	r2, r3
 800a57c:	4b04      	ldr	r3, [pc, #16]	; (800a590 <USB_EPSetStall+0x80>)
 800a57e:	4323      	orrs	r3, r4
 800a580:	b29b      	uxth	r3, r3
 800a582:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a584:	2300      	movs	r3, #0
}
 800a586:	4618      	mov	r0, r3
 800a588:	3708      	adds	r7, #8
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bc90      	pop	{r4, r7}
 800a58e:	4770      	bx	lr
 800a590:	ffff8080 	.word	0xffff8080

0800a594 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a594:	b490      	push	{r4, r7}
 800a596:	b082      	sub	sp, #8
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
 800a59c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	7b1b      	ldrb	r3, [r3, #12]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d17d      	bne.n	800a6a2 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	785b      	ldrb	r3, [r3, #1]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d03d      	beq.n	800a62a <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a5ae:	687a      	ldr	r2, [r7, #4]
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	781b      	ldrb	r3, [r3, #0]
 800a5b4:	009b      	lsls	r3, r3, #2
 800a5b6:	4413      	add	r3, r2
 800a5b8:	881b      	ldrh	r3, [r3, #0]
 800a5ba:	b29c      	uxth	r4, r3
 800a5bc:	4623      	mov	r3, r4
 800a5be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d014      	beq.n	800a5f0 <USB_EPClearStall+0x5c>
 800a5c6:	687a      	ldr	r2, [r7, #4]
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	781b      	ldrb	r3, [r3, #0]
 800a5cc:	009b      	lsls	r3, r3, #2
 800a5ce:	4413      	add	r3, r2
 800a5d0:	881b      	ldrh	r3, [r3, #0]
 800a5d2:	b29b      	uxth	r3, r3
 800a5d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a5d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5dc:	b29c      	uxth	r4, r3
 800a5de:	687a      	ldr	r2, [r7, #4]
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	781b      	ldrb	r3, [r3, #0]
 800a5e4:	009b      	lsls	r3, r3, #2
 800a5e6:	441a      	add	r2, r3
 800a5e8:	4b31      	ldr	r3, [pc, #196]	; (800a6b0 <USB_EPClearStall+0x11c>)
 800a5ea:	4323      	orrs	r3, r4
 800a5ec:	b29b      	uxth	r3, r3
 800a5ee:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	78db      	ldrb	r3, [r3, #3]
 800a5f4:	2b01      	cmp	r3, #1
 800a5f6:	d054      	beq.n	800a6a2 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a5f8:	687a      	ldr	r2, [r7, #4]
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	781b      	ldrb	r3, [r3, #0]
 800a5fe:	009b      	lsls	r3, r3, #2
 800a600:	4413      	add	r3, r2
 800a602:	881b      	ldrh	r3, [r3, #0]
 800a604:	b29b      	uxth	r3, r3
 800a606:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a60a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a60e:	b29c      	uxth	r4, r3
 800a610:	f084 0320 	eor.w	r3, r4, #32
 800a614:	b29c      	uxth	r4, r3
 800a616:	687a      	ldr	r2, [r7, #4]
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	781b      	ldrb	r3, [r3, #0]
 800a61c:	009b      	lsls	r3, r3, #2
 800a61e:	441a      	add	r2, r3
 800a620:	4b24      	ldr	r3, [pc, #144]	; (800a6b4 <USB_EPClearStall+0x120>)
 800a622:	4323      	orrs	r3, r4
 800a624:	b29b      	uxth	r3, r3
 800a626:	8013      	strh	r3, [r2, #0]
 800a628:	e03b      	b.n	800a6a2 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a62a:	687a      	ldr	r2, [r7, #4]
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	781b      	ldrb	r3, [r3, #0]
 800a630:	009b      	lsls	r3, r3, #2
 800a632:	4413      	add	r3, r2
 800a634:	881b      	ldrh	r3, [r3, #0]
 800a636:	b29c      	uxth	r4, r3
 800a638:	4623      	mov	r3, r4
 800a63a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d014      	beq.n	800a66c <USB_EPClearStall+0xd8>
 800a642:	687a      	ldr	r2, [r7, #4]
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	781b      	ldrb	r3, [r3, #0]
 800a648:	009b      	lsls	r3, r3, #2
 800a64a:	4413      	add	r3, r2
 800a64c:	881b      	ldrh	r3, [r3, #0]
 800a64e:	b29b      	uxth	r3, r3
 800a650:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a654:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a658:	b29c      	uxth	r4, r3
 800a65a:	687a      	ldr	r2, [r7, #4]
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	781b      	ldrb	r3, [r3, #0]
 800a660:	009b      	lsls	r3, r3, #2
 800a662:	441a      	add	r2, r3
 800a664:	4b14      	ldr	r3, [pc, #80]	; (800a6b8 <USB_EPClearStall+0x124>)
 800a666:	4323      	orrs	r3, r4
 800a668:	b29b      	uxth	r3, r3
 800a66a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a66c:	687a      	ldr	r2, [r7, #4]
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	781b      	ldrb	r3, [r3, #0]
 800a672:	009b      	lsls	r3, r3, #2
 800a674:	4413      	add	r3, r2
 800a676:	881b      	ldrh	r3, [r3, #0]
 800a678:	b29b      	uxth	r3, r3
 800a67a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a67e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a682:	b29c      	uxth	r4, r3
 800a684:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800a688:	b29c      	uxth	r4, r3
 800a68a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800a68e:	b29c      	uxth	r4, r3
 800a690:	687a      	ldr	r2, [r7, #4]
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	781b      	ldrb	r3, [r3, #0]
 800a696:	009b      	lsls	r3, r3, #2
 800a698:	441a      	add	r2, r3
 800a69a:	4b06      	ldr	r3, [pc, #24]	; (800a6b4 <USB_EPClearStall+0x120>)
 800a69c:	4323      	orrs	r3, r4
 800a69e:	b29b      	uxth	r3, r3
 800a6a0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a6a2:	2300      	movs	r3, #0
}
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	3708      	adds	r7, #8
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bc90      	pop	{r4, r7}
 800a6ac:	4770      	bx	lr
 800a6ae:	bf00      	nop
 800a6b0:	ffff80c0 	.word	0xffff80c0
 800a6b4:	ffff8080 	.word	0xffff8080
 800a6b8:	ffffc080 	.word	0xffffc080

0800a6bc <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b083      	sub	sp, #12
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
 800a6c4:	460b      	mov	r3, r1
 800a6c6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a6c8:	78fb      	ldrb	r3, [r7, #3]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d103      	bne.n	800a6d6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2280      	movs	r2, #128	; 0x80
 800a6d2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800a6d6:	2300      	movs	r3, #0
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	370c      	adds	r7, #12
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bc80      	pop	{r7}
 800a6e0:	4770      	bx	lr

0800a6e2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a6e2:	b480      	push	{r7}
 800a6e4:	b083      	sub	sp, #12
 800a6e6:	af00      	add	r7, sp, #0
 800a6e8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a6ea:	2300      	movs	r3, #0
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	370c      	adds	r7, #12
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bc80      	pop	{r7}
 800a6f4:	4770      	bx	lr

0800a6f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800a6f6:	b480      	push	{r7}
 800a6f8:	b083      	sub	sp, #12
 800a6fa:	af00      	add	r7, sp, #0
 800a6fc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a6fe:	2300      	movs	r3, #0
}
 800a700:	4618      	mov	r0, r3
 800a702:	370c      	adds	r7, #12
 800a704:	46bd      	mov	sp, r7
 800a706:	bc80      	pop	{r7}
 800a708:	4770      	bx	lr

0800a70a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800a70a:	b480      	push	{r7}
 800a70c:	b085      	sub	sp, #20
 800a70e:	af00      	add	r7, sp, #0
 800a710:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a718:	b29b      	uxth	r3, r3
 800a71a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a71c:	68fb      	ldr	r3, [r7, #12]
}
 800a71e:	4618      	mov	r0, r3
 800a720:	3714      	adds	r7, #20
 800a722:	46bd      	mov	sp, r7
 800a724:	bc80      	pop	{r7}
 800a726:	4770      	bx	lr

0800a728 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800a728:	b480      	push	{r7}
 800a72a:	b083      	sub	sp, #12
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
 800a730:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800a732:	2300      	movs	r3, #0
}
 800a734:	4618      	mov	r0, r3
 800a736:	370c      	adds	r7, #12
 800a738:	46bd      	mov	sp, r7
 800a73a:	bc80      	pop	{r7}
 800a73c:	4770      	bx	lr

0800a73e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a73e:	b480      	push	{r7}
 800a740:	b08d      	sub	sp, #52	; 0x34
 800a742:	af00      	add	r7, sp, #0
 800a744:	60f8      	str	r0, [r7, #12]
 800a746:	60b9      	str	r1, [r7, #8]
 800a748:	4611      	mov	r1, r2
 800a74a:	461a      	mov	r2, r3
 800a74c:	460b      	mov	r3, r1
 800a74e:	80fb      	strh	r3, [r7, #6]
 800a750:	4613      	mov	r3, r2
 800a752:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a754:	88bb      	ldrh	r3, [r7, #4]
 800a756:	3301      	adds	r3, #1
 800a758:	085b      	lsrs	r3, r3, #1
 800a75a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a764:	88fb      	ldrh	r3, [r7, #6]
 800a766:	005a      	lsls	r2, r3, #1
 800a768:	69fb      	ldr	r3, [r7, #28]
 800a76a:	4413      	add	r3, r2
 800a76c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a770:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800a772:	6a3b      	ldr	r3, [r7, #32]
 800a774:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a776:	e01e      	b.n	800a7b6 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800a778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a77a:	781b      	ldrb	r3, [r3, #0]
 800a77c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800a77e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a780:	3301      	adds	r3, #1
 800a782:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800a784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a786:	781b      	ldrb	r3, [r3, #0]
 800a788:	b29b      	uxth	r3, r3
 800a78a:	021b      	lsls	r3, r3, #8
 800a78c:	b29b      	uxth	r3, r3
 800a78e:	461a      	mov	r2, r3
 800a790:	69bb      	ldr	r3, [r7, #24]
 800a792:	4313      	orrs	r3, r2
 800a794:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800a796:	697b      	ldr	r3, [r7, #20]
 800a798:	b29a      	uxth	r2, r3
 800a79a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a79c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a79e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7a0:	3302      	adds	r3, #2
 800a7a2:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800a7a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7a6:	3302      	adds	r3, #2
 800a7a8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800a7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ac:	3301      	adds	r3, #1
 800a7ae:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800a7b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7b2:	3b01      	subs	r3, #1
 800a7b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a7b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d1dd      	bne.n	800a778 <USB_WritePMA+0x3a>
  }
}
 800a7bc:	bf00      	nop
 800a7be:	3734      	adds	r7, #52	; 0x34
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bc80      	pop	{r7}
 800a7c4:	4770      	bx	lr

0800a7c6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a7c6:	b480      	push	{r7}
 800a7c8:	b08b      	sub	sp, #44	; 0x2c
 800a7ca:	af00      	add	r7, sp, #0
 800a7cc:	60f8      	str	r0, [r7, #12]
 800a7ce:	60b9      	str	r1, [r7, #8]
 800a7d0:	4611      	mov	r1, r2
 800a7d2:	461a      	mov	r2, r3
 800a7d4:	460b      	mov	r3, r1
 800a7d6:	80fb      	strh	r3, [r7, #6]
 800a7d8:	4613      	mov	r3, r2
 800a7da:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a7dc:	88bb      	ldrh	r3, [r7, #4]
 800a7de:	085b      	lsrs	r3, r3, #1
 800a7e0:	b29b      	uxth	r3, r3
 800a7e2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a7e8:	68bb      	ldr	r3, [r7, #8]
 800a7ea:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a7ec:	88fb      	ldrh	r3, [r7, #6]
 800a7ee:	005a      	lsls	r2, r3, #1
 800a7f0:	697b      	ldr	r3, [r7, #20]
 800a7f2:	4413      	add	r3, r2
 800a7f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a7f8:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800a7fa:	69bb      	ldr	r3, [r7, #24]
 800a7fc:	627b      	str	r3, [r7, #36]	; 0x24
 800a7fe:	e01b      	b.n	800a838 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800a800:	6a3b      	ldr	r3, [r7, #32]
 800a802:	881b      	ldrh	r3, [r3, #0]
 800a804:	b29b      	uxth	r3, r3
 800a806:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a808:	6a3b      	ldr	r3, [r7, #32]
 800a80a:	3302      	adds	r3, #2
 800a80c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	b2da      	uxtb	r2, r3
 800a812:	69fb      	ldr	r3, [r7, #28]
 800a814:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a816:	69fb      	ldr	r3, [r7, #28]
 800a818:	3301      	adds	r3, #1
 800a81a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	0a1b      	lsrs	r3, r3, #8
 800a820:	b2da      	uxtb	r2, r3
 800a822:	69fb      	ldr	r3, [r7, #28]
 800a824:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a826:	69fb      	ldr	r3, [r7, #28]
 800a828:	3301      	adds	r3, #1
 800a82a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800a82c:	6a3b      	ldr	r3, [r7, #32]
 800a82e:	3302      	adds	r3, #2
 800a830:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800a832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a834:	3b01      	subs	r3, #1
 800a836:	627b      	str	r3, [r7, #36]	; 0x24
 800a838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d1e0      	bne.n	800a800 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800a83e:	88bb      	ldrh	r3, [r7, #4]
 800a840:	f003 0301 	and.w	r3, r3, #1
 800a844:	b29b      	uxth	r3, r3
 800a846:	2b00      	cmp	r3, #0
 800a848:	d007      	beq.n	800a85a <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800a84a:	6a3b      	ldr	r3, [r7, #32]
 800a84c:	881b      	ldrh	r3, [r3, #0]
 800a84e:	b29b      	uxth	r3, r3
 800a850:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a852:	693b      	ldr	r3, [r7, #16]
 800a854:	b2da      	uxtb	r2, r3
 800a856:	69fb      	ldr	r3, [r7, #28]
 800a858:	701a      	strb	r2, [r3, #0]
  }
}
 800a85a:	bf00      	nop
 800a85c:	372c      	adds	r7, #44	; 0x2c
 800a85e:	46bd      	mov	sp, r7
 800a860:	bc80      	pop	{r7}
 800a862:	4770      	bx	lr

0800a864 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800a864:	b480      	push	{r7}
 800a866:	b087      	sub	sp, #28
 800a868:	af00      	add	r7, sp, #0
 800a86a:	60f8      	str	r0, [r7, #12]
 800a86c:	60b9      	str	r1, [r7, #8]
 800a86e:	4613      	mov	r3, r2
 800a870:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a878:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	68ba      	ldr	r2, [r7, #8]
 800a87e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a882:	88fa      	ldrh	r2, [r7, #6]
 800a884:	697b      	ldr	r3, [r7, #20]
 800a886:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800a88a:	2300      	movs	r3, #0
}
 800a88c:	4618      	mov	r0, r3
 800a88e:	371c      	adds	r7, #28
 800a890:	46bd      	mov	sp, r7
 800a892:	bc80      	pop	{r7}
 800a894:	4770      	bx	lr

0800a896 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a896:	b580      	push	{r7, lr}
 800a898:	b084      	sub	sp, #16
 800a89a:	af00      	add	r7, sp, #0
 800a89c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8a4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d01c      	beq.n	800a8ea <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d115      	bne.n	800a8e6 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	2201      	movs	r2, #1
 800a8be:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a8d8:	b29b      	uxth	r3, r3
 800a8da:	2181      	movs	r1, #129	; 0x81
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f001 fc1f 	bl	800c120 <USBD_LL_Transmit>

      return USBD_OK;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	e002      	b.n	800a8ec <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	e000      	b.n	800a8ec <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800a8ea:	2302      	movs	r3, #2
  }
}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	3710      	adds	r7, #16
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}

0800a8f4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b084      	sub	sp, #16
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	60f8      	str	r0, [r7, #12]
 800a8fc:	60b9      	str	r1, [r7, #8]
 800a8fe:	4613      	mov	r3, r2
 800a900:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d101      	bne.n	800a90c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a908:	2302      	movs	r3, #2
 800a90a:	e01a      	b.n	800a942 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a912:	2b00      	cmp	r3, #0
 800a914:	d003      	beq.n	800a91e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	2200      	movs	r2, #0
 800a91a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a91e:	68bb      	ldr	r3, [r7, #8]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d003      	beq.n	800a92c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	68ba      	ldr	r2, [r7, #8]
 800a928:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	2201      	movs	r2, #1
 800a930:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	79fa      	ldrb	r2, [r7, #7]
 800a938:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a93a:	68f8      	ldr	r0, [r7, #12]
 800a93c:	f001 fab4 	bl	800bea8 <USBD_LL_Init>

  return USBD_OK;
 800a940:	2300      	movs	r3, #0
}
 800a942:	4618      	mov	r0, r3
 800a944:	3710      	adds	r7, #16
 800a946:	46bd      	mov	sp, r7
 800a948:	bd80      	pop	{r7, pc}

0800a94a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a94a:	b480      	push	{r7}
 800a94c:	b085      	sub	sp, #20
 800a94e:	af00      	add	r7, sp, #0
 800a950:	6078      	str	r0, [r7, #4]
 800a952:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800a954:	2300      	movs	r3, #0
 800a956:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d006      	beq.n	800a96c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	683a      	ldr	r2, [r7, #0]
 800a962:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800a966:	2300      	movs	r3, #0
 800a968:	73fb      	strb	r3, [r7, #15]
 800a96a:	e001      	b.n	800a970 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a96c:	2302      	movs	r3, #2
 800a96e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a970:	7bfb      	ldrb	r3, [r7, #15]
}
 800a972:	4618      	mov	r0, r3
 800a974:	3714      	adds	r7, #20
 800a976:	46bd      	mov	sp, r7
 800a978:	bc80      	pop	{r7}
 800a97a:	4770      	bx	lr

0800a97c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b082      	sub	sp, #8
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	f001 fae9 	bl	800bf5c <USBD_LL_Start>

  return USBD_OK;
 800a98a:	2300      	movs	r3, #0
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	3708      	adds	r7, #8
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}

0800a994 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a994:	b480      	push	{r7}
 800a996:	b083      	sub	sp, #12
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a99c:	2300      	movs	r3, #0
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	370c      	adds	r7, #12
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bc80      	pop	{r7}
 800a9a6:	4770      	bx	lr

0800a9a8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b084      	sub	sp, #16
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
 800a9b0:	460b      	mov	r3, r1
 800a9b2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a9b4:	2302      	movs	r3, #2
 800a9b6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d00c      	beq.n	800a9dc <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	78fa      	ldrb	r2, [r7, #3]
 800a9cc:	4611      	mov	r1, r2
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	4798      	blx	r3
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d101      	bne.n	800a9dc <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a9d8:	2300      	movs	r3, #0
 800a9da:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a9dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	3710      	adds	r7, #16
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}

0800a9e6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a9e6:	b580      	push	{r7, lr}
 800a9e8:	b082      	sub	sp, #8
 800a9ea:	af00      	add	r7, sp, #0
 800a9ec:	6078      	str	r0, [r7, #4]
 800a9ee:	460b      	mov	r3, r1
 800a9f0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9f8:	685b      	ldr	r3, [r3, #4]
 800a9fa:	78fa      	ldrb	r2, [r7, #3]
 800a9fc:	4611      	mov	r1, r2
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	4798      	blx	r3

  return USBD_OK;
 800aa02:	2300      	movs	r3, #0
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	3708      	adds	r7, #8
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}

0800aa0c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b082      	sub	sp, #8
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
 800aa14:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800aa1c:	6839      	ldr	r1, [r7, #0]
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f000 feca 	bl	800b7b8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2201      	movs	r2, #1
 800aa28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800aa32:	461a      	mov	r2, r3
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800aa40:	f003 031f 	and.w	r3, r3, #31
 800aa44:	2b01      	cmp	r3, #1
 800aa46:	d00c      	beq.n	800aa62 <USBD_LL_SetupStage+0x56>
 800aa48:	2b01      	cmp	r3, #1
 800aa4a:	d302      	bcc.n	800aa52 <USBD_LL_SetupStage+0x46>
 800aa4c:	2b02      	cmp	r3, #2
 800aa4e:	d010      	beq.n	800aa72 <USBD_LL_SetupStage+0x66>
 800aa50:	e017      	b.n	800aa82 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800aa58:	4619      	mov	r1, r3
 800aa5a:	6878      	ldr	r0, [r7, #4]
 800aa5c:	f000 f9ca 	bl	800adf4 <USBD_StdDevReq>
      break;
 800aa60:	e01a      	b.n	800aa98 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800aa68:	4619      	mov	r1, r3
 800aa6a:	6878      	ldr	r0, [r7, #4]
 800aa6c:	f000 fa2c 	bl	800aec8 <USBD_StdItfReq>
      break;
 800aa70:	e012      	b.n	800aa98 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800aa78:	4619      	mov	r1, r3
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	f000 fa6a 	bl	800af54 <USBD_StdEPReq>
      break;
 800aa80:	e00a      	b.n	800aa98 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800aa88:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800aa8c:	b2db      	uxtb	r3, r3
 800aa8e:	4619      	mov	r1, r3
 800aa90:	6878      	ldr	r0, [r7, #4]
 800aa92:	f001 fac3 	bl	800c01c <USBD_LL_StallEP>
      break;
 800aa96:	bf00      	nop
  }

  return USBD_OK;
 800aa98:	2300      	movs	r3, #0
}
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	3708      	adds	r7, #8
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}

0800aaa2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800aaa2:	b580      	push	{r7, lr}
 800aaa4:	b086      	sub	sp, #24
 800aaa6:	af00      	add	r7, sp, #0
 800aaa8:	60f8      	str	r0, [r7, #12]
 800aaaa:	460b      	mov	r3, r1
 800aaac:	607a      	str	r2, [r7, #4]
 800aaae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800aab0:	7afb      	ldrb	r3, [r7, #11]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d14b      	bne.n	800ab4e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800aabc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800aac4:	2b03      	cmp	r3, #3
 800aac6:	d134      	bne.n	800ab32 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	68da      	ldr	r2, [r3, #12]
 800aacc:	697b      	ldr	r3, [r7, #20]
 800aace:	691b      	ldr	r3, [r3, #16]
 800aad0:	429a      	cmp	r2, r3
 800aad2:	d919      	bls.n	800ab08 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800aad4:	697b      	ldr	r3, [r7, #20]
 800aad6:	68da      	ldr	r2, [r3, #12]
 800aad8:	697b      	ldr	r3, [r7, #20]
 800aada:	691b      	ldr	r3, [r3, #16]
 800aadc:	1ad2      	subs	r2, r2, r3
 800aade:	697b      	ldr	r3, [r7, #20]
 800aae0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800aae2:	697b      	ldr	r3, [r7, #20]
 800aae4:	68da      	ldr	r2, [r3, #12]
 800aae6:	697b      	ldr	r3, [r7, #20]
 800aae8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800aaea:	429a      	cmp	r2, r3
 800aaec:	d203      	bcs.n	800aaf6 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800aaf2:	b29b      	uxth	r3, r3
 800aaf4:	e002      	b.n	800aafc <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800aafa:	b29b      	uxth	r3, r3
 800aafc:	461a      	mov	r2, r3
 800aafe:	6879      	ldr	r1, [r7, #4]
 800ab00:	68f8      	ldr	r0, [r7, #12]
 800ab02:	f000 ff4b 	bl	800b99c <USBD_CtlContinueRx>
 800ab06:	e038      	b.n	800ab7a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab0e:	691b      	ldr	r3, [r3, #16]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d00a      	beq.n	800ab2a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800ab1a:	2b03      	cmp	r3, #3
 800ab1c:	d105      	bne.n	800ab2a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab24:	691b      	ldr	r3, [r3, #16]
 800ab26:	68f8      	ldr	r0, [r7, #12]
 800ab28:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800ab2a:	68f8      	ldr	r0, [r7, #12]
 800ab2c:	f000 ff48 	bl	800b9c0 <USBD_CtlSendStatus>
 800ab30:	e023      	b.n	800ab7a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ab38:	2b05      	cmp	r3, #5
 800ab3a:	d11e      	bne.n	800ab7a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	2200      	movs	r2, #0
 800ab40:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800ab44:	2100      	movs	r1, #0
 800ab46:	68f8      	ldr	r0, [r7, #12]
 800ab48:	f001 fa68 	bl	800c01c <USBD_LL_StallEP>
 800ab4c:	e015      	b.n	800ab7a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab54:	699b      	ldr	r3, [r3, #24]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d00d      	beq.n	800ab76 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800ab60:	2b03      	cmp	r3, #3
 800ab62:	d108      	bne.n	800ab76 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab6a:	699b      	ldr	r3, [r3, #24]
 800ab6c:	7afa      	ldrb	r2, [r7, #11]
 800ab6e:	4611      	mov	r1, r2
 800ab70:	68f8      	ldr	r0, [r7, #12]
 800ab72:	4798      	blx	r3
 800ab74:	e001      	b.n	800ab7a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ab76:	2302      	movs	r3, #2
 800ab78:	e000      	b.n	800ab7c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800ab7a:	2300      	movs	r3, #0
}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	3718      	adds	r7, #24
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}

0800ab84 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b086      	sub	sp, #24
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	60f8      	str	r0, [r7, #12]
 800ab8c:	460b      	mov	r3, r1
 800ab8e:	607a      	str	r2, [r7, #4]
 800ab90:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800ab92:	7afb      	ldrb	r3, [r7, #11]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d17f      	bne.n	800ac98 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	3314      	adds	r3, #20
 800ab9c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800aba4:	2b02      	cmp	r3, #2
 800aba6:	d15c      	bne.n	800ac62 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800aba8:	697b      	ldr	r3, [r7, #20]
 800abaa:	68da      	ldr	r2, [r3, #12]
 800abac:	697b      	ldr	r3, [r7, #20]
 800abae:	691b      	ldr	r3, [r3, #16]
 800abb0:	429a      	cmp	r2, r3
 800abb2:	d915      	bls.n	800abe0 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	68da      	ldr	r2, [r3, #12]
 800abb8:	697b      	ldr	r3, [r7, #20]
 800abba:	691b      	ldr	r3, [r3, #16]
 800abbc:	1ad2      	subs	r2, r2, r3
 800abbe:	697b      	ldr	r3, [r7, #20]
 800abc0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800abc2:	697b      	ldr	r3, [r7, #20]
 800abc4:	68db      	ldr	r3, [r3, #12]
 800abc6:	b29b      	uxth	r3, r3
 800abc8:	461a      	mov	r2, r3
 800abca:	6879      	ldr	r1, [r7, #4]
 800abcc:	68f8      	ldr	r0, [r7, #12]
 800abce:	f000 feb5 	bl	800b93c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800abd2:	2300      	movs	r3, #0
 800abd4:	2200      	movs	r2, #0
 800abd6:	2100      	movs	r1, #0
 800abd8:	68f8      	ldr	r0, [r7, #12]
 800abda:	f001 fac4 	bl	800c166 <USBD_LL_PrepareReceive>
 800abde:	e04e      	b.n	800ac7e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800abe0:	697b      	ldr	r3, [r7, #20]
 800abe2:	689b      	ldr	r3, [r3, #8]
 800abe4:	697a      	ldr	r2, [r7, #20]
 800abe6:	6912      	ldr	r2, [r2, #16]
 800abe8:	fbb3 f1f2 	udiv	r1, r3, r2
 800abec:	fb02 f201 	mul.w	r2, r2, r1
 800abf0:	1a9b      	subs	r3, r3, r2
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d11c      	bne.n	800ac30 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800abf6:	697b      	ldr	r3, [r7, #20]
 800abf8:	689a      	ldr	r2, [r3, #8]
 800abfa:	697b      	ldr	r3, [r7, #20]
 800abfc:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800abfe:	429a      	cmp	r2, r3
 800ac00:	d316      	bcc.n	800ac30 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800ac02:	697b      	ldr	r3, [r7, #20]
 800ac04:	689a      	ldr	r2, [r3, #8]
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ac0c:	429a      	cmp	r2, r3
 800ac0e:	d20f      	bcs.n	800ac30 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ac10:	2200      	movs	r2, #0
 800ac12:	2100      	movs	r1, #0
 800ac14:	68f8      	ldr	r0, [r7, #12]
 800ac16:	f000 fe91 	bl	800b93c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ac22:	2300      	movs	r3, #0
 800ac24:	2200      	movs	r2, #0
 800ac26:	2100      	movs	r1, #0
 800ac28:	68f8      	ldr	r0, [r7, #12]
 800ac2a:	f001 fa9c 	bl	800c166 <USBD_LL_PrepareReceive>
 800ac2e:	e026      	b.n	800ac7e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac36:	68db      	ldr	r3, [r3, #12]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d00a      	beq.n	800ac52 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ac42:	2b03      	cmp	r3, #3
 800ac44:	d105      	bne.n	800ac52 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac4c:	68db      	ldr	r3, [r3, #12]
 800ac4e:	68f8      	ldr	r0, [r7, #12]
 800ac50:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800ac52:	2180      	movs	r1, #128	; 0x80
 800ac54:	68f8      	ldr	r0, [r7, #12]
 800ac56:	f001 f9e1 	bl	800c01c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800ac5a:	68f8      	ldr	r0, [r7, #12]
 800ac5c:	f000 fec3 	bl	800b9e6 <USBD_CtlReceiveStatus>
 800ac60:	e00d      	b.n	800ac7e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ac68:	2b04      	cmp	r3, #4
 800ac6a:	d004      	beq.n	800ac76 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d103      	bne.n	800ac7e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800ac76:	2180      	movs	r1, #128	; 0x80
 800ac78:	68f8      	ldr	r0, [r7, #12]
 800ac7a:	f001 f9cf 	bl	800c01c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ac84:	2b01      	cmp	r3, #1
 800ac86:	d11d      	bne.n	800acc4 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800ac88:	68f8      	ldr	r0, [r7, #12]
 800ac8a:	f7ff fe83 	bl	800a994 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	2200      	movs	r2, #0
 800ac92:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ac96:	e015      	b.n	800acc4 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac9e:	695b      	ldr	r3, [r3, #20]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d00d      	beq.n	800acc0 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800acaa:	2b03      	cmp	r3, #3
 800acac:	d108      	bne.n	800acc0 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acb4:	695b      	ldr	r3, [r3, #20]
 800acb6:	7afa      	ldrb	r2, [r7, #11]
 800acb8:	4611      	mov	r1, r2
 800acba:	68f8      	ldr	r0, [r7, #12]
 800acbc:	4798      	blx	r3
 800acbe:	e001      	b.n	800acc4 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800acc0:	2302      	movs	r3, #2
 800acc2:	e000      	b.n	800acc6 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800acc4:	2300      	movs	r3, #0
}
 800acc6:	4618      	mov	r0, r3
 800acc8:	3718      	adds	r7, #24
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}

0800acce <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800acce:	b580      	push	{r7, lr}
 800acd0:	b082      	sub	sp, #8
 800acd2:	af00      	add	r7, sp, #0
 800acd4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800acd6:	2340      	movs	r3, #64	; 0x40
 800acd8:	2200      	movs	r2, #0
 800acda:	2100      	movs	r1, #0
 800acdc:	6878      	ldr	r0, [r7, #4]
 800acde:	f001 f958 	bl	800bf92 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2201      	movs	r2, #1
 800ace6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2240      	movs	r2, #64	; 0x40
 800acee:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800acf2:	2340      	movs	r3, #64	; 0x40
 800acf4:	2200      	movs	r2, #0
 800acf6:	2180      	movs	r1, #128	; 0x80
 800acf8:	6878      	ldr	r0, [r7, #4]
 800acfa:	f001 f94a 	bl	800bf92 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2201      	movs	r2, #1
 800ad02:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2240      	movs	r2, #64	; 0x40
 800ad08:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	2201      	movs	r2, #1
 800ad0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2200      	movs	r2, #0
 800ad16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2200      	movs	r2, #0
 800ad24:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d009      	beq.n	800ad46 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad38:	685b      	ldr	r3, [r3, #4]
 800ad3a:	687a      	ldr	r2, [r7, #4]
 800ad3c:	6852      	ldr	r2, [r2, #4]
 800ad3e:	b2d2      	uxtb	r2, r2
 800ad40:	4611      	mov	r1, r2
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	4798      	blx	r3
  }

  return USBD_OK;
 800ad46:	2300      	movs	r3, #0
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3708      	adds	r7, #8
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}

0800ad50 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ad50:	b480      	push	{r7}
 800ad52:	b083      	sub	sp, #12
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
 800ad58:	460b      	mov	r3, r1
 800ad5a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	78fa      	ldrb	r2, [r7, #3]
 800ad60:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ad62:	2300      	movs	r3, #0
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	370c      	adds	r7, #12
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bc80      	pop	{r7}
 800ad6c:	4770      	bx	lr

0800ad6e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ad6e:	b480      	push	{r7}
 800ad70:	b083      	sub	sp, #12
 800ad72:	af00      	add	r7, sp, #0
 800ad74:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2204      	movs	r2, #4
 800ad86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ad8a:	2300      	movs	r3, #0
}
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	370c      	adds	r7, #12
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bc80      	pop	{r7}
 800ad94:	4770      	bx	lr

0800ad96 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ad96:	b480      	push	{r7}
 800ad98:	b083      	sub	sp, #12
 800ad9a:	af00      	add	r7, sp, #0
 800ad9c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ada4:	2b04      	cmp	r3, #4
 800ada6:	d105      	bne.n	800adb4 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800adb4:	2300      	movs	r3, #0
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	370c      	adds	r7, #12
 800adba:	46bd      	mov	sp, r7
 800adbc:	bc80      	pop	{r7}
 800adbe:	4770      	bx	lr

0800adc0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b082      	sub	sp, #8
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adce:	2b03      	cmp	r3, #3
 800add0:	d10b      	bne.n	800adea <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800add8:	69db      	ldr	r3, [r3, #28]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d005      	beq.n	800adea <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ade4:	69db      	ldr	r3, [r3, #28]
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800adea:	2300      	movs	r3, #0
}
 800adec:	4618      	mov	r0, r3
 800adee:	3708      	adds	r7, #8
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}

0800adf4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b084      	sub	sp, #16
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
 800adfc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800adfe:	2300      	movs	r3, #0
 800ae00:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	781b      	ldrb	r3, [r3, #0]
 800ae06:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ae0a:	2b20      	cmp	r3, #32
 800ae0c:	d004      	beq.n	800ae18 <USBD_StdDevReq+0x24>
 800ae0e:	2b40      	cmp	r3, #64	; 0x40
 800ae10:	d002      	beq.n	800ae18 <USBD_StdDevReq+0x24>
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d008      	beq.n	800ae28 <USBD_StdDevReq+0x34>
 800ae16:	e04c      	b.n	800aeb2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae1e:	689b      	ldr	r3, [r3, #8]
 800ae20:	6839      	ldr	r1, [r7, #0]
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	4798      	blx	r3
      break;
 800ae26:	e049      	b.n	800aebc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	785b      	ldrb	r3, [r3, #1]
 800ae2c:	2b09      	cmp	r3, #9
 800ae2e:	d83a      	bhi.n	800aea6 <USBD_StdDevReq+0xb2>
 800ae30:	a201      	add	r2, pc, #4	; (adr r2, 800ae38 <USBD_StdDevReq+0x44>)
 800ae32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae36:	bf00      	nop
 800ae38:	0800ae89 	.word	0x0800ae89
 800ae3c:	0800ae9d 	.word	0x0800ae9d
 800ae40:	0800aea7 	.word	0x0800aea7
 800ae44:	0800ae93 	.word	0x0800ae93
 800ae48:	0800aea7 	.word	0x0800aea7
 800ae4c:	0800ae6b 	.word	0x0800ae6b
 800ae50:	0800ae61 	.word	0x0800ae61
 800ae54:	0800aea7 	.word	0x0800aea7
 800ae58:	0800ae7f 	.word	0x0800ae7f
 800ae5c:	0800ae75 	.word	0x0800ae75
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ae60:	6839      	ldr	r1, [r7, #0]
 800ae62:	6878      	ldr	r0, [r7, #4]
 800ae64:	f000 f9d4 	bl	800b210 <USBD_GetDescriptor>
          break;
 800ae68:	e022      	b.n	800aeb0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ae6a:	6839      	ldr	r1, [r7, #0]
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f000 fb37 	bl	800b4e0 <USBD_SetAddress>
          break;
 800ae72:	e01d      	b.n	800aeb0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800ae74:	6839      	ldr	r1, [r7, #0]
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f000 fb74 	bl	800b564 <USBD_SetConfig>
          break;
 800ae7c:	e018      	b.n	800aeb0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ae7e:	6839      	ldr	r1, [r7, #0]
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f000 fbfd 	bl	800b680 <USBD_GetConfig>
          break;
 800ae86:	e013      	b.n	800aeb0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ae88:	6839      	ldr	r1, [r7, #0]
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	f000 fc2c 	bl	800b6e8 <USBD_GetStatus>
          break;
 800ae90:	e00e      	b.n	800aeb0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ae92:	6839      	ldr	r1, [r7, #0]
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f000 fc5a 	bl	800b74e <USBD_SetFeature>
          break;
 800ae9a:	e009      	b.n	800aeb0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ae9c:	6839      	ldr	r1, [r7, #0]
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f000 fc69 	bl	800b776 <USBD_ClrFeature>
          break;
 800aea4:	e004      	b.n	800aeb0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800aea6:	6839      	ldr	r1, [r7, #0]
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f000 fcc1 	bl	800b830 <USBD_CtlError>
          break;
 800aeae:	bf00      	nop
      }
      break;
 800aeb0:	e004      	b.n	800aebc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800aeb2:	6839      	ldr	r1, [r7, #0]
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f000 fcbb 	bl	800b830 <USBD_CtlError>
      break;
 800aeba:	bf00      	nop
  }

  return ret;
 800aebc:	7bfb      	ldrb	r3, [r7, #15]
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	3710      	adds	r7, #16
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}
 800aec6:	bf00      	nop

0800aec8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b084      	sub	sp, #16
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
 800aed0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aed2:	2300      	movs	r3, #0
 800aed4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	781b      	ldrb	r3, [r3, #0]
 800aeda:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aede:	2b20      	cmp	r3, #32
 800aee0:	d003      	beq.n	800aeea <USBD_StdItfReq+0x22>
 800aee2:	2b40      	cmp	r3, #64	; 0x40
 800aee4:	d001      	beq.n	800aeea <USBD_StdItfReq+0x22>
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d12a      	bne.n	800af40 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aef0:	3b01      	subs	r3, #1
 800aef2:	2b02      	cmp	r3, #2
 800aef4:	d81d      	bhi.n	800af32 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	889b      	ldrh	r3, [r3, #4]
 800aefa:	b2db      	uxtb	r3, r3
 800aefc:	2b01      	cmp	r3, #1
 800aefe:	d813      	bhi.n	800af28 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af06:	689b      	ldr	r3, [r3, #8]
 800af08:	6839      	ldr	r1, [r7, #0]
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	4798      	blx	r3
 800af0e:	4603      	mov	r3, r0
 800af10:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	88db      	ldrh	r3, [r3, #6]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d110      	bne.n	800af3c <USBD_StdItfReq+0x74>
 800af1a:	7bfb      	ldrb	r3, [r7, #15]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d10d      	bne.n	800af3c <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f000 fd4d 	bl	800b9c0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800af26:	e009      	b.n	800af3c <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 800af28:	6839      	ldr	r1, [r7, #0]
 800af2a:	6878      	ldr	r0, [r7, #4]
 800af2c:	f000 fc80 	bl	800b830 <USBD_CtlError>
          break;
 800af30:	e004      	b.n	800af3c <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800af32:	6839      	ldr	r1, [r7, #0]
 800af34:	6878      	ldr	r0, [r7, #4]
 800af36:	f000 fc7b 	bl	800b830 <USBD_CtlError>
          break;
 800af3a:	e000      	b.n	800af3e <USBD_StdItfReq+0x76>
          break;
 800af3c:	bf00      	nop
      }
      break;
 800af3e:	e004      	b.n	800af4a <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 800af40:	6839      	ldr	r1, [r7, #0]
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f000 fc74 	bl	800b830 <USBD_CtlError>
      break;
 800af48:	bf00      	nop
  }

  return USBD_OK;
 800af4a:	2300      	movs	r3, #0
}
 800af4c:	4618      	mov	r0, r3
 800af4e:	3710      	adds	r7, #16
 800af50:	46bd      	mov	sp, r7
 800af52:	bd80      	pop	{r7, pc}

0800af54 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b084      	sub	sp, #16
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
 800af5c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800af5e:	2300      	movs	r3, #0
 800af60:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	889b      	ldrh	r3, [r3, #4]
 800af66:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	781b      	ldrb	r3, [r3, #0]
 800af6c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800af70:	2b20      	cmp	r3, #32
 800af72:	d004      	beq.n	800af7e <USBD_StdEPReq+0x2a>
 800af74:	2b40      	cmp	r3, #64	; 0x40
 800af76:	d002      	beq.n	800af7e <USBD_StdEPReq+0x2a>
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d008      	beq.n	800af8e <USBD_StdEPReq+0x3a>
 800af7c:	e13d      	b.n	800b1fa <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af84:	689b      	ldr	r3, [r3, #8]
 800af86:	6839      	ldr	r1, [r7, #0]
 800af88:	6878      	ldr	r0, [r7, #4]
 800af8a:	4798      	blx	r3
      break;
 800af8c:	e13a      	b.n	800b204 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	781b      	ldrb	r3, [r3, #0]
 800af92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800af96:	2b20      	cmp	r3, #32
 800af98:	d10a      	bne.n	800afb0 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afa0:	689b      	ldr	r3, [r3, #8]
 800afa2:	6839      	ldr	r1, [r7, #0]
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	4798      	blx	r3
 800afa8:	4603      	mov	r3, r0
 800afaa:	73fb      	strb	r3, [r7, #15]

        return ret;
 800afac:	7bfb      	ldrb	r3, [r7, #15]
 800afae:	e12a      	b.n	800b206 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	785b      	ldrb	r3, [r3, #1]
 800afb4:	2b01      	cmp	r3, #1
 800afb6:	d03e      	beq.n	800b036 <USBD_StdEPReq+0xe2>
 800afb8:	2b03      	cmp	r3, #3
 800afba:	d002      	beq.n	800afc2 <USBD_StdEPReq+0x6e>
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d070      	beq.n	800b0a2 <USBD_StdEPReq+0x14e>
 800afc0:	e115      	b.n	800b1ee <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afc8:	2b02      	cmp	r3, #2
 800afca:	d002      	beq.n	800afd2 <USBD_StdEPReq+0x7e>
 800afcc:	2b03      	cmp	r3, #3
 800afce:	d015      	beq.n	800affc <USBD_StdEPReq+0xa8>
 800afd0:	e02b      	b.n	800b02a <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800afd2:	7bbb      	ldrb	r3, [r7, #14]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d00c      	beq.n	800aff2 <USBD_StdEPReq+0x9e>
 800afd8:	7bbb      	ldrb	r3, [r7, #14]
 800afda:	2b80      	cmp	r3, #128	; 0x80
 800afdc:	d009      	beq.n	800aff2 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800afde:	7bbb      	ldrb	r3, [r7, #14]
 800afe0:	4619      	mov	r1, r3
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f001 f81a 	bl	800c01c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800afe8:	2180      	movs	r1, #128	; 0x80
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f001 f816 	bl	800c01c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aff0:	e020      	b.n	800b034 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800aff2:	6839      	ldr	r1, [r7, #0]
 800aff4:	6878      	ldr	r0, [r7, #4]
 800aff6:	f000 fc1b 	bl	800b830 <USBD_CtlError>
              break;
 800affa:	e01b      	b.n	800b034 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	885b      	ldrh	r3, [r3, #2]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d10e      	bne.n	800b022 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 800b004:	7bbb      	ldrb	r3, [r7, #14]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d00b      	beq.n	800b022 <USBD_StdEPReq+0xce>
 800b00a:	7bbb      	ldrb	r3, [r7, #14]
 800b00c:	2b80      	cmp	r3, #128	; 0x80
 800b00e:	d008      	beq.n	800b022 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	88db      	ldrh	r3, [r3, #6]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d104      	bne.n	800b022 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800b018:	7bbb      	ldrb	r3, [r7, #14]
 800b01a:	4619      	mov	r1, r3
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f000 fffd 	bl	800c01c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f000 fccc 	bl	800b9c0 <USBD_CtlSendStatus>

              break;
 800b028:	e004      	b.n	800b034 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800b02a:	6839      	ldr	r1, [r7, #0]
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f000 fbff 	bl	800b830 <USBD_CtlError>
              break;
 800b032:	bf00      	nop
          }
          break;
 800b034:	e0e0      	b.n	800b1f8 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b03c:	2b02      	cmp	r3, #2
 800b03e:	d002      	beq.n	800b046 <USBD_StdEPReq+0xf2>
 800b040:	2b03      	cmp	r3, #3
 800b042:	d015      	beq.n	800b070 <USBD_StdEPReq+0x11c>
 800b044:	e026      	b.n	800b094 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b046:	7bbb      	ldrb	r3, [r7, #14]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d00c      	beq.n	800b066 <USBD_StdEPReq+0x112>
 800b04c:	7bbb      	ldrb	r3, [r7, #14]
 800b04e:	2b80      	cmp	r3, #128	; 0x80
 800b050:	d009      	beq.n	800b066 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b052:	7bbb      	ldrb	r3, [r7, #14]
 800b054:	4619      	mov	r1, r3
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f000 ffe0 	bl	800c01c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b05c:	2180      	movs	r1, #128	; 0x80
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	f000 ffdc 	bl	800c01c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b064:	e01c      	b.n	800b0a0 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800b066:	6839      	ldr	r1, [r7, #0]
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f000 fbe1 	bl	800b830 <USBD_CtlError>
              break;
 800b06e:	e017      	b.n	800b0a0 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	885b      	ldrh	r3, [r3, #2]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d112      	bne.n	800b09e <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b078:	7bbb      	ldrb	r3, [r7, #14]
 800b07a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d004      	beq.n	800b08c <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800b082:	7bbb      	ldrb	r3, [r7, #14]
 800b084:	4619      	mov	r1, r3
 800b086:	6878      	ldr	r0, [r7, #4]
 800b088:	f000 ffe7 	bl	800c05a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f000 fc97 	bl	800b9c0 <USBD_CtlSendStatus>
              }
              break;
 800b092:	e004      	b.n	800b09e <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 800b094:	6839      	ldr	r1, [r7, #0]
 800b096:	6878      	ldr	r0, [r7, #4]
 800b098:	f000 fbca 	bl	800b830 <USBD_CtlError>
              break;
 800b09c:	e000      	b.n	800b0a0 <USBD_StdEPReq+0x14c>
              break;
 800b09e:	bf00      	nop
          }
          break;
 800b0a0:	e0aa      	b.n	800b1f8 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0a8:	2b02      	cmp	r3, #2
 800b0aa:	d002      	beq.n	800b0b2 <USBD_StdEPReq+0x15e>
 800b0ac:	2b03      	cmp	r3, #3
 800b0ae:	d032      	beq.n	800b116 <USBD_StdEPReq+0x1c2>
 800b0b0:	e097      	b.n	800b1e2 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b0b2:	7bbb      	ldrb	r3, [r7, #14]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d007      	beq.n	800b0c8 <USBD_StdEPReq+0x174>
 800b0b8:	7bbb      	ldrb	r3, [r7, #14]
 800b0ba:	2b80      	cmp	r3, #128	; 0x80
 800b0bc:	d004      	beq.n	800b0c8 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800b0be:	6839      	ldr	r1, [r7, #0]
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f000 fbb5 	bl	800b830 <USBD_CtlError>
                break;
 800b0c6:	e091      	b.n	800b1ec <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b0c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	da0b      	bge.n	800b0e8 <USBD_StdEPReq+0x194>
 800b0d0:	7bbb      	ldrb	r3, [r7, #14]
 800b0d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b0d6:	4613      	mov	r3, r2
 800b0d8:	009b      	lsls	r3, r3, #2
 800b0da:	4413      	add	r3, r2
 800b0dc:	009b      	lsls	r3, r3, #2
 800b0de:	3310      	adds	r3, #16
 800b0e0:	687a      	ldr	r2, [r7, #4]
 800b0e2:	4413      	add	r3, r2
 800b0e4:	3304      	adds	r3, #4
 800b0e6:	e00b      	b.n	800b100 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b0e8:	7bbb      	ldrb	r3, [r7, #14]
 800b0ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b0ee:	4613      	mov	r3, r2
 800b0f0:	009b      	lsls	r3, r3, #2
 800b0f2:	4413      	add	r3, r2
 800b0f4:	009b      	lsls	r3, r3, #2
 800b0f6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b0fa:	687a      	ldr	r2, [r7, #4]
 800b0fc:	4413      	add	r3, r2
 800b0fe:	3304      	adds	r3, #4
 800b100:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	2200      	movs	r2, #0
 800b106:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	2202      	movs	r2, #2
 800b10c:	4619      	mov	r1, r3
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	f000 fbf8 	bl	800b904 <USBD_CtlSendData>
              break;
 800b114:	e06a      	b.n	800b1ec <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b116:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	da11      	bge.n	800b142 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b11e:	7bbb      	ldrb	r3, [r7, #14]
 800b120:	f003 020f 	and.w	r2, r3, #15
 800b124:	6879      	ldr	r1, [r7, #4]
 800b126:	4613      	mov	r3, r2
 800b128:	009b      	lsls	r3, r3, #2
 800b12a:	4413      	add	r3, r2
 800b12c:	009b      	lsls	r3, r3, #2
 800b12e:	440b      	add	r3, r1
 800b130:	3318      	adds	r3, #24
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d117      	bne.n	800b168 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800b138:	6839      	ldr	r1, [r7, #0]
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f000 fb78 	bl	800b830 <USBD_CtlError>
                  break;
 800b140:	e054      	b.n	800b1ec <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b142:	7bbb      	ldrb	r3, [r7, #14]
 800b144:	f003 020f 	and.w	r2, r3, #15
 800b148:	6879      	ldr	r1, [r7, #4]
 800b14a:	4613      	mov	r3, r2
 800b14c:	009b      	lsls	r3, r3, #2
 800b14e:	4413      	add	r3, r2
 800b150:	009b      	lsls	r3, r3, #2
 800b152:	440b      	add	r3, r1
 800b154:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d104      	bne.n	800b168 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800b15e:	6839      	ldr	r1, [r7, #0]
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	f000 fb65 	bl	800b830 <USBD_CtlError>
                  break;
 800b166:	e041      	b.n	800b1ec <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b168:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	da0b      	bge.n	800b188 <USBD_StdEPReq+0x234>
 800b170:	7bbb      	ldrb	r3, [r7, #14]
 800b172:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b176:	4613      	mov	r3, r2
 800b178:	009b      	lsls	r3, r3, #2
 800b17a:	4413      	add	r3, r2
 800b17c:	009b      	lsls	r3, r3, #2
 800b17e:	3310      	adds	r3, #16
 800b180:	687a      	ldr	r2, [r7, #4]
 800b182:	4413      	add	r3, r2
 800b184:	3304      	adds	r3, #4
 800b186:	e00b      	b.n	800b1a0 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b188:	7bbb      	ldrb	r3, [r7, #14]
 800b18a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b18e:	4613      	mov	r3, r2
 800b190:	009b      	lsls	r3, r3, #2
 800b192:	4413      	add	r3, r2
 800b194:	009b      	lsls	r3, r3, #2
 800b196:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b19a:	687a      	ldr	r2, [r7, #4]
 800b19c:	4413      	add	r3, r2
 800b19e:	3304      	adds	r3, #4
 800b1a0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b1a2:	7bbb      	ldrb	r3, [r7, #14]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d002      	beq.n	800b1ae <USBD_StdEPReq+0x25a>
 800b1a8:	7bbb      	ldrb	r3, [r7, #14]
 800b1aa:	2b80      	cmp	r3, #128	; 0x80
 800b1ac:	d103      	bne.n	800b1b6 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800b1ae:	68bb      	ldr	r3, [r7, #8]
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	601a      	str	r2, [r3, #0]
 800b1b4:	e00e      	b.n	800b1d4 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800b1b6:	7bbb      	ldrb	r3, [r7, #14]
 800b1b8:	4619      	mov	r1, r3
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f000 ff6c 	bl	800c098 <USBD_LL_IsStallEP>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d003      	beq.n	800b1ce <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800b1c6:	68bb      	ldr	r3, [r7, #8]
 800b1c8:	2201      	movs	r2, #1
 800b1ca:	601a      	str	r2, [r3, #0]
 800b1cc:	e002      	b.n	800b1d4 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b1d4:	68bb      	ldr	r3, [r7, #8]
 800b1d6:	2202      	movs	r2, #2
 800b1d8:	4619      	mov	r1, r3
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	f000 fb92 	bl	800b904 <USBD_CtlSendData>
              break;
 800b1e0:	e004      	b.n	800b1ec <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800b1e2:	6839      	ldr	r1, [r7, #0]
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	f000 fb23 	bl	800b830 <USBD_CtlError>
              break;
 800b1ea:	bf00      	nop
          }
          break;
 800b1ec:	e004      	b.n	800b1f8 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800b1ee:	6839      	ldr	r1, [r7, #0]
 800b1f0:	6878      	ldr	r0, [r7, #4]
 800b1f2:	f000 fb1d 	bl	800b830 <USBD_CtlError>
          break;
 800b1f6:	bf00      	nop
      }
      break;
 800b1f8:	e004      	b.n	800b204 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800b1fa:	6839      	ldr	r1, [r7, #0]
 800b1fc:	6878      	ldr	r0, [r7, #4]
 800b1fe:	f000 fb17 	bl	800b830 <USBD_CtlError>
      break;
 800b202:	bf00      	nop
  }

  return ret;
 800b204:	7bfb      	ldrb	r3, [r7, #15]
}
 800b206:	4618      	mov	r0, r3
 800b208:	3710      	adds	r7, #16
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bd80      	pop	{r7, pc}
	...

0800b210 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b084      	sub	sp, #16
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
 800b218:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b21a:	2300      	movs	r3, #0
 800b21c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b21e:	2300      	movs	r3, #0
 800b220:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b222:	2300      	movs	r3, #0
 800b224:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	885b      	ldrh	r3, [r3, #2]
 800b22a:	0a1b      	lsrs	r3, r3, #8
 800b22c:	b29b      	uxth	r3, r3
 800b22e:	3b01      	subs	r3, #1
 800b230:	2b06      	cmp	r3, #6
 800b232:	f200 8128 	bhi.w	800b486 <USBD_GetDescriptor+0x276>
 800b236:	a201      	add	r2, pc, #4	; (adr r2, 800b23c <USBD_GetDescriptor+0x2c>)
 800b238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b23c:	0800b259 	.word	0x0800b259
 800b240:	0800b271 	.word	0x0800b271
 800b244:	0800b2b1 	.word	0x0800b2b1
 800b248:	0800b487 	.word	0x0800b487
 800b24c:	0800b487 	.word	0x0800b487
 800b250:	0800b427 	.word	0x0800b427
 800b254:	0800b453 	.word	0x0800b453
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	687a      	ldr	r2, [r7, #4]
 800b262:	7c12      	ldrb	r2, [r2, #16]
 800b264:	f107 0108 	add.w	r1, r7, #8
 800b268:	4610      	mov	r0, r2
 800b26a:	4798      	blx	r3
 800b26c:	60f8      	str	r0, [r7, #12]
      break;
 800b26e:	e112      	b.n	800b496 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	7c1b      	ldrb	r3, [r3, #16]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d10d      	bne.n	800b294 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b27e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b280:	f107 0208 	add.w	r2, r7, #8
 800b284:	4610      	mov	r0, r2
 800b286:	4798      	blx	r3
 800b288:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	3301      	adds	r3, #1
 800b28e:	2202      	movs	r2, #2
 800b290:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b292:	e100      	b.n	800b496 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b29a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b29c:	f107 0208 	add.w	r2, r7, #8
 800b2a0:	4610      	mov	r0, r2
 800b2a2:	4798      	blx	r3
 800b2a4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	3301      	adds	r3, #1
 800b2aa:	2202      	movs	r2, #2
 800b2ac:	701a      	strb	r2, [r3, #0]
      break;
 800b2ae:	e0f2      	b.n	800b496 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	885b      	ldrh	r3, [r3, #2]
 800b2b4:	b2db      	uxtb	r3, r3
 800b2b6:	2b05      	cmp	r3, #5
 800b2b8:	f200 80ac 	bhi.w	800b414 <USBD_GetDescriptor+0x204>
 800b2bc:	a201      	add	r2, pc, #4	; (adr r2, 800b2c4 <USBD_GetDescriptor+0xb4>)
 800b2be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2c2:	bf00      	nop
 800b2c4:	0800b2dd 	.word	0x0800b2dd
 800b2c8:	0800b311 	.word	0x0800b311
 800b2cc:	0800b345 	.word	0x0800b345
 800b2d0:	0800b379 	.word	0x0800b379
 800b2d4:	0800b3ad 	.word	0x0800b3ad
 800b2d8:	0800b3e1 	.word	0x0800b3e1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b2e2:	685b      	ldr	r3, [r3, #4]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d00b      	beq.n	800b300 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b2ee:	685b      	ldr	r3, [r3, #4]
 800b2f0:	687a      	ldr	r2, [r7, #4]
 800b2f2:	7c12      	ldrb	r2, [r2, #16]
 800b2f4:	f107 0108 	add.w	r1, r7, #8
 800b2f8:	4610      	mov	r0, r2
 800b2fa:	4798      	blx	r3
 800b2fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b2fe:	e091      	b.n	800b424 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b300:	6839      	ldr	r1, [r7, #0]
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	f000 fa94 	bl	800b830 <USBD_CtlError>
            err++;
 800b308:	7afb      	ldrb	r3, [r7, #11]
 800b30a:	3301      	adds	r3, #1
 800b30c:	72fb      	strb	r3, [r7, #11]
          break;
 800b30e:	e089      	b.n	800b424 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b316:	689b      	ldr	r3, [r3, #8]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d00b      	beq.n	800b334 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b322:	689b      	ldr	r3, [r3, #8]
 800b324:	687a      	ldr	r2, [r7, #4]
 800b326:	7c12      	ldrb	r2, [r2, #16]
 800b328:	f107 0108 	add.w	r1, r7, #8
 800b32c:	4610      	mov	r0, r2
 800b32e:	4798      	blx	r3
 800b330:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b332:	e077      	b.n	800b424 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b334:	6839      	ldr	r1, [r7, #0]
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f000 fa7a 	bl	800b830 <USBD_CtlError>
            err++;
 800b33c:	7afb      	ldrb	r3, [r7, #11]
 800b33e:	3301      	adds	r3, #1
 800b340:	72fb      	strb	r3, [r7, #11]
          break;
 800b342:	e06f      	b.n	800b424 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b34a:	68db      	ldr	r3, [r3, #12]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d00b      	beq.n	800b368 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b356:	68db      	ldr	r3, [r3, #12]
 800b358:	687a      	ldr	r2, [r7, #4]
 800b35a:	7c12      	ldrb	r2, [r2, #16]
 800b35c:	f107 0108 	add.w	r1, r7, #8
 800b360:	4610      	mov	r0, r2
 800b362:	4798      	blx	r3
 800b364:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b366:	e05d      	b.n	800b424 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b368:	6839      	ldr	r1, [r7, #0]
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	f000 fa60 	bl	800b830 <USBD_CtlError>
            err++;
 800b370:	7afb      	ldrb	r3, [r7, #11]
 800b372:	3301      	adds	r3, #1
 800b374:	72fb      	strb	r3, [r7, #11]
          break;
 800b376:	e055      	b.n	800b424 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b37e:	691b      	ldr	r3, [r3, #16]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d00b      	beq.n	800b39c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b38a:	691b      	ldr	r3, [r3, #16]
 800b38c:	687a      	ldr	r2, [r7, #4]
 800b38e:	7c12      	ldrb	r2, [r2, #16]
 800b390:	f107 0108 	add.w	r1, r7, #8
 800b394:	4610      	mov	r0, r2
 800b396:	4798      	blx	r3
 800b398:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b39a:	e043      	b.n	800b424 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b39c:	6839      	ldr	r1, [r7, #0]
 800b39e:	6878      	ldr	r0, [r7, #4]
 800b3a0:	f000 fa46 	bl	800b830 <USBD_CtlError>
            err++;
 800b3a4:	7afb      	ldrb	r3, [r7, #11]
 800b3a6:	3301      	adds	r3, #1
 800b3a8:	72fb      	strb	r3, [r7, #11]
          break;
 800b3aa:	e03b      	b.n	800b424 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b3b2:	695b      	ldr	r3, [r3, #20]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d00b      	beq.n	800b3d0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b3be:	695b      	ldr	r3, [r3, #20]
 800b3c0:	687a      	ldr	r2, [r7, #4]
 800b3c2:	7c12      	ldrb	r2, [r2, #16]
 800b3c4:	f107 0108 	add.w	r1, r7, #8
 800b3c8:	4610      	mov	r0, r2
 800b3ca:	4798      	blx	r3
 800b3cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3ce:	e029      	b.n	800b424 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b3d0:	6839      	ldr	r1, [r7, #0]
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	f000 fa2c 	bl	800b830 <USBD_CtlError>
            err++;
 800b3d8:	7afb      	ldrb	r3, [r7, #11]
 800b3da:	3301      	adds	r3, #1
 800b3dc:	72fb      	strb	r3, [r7, #11]
          break;
 800b3de:	e021      	b.n	800b424 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b3e6:	699b      	ldr	r3, [r3, #24]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d00b      	beq.n	800b404 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b3f2:	699b      	ldr	r3, [r3, #24]
 800b3f4:	687a      	ldr	r2, [r7, #4]
 800b3f6:	7c12      	ldrb	r2, [r2, #16]
 800b3f8:	f107 0108 	add.w	r1, r7, #8
 800b3fc:	4610      	mov	r0, r2
 800b3fe:	4798      	blx	r3
 800b400:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b402:	e00f      	b.n	800b424 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b404:	6839      	ldr	r1, [r7, #0]
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	f000 fa12 	bl	800b830 <USBD_CtlError>
            err++;
 800b40c:	7afb      	ldrb	r3, [r7, #11]
 800b40e:	3301      	adds	r3, #1
 800b410:	72fb      	strb	r3, [r7, #11]
          break;
 800b412:	e007      	b.n	800b424 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800b414:	6839      	ldr	r1, [r7, #0]
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f000 fa0a 	bl	800b830 <USBD_CtlError>
          err++;
 800b41c:	7afb      	ldrb	r3, [r7, #11]
 800b41e:	3301      	adds	r3, #1
 800b420:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800b422:	e038      	b.n	800b496 <USBD_GetDescriptor+0x286>
 800b424:	e037      	b.n	800b496 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	7c1b      	ldrb	r3, [r3, #16]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d109      	bne.n	800b442 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b436:	f107 0208 	add.w	r2, r7, #8
 800b43a:	4610      	mov	r0, r2
 800b43c:	4798      	blx	r3
 800b43e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b440:	e029      	b.n	800b496 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b442:	6839      	ldr	r1, [r7, #0]
 800b444:	6878      	ldr	r0, [r7, #4]
 800b446:	f000 f9f3 	bl	800b830 <USBD_CtlError>
        err++;
 800b44a:	7afb      	ldrb	r3, [r7, #11]
 800b44c:	3301      	adds	r3, #1
 800b44e:	72fb      	strb	r3, [r7, #11]
      break;
 800b450:	e021      	b.n	800b496 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	7c1b      	ldrb	r3, [r3, #16]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d10d      	bne.n	800b476 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b462:	f107 0208 	add.w	r2, r7, #8
 800b466:	4610      	mov	r0, r2
 800b468:	4798      	blx	r3
 800b46a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	3301      	adds	r3, #1
 800b470:	2207      	movs	r2, #7
 800b472:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b474:	e00f      	b.n	800b496 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b476:	6839      	ldr	r1, [r7, #0]
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	f000 f9d9 	bl	800b830 <USBD_CtlError>
        err++;
 800b47e:	7afb      	ldrb	r3, [r7, #11]
 800b480:	3301      	adds	r3, #1
 800b482:	72fb      	strb	r3, [r7, #11]
      break;
 800b484:	e007      	b.n	800b496 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b486:	6839      	ldr	r1, [r7, #0]
 800b488:	6878      	ldr	r0, [r7, #4]
 800b48a:	f000 f9d1 	bl	800b830 <USBD_CtlError>
      err++;
 800b48e:	7afb      	ldrb	r3, [r7, #11]
 800b490:	3301      	adds	r3, #1
 800b492:	72fb      	strb	r3, [r7, #11]
      break;
 800b494:	bf00      	nop
  }

  if (err != 0U)
 800b496:	7afb      	ldrb	r3, [r7, #11]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d11c      	bne.n	800b4d6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800b49c:	893b      	ldrh	r3, [r7, #8]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d011      	beq.n	800b4c6 <USBD_GetDescriptor+0x2b6>
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	88db      	ldrh	r3, [r3, #6]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d00d      	beq.n	800b4c6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	88da      	ldrh	r2, [r3, #6]
 800b4ae:	893b      	ldrh	r3, [r7, #8]
 800b4b0:	4293      	cmp	r3, r2
 800b4b2:	bf28      	it	cs
 800b4b4:	4613      	movcs	r3, r2
 800b4b6:	b29b      	uxth	r3, r3
 800b4b8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b4ba:	893b      	ldrh	r3, [r7, #8]
 800b4bc:	461a      	mov	r2, r3
 800b4be:	68f9      	ldr	r1, [r7, #12]
 800b4c0:	6878      	ldr	r0, [r7, #4]
 800b4c2:	f000 fa1f 	bl	800b904 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	88db      	ldrh	r3, [r3, #6]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d104      	bne.n	800b4d8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f000 fa76 	bl	800b9c0 <USBD_CtlSendStatus>
 800b4d4:	e000      	b.n	800b4d8 <USBD_GetDescriptor+0x2c8>
    return;
 800b4d6:	bf00      	nop
    }
  }
}
 800b4d8:	3710      	adds	r7, #16
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd80      	pop	{r7, pc}
 800b4de:	bf00      	nop

0800b4e0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b084      	sub	sp, #16
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
 800b4e8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	889b      	ldrh	r3, [r3, #4]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d130      	bne.n	800b554 <USBD_SetAddress+0x74>
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	88db      	ldrh	r3, [r3, #6]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d12c      	bne.n	800b554 <USBD_SetAddress+0x74>
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	885b      	ldrh	r3, [r3, #2]
 800b4fe:	2b7f      	cmp	r3, #127	; 0x7f
 800b500:	d828      	bhi.n	800b554 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	885b      	ldrh	r3, [r3, #2]
 800b506:	b2db      	uxtb	r3, r3
 800b508:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b50c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b514:	2b03      	cmp	r3, #3
 800b516:	d104      	bne.n	800b522 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b518:	6839      	ldr	r1, [r7, #0]
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f000 f988 	bl	800b830 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b520:	e01c      	b.n	800b55c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	7bfa      	ldrb	r2, [r7, #15]
 800b526:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b52a:	7bfb      	ldrb	r3, [r7, #15]
 800b52c:	4619      	mov	r1, r3
 800b52e:	6878      	ldr	r0, [r7, #4]
 800b530:	f000 fdd7 	bl	800c0e2 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	f000 fa43 	bl	800b9c0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b53a:	7bfb      	ldrb	r3, [r7, #15]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d004      	beq.n	800b54a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2202      	movs	r2, #2
 800b544:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b548:	e008      	b.n	800b55c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	2201      	movs	r2, #1
 800b54e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b552:	e003      	b.n	800b55c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b554:	6839      	ldr	r1, [r7, #0]
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f000 f96a 	bl	800b830 <USBD_CtlError>
  }
}
 800b55c:	bf00      	nop
 800b55e:	3710      	adds	r7, #16
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}

0800b564 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b082      	sub	sp, #8
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
 800b56c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	885b      	ldrh	r3, [r3, #2]
 800b572:	b2da      	uxtb	r2, r3
 800b574:	4b41      	ldr	r3, [pc, #260]	; (800b67c <USBD_SetConfig+0x118>)
 800b576:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b578:	4b40      	ldr	r3, [pc, #256]	; (800b67c <USBD_SetConfig+0x118>)
 800b57a:	781b      	ldrb	r3, [r3, #0]
 800b57c:	2b01      	cmp	r3, #1
 800b57e:	d904      	bls.n	800b58a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800b580:	6839      	ldr	r1, [r7, #0]
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f000 f954 	bl	800b830 <USBD_CtlError>
 800b588:	e075      	b.n	800b676 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b590:	2b02      	cmp	r3, #2
 800b592:	d002      	beq.n	800b59a <USBD_SetConfig+0x36>
 800b594:	2b03      	cmp	r3, #3
 800b596:	d023      	beq.n	800b5e0 <USBD_SetConfig+0x7c>
 800b598:	e062      	b.n	800b660 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800b59a:	4b38      	ldr	r3, [pc, #224]	; (800b67c <USBD_SetConfig+0x118>)
 800b59c:	781b      	ldrb	r3, [r3, #0]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d01a      	beq.n	800b5d8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800b5a2:	4b36      	ldr	r3, [pc, #216]	; (800b67c <USBD_SetConfig+0x118>)
 800b5a4:	781b      	ldrb	r3, [r3, #0]
 800b5a6:	461a      	mov	r2, r3
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2203      	movs	r2, #3
 800b5b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b5b4:	4b31      	ldr	r3, [pc, #196]	; (800b67c <USBD_SetConfig+0x118>)
 800b5b6:	781b      	ldrb	r3, [r3, #0]
 800b5b8:	4619      	mov	r1, r3
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	f7ff f9f4 	bl	800a9a8 <USBD_SetClassConfig>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	2b02      	cmp	r3, #2
 800b5c4:	d104      	bne.n	800b5d0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800b5c6:	6839      	ldr	r1, [r7, #0]
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	f000 f931 	bl	800b830 <USBD_CtlError>
            return;
 800b5ce:	e052      	b.n	800b676 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800b5d0:	6878      	ldr	r0, [r7, #4]
 800b5d2:	f000 f9f5 	bl	800b9c0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b5d6:	e04e      	b.n	800b676 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f000 f9f1 	bl	800b9c0 <USBD_CtlSendStatus>
        break;
 800b5de:	e04a      	b.n	800b676 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800b5e0:	4b26      	ldr	r3, [pc, #152]	; (800b67c <USBD_SetConfig+0x118>)
 800b5e2:	781b      	ldrb	r3, [r3, #0]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d112      	bne.n	800b60e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2202      	movs	r2, #2
 800b5ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800b5f0:	4b22      	ldr	r3, [pc, #136]	; (800b67c <USBD_SetConfig+0x118>)
 800b5f2:	781b      	ldrb	r3, [r3, #0]
 800b5f4:	461a      	mov	r2, r3
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800b5fa:	4b20      	ldr	r3, [pc, #128]	; (800b67c <USBD_SetConfig+0x118>)
 800b5fc:	781b      	ldrb	r3, [r3, #0]
 800b5fe:	4619      	mov	r1, r3
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f7ff f9f0 	bl	800a9e6 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800b606:	6878      	ldr	r0, [r7, #4]
 800b608:	f000 f9da 	bl	800b9c0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b60c:	e033      	b.n	800b676 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800b60e:	4b1b      	ldr	r3, [pc, #108]	; (800b67c <USBD_SetConfig+0x118>)
 800b610:	781b      	ldrb	r3, [r3, #0]
 800b612:	461a      	mov	r2, r3
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	685b      	ldr	r3, [r3, #4]
 800b618:	429a      	cmp	r2, r3
 800b61a:	d01d      	beq.n	800b658 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	685b      	ldr	r3, [r3, #4]
 800b620:	b2db      	uxtb	r3, r3
 800b622:	4619      	mov	r1, r3
 800b624:	6878      	ldr	r0, [r7, #4]
 800b626:	f7ff f9de 	bl	800a9e6 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800b62a:	4b14      	ldr	r3, [pc, #80]	; (800b67c <USBD_SetConfig+0x118>)
 800b62c:	781b      	ldrb	r3, [r3, #0]
 800b62e:	461a      	mov	r2, r3
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b634:	4b11      	ldr	r3, [pc, #68]	; (800b67c <USBD_SetConfig+0x118>)
 800b636:	781b      	ldrb	r3, [r3, #0]
 800b638:	4619      	mov	r1, r3
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	f7ff f9b4 	bl	800a9a8 <USBD_SetClassConfig>
 800b640:	4603      	mov	r3, r0
 800b642:	2b02      	cmp	r3, #2
 800b644:	d104      	bne.n	800b650 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800b646:	6839      	ldr	r1, [r7, #0]
 800b648:	6878      	ldr	r0, [r7, #4]
 800b64a:	f000 f8f1 	bl	800b830 <USBD_CtlError>
            return;
 800b64e:	e012      	b.n	800b676 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b650:	6878      	ldr	r0, [r7, #4]
 800b652:	f000 f9b5 	bl	800b9c0 <USBD_CtlSendStatus>
        break;
 800b656:	e00e      	b.n	800b676 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b658:	6878      	ldr	r0, [r7, #4]
 800b65a:	f000 f9b1 	bl	800b9c0 <USBD_CtlSendStatus>
        break;
 800b65e:	e00a      	b.n	800b676 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800b660:	6839      	ldr	r1, [r7, #0]
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	f000 f8e4 	bl	800b830 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800b668:	4b04      	ldr	r3, [pc, #16]	; (800b67c <USBD_SetConfig+0x118>)
 800b66a:	781b      	ldrb	r3, [r3, #0]
 800b66c:	4619      	mov	r1, r3
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	f7ff f9b9 	bl	800a9e6 <USBD_ClrClassConfig>
        break;
 800b674:	bf00      	nop
    }
  }
}
 800b676:	3708      	adds	r7, #8
 800b678:	46bd      	mov	sp, r7
 800b67a:	bd80      	pop	{r7, pc}
 800b67c:	20000750 	.word	0x20000750

0800b680 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b082      	sub	sp, #8
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
 800b688:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	88db      	ldrh	r3, [r3, #6]
 800b68e:	2b01      	cmp	r3, #1
 800b690:	d004      	beq.n	800b69c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b692:	6839      	ldr	r1, [r7, #0]
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	f000 f8cb 	bl	800b830 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b69a:	e021      	b.n	800b6e0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6a2:	2b01      	cmp	r3, #1
 800b6a4:	db17      	blt.n	800b6d6 <USBD_GetConfig+0x56>
 800b6a6:	2b02      	cmp	r3, #2
 800b6a8:	dd02      	ble.n	800b6b0 <USBD_GetConfig+0x30>
 800b6aa:	2b03      	cmp	r3, #3
 800b6ac:	d00b      	beq.n	800b6c6 <USBD_GetConfig+0x46>
 800b6ae:	e012      	b.n	800b6d6 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	3308      	adds	r3, #8
 800b6ba:	2201      	movs	r2, #1
 800b6bc:	4619      	mov	r1, r3
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	f000 f920 	bl	800b904 <USBD_CtlSendData>
        break;
 800b6c4:	e00c      	b.n	800b6e0 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	3304      	adds	r3, #4
 800b6ca:	2201      	movs	r2, #1
 800b6cc:	4619      	mov	r1, r3
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	f000 f918 	bl	800b904 <USBD_CtlSendData>
        break;
 800b6d4:	e004      	b.n	800b6e0 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800b6d6:	6839      	ldr	r1, [r7, #0]
 800b6d8:	6878      	ldr	r0, [r7, #4]
 800b6da:	f000 f8a9 	bl	800b830 <USBD_CtlError>
        break;
 800b6de:	bf00      	nop
}
 800b6e0:	bf00      	nop
 800b6e2:	3708      	adds	r7, #8
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}

0800b6e8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b082      	sub	sp, #8
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
 800b6f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6f8:	3b01      	subs	r3, #1
 800b6fa:	2b02      	cmp	r3, #2
 800b6fc:	d81e      	bhi.n	800b73c <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	88db      	ldrh	r3, [r3, #6]
 800b702:	2b02      	cmp	r3, #2
 800b704:	d004      	beq.n	800b710 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800b706:	6839      	ldr	r1, [r7, #0]
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	f000 f891 	bl	800b830 <USBD_CtlError>
        break;
 800b70e:	e01a      	b.n	800b746 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2201      	movs	r2, #1
 800b714:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d005      	beq.n	800b72c <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	68db      	ldr	r3, [r3, #12]
 800b724:	f043 0202 	orr.w	r2, r3, #2
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	330c      	adds	r3, #12
 800b730:	2202      	movs	r2, #2
 800b732:	4619      	mov	r1, r3
 800b734:	6878      	ldr	r0, [r7, #4]
 800b736:	f000 f8e5 	bl	800b904 <USBD_CtlSendData>
      break;
 800b73a:	e004      	b.n	800b746 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800b73c:	6839      	ldr	r1, [r7, #0]
 800b73e:	6878      	ldr	r0, [r7, #4]
 800b740:	f000 f876 	bl	800b830 <USBD_CtlError>
      break;
 800b744:	bf00      	nop
  }
}
 800b746:	bf00      	nop
 800b748:	3708      	adds	r7, #8
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd80      	pop	{r7, pc}

0800b74e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b74e:	b580      	push	{r7, lr}
 800b750:	b082      	sub	sp, #8
 800b752:	af00      	add	r7, sp, #0
 800b754:	6078      	str	r0, [r7, #4]
 800b756:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	885b      	ldrh	r3, [r3, #2]
 800b75c:	2b01      	cmp	r3, #1
 800b75e:	d106      	bne.n	800b76e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2201      	movs	r2, #1
 800b764:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f000 f929 	bl	800b9c0 <USBD_CtlSendStatus>
  }
}
 800b76e:	bf00      	nop
 800b770:	3708      	adds	r7, #8
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}

0800b776 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b776:	b580      	push	{r7, lr}
 800b778:	b082      	sub	sp, #8
 800b77a:	af00      	add	r7, sp, #0
 800b77c:	6078      	str	r0, [r7, #4]
 800b77e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b786:	3b01      	subs	r3, #1
 800b788:	2b02      	cmp	r3, #2
 800b78a:	d80b      	bhi.n	800b7a4 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	885b      	ldrh	r3, [r3, #2]
 800b790:	2b01      	cmp	r3, #1
 800b792:	d10c      	bne.n	800b7ae <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2200      	movs	r2, #0
 800b798:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800b79c:	6878      	ldr	r0, [r7, #4]
 800b79e:	f000 f90f 	bl	800b9c0 <USBD_CtlSendStatus>
      }
      break;
 800b7a2:	e004      	b.n	800b7ae <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b7a4:	6839      	ldr	r1, [r7, #0]
 800b7a6:	6878      	ldr	r0, [r7, #4]
 800b7a8:	f000 f842 	bl	800b830 <USBD_CtlError>
      break;
 800b7ac:	e000      	b.n	800b7b0 <USBD_ClrFeature+0x3a>
      break;
 800b7ae:	bf00      	nop
  }
}
 800b7b0:	bf00      	nop
 800b7b2:	3708      	adds	r7, #8
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	bd80      	pop	{r7, pc}

0800b7b8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b7b8:	b480      	push	{r7}
 800b7ba:	b083      	sub	sp, #12
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
 800b7c0:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	781a      	ldrb	r2, [r3, #0]
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	785a      	ldrb	r2, [r3, #1]
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	3302      	adds	r3, #2
 800b7d6:	781b      	ldrb	r3, [r3, #0]
 800b7d8:	b29a      	uxth	r2, r3
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	3303      	adds	r3, #3
 800b7de:	781b      	ldrb	r3, [r3, #0]
 800b7e0:	b29b      	uxth	r3, r3
 800b7e2:	021b      	lsls	r3, r3, #8
 800b7e4:	b29b      	uxth	r3, r3
 800b7e6:	4413      	add	r3, r2
 800b7e8:	b29a      	uxth	r2, r3
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	3304      	adds	r3, #4
 800b7f2:	781b      	ldrb	r3, [r3, #0]
 800b7f4:	b29a      	uxth	r2, r3
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	3305      	adds	r3, #5
 800b7fa:	781b      	ldrb	r3, [r3, #0]
 800b7fc:	b29b      	uxth	r3, r3
 800b7fe:	021b      	lsls	r3, r3, #8
 800b800:	b29b      	uxth	r3, r3
 800b802:	4413      	add	r3, r2
 800b804:	b29a      	uxth	r2, r3
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	3306      	adds	r3, #6
 800b80e:	781b      	ldrb	r3, [r3, #0]
 800b810:	b29a      	uxth	r2, r3
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	3307      	adds	r3, #7
 800b816:	781b      	ldrb	r3, [r3, #0]
 800b818:	b29b      	uxth	r3, r3
 800b81a:	021b      	lsls	r3, r3, #8
 800b81c:	b29b      	uxth	r3, r3
 800b81e:	4413      	add	r3, r2
 800b820:	b29a      	uxth	r2, r3
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	80da      	strh	r2, [r3, #6]

}
 800b826:	bf00      	nop
 800b828:	370c      	adds	r7, #12
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bc80      	pop	{r7}
 800b82e:	4770      	bx	lr

0800b830 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b082      	sub	sp, #8
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
 800b838:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800b83a:	2180      	movs	r1, #128	; 0x80
 800b83c:	6878      	ldr	r0, [r7, #4]
 800b83e:	f000 fbed 	bl	800c01c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800b842:	2100      	movs	r1, #0
 800b844:	6878      	ldr	r0, [r7, #4]
 800b846:	f000 fbe9 	bl	800c01c <USBD_LL_StallEP>
}
 800b84a:	bf00      	nop
 800b84c:	3708      	adds	r7, #8
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}

0800b852 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b852:	b580      	push	{r7, lr}
 800b854:	b086      	sub	sp, #24
 800b856:	af00      	add	r7, sp, #0
 800b858:	60f8      	str	r0, [r7, #12]
 800b85a:	60b9      	str	r1, [r7, #8]
 800b85c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b85e:	2300      	movs	r3, #0
 800b860:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d032      	beq.n	800b8ce <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b868:	68f8      	ldr	r0, [r7, #12]
 800b86a:	f000 f834 	bl	800b8d6 <USBD_GetLen>
 800b86e:	4603      	mov	r3, r0
 800b870:	3301      	adds	r3, #1
 800b872:	b29b      	uxth	r3, r3
 800b874:	005b      	lsls	r3, r3, #1
 800b876:	b29a      	uxth	r2, r3
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b87c:	7dfb      	ldrb	r3, [r7, #23]
 800b87e:	1c5a      	adds	r2, r3, #1
 800b880:	75fa      	strb	r2, [r7, #23]
 800b882:	461a      	mov	r2, r3
 800b884:	68bb      	ldr	r3, [r7, #8]
 800b886:	4413      	add	r3, r2
 800b888:	687a      	ldr	r2, [r7, #4]
 800b88a:	7812      	ldrb	r2, [r2, #0]
 800b88c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b88e:	7dfb      	ldrb	r3, [r7, #23]
 800b890:	1c5a      	adds	r2, r3, #1
 800b892:	75fa      	strb	r2, [r7, #23]
 800b894:	461a      	mov	r2, r3
 800b896:	68bb      	ldr	r3, [r7, #8]
 800b898:	4413      	add	r3, r2
 800b89a:	2203      	movs	r2, #3
 800b89c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800b89e:	e012      	b.n	800b8c6 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	1c5a      	adds	r2, r3, #1
 800b8a4:	60fa      	str	r2, [r7, #12]
 800b8a6:	7dfa      	ldrb	r2, [r7, #23]
 800b8a8:	1c51      	adds	r1, r2, #1
 800b8aa:	75f9      	strb	r1, [r7, #23]
 800b8ac:	4611      	mov	r1, r2
 800b8ae:	68ba      	ldr	r2, [r7, #8]
 800b8b0:	440a      	add	r2, r1
 800b8b2:	781b      	ldrb	r3, [r3, #0]
 800b8b4:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800b8b6:	7dfb      	ldrb	r3, [r7, #23]
 800b8b8:	1c5a      	adds	r2, r3, #1
 800b8ba:	75fa      	strb	r2, [r7, #23]
 800b8bc:	461a      	mov	r2, r3
 800b8be:	68bb      	ldr	r3, [r7, #8]
 800b8c0:	4413      	add	r3, r2
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	781b      	ldrb	r3, [r3, #0]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d1e8      	bne.n	800b8a0 <USBD_GetString+0x4e>
    }
  }
}
 800b8ce:	bf00      	nop
 800b8d0:	3718      	adds	r7, #24
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd80      	pop	{r7, pc}

0800b8d6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b8d6:	b480      	push	{r7}
 800b8d8:	b085      	sub	sp, #20
 800b8da:	af00      	add	r7, sp, #0
 800b8dc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b8de:	2300      	movs	r3, #0
 800b8e0:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800b8e2:	e005      	b.n	800b8f0 <USBD_GetLen+0x1a>
  {
    len++;
 800b8e4:	7bfb      	ldrb	r3, [r7, #15]
 800b8e6:	3301      	adds	r3, #1
 800b8e8:	73fb      	strb	r3, [r7, #15]
    buf++;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	3301      	adds	r3, #1
 800b8ee:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	781b      	ldrb	r3, [r3, #0]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d1f5      	bne.n	800b8e4 <USBD_GetLen+0xe>
  }

  return len;
 800b8f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	3714      	adds	r7, #20
 800b8fe:	46bd      	mov	sp, r7
 800b900:	bc80      	pop	{r7}
 800b902:	4770      	bx	lr

0800b904 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b084      	sub	sp, #16
 800b908:	af00      	add	r7, sp, #0
 800b90a:	60f8      	str	r0, [r7, #12]
 800b90c:	60b9      	str	r1, [r7, #8]
 800b90e:	4613      	mov	r3, r2
 800b910:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	2202      	movs	r2, #2
 800b916:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b91a:	88fa      	ldrh	r2, [r7, #6]
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b920:	88fa      	ldrh	r2, [r7, #6]
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b926:	88fb      	ldrh	r3, [r7, #6]
 800b928:	68ba      	ldr	r2, [r7, #8]
 800b92a:	2100      	movs	r1, #0
 800b92c:	68f8      	ldr	r0, [r7, #12]
 800b92e:	f000 fbf7 	bl	800c120 <USBD_LL_Transmit>

  return USBD_OK;
 800b932:	2300      	movs	r3, #0
}
 800b934:	4618      	mov	r0, r3
 800b936:	3710      	adds	r7, #16
 800b938:	46bd      	mov	sp, r7
 800b93a:	bd80      	pop	{r7, pc}

0800b93c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b084      	sub	sp, #16
 800b940:	af00      	add	r7, sp, #0
 800b942:	60f8      	str	r0, [r7, #12]
 800b944:	60b9      	str	r1, [r7, #8]
 800b946:	4613      	mov	r3, r2
 800b948:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b94a:	88fb      	ldrh	r3, [r7, #6]
 800b94c:	68ba      	ldr	r2, [r7, #8]
 800b94e:	2100      	movs	r1, #0
 800b950:	68f8      	ldr	r0, [r7, #12]
 800b952:	f000 fbe5 	bl	800c120 <USBD_LL_Transmit>

  return USBD_OK;
 800b956:	2300      	movs	r3, #0
}
 800b958:	4618      	mov	r0, r3
 800b95a:	3710      	adds	r7, #16
 800b95c:	46bd      	mov	sp, r7
 800b95e:	bd80      	pop	{r7, pc}

0800b960 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b084      	sub	sp, #16
 800b964:	af00      	add	r7, sp, #0
 800b966:	60f8      	str	r0, [r7, #12]
 800b968:	60b9      	str	r1, [r7, #8]
 800b96a:	4613      	mov	r3, r2
 800b96c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	2203      	movs	r2, #3
 800b972:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b976:	88fa      	ldrh	r2, [r7, #6]
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800b97e:	88fa      	ldrh	r2, [r7, #6]
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b986:	88fb      	ldrh	r3, [r7, #6]
 800b988:	68ba      	ldr	r2, [r7, #8]
 800b98a:	2100      	movs	r1, #0
 800b98c:	68f8      	ldr	r0, [r7, #12]
 800b98e:	f000 fbea 	bl	800c166 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b992:	2300      	movs	r3, #0
}
 800b994:	4618      	mov	r0, r3
 800b996:	3710      	adds	r7, #16
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}

0800b99c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b084      	sub	sp, #16
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	60f8      	str	r0, [r7, #12]
 800b9a4:	60b9      	str	r1, [r7, #8]
 800b9a6:	4613      	mov	r3, r2
 800b9a8:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b9aa:	88fb      	ldrh	r3, [r7, #6]
 800b9ac:	68ba      	ldr	r2, [r7, #8]
 800b9ae:	2100      	movs	r1, #0
 800b9b0:	68f8      	ldr	r0, [r7, #12]
 800b9b2:	f000 fbd8 	bl	800c166 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b9b6:	2300      	movs	r3, #0
}
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	3710      	adds	r7, #16
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}

0800b9c0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b082      	sub	sp, #8
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2204      	movs	r2, #4
 800b9cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	2100      	movs	r1, #0
 800b9d6:	6878      	ldr	r0, [r7, #4]
 800b9d8:	f000 fba2 	bl	800c120 <USBD_LL_Transmit>

  return USBD_OK;
 800b9dc:	2300      	movs	r3, #0
}
 800b9de:	4618      	mov	r0, r3
 800b9e0:	3708      	adds	r7, #8
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	bd80      	pop	{r7, pc}

0800b9e6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b9e6:	b580      	push	{r7, lr}
 800b9e8:	b082      	sub	sp, #8
 800b9ea:	af00      	add	r7, sp, #0
 800b9ec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	2205      	movs	r2, #5
 800b9f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	2100      	movs	r1, #0
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f000 fbb2 	bl	800c166 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba02:	2300      	movs	r3, #0
}
 800ba04:	4618      	mov	r0, r3
 800ba06:	3708      	adds	r7, #8
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bd80      	pop	{r7, pc}

0800ba0c <my_MX_USB_DEVICE_Init>:
/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void my_MX_USB_DEVICE_Init(void)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	af00      	add	r7, sp, #0
  DecTrigger = 1;
 800ba10:	4b0a      	ldr	r3, [pc, #40]	; (800ba3c <my_MX_USB_DEVICE_Init+0x30>)
 800ba12:	2201      	movs	r2, #1
 800ba14:	601a      	str	r2, [r3, #0]
  /* Init Device Library,Add Supported Class and Start the library*/
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 800ba16:	2200      	movs	r2, #0
 800ba18:	4909      	ldr	r1, [pc, #36]	; (800ba40 <my_MX_USB_DEVICE_Init+0x34>)
 800ba1a:	480a      	ldr	r0, [pc, #40]	; (800ba44 <my_MX_USB_DEVICE_Init+0x38>)
 800ba1c:	f7fe ff6a 	bl	800a8f4 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID);
 800ba20:	4909      	ldr	r1, [pc, #36]	; (800ba48 <my_MX_USB_DEVICE_Init+0x3c>)
 800ba22:	4808      	ldr	r0, [pc, #32]	; (800ba44 <my_MX_USB_DEVICE_Init+0x38>)
 800ba24:	f7fe ff91 	bl	800a94a <USBD_RegisterClass>

  USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS);
 800ba28:	4908      	ldr	r1, [pc, #32]	; (800ba4c <my_MX_USB_DEVICE_Init+0x40>)
 800ba2a:	4806      	ldr	r0, [pc, #24]	; (800ba44 <my_MX_USB_DEVICE_Init+0x38>)
 800ba2c:	f7f8 f8a4 	bl	8003b78 <USBD_CUSTOM_HID_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 800ba30:	4804      	ldr	r0, [pc, #16]	; (800ba44 <my_MX_USB_DEVICE_Init+0x38>)
 800ba32:	f7fe ffa3 	bl	800a97c <USBD_Start>

}
 800ba36:	bf00      	nop
 800ba38:	bd80      	pop	{r7, pc}
 800ba3a:	bf00      	nop
 800ba3c:	20000bd8 	.word	0x20000bd8
 800ba40:	20000140 	.word	0x20000140
 800ba44:	20000be0 	.word	0x20000be0
 800ba48:	20000048 	.word	0x20000048
 800ba4c:	20000038 	.word	0x20000038

0800ba50 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b084      	sub	sp, #16
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
 800ba58:	460b      	mov	r3, r1
 800ba5a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ba60:	4b0d      	ldr	r3, [pc, #52]	; (800ba98 <CDC_Transmit_FS+0x48>)
 800ba62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba66:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d001      	beq.n	800ba76 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ba72:	2301      	movs	r3, #1
 800ba74:	e00b      	b.n	800ba8e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ba76:	887b      	ldrh	r3, [r7, #2]
 800ba78:	461a      	mov	r2, r3
 800ba7a:	6879      	ldr	r1, [r7, #4]
 800ba7c:	4806      	ldr	r0, [pc, #24]	; (800ba98 <CDC_Transmit_FS+0x48>)
 800ba7e:	f7fe fef1 	bl	800a864 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ba82:	4805      	ldr	r0, [pc, #20]	; (800ba98 <CDC_Transmit_FS+0x48>)
 800ba84:	f7fe ff07 	bl	800a896 <USBD_CDC_TransmitPacket>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ba8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba8e:	4618      	mov	r0, r3
 800ba90:	3710      	adds	r7, #16
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bd80      	pop	{r7, pc}
 800ba96:	bf00      	nop
 800ba98:	20000be0 	.word	0x20000be0

0800ba9c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba9c:	b480      	push	{r7}
 800ba9e:	b083      	sub	sp, #12
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	4603      	mov	r3, r0
 800baa4:	6039      	str	r1, [r7, #0]
 800baa6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  if(DecTrigger == 1){
 800baa8:	4b08      	ldr	r3, [pc, #32]	; (800bacc <USBD_FS_DeviceDescriptor+0x30>)
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	2b01      	cmp	r3, #1
 800baae:	d104      	bne.n	800baba <USBD_FS_DeviceDescriptor+0x1e>
	  *length = sizeof(MY_USBD_FS_DeviceDesc);
 800bab0:	683b      	ldr	r3, [r7, #0]
 800bab2:	2212      	movs	r2, #18
 800bab4:	801a      	strh	r2, [r3, #0]
	  return MY_USBD_FS_DeviceDesc;
 800bab6:	4b06      	ldr	r3, [pc, #24]	; (800bad0 <USBD_FS_DeviceDescriptor+0x34>)
 800bab8:	e003      	b.n	800bac2 <USBD_FS_DeviceDescriptor+0x26>
  } else {
	  *length = sizeof(USBD_FS_DeviceDesc);
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	2212      	movs	r2, #18
 800babe:	801a      	strh	r2, [r3, #0]
	  return USBD_FS_DeviceDesc;
 800bac0:	4b04      	ldr	r3, [pc, #16]	; (800bad4 <USBD_FS_DeviceDescriptor+0x38>)
  }
}
 800bac2:	4618      	mov	r0, r3
 800bac4:	370c      	adds	r7, #12
 800bac6:	46bd      	mov	sp, r7
 800bac8:	bc80      	pop	{r7}
 800baca:	4770      	bx	lr
 800bacc:	20000bd8 	.word	0x20000bd8
 800bad0:	2000015c 	.word	0x2000015c
 800bad4:	20000170 	.word	0x20000170

0800bad8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bad8:	b480      	push	{r7}
 800bada:	b083      	sub	sp, #12
 800badc:	af00      	add	r7, sp, #0
 800bade:	4603      	mov	r3, r0
 800bae0:	6039      	str	r1, [r7, #0]
 800bae2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	2204      	movs	r2, #4
 800bae8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800baea:	4b03      	ldr	r3, [pc, #12]	; (800baf8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800baec:	4618      	mov	r0, r3
 800baee:	370c      	adds	r7, #12
 800baf0:	46bd      	mov	sp, r7
 800baf2:	bc80      	pop	{r7}
 800baf4:	4770      	bx	lr
 800baf6:	bf00      	nop
 800baf8:	20000184 	.word	0x20000184

0800bafc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b082      	sub	sp, #8
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	4603      	mov	r3, r0
 800bb04:	6039      	str	r1, [r7, #0]
 800bb06:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bb08:	79fb      	ldrb	r3, [r7, #7]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d105      	bne.n	800bb1a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bb0e:	683a      	ldr	r2, [r7, #0]
 800bb10:	4907      	ldr	r1, [pc, #28]	; (800bb30 <USBD_FS_ProductStrDescriptor+0x34>)
 800bb12:	4808      	ldr	r0, [pc, #32]	; (800bb34 <USBD_FS_ProductStrDescriptor+0x38>)
 800bb14:	f7ff fe9d 	bl	800b852 <USBD_GetString>
 800bb18:	e004      	b.n	800bb24 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bb1a:	683a      	ldr	r2, [r7, #0]
 800bb1c:	4904      	ldr	r1, [pc, #16]	; (800bb30 <USBD_FS_ProductStrDescriptor+0x34>)
 800bb1e:	4805      	ldr	r0, [pc, #20]	; (800bb34 <USBD_FS_ProductStrDescriptor+0x38>)
 800bb20:	f7ff fe97 	bl	800b852 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bb24:	4b02      	ldr	r3, [pc, #8]	; (800bb30 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bb26:	4618      	mov	r0, r3
 800bb28:	3708      	adds	r7, #8
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	bd80      	pop	{r7, pc}
 800bb2e:	bf00      	nop
 800bb30:	20000ea4 	.word	0x20000ea4
 800bb34:	0800d068 	.word	0x0800d068

0800bb38 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b082      	sub	sp, #8
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	4603      	mov	r3, r0
 800bb40:	6039      	str	r1, [r7, #0]
 800bb42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bb44:	683a      	ldr	r2, [r7, #0]
 800bb46:	4904      	ldr	r1, [pc, #16]	; (800bb58 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bb48:	4804      	ldr	r0, [pc, #16]	; (800bb5c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bb4a:	f7ff fe82 	bl	800b852 <USBD_GetString>
  return USBD_StrDesc;
 800bb4e:	4b02      	ldr	r3, [pc, #8]	; (800bb58 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bb50:	4618      	mov	r0, r3
 800bb52:	3708      	adds	r7, #8
 800bb54:	46bd      	mov	sp, r7
 800bb56:	bd80      	pop	{r7, pc}
 800bb58:	20000ea4 	.word	0x20000ea4
 800bb5c:	0800d070 	.word	0x0800d070

0800bb60 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b082      	sub	sp, #8
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	4603      	mov	r3, r0
 800bb68:	6039      	str	r1, [r7, #0]
 800bb6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	221a      	movs	r2, #26
 800bb70:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bb72:	f000 f873 	bl	800bc5c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bb76:	4b02      	ldr	r3, [pc, #8]	; (800bb80 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bb78:	4618      	mov	r0, r3
 800bb7a:	3708      	adds	r7, #8
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}
 800bb80:	20000188 	.word	0x20000188

0800bb84 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b082      	sub	sp, #8
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	6039      	str	r1, [r7, #0]
 800bb8e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bb90:	79fb      	ldrb	r3, [r7, #7]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d10f      	bne.n	800bbb6 <USBD_FS_ConfigStrDescriptor+0x32>
  {
	  if(DecTrigger == 1) USBD_GetString((uint8_t *)MY_USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bb96:	4b12      	ldr	r3, [pc, #72]	; (800bbe0 <USBD_FS_ConfigStrDescriptor+0x5c>)
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	2b01      	cmp	r3, #1
 800bb9c:	d105      	bne.n	800bbaa <USBD_FS_ConfigStrDescriptor+0x26>
 800bb9e:	683a      	ldr	r2, [r7, #0]
 800bba0:	4910      	ldr	r1, [pc, #64]	; (800bbe4 <USBD_FS_ConfigStrDescriptor+0x60>)
 800bba2:	4811      	ldr	r0, [pc, #68]	; (800bbe8 <USBD_FS_ConfigStrDescriptor+0x64>)
 800bba4:	f7ff fe55 	bl	800b852 <USBD_GetString>
 800bba8:	e014      	b.n	800bbd4 <USBD_FS_ConfigStrDescriptor+0x50>
	  else USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bbaa:	683a      	ldr	r2, [r7, #0]
 800bbac:	490d      	ldr	r1, [pc, #52]	; (800bbe4 <USBD_FS_ConfigStrDescriptor+0x60>)
 800bbae:	480f      	ldr	r0, [pc, #60]	; (800bbec <USBD_FS_ConfigStrDescriptor+0x68>)
 800bbb0:	f7ff fe4f 	bl	800b852 <USBD_GetString>
 800bbb4:	e00e      	b.n	800bbd4 <USBD_FS_ConfigStrDescriptor+0x50>
  }
  else
  {
	  if(DecTrigger == 1) USBD_GetString((uint8_t *)MY_USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bbb6:	4b0a      	ldr	r3, [pc, #40]	; (800bbe0 <USBD_FS_ConfigStrDescriptor+0x5c>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	2b01      	cmp	r3, #1
 800bbbc:	d105      	bne.n	800bbca <USBD_FS_ConfigStrDescriptor+0x46>
 800bbbe:	683a      	ldr	r2, [r7, #0]
 800bbc0:	4908      	ldr	r1, [pc, #32]	; (800bbe4 <USBD_FS_ConfigStrDescriptor+0x60>)
 800bbc2:	4809      	ldr	r0, [pc, #36]	; (800bbe8 <USBD_FS_ConfigStrDescriptor+0x64>)
 800bbc4:	f7ff fe45 	bl	800b852 <USBD_GetString>
 800bbc8:	e004      	b.n	800bbd4 <USBD_FS_ConfigStrDescriptor+0x50>
	  else USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bbca:	683a      	ldr	r2, [r7, #0]
 800bbcc:	4905      	ldr	r1, [pc, #20]	; (800bbe4 <USBD_FS_ConfigStrDescriptor+0x60>)
 800bbce:	4807      	ldr	r0, [pc, #28]	; (800bbec <USBD_FS_ConfigStrDescriptor+0x68>)
 800bbd0:	f7ff fe3f 	bl	800b852 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bbd4:	4b03      	ldr	r3, [pc, #12]	; (800bbe4 <USBD_FS_ConfigStrDescriptor+0x60>)
}
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	3708      	adds	r7, #8
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bd80      	pop	{r7, pc}
 800bbde:	bf00      	nop
 800bbe0:	20000bd8 	.word	0x20000bd8
 800bbe4:	20000ea4 	.word	0x20000ea4
 800bbe8:	0800d07c 	.word	0x0800d07c
 800bbec:	0800d090 	.word	0x0800d090

0800bbf0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b082      	sub	sp, #8
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	6039      	str	r1, [r7, #0]
 800bbfa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bbfc:	79fb      	ldrb	r3, [r7, #7]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d10f      	bne.n	800bc22 <USBD_FS_InterfaceStrDescriptor+0x32>
  {
	  if(DecTrigger == 1) USBD_GetString((uint8_t *)MY_USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bc02:	4b12      	ldr	r3, [pc, #72]	; (800bc4c <USBD_FS_InterfaceStrDescriptor+0x5c>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	2b01      	cmp	r3, #1
 800bc08:	d105      	bne.n	800bc16 <USBD_FS_InterfaceStrDescriptor+0x26>
 800bc0a:	683a      	ldr	r2, [r7, #0]
 800bc0c:	4910      	ldr	r1, [pc, #64]	; (800bc50 <USBD_FS_InterfaceStrDescriptor+0x60>)
 800bc0e:	4811      	ldr	r0, [pc, #68]	; (800bc54 <USBD_FS_InterfaceStrDescriptor+0x64>)
 800bc10:	f7ff fe1f 	bl	800b852 <USBD_GetString>
 800bc14:	e014      	b.n	800bc40 <USBD_FS_InterfaceStrDescriptor+0x50>
	  else USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bc16:	683a      	ldr	r2, [r7, #0]
 800bc18:	490d      	ldr	r1, [pc, #52]	; (800bc50 <USBD_FS_InterfaceStrDescriptor+0x60>)
 800bc1a:	480f      	ldr	r0, [pc, #60]	; (800bc58 <USBD_FS_InterfaceStrDescriptor+0x68>)
 800bc1c:	f7ff fe19 	bl	800b852 <USBD_GetString>
 800bc20:	e00e      	b.n	800bc40 <USBD_FS_InterfaceStrDescriptor+0x50>
  }
  else
  {
	  if(DecTrigger == 1) USBD_GetString((uint8_t *)MY_USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bc22:	4b0a      	ldr	r3, [pc, #40]	; (800bc4c <USBD_FS_InterfaceStrDescriptor+0x5c>)
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	2b01      	cmp	r3, #1
 800bc28:	d105      	bne.n	800bc36 <USBD_FS_InterfaceStrDescriptor+0x46>
 800bc2a:	683a      	ldr	r2, [r7, #0]
 800bc2c:	4908      	ldr	r1, [pc, #32]	; (800bc50 <USBD_FS_InterfaceStrDescriptor+0x60>)
 800bc2e:	4809      	ldr	r0, [pc, #36]	; (800bc54 <USBD_FS_InterfaceStrDescriptor+0x64>)
 800bc30:	f7ff fe0f 	bl	800b852 <USBD_GetString>
 800bc34:	e004      	b.n	800bc40 <USBD_FS_InterfaceStrDescriptor+0x50>
	  else USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bc36:	683a      	ldr	r2, [r7, #0]
 800bc38:	4905      	ldr	r1, [pc, #20]	; (800bc50 <USBD_FS_InterfaceStrDescriptor+0x60>)
 800bc3a:	4807      	ldr	r0, [pc, #28]	; (800bc58 <USBD_FS_InterfaceStrDescriptor+0x68>)
 800bc3c:	f7ff fe09 	bl	800b852 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bc40:	4b03      	ldr	r3, [pc, #12]	; (800bc50 <USBD_FS_InterfaceStrDescriptor+0x60>)
}
 800bc42:	4618      	mov	r0, r3
 800bc44:	3708      	adds	r7, #8
 800bc46:	46bd      	mov	sp, r7
 800bc48:	bd80      	pop	{r7, pc}
 800bc4a:	bf00      	nop
 800bc4c:	20000bd8 	.word	0x20000bd8
 800bc50:	20000ea4 	.word	0x20000ea4
 800bc54:	0800d09c 	.word	0x0800d09c
 800bc58:	0800d150 	.word	0x0800d150

0800bc5c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b084      	sub	sp, #16
 800bc60:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bc62:	4b0f      	ldr	r3, [pc, #60]	; (800bca0 <Get_SerialNum+0x44>)
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bc68:	4b0e      	ldr	r3, [pc, #56]	; (800bca4 <Get_SerialNum+0x48>)
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bc6e:	4b0e      	ldr	r3, [pc, #56]	; (800bca8 <Get_SerialNum+0x4c>)
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bc74:	68fa      	ldr	r2, [r7, #12]
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	4413      	add	r3, r2
 800bc7a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d009      	beq.n	800bc96 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bc82:	2208      	movs	r2, #8
 800bc84:	4909      	ldr	r1, [pc, #36]	; (800bcac <Get_SerialNum+0x50>)
 800bc86:	68f8      	ldr	r0, [r7, #12]
 800bc88:	f000 f814 	bl	800bcb4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bc8c:	2204      	movs	r2, #4
 800bc8e:	4908      	ldr	r1, [pc, #32]	; (800bcb0 <Get_SerialNum+0x54>)
 800bc90:	68b8      	ldr	r0, [r7, #8]
 800bc92:	f000 f80f 	bl	800bcb4 <IntToUnicode>
  }
}
 800bc96:	bf00      	nop
 800bc98:	3710      	adds	r7, #16
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	bd80      	pop	{r7, pc}
 800bc9e:	bf00      	nop
 800bca0:	1ffff7e8 	.word	0x1ffff7e8
 800bca4:	1ffff7ec 	.word	0x1ffff7ec
 800bca8:	1ffff7f0 	.word	0x1ffff7f0
 800bcac:	2000018a 	.word	0x2000018a
 800bcb0:	2000019a 	.word	0x2000019a

0800bcb4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bcb4:	b480      	push	{r7}
 800bcb6:	b087      	sub	sp, #28
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	60f8      	str	r0, [r7, #12]
 800bcbc:	60b9      	str	r1, [r7, #8]
 800bcbe:	4613      	mov	r3, r2
 800bcc0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	75fb      	strb	r3, [r7, #23]
 800bcca:	e027      	b.n	800bd1c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	0f1b      	lsrs	r3, r3, #28
 800bcd0:	2b09      	cmp	r3, #9
 800bcd2:	d80b      	bhi.n	800bcec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	0f1b      	lsrs	r3, r3, #28
 800bcd8:	b2da      	uxtb	r2, r3
 800bcda:	7dfb      	ldrb	r3, [r7, #23]
 800bcdc:	005b      	lsls	r3, r3, #1
 800bcde:	4619      	mov	r1, r3
 800bce0:	68bb      	ldr	r3, [r7, #8]
 800bce2:	440b      	add	r3, r1
 800bce4:	3230      	adds	r2, #48	; 0x30
 800bce6:	b2d2      	uxtb	r2, r2
 800bce8:	701a      	strb	r2, [r3, #0]
 800bcea:	e00a      	b.n	800bd02 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	0f1b      	lsrs	r3, r3, #28
 800bcf0:	b2da      	uxtb	r2, r3
 800bcf2:	7dfb      	ldrb	r3, [r7, #23]
 800bcf4:	005b      	lsls	r3, r3, #1
 800bcf6:	4619      	mov	r1, r3
 800bcf8:	68bb      	ldr	r3, [r7, #8]
 800bcfa:	440b      	add	r3, r1
 800bcfc:	3237      	adds	r2, #55	; 0x37
 800bcfe:	b2d2      	uxtb	r2, r2
 800bd00:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	011b      	lsls	r3, r3, #4
 800bd06:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bd08:	7dfb      	ldrb	r3, [r7, #23]
 800bd0a:	005b      	lsls	r3, r3, #1
 800bd0c:	3301      	adds	r3, #1
 800bd0e:	68ba      	ldr	r2, [r7, #8]
 800bd10:	4413      	add	r3, r2
 800bd12:	2200      	movs	r2, #0
 800bd14:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bd16:	7dfb      	ldrb	r3, [r7, #23]
 800bd18:	3301      	adds	r3, #1
 800bd1a:	75fb      	strb	r3, [r7, #23]
 800bd1c:	7dfa      	ldrb	r2, [r7, #23]
 800bd1e:	79fb      	ldrb	r3, [r7, #7]
 800bd20:	429a      	cmp	r2, r3
 800bd22:	d3d3      	bcc.n	800bccc <IntToUnicode+0x18>
  }
}
 800bd24:	bf00      	nop
 800bd26:	371c      	adds	r7, #28
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bc80      	pop	{r7}
 800bd2c:	4770      	bx	lr
	...

0800bd30 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b084      	sub	sp, #16
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	4a0d      	ldr	r2, [pc, #52]	; (800bd74 <HAL_PCD_MspInit+0x44>)
 800bd3e:	4293      	cmp	r3, r2
 800bd40:	d113      	bne.n	800bd6a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800bd42:	4b0d      	ldr	r3, [pc, #52]	; (800bd78 <HAL_PCD_MspInit+0x48>)
 800bd44:	69db      	ldr	r3, [r3, #28]
 800bd46:	4a0c      	ldr	r2, [pc, #48]	; (800bd78 <HAL_PCD_MspInit+0x48>)
 800bd48:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bd4c:	61d3      	str	r3, [r2, #28]
 800bd4e:	4b0a      	ldr	r3, [pc, #40]	; (800bd78 <HAL_PCD_MspInit+0x48>)
 800bd50:	69db      	ldr	r3, [r3, #28]
 800bd52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bd56:	60fb      	str	r3, [r7, #12]
 800bd58:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	2100      	movs	r1, #0
 800bd5e:	2014      	movs	r0, #20
 800bd60:	f7f9 fa43 	bl	80051ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800bd64:	2014      	movs	r0, #20
 800bd66:	f7f9 fa5c 	bl	8005222 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800bd6a:	bf00      	nop
 800bd6c:	3710      	adds	r7, #16
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bd80      	pop	{r7, pc}
 800bd72:	bf00      	nop
 800bd74:	40005c00 	.word	0x40005c00
 800bd78:	40021000 	.word	0x40021000

0800bd7c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b082      	sub	sp, #8
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800bd90:	4619      	mov	r1, r3
 800bd92:	4610      	mov	r0, r2
 800bd94:	f7fe fe3a 	bl	800aa0c <USBD_LL_SetupStage>
}
 800bd98:	bf00      	nop
 800bd9a:	3708      	adds	r7, #8
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	bd80      	pop	{r7, pc}

0800bda0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b082      	sub	sp, #8
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
 800bda8:	460b      	mov	r3, r1
 800bdaa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800bdb2:	78fb      	ldrb	r3, [r7, #3]
 800bdb4:	687a      	ldr	r2, [r7, #4]
 800bdb6:	015b      	lsls	r3, r3, #5
 800bdb8:	4413      	add	r3, r2
 800bdba:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800bdbe:	681a      	ldr	r2, [r3, #0]
 800bdc0:	78fb      	ldrb	r3, [r7, #3]
 800bdc2:	4619      	mov	r1, r3
 800bdc4:	f7fe fe6d 	bl	800aaa2 <USBD_LL_DataOutStage>
}
 800bdc8:	bf00      	nop
 800bdca:	3708      	adds	r7, #8
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	bd80      	pop	{r7, pc}

0800bdd0 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b082      	sub	sp, #8
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
 800bdd8:	460b      	mov	r3, r1
 800bdda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800bde2:	78fb      	ldrb	r3, [r7, #3]
 800bde4:	687a      	ldr	r2, [r7, #4]
 800bde6:	015b      	lsls	r3, r3, #5
 800bde8:	4413      	add	r3, r2
 800bdea:	333c      	adds	r3, #60	; 0x3c
 800bdec:	681a      	ldr	r2, [r3, #0]
 800bdee:	78fb      	ldrb	r3, [r7, #3]
 800bdf0:	4619      	mov	r1, r3
 800bdf2:	f7fe fec7 	bl	800ab84 <USBD_LL_DataInStage>
}
 800bdf6:	bf00      	nop
 800bdf8:	3708      	adds	r7, #8
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bd80      	pop	{r7, pc}

0800bdfe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdfe:	b580      	push	{r7, lr}
 800be00:	b082      	sub	sp, #8
 800be02:	af00      	add	r7, sp, #0
 800be04:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800be0c:	4618      	mov	r0, r3
 800be0e:	f7fe ffd7 	bl	800adc0 <USBD_LL_SOF>
}
 800be12:	bf00      	nop
 800be14:	3708      	adds	r7, #8
 800be16:	46bd      	mov	sp, r7
 800be18:	bd80      	pop	{r7, pc}

0800be1a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800be1a:	b580      	push	{r7, lr}
 800be1c:	b084      	sub	sp, #16
 800be1e:	af00      	add	r7, sp, #0
 800be20:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800be22:	2301      	movs	r3, #1
 800be24:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	689b      	ldr	r3, [r3, #8]
 800be2a:	2b02      	cmp	r3, #2
 800be2c:	d001      	beq.n	800be32 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800be2e:	f7f7 fcdf 	bl	80037f0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800be38:	7bfa      	ldrb	r2, [r7, #15]
 800be3a:	4611      	mov	r1, r2
 800be3c:	4618      	mov	r0, r3
 800be3e:	f7fe ff87 	bl	800ad50 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800be48:	4618      	mov	r0, r3
 800be4a:	f7fe ff40 	bl	800acce <USBD_LL_Reset>
}
 800be4e:	bf00      	nop
 800be50:	3710      	adds	r7, #16
 800be52:	46bd      	mov	sp, r7
 800be54:	bd80      	pop	{r7, pc}
	...

0800be58 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b082      	sub	sp, #8
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800be66:	4618      	mov	r0, r3
 800be68:	f7fe ff81 	bl	800ad6e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	699b      	ldr	r3, [r3, #24]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d005      	beq.n	800be80 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800be74:	4b04      	ldr	r3, [pc, #16]	; (800be88 <HAL_PCD_SuspendCallback+0x30>)
 800be76:	691b      	ldr	r3, [r3, #16]
 800be78:	4a03      	ldr	r2, [pc, #12]	; (800be88 <HAL_PCD_SuspendCallback+0x30>)
 800be7a:	f043 0306 	orr.w	r3, r3, #6
 800be7e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800be80:	bf00      	nop
 800be82:	3708      	adds	r7, #8
 800be84:	46bd      	mov	sp, r7
 800be86:	bd80      	pop	{r7, pc}
 800be88:	e000ed00 	.word	0xe000ed00

0800be8c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b082      	sub	sp, #8
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800be9a:	4618      	mov	r0, r3
 800be9c:	f7fe ff7b 	bl	800ad96 <USBD_LL_Resume>
}
 800bea0:	bf00      	nop
 800bea2:	3708      	adds	r7, #8
 800bea4:	46bd      	mov	sp, r7
 800bea6:	bd80      	pop	{r7, pc}

0800bea8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b082      	sub	sp, #8
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800beb0:	4a28      	ldr	r2, [pc, #160]	; (800bf54 <USBD_LL_Init+0xac>)
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	4a26      	ldr	r2, [pc, #152]	; (800bf54 <USBD_LL_Init+0xac>)
 800bebc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800bec0:	4b24      	ldr	r3, [pc, #144]	; (800bf54 <USBD_LL_Init+0xac>)
 800bec2:	4a25      	ldr	r2, [pc, #148]	; (800bf58 <USBD_LL_Init+0xb0>)
 800bec4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800bec6:	4b23      	ldr	r3, [pc, #140]	; (800bf54 <USBD_LL_Init+0xac>)
 800bec8:	2208      	movs	r2, #8
 800beca:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800becc:	4b21      	ldr	r3, [pc, #132]	; (800bf54 <USBD_LL_Init+0xac>)
 800bece:	2202      	movs	r2, #2
 800bed0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800bed2:	4b20      	ldr	r3, [pc, #128]	; (800bf54 <USBD_LL_Init+0xac>)
 800bed4:	2200      	movs	r2, #0
 800bed6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800bed8:	4b1e      	ldr	r3, [pc, #120]	; (800bf54 <USBD_LL_Init+0xac>)
 800beda:	2200      	movs	r2, #0
 800bedc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800bede:	4b1d      	ldr	r3, [pc, #116]	; (800bf54 <USBD_LL_Init+0xac>)
 800bee0:	2200      	movs	r2, #0
 800bee2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800bee4:	481b      	ldr	r0, [pc, #108]	; (800bf54 <USBD_LL_Init+0xac>)
 800bee6:	f7fa fcc3 	bl	8006870 <HAL_PCD_Init>
 800beea:	4603      	mov	r3, r0
 800beec:	2b00      	cmp	r3, #0
 800beee:	d001      	beq.n	800bef4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800bef0:	f7f7 fc7e 	bl	80037f0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800befa:	2318      	movs	r3, #24
 800befc:	2200      	movs	r2, #0
 800befe:	2100      	movs	r1, #0
 800bf00:	f7fb fb48 	bl	8007594 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bf0a:	2358      	movs	r3, #88	; 0x58
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	2180      	movs	r1, #128	; 0x80
 800bf10:	f7fb fb40 	bl	8007594 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bf1a:	23c0      	movs	r3, #192	; 0xc0
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	2181      	movs	r1, #129	; 0x81
 800bf20:	f7fb fb38 	bl	8007594 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bf2a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800bf2e:	2200      	movs	r2, #0
 800bf30:	2101      	movs	r1, #1
 800bf32:	f7fb fb2f 	bl	8007594 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bf3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bf40:	2200      	movs	r2, #0
 800bf42:	2182      	movs	r1, #130	; 0x82
 800bf44:	f7fb fb26 	bl	8007594 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800bf48:	2300      	movs	r3, #0
}
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	3708      	adds	r7, #8
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	bd80      	pop	{r7, pc}
 800bf52:	bf00      	nop
 800bf54:	200010a4 	.word	0x200010a4
 800bf58:	40005c00 	.word	0x40005c00

0800bf5c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b084      	sub	sp, #16
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf64:	2300      	movs	r3, #0
 800bf66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf68:	2300      	movs	r3, #0
 800bf6a:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bf72:	4618      	mov	r0, r3
 800bf74:	f7fa fd5d 	bl	8006a32 <HAL_PCD_Start>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf7c:	7bfb      	ldrb	r3, [r7, #15]
 800bf7e:	4618      	mov	r0, r3
 800bf80:	f000 f934 	bl	800c1ec <USBD_Get_USB_Status>
 800bf84:	4603      	mov	r3, r0
 800bf86:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800bf88:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	3710      	adds	r7, #16
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	bd80      	pop	{r7, pc}

0800bf92 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bf92:	b580      	push	{r7, lr}
 800bf94:	b084      	sub	sp, #16
 800bf96:	af00      	add	r7, sp, #0
 800bf98:	6078      	str	r0, [r7, #4]
 800bf9a:	4608      	mov	r0, r1
 800bf9c:	4611      	mov	r1, r2
 800bf9e:	461a      	mov	r2, r3
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	70fb      	strb	r3, [r7, #3]
 800bfa4:	460b      	mov	r3, r1
 800bfa6:	70bb      	strb	r3, [r7, #2]
 800bfa8:	4613      	mov	r3, r2
 800bfaa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfac:	2300      	movs	r3, #0
 800bfae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bfba:	78bb      	ldrb	r3, [r7, #2]
 800bfbc:	883a      	ldrh	r2, [r7, #0]
 800bfbe:	78f9      	ldrb	r1, [r7, #3]
 800bfc0:	f7fa fe90 	bl	8006ce4 <HAL_PCD_EP_Open>
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bfc8:	7bfb      	ldrb	r3, [r7, #15]
 800bfca:	4618      	mov	r0, r3
 800bfcc:	f000 f90e 	bl	800c1ec <USBD_Get_USB_Status>
 800bfd0:	4603      	mov	r3, r0
 800bfd2:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800bfd4:	7bbb      	ldrb	r3, [r7, #14]
}
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	3710      	adds	r7, #16
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd80      	pop	{r7, pc}

0800bfde <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bfde:	b580      	push	{r7, lr}
 800bfe0:	b084      	sub	sp, #16
 800bfe2:	af00      	add	r7, sp, #0
 800bfe4:	6078      	str	r0, [r7, #4]
 800bfe6:	460b      	mov	r3, r1
 800bfe8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfea:	2300      	movs	r3, #0
 800bfec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfee:	2300      	movs	r3, #0
 800bff0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bff8:	78fa      	ldrb	r2, [r7, #3]
 800bffa:	4611      	mov	r1, r2
 800bffc:	4618      	mov	r0, r3
 800bffe:	f7fa fed1 	bl	8006da4 <HAL_PCD_EP_Close>
 800c002:	4603      	mov	r3, r0
 800c004:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 800c006:	7bfb      	ldrb	r3, [r7, #15]
 800c008:	4618      	mov	r0, r3
 800c00a:	f000 f8ef 	bl	800c1ec <USBD_Get_USB_Status>
 800c00e:	4603      	mov	r3, r0
 800c010:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 800c012:	7bbb      	ldrb	r3, [r7, #14]
}
 800c014:	4618      	mov	r0, r3
 800c016:	3710      	adds	r7, #16
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd80      	pop	{r7, pc}

0800c01c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b084      	sub	sp, #16
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
 800c024:	460b      	mov	r3, r1
 800c026:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c028:	2300      	movs	r3, #0
 800c02a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c02c:	2300      	movs	r3, #0
 800c02e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c036:	78fa      	ldrb	r2, [r7, #3]
 800c038:	4611      	mov	r1, r2
 800c03a:	4618      	mov	r0, r3
 800c03c:	f7fa ff67 	bl	8006f0e <HAL_PCD_EP_SetStall>
 800c040:	4603      	mov	r3, r0
 800c042:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c044:	7bfb      	ldrb	r3, [r7, #15]
 800c046:	4618      	mov	r0, r3
 800c048:	f000 f8d0 	bl	800c1ec <USBD_Get_USB_Status>
 800c04c:	4603      	mov	r3, r0
 800c04e:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800c050:	7bbb      	ldrb	r3, [r7, #14]
}
 800c052:	4618      	mov	r0, r3
 800c054:	3710      	adds	r7, #16
 800c056:	46bd      	mov	sp, r7
 800c058:	bd80      	pop	{r7, pc}

0800c05a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c05a:	b580      	push	{r7, lr}
 800c05c:	b084      	sub	sp, #16
 800c05e:	af00      	add	r7, sp, #0
 800c060:	6078      	str	r0, [r7, #4]
 800c062:	460b      	mov	r3, r1
 800c064:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c066:	2300      	movs	r3, #0
 800c068:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c06a:	2300      	movs	r3, #0
 800c06c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c074:	78fa      	ldrb	r2, [r7, #3]
 800c076:	4611      	mov	r1, r2
 800c078:	4618      	mov	r0, r3
 800c07a:	f7fa ffa2 	bl	8006fc2 <HAL_PCD_EP_ClrStall>
 800c07e:	4603      	mov	r3, r0
 800c080:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800c082:	7bfb      	ldrb	r3, [r7, #15]
 800c084:	4618      	mov	r0, r3
 800c086:	f000 f8b1 	bl	800c1ec <USBD_Get_USB_Status>
 800c08a:	4603      	mov	r3, r0
 800c08c:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 800c08e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c090:	4618      	mov	r0, r3
 800c092:	3710      	adds	r7, #16
 800c094:	46bd      	mov	sp, r7
 800c096:	bd80      	pop	{r7, pc}

0800c098 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c098:	b480      	push	{r7}
 800c09a:	b085      	sub	sp, #20
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
 800c0a0:	460b      	mov	r3, r1
 800c0a2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c0aa:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800c0ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	da08      	bge.n	800c0c6 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800c0b4:	78fb      	ldrb	r3, [r7, #3]
 800c0b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0ba:	68fa      	ldr	r2, [r7, #12]
 800c0bc:	015b      	lsls	r3, r3, #5
 800c0be:	4413      	add	r3, r2
 800c0c0:	332a      	adds	r3, #42	; 0x2a
 800c0c2:	781b      	ldrb	r3, [r3, #0]
 800c0c4:	e008      	b.n	800c0d8 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800c0c6:	78fb      	ldrb	r3, [r7, #3]
 800c0c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0cc:	68fa      	ldr	r2, [r7, #12]
 800c0ce:	015b      	lsls	r3, r3, #5
 800c0d0:	4413      	add	r3, r2
 800c0d2:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800c0d6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c0d8:	4618      	mov	r0, r3
 800c0da:	3714      	adds	r7, #20
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	bc80      	pop	{r7}
 800c0e0:	4770      	bx	lr

0800c0e2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c0e2:	b580      	push	{r7, lr}
 800c0e4:	b084      	sub	sp, #16
 800c0e6:	af00      	add	r7, sp, #0
 800c0e8:	6078      	str	r0, [r7, #4]
 800c0ea:	460b      	mov	r3, r1
 800c0ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c0fc:	78fa      	ldrb	r2, [r7, #3]
 800c0fe:	4611      	mov	r1, r2
 800c100:	4618      	mov	r0, r3
 800c102:	f7fa fdca 	bl	8006c9a <HAL_PCD_SetAddress>
 800c106:	4603      	mov	r3, r0
 800c108:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800c10a:	7bfb      	ldrb	r3, [r7, #15]
 800c10c:	4618      	mov	r0, r3
 800c10e:	f000 f86d 	bl	800c1ec <USBD_Get_USB_Status>
 800c112:	4603      	mov	r3, r0
 800c114:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800c116:	7bbb      	ldrb	r3, [r7, #14]
}
 800c118:	4618      	mov	r0, r3
 800c11a:	3710      	adds	r7, #16
 800c11c:	46bd      	mov	sp, r7
 800c11e:	bd80      	pop	{r7, pc}

0800c120 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b086      	sub	sp, #24
 800c124:	af00      	add	r7, sp, #0
 800c126:	60f8      	str	r0, [r7, #12]
 800c128:	607a      	str	r2, [r7, #4]
 800c12a:	461a      	mov	r2, r3
 800c12c:	460b      	mov	r3, r1
 800c12e:	72fb      	strb	r3, [r7, #11]
 800c130:	4613      	mov	r3, r2
 800c132:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c134:	2300      	movs	r3, #0
 800c136:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c138:	2300      	movs	r3, #0
 800c13a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c142:	893b      	ldrh	r3, [r7, #8]
 800c144:	7af9      	ldrb	r1, [r7, #11]
 800c146:	687a      	ldr	r2, [r7, #4]
 800c148:	f7fa fea8 	bl	8006e9c <HAL_PCD_EP_Transmit>
 800c14c:	4603      	mov	r3, r0
 800c14e:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800c150:	7dfb      	ldrb	r3, [r7, #23]
 800c152:	4618      	mov	r0, r3
 800c154:	f000 f84a 	bl	800c1ec <USBD_Get_USB_Status>
 800c158:	4603      	mov	r3, r0
 800c15a:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800c15c:	7dbb      	ldrb	r3, [r7, #22]
}
 800c15e:	4618      	mov	r0, r3
 800c160:	3718      	adds	r7, #24
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}

0800c166 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c166:	b580      	push	{r7, lr}
 800c168:	b086      	sub	sp, #24
 800c16a:	af00      	add	r7, sp, #0
 800c16c:	60f8      	str	r0, [r7, #12]
 800c16e:	607a      	str	r2, [r7, #4]
 800c170:	461a      	mov	r2, r3
 800c172:	460b      	mov	r3, r1
 800c174:	72fb      	strb	r3, [r7, #11]
 800c176:	4613      	mov	r3, r2
 800c178:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c17a:	2300      	movs	r3, #0
 800c17c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c17e:	2300      	movs	r3, #0
 800c180:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c188:	893b      	ldrh	r3, [r7, #8]
 800c18a:	7af9      	ldrb	r1, [r7, #11]
 800c18c:	687a      	ldr	r2, [r7, #4]
 800c18e:	f7fa fe4b 	bl	8006e28 <HAL_PCD_EP_Receive>
 800c192:	4603      	mov	r3, r0
 800c194:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800c196:	7dfb      	ldrb	r3, [r7, #23]
 800c198:	4618      	mov	r0, r3
 800c19a:	f000 f827 	bl	800c1ec <USBD_Get_USB_Status>
 800c19e:	4603      	mov	r3, r0
 800c1a0:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 800c1a2:	7dbb      	ldrb	r3, [r7, #22]
}
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	3718      	adds	r7, #24
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	bd80      	pop	{r7, pc}

0800c1ac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c1ac:	b480      	push	{r7}
 800c1ae:	b083      	sub	sp, #12
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c1b4:	4b02      	ldr	r3, [pc, #8]	; (800c1c0 <USBD_static_malloc+0x14>)
}
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	370c      	adds	r7, #12
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	bc80      	pop	{r7}
 800c1be:	4770      	bx	lr
 800c1c0:	20000754 	.word	0x20000754

0800c1c4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c1c4:	b480      	push	{r7}
 800c1c6:	b083      	sub	sp, #12
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]

}
 800c1cc:	bf00      	nop
 800c1ce:	370c      	adds	r7, #12
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	bc80      	pop	{r7}
 800c1d4:	4770      	bx	lr

0800c1d6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1d6:	b480      	push	{r7}
 800c1d8:	b083      	sub	sp, #12
 800c1da:	af00      	add	r7, sp, #0
 800c1dc:	6078      	str	r0, [r7, #4]
 800c1de:	460b      	mov	r3, r1
 800c1e0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800c1e2:	bf00      	nop
 800c1e4:	370c      	adds	r7, #12
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bc80      	pop	{r7}
 800c1ea:	4770      	bx	lr

0800c1ec <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c1ec:	b480      	push	{r7}
 800c1ee:	b085      	sub	sp, #20
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c1fa:	79fb      	ldrb	r3, [r7, #7]
 800c1fc:	2b03      	cmp	r3, #3
 800c1fe:	d817      	bhi.n	800c230 <USBD_Get_USB_Status+0x44>
 800c200:	a201      	add	r2, pc, #4	; (adr r2, 800c208 <USBD_Get_USB_Status+0x1c>)
 800c202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c206:	bf00      	nop
 800c208:	0800c219 	.word	0x0800c219
 800c20c:	0800c21f 	.word	0x0800c21f
 800c210:	0800c225 	.word	0x0800c225
 800c214:	0800c22b 	.word	0x0800c22b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c218:	2300      	movs	r3, #0
 800c21a:	73fb      	strb	r3, [r7, #15]
    break;
 800c21c:	e00b      	b.n	800c236 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c21e:	2302      	movs	r3, #2
 800c220:	73fb      	strb	r3, [r7, #15]
    break;
 800c222:	e008      	b.n	800c236 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c224:	2301      	movs	r3, #1
 800c226:	73fb      	strb	r3, [r7, #15]
    break;
 800c228:	e005      	b.n	800c236 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c22a:	2302      	movs	r3, #2
 800c22c:	73fb      	strb	r3, [r7, #15]
    break;
 800c22e:	e002      	b.n	800c236 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c230:	2302      	movs	r3, #2
 800c232:	73fb      	strb	r3, [r7, #15]
    break;
 800c234:	bf00      	nop
  }
  return usb_status;
 800c236:	7bfb      	ldrb	r3, [r7, #15]
}
 800c238:	4618      	mov	r0, r3
 800c23a:	3714      	adds	r7, #20
 800c23c:	46bd      	mov	sp, r7
 800c23e:	bc80      	pop	{r7}
 800c240:	4770      	bx	lr
 800c242:	bf00      	nop

0800c244 <__errno>:
 800c244:	4b01      	ldr	r3, [pc, #4]	; (800c24c <__errno+0x8>)
 800c246:	6818      	ldr	r0, [r3, #0]
 800c248:	4770      	bx	lr
 800c24a:	bf00      	nop
 800c24c:	200001a4 	.word	0x200001a4

0800c250 <__libc_init_array>:
 800c250:	b570      	push	{r4, r5, r6, lr}
 800c252:	2500      	movs	r5, #0
 800c254:	4e0c      	ldr	r6, [pc, #48]	; (800c288 <__libc_init_array+0x38>)
 800c256:	4c0d      	ldr	r4, [pc, #52]	; (800c28c <__libc_init_array+0x3c>)
 800c258:	1ba4      	subs	r4, r4, r6
 800c25a:	10a4      	asrs	r4, r4, #2
 800c25c:	42a5      	cmp	r5, r4
 800c25e:	d109      	bne.n	800c274 <__libc_init_array+0x24>
 800c260:	f000 fc36 	bl	800cad0 <_init>
 800c264:	2500      	movs	r5, #0
 800c266:	4e0a      	ldr	r6, [pc, #40]	; (800c290 <__libc_init_array+0x40>)
 800c268:	4c0a      	ldr	r4, [pc, #40]	; (800c294 <__libc_init_array+0x44>)
 800c26a:	1ba4      	subs	r4, r4, r6
 800c26c:	10a4      	asrs	r4, r4, #2
 800c26e:	42a5      	cmp	r5, r4
 800c270:	d105      	bne.n	800c27e <__libc_init_array+0x2e>
 800c272:	bd70      	pop	{r4, r5, r6, pc}
 800c274:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c278:	4798      	blx	r3
 800c27a:	3501      	adds	r5, #1
 800c27c:	e7ee      	b.n	800c25c <__libc_init_array+0xc>
 800c27e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c282:	4798      	blx	r3
 800c284:	3501      	adds	r5, #1
 800c286:	e7f2      	b.n	800c26e <__libc_init_array+0x1e>
 800c288:	0800df18 	.word	0x0800df18
 800c28c:	0800df18 	.word	0x0800df18
 800c290:	0800df18 	.word	0x0800df18
 800c294:	0800df1c 	.word	0x0800df1c

0800c298 <memcpy>:
 800c298:	b510      	push	{r4, lr}
 800c29a:	1e43      	subs	r3, r0, #1
 800c29c:	440a      	add	r2, r1
 800c29e:	4291      	cmp	r1, r2
 800c2a0:	d100      	bne.n	800c2a4 <memcpy+0xc>
 800c2a2:	bd10      	pop	{r4, pc}
 800c2a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c2a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c2ac:	e7f7      	b.n	800c29e <memcpy+0x6>

0800c2ae <memset>:
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	4402      	add	r2, r0
 800c2b2:	4293      	cmp	r3, r2
 800c2b4:	d100      	bne.n	800c2b8 <memset+0xa>
 800c2b6:	4770      	bx	lr
 800c2b8:	f803 1b01 	strb.w	r1, [r3], #1
 800c2bc:	e7f9      	b.n	800c2b2 <memset+0x4>
	...

0800c2c0 <siprintf>:
 800c2c0:	b40e      	push	{r1, r2, r3}
 800c2c2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c2c6:	b500      	push	{lr}
 800c2c8:	b09c      	sub	sp, #112	; 0x70
 800c2ca:	ab1d      	add	r3, sp, #116	; 0x74
 800c2cc:	9002      	str	r0, [sp, #8]
 800c2ce:	9006      	str	r0, [sp, #24]
 800c2d0:	9107      	str	r1, [sp, #28]
 800c2d2:	9104      	str	r1, [sp, #16]
 800c2d4:	4808      	ldr	r0, [pc, #32]	; (800c2f8 <siprintf+0x38>)
 800c2d6:	4909      	ldr	r1, [pc, #36]	; (800c2fc <siprintf+0x3c>)
 800c2d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2dc:	9105      	str	r1, [sp, #20]
 800c2de:	6800      	ldr	r0, [r0, #0]
 800c2e0:	a902      	add	r1, sp, #8
 800c2e2:	9301      	str	r3, [sp, #4]
 800c2e4:	f000 f866 	bl	800c3b4 <_svfiprintf_r>
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	9b02      	ldr	r3, [sp, #8]
 800c2ec:	701a      	strb	r2, [r3, #0]
 800c2ee:	b01c      	add	sp, #112	; 0x70
 800c2f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c2f4:	b003      	add	sp, #12
 800c2f6:	4770      	bx	lr
 800c2f8:	200001a4 	.word	0x200001a4
 800c2fc:	ffff0208 	.word	0xffff0208

0800c300 <__ssputs_r>:
 800c300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c304:	688e      	ldr	r6, [r1, #8]
 800c306:	4682      	mov	sl, r0
 800c308:	429e      	cmp	r6, r3
 800c30a:	460c      	mov	r4, r1
 800c30c:	4690      	mov	r8, r2
 800c30e:	4699      	mov	r9, r3
 800c310:	d837      	bhi.n	800c382 <__ssputs_r+0x82>
 800c312:	898a      	ldrh	r2, [r1, #12]
 800c314:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c318:	d031      	beq.n	800c37e <__ssputs_r+0x7e>
 800c31a:	2302      	movs	r3, #2
 800c31c:	6825      	ldr	r5, [r4, #0]
 800c31e:	6909      	ldr	r1, [r1, #16]
 800c320:	1a6f      	subs	r7, r5, r1
 800c322:	6965      	ldr	r5, [r4, #20]
 800c324:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c328:	fb95 f5f3 	sdiv	r5, r5, r3
 800c32c:	f109 0301 	add.w	r3, r9, #1
 800c330:	443b      	add	r3, r7
 800c332:	429d      	cmp	r5, r3
 800c334:	bf38      	it	cc
 800c336:	461d      	movcc	r5, r3
 800c338:	0553      	lsls	r3, r2, #21
 800c33a:	d530      	bpl.n	800c39e <__ssputs_r+0x9e>
 800c33c:	4629      	mov	r1, r5
 800c33e:	f000 fb2d 	bl	800c99c <_malloc_r>
 800c342:	4606      	mov	r6, r0
 800c344:	b950      	cbnz	r0, 800c35c <__ssputs_r+0x5c>
 800c346:	230c      	movs	r3, #12
 800c348:	f04f 30ff 	mov.w	r0, #4294967295
 800c34c:	f8ca 3000 	str.w	r3, [sl]
 800c350:	89a3      	ldrh	r3, [r4, #12]
 800c352:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c356:	81a3      	strh	r3, [r4, #12]
 800c358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c35c:	463a      	mov	r2, r7
 800c35e:	6921      	ldr	r1, [r4, #16]
 800c360:	f7ff ff9a 	bl	800c298 <memcpy>
 800c364:	89a3      	ldrh	r3, [r4, #12]
 800c366:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c36a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c36e:	81a3      	strh	r3, [r4, #12]
 800c370:	6126      	str	r6, [r4, #16]
 800c372:	443e      	add	r6, r7
 800c374:	6026      	str	r6, [r4, #0]
 800c376:	464e      	mov	r6, r9
 800c378:	6165      	str	r5, [r4, #20]
 800c37a:	1bed      	subs	r5, r5, r7
 800c37c:	60a5      	str	r5, [r4, #8]
 800c37e:	454e      	cmp	r6, r9
 800c380:	d900      	bls.n	800c384 <__ssputs_r+0x84>
 800c382:	464e      	mov	r6, r9
 800c384:	4632      	mov	r2, r6
 800c386:	4641      	mov	r1, r8
 800c388:	6820      	ldr	r0, [r4, #0]
 800c38a:	f000 faa1 	bl	800c8d0 <memmove>
 800c38e:	68a3      	ldr	r3, [r4, #8]
 800c390:	2000      	movs	r0, #0
 800c392:	1b9b      	subs	r3, r3, r6
 800c394:	60a3      	str	r3, [r4, #8]
 800c396:	6823      	ldr	r3, [r4, #0]
 800c398:	441e      	add	r6, r3
 800c39a:	6026      	str	r6, [r4, #0]
 800c39c:	e7dc      	b.n	800c358 <__ssputs_r+0x58>
 800c39e:	462a      	mov	r2, r5
 800c3a0:	f000 fb56 	bl	800ca50 <_realloc_r>
 800c3a4:	4606      	mov	r6, r0
 800c3a6:	2800      	cmp	r0, #0
 800c3a8:	d1e2      	bne.n	800c370 <__ssputs_r+0x70>
 800c3aa:	6921      	ldr	r1, [r4, #16]
 800c3ac:	4650      	mov	r0, sl
 800c3ae:	f000 faa9 	bl	800c904 <_free_r>
 800c3b2:	e7c8      	b.n	800c346 <__ssputs_r+0x46>

0800c3b4 <_svfiprintf_r>:
 800c3b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3b8:	461d      	mov	r5, r3
 800c3ba:	898b      	ldrh	r3, [r1, #12]
 800c3bc:	b09d      	sub	sp, #116	; 0x74
 800c3be:	061f      	lsls	r7, r3, #24
 800c3c0:	4680      	mov	r8, r0
 800c3c2:	460c      	mov	r4, r1
 800c3c4:	4616      	mov	r6, r2
 800c3c6:	d50f      	bpl.n	800c3e8 <_svfiprintf_r+0x34>
 800c3c8:	690b      	ldr	r3, [r1, #16]
 800c3ca:	b96b      	cbnz	r3, 800c3e8 <_svfiprintf_r+0x34>
 800c3cc:	2140      	movs	r1, #64	; 0x40
 800c3ce:	f000 fae5 	bl	800c99c <_malloc_r>
 800c3d2:	6020      	str	r0, [r4, #0]
 800c3d4:	6120      	str	r0, [r4, #16]
 800c3d6:	b928      	cbnz	r0, 800c3e4 <_svfiprintf_r+0x30>
 800c3d8:	230c      	movs	r3, #12
 800c3da:	f8c8 3000 	str.w	r3, [r8]
 800c3de:	f04f 30ff 	mov.w	r0, #4294967295
 800c3e2:	e0c8      	b.n	800c576 <_svfiprintf_r+0x1c2>
 800c3e4:	2340      	movs	r3, #64	; 0x40
 800c3e6:	6163      	str	r3, [r4, #20]
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	9309      	str	r3, [sp, #36]	; 0x24
 800c3ec:	2320      	movs	r3, #32
 800c3ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c3f2:	2330      	movs	r3, #48	; 0x30
 800c3f4:	f04f 0b01 	mov.w	fp, #1
 800c3f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c3fc:	9503      	str	r5, [sp, #12]
 800c3fe:	4637      	mov	r7, r6
 800c400:	463d      	mov	r5, r7
 800c402:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c406:	b10b      	cbz	r3, 800c40c <_svfiprintf_r+0x58>
 800c408:	2b25      	cmp	r3, #37	; 0x25
 800c40a:	d13e      	bne.n	800c48a <_svfiprintf_r+0xd6>
 800c40c:	ebb7 0a06 	subs.w	sl, r7, r6
 800c410:	d00b      	beq.n	800c42a <_svfiprintf_r+0x76>
 800c412:	4653      	mov	r3, sl
 800c414:	4632      	mov	r2, r6
 800c416:	4621      	mov	r1, r4
 800c418:	4640      	mov	r0, r8
 800c41a:	f7ff ff71 	bl	800c300 <__ssputs_r>
 800c41e:	3001      	adds	r0, #1
 800c420:	f000 80a4 	beq.w	800c56c <_svfiprintf_r+0x1b8>
 800c424:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c426:	4453      	add	r3, sl
 800c428:	9309      	str	r3, [sp, #36]	; 0x24
 800c42a:	783b      	ldrb	r3, [r7, #0]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	f000 809d 	beq.w	800c56c <_svfiprintf_r+0x1b8>
 800c432:	2300      	movs	r3, #0
 800c434:	f04f 32ff 	mov.w	r2, #4294967295
 800c438:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c43c:	9304      	str	r3, [sp, #16]
 800c43e:	9307      	str	r3, [sp, #28]
 800c440:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c444:	931a      	str	r3, [sp, #104]	; 0x68
 800c446:	462f      	mov	r7, r5
 800c448:	2205      	movs	r2, #5
 800c44a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800c44e:	4850      	ldr	r0, [pc, #320]	; (800c590 <_svfiprintf_r+0x1dc>)
 800c450:	f000 fa30 	bl	800c8b4 <memchr>
 800c454:	9b04      	ldr	r3, [sp, #16]
 800c456:	b9d0      	cbnz	r0, 800c48e <_svfiprintf_r+0xda>
 800c458:	06d9      	lsls	r1, r3, #27
 800c45a:	bf44      	itt	mi
 800c45c:	2220      	movmi	r2, #32
 800c45e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c462:	071a      	lsls	r2, r3, #28
 800c464:	bf44      	itt	mi
 800c466:	222b      	movmi	r2, #43	; 0x2b
 800c468:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c46c:	782a      	ldrb	r2, [r5, #0]
 800c46e:	2a2a      	cmp	r2, #42	; 0x2a
 800c470:	d015      	beq.n	800c49e <_svfiprintf_r+0xea>
 800c472:	462f      	mov	r7, r5
 800c474:	2000      	movs	r0, #0
 800c476:	250a      	movs	r5, #10
 800c478:	9a07      	ldr	r2, [sp, #28]
 800c47a:	4639      	mov	r1, r7
 800c47c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c480:	3b30      	subs	r3, #48	; 0x30
 800c482:	2b09      	cmp	r3, #9
 800c484:	d94d      	bls.n	800c522 <_svfiprintf_r+0x16e>
 800c486:	b1b8      	cbz	r0, 800c4b8 <_svfiprintf_r+0x104>
 800c488:	e00f      	b.n	800c4aa <_svfiprintf_r+0xf6>
 800c48a:	462f      	mov	r7, r5
 800c48c:	e7b8      	b.n	800c400 <_svfiprintf_r+0x4c>
 800c48e:	4a40      	ldr	r2, [pc, #256]	; (800c590 <_svfiprintf_r+0x1dc>)
 800c490:	463d      	mov	r5, r7
 800c492:	1a80      	subs	r0, r0, r2
 800c494:	fa0b f000 	lsl.w	r0, fp, r0
 800c498:	4318      	orrs	r0, r3
 800c49a:	9004      	str	r0, [sp, #16]
 800c49c:	e7d3      	b.n	800c446 <_svfiprintf_r+0x92>
 800c49e:	9a03      	ldr	r2, [sp, #12]
 800c4a0:	1d11      	adds	r1, r2, #4
 800c4a2:	6812      	ldr	r2, [r2, #0]
 800c4a4:	9103      	str	r1, [sp, #12]
 800c4a6:	2a00      	cmp	r2, #0
 800c4a8:	db01      	blt.n	800c4ae <_svfiprintf_r+0xfa>
 800c4aa:	9207      	str	r2, [sp, #28]
 800c4ac:	e004      	b.n	800c4b8 <_svfiprintf_r+0x104>
 800c4ae:	4252      	negs	r2, r2
 800c4b0:	f043 0302 	orr.w	r3, r3, #2
 800c4b4:	9207      	str	r2, [sp, #28]
 800c4b6:	9304      	str	r3, [sp, #16]
 800c4b8:	783b      	ldrb	r3, [r7, #0]
 800c4ba:	2b2e      	cmp	r3, #46	; 0x2e
 800c4bc:	d10c      	bne.n	800c4d8 <_svfiprintf_r+0x124>
 800c4be:	787b      	ldrb	r3, [r7, #1]
 800c4c0:	2b2a      	cmp	r3, #42	; 0x2a
 800c4c2:	d133      	bne.n	800c52c <_svfiprintf_r+0x178>
 800c4c4:	9b03      	ldr	r3, [sp, #12]
 800c4c6:	3702      	adds	r7, #2
 800c4c8:	1d1a      	adds	r2, r3, #4
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	9203      	str	r2, [sp, #12]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	bfb8      	it	lt
 800c4d2:	f04f 33ff 	movlt.w	r3, #4294967295
 800c4d6:	9305      	str	r3, [sp, #20]
 800c4d8:	4d2e      	ldr	r5, [pc, #184]	; (800c594 <_svfiprintf_r+0x1e0>)
 800c4da:	2203      	movs	r2, #3
 800c4dc:	7839      	ldrb	r1, [r7, #0]
 800c4de:	4628      	mov	r0, r5
 800c4e0:	f000 f9e8 	bl	800c8b4 <memchr>
 800c4e4:	b138      	cbz	r0, 800c4f6 <_svfiprintf_r+0x142>
 800c4e6:	2340      	movs	r3, #64	; 0x40
 800c4e8:	1b40      	subs	r0, r0, r5
 800c4ea:	fa03 f000 	lsl.w	r0, r3, r0
 800c4ee:	9b04      	ldr	r3, [sp, #16]
 800c4f0:	3701      	adds	r7, #1
 800c4f2:	4303      	orrs	r3, r0
 800c4f4:	9304      	str	r3, [sp, #16]
 800c4f6:	7839      	ldrb	r1, [r7, #0]
 800c4f8:	2206      	movs	r2, #6
 800c4fa:	4827      	ldr	r0, [pc, #156]	; (800c598 <_svfiprintf_r+0x1e4>)
 800c4fc:	1c7e      	adds	r6, r7, #1
 800c4fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c502:	f000 f9d7 	bl	800c8b4 <memchr>
 800c506:	2800      	cmp	r0, #0
 800c508:	d038      	beq.n	800c57c <_svfiprintf_r+0x1c8>
 800c50a:	4b24      	ldr	r3, [pc, #144]	; (800c59c <_svfiprintf_r+0x1e8>)
 800c50c:	bb13      	cbnz	r3, 800c554 <_svfiprintf_r+0x1a0>
 800c50e:	9b03      	ldr	r3, [sp, #12]
 800c510:	3307      	adds	r3, #7
 800c512:	f023 0307 	bic.w	r3, r3, #7
 800c516:	3308      	adds	r3, #8
 800c518:	9303      	str	r3, [sp, #12]
 800c51a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c51c:	444b      	add	r3, r9
 800c51e:	9309      	str	r3, [sp, #36]	; 0x24
 800c520:	e76d      	b.n	800c3fe <_svfiprintf_r+0x4a>
 800c522:	fb05 3202 	mla	r2, r5, r2, r3
 800c526:	2001      	movs	r0, #1
 800c528:	460f      	mov	r7, r1
 800c52a:	e7a6      	b.n	800c47a <_svfiprintf_r+0xc6>
 800c52c:	2300      	movs	r3, #0
 800c52e:	250a      	movs	r5, #10
 800c530:	4619      	mov	r1, r3
 800c532:	3701      	adds	r7, #1
 800c534:	9305      	str	r3, [sp, #20]
 800c536:	4638      	mov	r0, r7
 800c538:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c53c:	3a30      	subs	r2, #48	; 0x30
 800c53e:	2a09      	cmp	r2, #9
 800c540:	d903      	bls.n	800c54a <_svfiprintf_r+0x196>
 800c542:	2b00      	cmp	r3, #0
 800c544:	d0c8      	beq.n	800c4d8 <_svfiprintf_r+0x124>
 800c546:	9105      	str	r1, [sp, #20]
 800c548:	e7c6      	b.n	800c4d8 <_svfiprintf_r+0x124>
 800c54a:	fb05 2101 	mla	r1, r5, r1, r2
 800c54e:	2301      	movs	r3, #1
 800c550:	4607      	mov	r7, r0
 800c552:	e7f0      	b.n	800c536 <_svfiprintf_r+0x182>
 800c554:	ab03      	add	r3, sp, #12
 800c556:	9300      	str	r3, [sp, #0]
 800c558:	4622      	mov	r2, r4
 800c55a:	4b11      	ldr	r3, [pc, #68]	; (800c5a0 <_svfiprintf_r+0x1ec>)
 800c55c:	a904      	add	r1, sp, #16
 800c55e:	4640      	mov	r0, r8
 800c560:	f3af 8000 	nop.w
 800c564:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c568:	4681      	mov	r9, r0
 800c56a:	d1d6      	bne.n	800c51a <_svfiprintf_r+0x166>
 800c56c:	89a3      	ldrh	r3, [r4, #12]
 800c56e:	065b      	lsls	r3, r3, #25
 800c570:	f53f af35 	bmi.w	800c3de <_svfiprintf_r+0x2a>
 800c574:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c576:	b01d      	add	sp, #116	; 0x74
 800c578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c57c:	ab03      	add	r3, sp, #12
 800c57e:	9300      	str	r3, [sp, #0]
 800c580:	4622      	mov	r2, r4
 800c582:	4b07      	ldr	r3, [pc, #28]	; (800c5a0 <_svfiprintf_r+0x1ec>)
 800c584:	a904      	add	r1, sp, #16
 800c586:	4640      	mov	r0, r8
 800c588:	f000 f882 	bl	800c690 <_printf_i>
 800c58c:	e7ea      	b.n	800c564 <_svfiprintf_r+0x1b0>
 800c58e:	bf00      	nop
 800c590:	0800dee4 	.word	0x0800dee4
 800c594:	0800deea 	.word	0x0800deea
 800c598:	0800deee 	.word	0x0800deee
 800c59c:	00000000 	.word	0x00000000
 800c5a0:	0800c301 	.word	0x0800c301

0800c5a4 <_printf_common>:
 800c5a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5a8:	4691      	mov	r9, r2
 800c5aa:	461f      	mov	r7, r3
 800c5ac:	688a      	ldr	r2, [r1, #8]
 800c5ae:	690b      	ldr	r3, [r1, #16]
 800c5b0:	4606      	mov	r6, r0
 800c5b2:	4293      	cmp	r3, r2
 800c5b4:	bfb8      	it	lt
 800c5b6:	4613      	movlt	r3, r2
 800c5b8:	f8c9 3000 	str.w	r3, [r9]
 800c5bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c5c0:	460c      	mov	r4, r1
 800c5c2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c5c6:	b112      	cbz	r2, 800c5ce <_printf_common+0x2a>
 800c5c8:	3301      	adds	r3, #1
 800c5ca:	f8c9 3000 	str.w	r3, [r9]
 800c5ce:	6823      	ldr	r3, [r4, #0]
 800c5d0:	0699      	lsls	r1, r3, #26
 800c5d2:	bf42      	ittt	mi
 800c5d4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c5d8:	3302      	addmi	r3, #2
 800c5da:	f8c9 3000 	strmi.w	r3, [r9]
 800c5de:	6825      	ldr	r5, [r4, #0]
 800c5e0:	f015 0506 	ands.w	r5, r5, #6
 800c5e4:	d107      	bne.n	800c5f6 <_printf_common+0x52>
 800c5e6:	f104 0a19 	add.w	sl, r4, #25
 800c5ea:	68e3      	ldr	r3, [r4, #12]
 800c5ec:	f8d9 2000 	ldr.w	r2, [r9]
 800c5f0:	1a9b      	subs	r3, r3, r2
 800c5f2:	42ab      	cmp	r3, r5
 800c5f4:	dc29      	bgt.n	800c64a <_printf_common+0xa6>
 800c5f6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c5fa:	6822      	ldr	r2, [r4, #0]
 800c5fc:	3300      	adds	r3, #0
 800c5fe:	bf18      	it	ne
 800c600:	2301      	movne	r3, #1
 800c602:	0692      	lsls	r2, r2, #26
 800c604:	d42e      	bmi.n	800c664 <_printf_common+0xc0>
 800c606:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c60a:	4639      	mov	r1, r7
 800c60c:	4630      	mov	r0, r6
 800c60e:	47c0      	blx	r8
 800c610:	3001      	adds	r0, #1
 800c612:	d021      	beq.n	800c658 <_printf_common+0xb4>
 800c614:	6823      	ldr	r3, [r4, #0]
 800c616:	68e5      	ldr	r5, [r4, #12]
 800c618:	f003 0306 	and.w	r3, r3, #6
 800c61c:	2b04      	cmp	r3, #4
 800c61e:	bf18      	it	ne
 800c620:	2500      	movne	r5, #0
 800c622:	f8d9 2000 	ldr.w	r2, [r9]
 800c626:	f04f 0900 	mov.w	r9, #0
 800c62a:	bf08      	it	eq
 800c62c:	1aad      	subeq	r5, r5, r2
 800c62e:	68a3      	ldr	r3, [r4, #8]
 800c630:	6922      	ldr	r2, [r4, #16]
 800c632:	bf08      	it	eq
 800c634:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c638:	4293      	cmp	r3, r2
 800c63a:	bfc4      	itt	gt
 800c63c:	1a9b      	subgt	r3, r3, r2
 800c63e:	18ed      	addgt	r5, r5, r3
 800c640:	341a      	adds	r4, #26
 800c642:	454d      	cmp	r5, r9
 800c644:	d11a      	bne.n	800c67c <_printf_common+0xd8>
 800c646:	2000      	movs	r0, #0
 800c648:	e008      	b.n	800c65c <_printf_common+0xb8>
 800c64a:	2301      	movs	r3, #1
 800c64c:	4652      	mov	r2, sl
 800c64e:	4639      	mov	r1, r7
 800c650:	4630      	mov	r0, r6
 800c652:	47c0      	blx	r8
 800c654:	3001      	adds	r0, #1
 800c656:	d103      	bne.n	800c660 <_printf_common+0xbc>
 800c658:	f04f 30ff 	mov.w	r0, #4294967295
 800c65c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c660:	3501      	adds	r5, #1
 800c662:	e7c2      	b.n	800c5ea <_printf_common+0x46>
 800c664:	2030      	movs	r0, #48	; 0x30
 800c666:	18e1      	adds	r1, r4, r3
 800c668:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c66c:	1c5a      	adds	r2, r3, #1
 800c66e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c672:	4422      	add	r2, r4
 800c674:	3302      	adds	r3, #2
 800c676:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c67a:	e7c4      	b.n	800c606 <_printf_common+0x62>
 800c67c:	2301      	movs	r3, #1
 800c67e:	4622      	mov	r2, r4
 800c680:	4639      	mov	r1, r7
 800c682:	4630      	mov	r0, r6
 800c684:	47c0      	blx	r8
 800c686:	3001      	adds	r0, #1
 800c688:	d0e6      	beq.n	800c658 <_printf_common+0xb4>
 800c68a:	f109 0901 	add.w	r9, r9, #1
 800c68e:	e7d8      	b.n	800c642 <_printf_common+0x9e>

0800c690 <_printf_i>:
 800c690:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c694:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c698:	460c      	mov	r4, r1
 800c69a:	7e09      	ldrb	r1, [r1, #24]
 800c69c:	b085      	sub	sp, #20
 800c69e:	296e      	cmp	r1, #110	; 0x6e
 800c6a0:	4617      	mov	r7, r2
 800c6a2:	4606      	mov	r6, r0
 800c6a4:	4698      	mov	r8, r3
 800c6a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c6a8:	f000 80b3 	beq.w	800c812 <_printf_i+0x182>
 800c6ac:	d822      	bhi.n	800c6f4 <_printf_i+0x64>
 800c6ae:	2963      	cmp	r1, #99	; 0x63
 800c6b0:	d036      	beq.n	800c720 <_printf_i+0x90>
 800c6b2:	d80a      	bhi.n	800c6ca <_printf_i+0x3a>
 800c6b4:	2900      	cmp	r1, #0
 800c6b6:	f000 80b9 	beq.w	800c82c <_printf_i+0x19c>
 800c6ba:	2958      	cmp	r1, #88	; 0x58
 800c6bc:	f000 8083 	beq.w	800c7c6 <_printf_i+0x136>
 800c6c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c6c4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c6c8:	e032      	b.n	800c730 <_printf_i+0xa0>
 800c6ca:	2964      	cmp	r1, #100	; 0x64
 800c6cc:	d001      	beq.n	800c6d2 <_printf_i+0x42>
 800c6ce:	2969      	cmp	r1, #105	; 0x69
 800c6d0:	d1f6      	bne.n	800c6c0 <_printf_i+0x30>
 800c6d2:	6820      	ldr	r0, [r4, #0]
 800c6d4:	6813      	ldr	r3, [r2, #0]
 800c6d6:	0605      	lsls	r5, r0, #24
 800c6d8:	f103 0104 	add.w	r1, r3, #4
 800c6dc:	d52a      	bpl.n	800c734 <_printf_i+0xa4>
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	6011      	str	r1, [r2, #0]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	da03      	bge.n	800c6ee <_printf_i+0x5e>
 800c6e6:	222d      	movs	r2, #45	; 0x2d
 800c6e8:	425b      	negs	r3, r3
 800c6ea:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c6ee:	486f      	ldr	r0, [pc, #444]	; (800c8ac <_printf_i+0x21c>)
 800c6f0:	220a      	movs	r2, #10
 800c6f2:	e039      	b.n	800c768 <_printf_i+0xd8>
 800c6f4:	2973      	cmp	r1, #115	; 0x73
 800c6f6:	f000 809d 	beq.w	800c834 <_printf_i+0x1a4>
 800c6fa:	d808      	bhi.n	800c70e <_printf_i+0x7e>
 800c6fc:	296f      	cmp	r1, #111	; 0x6f
 800c6fe:	d020      	beq.n	800c742 <_printf_i+0xb2>
 800c700:	2970      	cmp	r1, #112	; 0x70
 800c702:	d1dd      	bne.n	800c6c0 <_printf_i+0x30>
 800c704:	6823      	ldr	r3, [r4, #0]
 800c706:	f043 0320 	orr.w	r3, r3, #32
 800c70a:	6023      	str	r3, [r4, #0]
 800c70c:	e003      	b.n	800c716 <_printf_i+0x86>
 800c70e:	2975      	cmp	r1, #117	; 0x75
 800c710:	d017      	beq.n	800c742 <_printf_i+0xb2>
 800c712:	2978      	cmp	r1, #120	; 0x78
 800c714:	d1d4      	bne.n	800c6c0 <_printf_i+0x30>
 800c716:	2378      	movs	r3, #120	; 0x78
 800c718:	4865      	ldr	r0, [pc, #404]	; (800c8b0 <_printf_i+0x220>)
 800c71a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c71e:	e055      	b.n	800c7cc <_printf_i+0x13c>
 800c720:	6813      	ldr	r3, [r2, #0]
 800c722:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c726:	1d19      	adds	r1, r3, #4
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	6011      	str	r1, [r2, #0]
 800c72c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c730:	2301      	movs	r3, #1
 800c732:	e08c      	b.n	800c84e <_printf_i+0x1be>
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c73a:	6011      	str	r1, [r2, #0]
 800c73c:	bf18      	it	ne
 800c73e:	b21b      	sxthne	r3, r3
 800c740:	e7cf      	b.n	800c6e2 <_printf_i+0x52>
 800c742:	6813      	ldr	r3, [r2, #0]
 800c744:	6825      	ldr	r5, [r4, #0]
 800c746:	1d18      	adds	r0, r3, #4
 800c748:	6010      	str	r0, [r2, #0]
 800c74a:	0628      	lsls	r0, r5, #24
 800c74c:	d501      	bpl.n	800c752 <_printf_i+0xc2>
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	e002      	b.n	800c758 <_printf_i+0xc8>
 800c752:	0668      	lsls	r0, r5, #25
 800c754:	d5fb      	bpl.n	800c74e <_printf_i+0xbe>
 800c756:	881b      	ldrh	r3, [r3, #0]
 800c758:	296f      	cmp	r1, #111	; 0x6f
 800c75a:	bf14      	ite	ne
 800c75c:	220a      	movne	r2, #10
 800c75e:	2208      	moveq	r2, #8
 800c760:	4852      	ldr	r0, [pc, #328]	; (800c8ac <_printf_i+0x21c>)
 800c762:	2100      	movs	r1, #0
 800c764:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c768:	6865      	ldr	r5, [r4, #4]
 800c76a:	2d00      	cmp	r5, #0
 800c76c:	60a5      	str	r5, [r4, #8]
 800c76e:	f2c0 8095 	blt.w	800c89c <_printf_i+0x20c>
 800c772:	6821      	ldr	r1, [r4, #0]
 800c774:	f021 0104 	bic.w	r1, r1, #4
 800c778:	6021      	str	r1, [r4, #0]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d13d      	bne.n	800c7fa <_printf_i+0x16a>
 800c77e:	2d00      	cmp	r5, #0
 800c780:	f040 808e 	bne.w	800c8a0 <_printf_i+0x210>
 800c784:	4665      	mov	r5, ip
 800c786:	2a08      	cmp	r2, #8
 800c788:	d10b      	bne.n	800c7a2 <_printf_i+0x112>
 800c78a:	6823      	ldr	r3, [r4, #0]
 800c78c:	07db      	lsls	r3, r3, #31
 800c78e:	d508      	bpl.n	800c7a2 <_printf_i+0x112>
 800c790:	6923      	ldr	r3, [r4, #16]
 800c792:	6862      	ldr	r2, [r4, #4]
 800c794:	429a      	cmp	r2, r3
 800c796:	bfde      	ittt	le
 800c798:	2330      	movle	r3, #48	; 0x30
 800c79a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c79e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c7a2:	ebac 0305 	sub.w	r3, ip, r5
 800c7a6:	6123      	str	r3, [r4, #16]
 800c7a8:	f8cd 8000 	str.w	r8, [sp]
 800c7ac:	463b      	mov	r3, r7
 800c7ae:	aa03      	add	r2, sp, #12
 800c7b0:	4621      	mov	r1, r4
 800c7b2:	4630      	mov	r0, r6
 800c7b4:	f7ff fef6 	bl	800c5a4 <_printf_common>
 800c7b8:	3001      	adds	r0, #1
 800c7ba:	d14d      	bne.n	800c858 <_printf_i+0x1c8>
 800c7bc:	f04f 30ff 	mov.w	r0, #4294967295
 800c7c0:	b005      	add	sp, #20
 800c7c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c7c6:	4839      	ldr	r0, [pc, #228]	; (800c8ac <_printf_i+0x21c>)
 800c7c8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c7cc:	6813      	ldr	r3, [r2, #0]
 800c7ce:	6821      	ldr	r1, [r4, #0]
 800c7d0:	1d1d      	adds	r5, r3, #4
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	6015      	str	r5, [r2, #0]
 800c7d6:	060a      	lsls	r2, r1, #24
 800c7d8:	d50b      	bpl.n	800c7f2 <_printf_i+0x162>
 800c7da:	07ca      	lsls	r2, r1, #31
 800c7dc:	bf44      	itt	mi
 800c7de:	f041 0120 	orrmi.w	r1, r1, #32
 800c7e2:	6021      	strmi	r1, [r4, #0]
 800c7e4:	b91b      	cbnz	r3, 800c7ee <_printf_i+0x15e>
 800c7e6:	6822      	ldr	r2, [r4, #0]
 800c7e8:	f022 0220 	bic.w	r2, r2, #32
 800c7ec:	6022      	str	r2, [r4, #0]
 800c7ee:	2210      	movs	r2, #16
 800c7f0:	e7b7      	b.n	800c762 <_printf_i+0xd2>
 800c7f2:	064d      	lsls	r5, r1, #25
 800c7f4:	bf48      	it	mi
 800c7f6:	b29b      	uxthmi	r3, r3
 800c7f8:	e7ef      	b.n	800c7da <_printf_i+0x14a>
 800c7fa:	4665      	mov	r5, ip
 800c7fc:	fbb3 f1f2 	udiv	r1, r3, r2
 800c800:	fb02 3311 	mls	r3, r2, r1, r3
 800c804:	5cc3      	ldrb	r3, [r0, r3]
 800c806:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c80a:	460b      	mov	r3, r1
 800c80c:	2900      	cmp	r1, #0
 800c80e:	d1f5      	bne.n	800c7fc <_printf_i+0x16c>
 800c810:	e7b9      	b.n	800c786 <_printf_i+0xf6>
 800c812:	6813      	ldr	r3, [r2, #0]
 800c814:	6825      	ldr	r5, [r4, #0]
 800c816:	1d18      	adds	r0, r3, #4
 800c818:	6961      	ldr	r1, [r4, #20]
 800c81a:	6010      	str	r0, [r2, #0]
 800c81c:	0628      	lsls	r0, r5, #24
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	d501      	bpl.n	800c826 <_printf_i+0x196>
 800c822:	6019      	str	r1, [r3, #0]
 800c824:	e002      	b.n	800c82c <_printf_i+0x19c>
 800c826:	066a      	lsls	r2, r5, #25
 800c828:	d5fb      	bpl.n	800c822 <_printf_i+0x192>
 800c82a:	8019      	strh	r1, [r3, #0]
 800c82c:	2300      	movs	r3, #0
 800c82e:	4665      	mov	r5, ip
 800c830:	6123      	str	r3, [r4, #16]
 800c832:	e7b9      	b.n	800c7a8 <_printf_i+0x118>
 800c834:	6813      	ldr	r3, [r2, #0]
 800c836:	1d19      	adds	r1, r3, #4
 800c838:	6011      	str	r1, [r2, #0]
 800c83a:	681d      	ldr	r5, [r3, #0]
 800c83c:	6862      	ldr	r2, [r4, #4]
 800c83e:	2100      	movs	r1, #0
 800c840:	4628      	mov	r0, r5
 800c842:	f000 f837 	bl	800c8b4 <memchr>
 800c846:	b108      	cbz	r0, 800c84c <_printf_i+0x1bc>
 800c848:	1b40      	subs	r0, r0, r5
 800c84a:	6060      	str	r0, [r4, #4]
 800c84c:	6863      	ldr	r3, [r4, #4]
 800c84e:	6123      	str	r3, [r4, #16]
 800c850:	2300      	movs	r3, #0
 800c852:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c856:	e7a7      	b.n	800c7a8 <_printf_i+0x118>
 800c858:	6923      	ldr	r3, [r4, #16]
 800c85a:	462a      	mov	r2, r5
 800c85c:	4639      	mov	r1, r7
 800c85e:	4630      	mov	r0, r6
 800c860:	47c0      	blx	r8
 800c862:	3001      	adds	r0, #1
 800c864:	d0aa      	beq.n	800c7bc <_printf_i+0x12c>
 800c866:	6823      	ldr	r3, [r4, #0]
 800c868:	079b      	lsls	r3, r3, #30
 800c86a:	d413      	bmi.n	800c894 <_printf_i+0x204>
 800c86c:	68e0      	ldr	r0, [r4, #12]
 800c86e:	9b03      	ldr	r3, [sp, #12]
 800c870:	4298      	cmp	r0, r3
 800c872:	bfb8      	it	lt
 800c874:	4618      	movlt	r0, r3
 800c876:	e7a3      	b.n	800c7c0 <_printf_i+0x130>
 800c878:	2301      	movs	r3, #1
 800c87a:	464a      	mov	r2, r9
 800c87c:	4639      	mov	r1, r7
 800c87e:	4630      	mov	r0, r6
 800c880:	47c0      	blx	r8
 800c882:	3001      	adds	r0, #1
 800c884:	d09a      	beq.n	800c7bc <_printf_i+0x12c>
 800c886:	3501      	adds	r5, #1
 800c888:	68e3      	ldr	r3, [r4, #12]
 800c88a:	9a03      	ldr	r2, [sp, #12]
 800c88c:	1a9b      	subs	r3, r3, r2
 800c88e:	42ab      	cmp	r3, r5
 800c890:	dcf2      	bgt.n	800c878 <_printf_i+0x1e8>
 800c892:	e7eb      	b.n	800c86c <_printf_i+0x1dc>
 800c894:	2500      	movs	r5, #0
 800c896:	f104 0919 	add.w	r9, r4, #25
 800c89a:	e7f5      	b.n	800c888 <_printf_i+0x1f8>
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d1ac      	bne.n	800c7fa <_printf_i+0x16a>
 800c8a0:	7803      	ldrb	r3, [r0, #0]
 800c8a2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c8a6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c8aa:	e76c      	b.n	800c786 <_printf_i+0xf6>
 800c8ac:	0800def5 	.word	0x0800def5
 800c8b0:	0800df06 	.word	0x0800df06

0800c8b4 <memchr>:
 800c8b4:	b510      	push	{r4, lr}
 800c8b6:	b2c9      	uxtb	r1, r1
 800c8b8:	4402      	add	r2, r0
 800c8ba:	4290      	cmp	r0, r2
 800c8bc:	4603      	mov	r3, r0
 800c8be:	d101      	bne.n	800c8c4 <memchr+0x10>
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	e003      	b.n	800c8cc <memchr+0x18>
 800c8c4:	781c      	ldrb	r4, [r3, #0]
 800c8c6:	3001      	adds	r0, #1
 800c8c8:	428c      	cmp	r4, r1
 800c8ca:	d1f6      	bne.n	800c8ba <memchr+0x6>
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	bd10      	pop	{r4, pc}

0800c8d0 <memmove>:
 800c8d0:	4288      	cmp	r0, r1
 800c8d2:	b510      	push	{r4, lr}
 800c8d4:	eb01 0302 	add.w	r3, r1, r2
 800c8d8:	d807      	bhi.n	800c8ea <memmove+0x1a>
 800c8da:	1e42      	subs	r2, r0, #1
 800c8dc:	4299      	cmp	r1, r3
 800c8de:	d00a      	beq.n	800c8f6 <memmove+0x26>
 800c8e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c8e4:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c8e8:	e7f8      	b.n	800c8dc <memmove+0xc>
 800c8ea:	4283      	cmp	r3, r0
 800c8ec:	d9f5      	bls.n	800c8da <memmove+0xa>
 800c8ee:	1881      	adds	r1, r0, r2
 800c8f0:	1ad2      	subs	r2, r2, r3
 800c8f2:	42d3      	cmn	r3, r2
 800c8f4:	d100      	bne.n	800c8f8 <memmove+0x28>
 800c8f6:	bd10      	pop	{r4, pc}
 800c8f8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c8fc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c900:	e7f7      	b.n	800c8f2 <memmove+0x22>
	...

0800c904 <_free_r>:
 800c904:	b538      	push	{r3, r4, r5, lr}
 800c906:	4605      	mov	r5, r0
 800c908:	2900      	cmp	r1, #0
 800c90a:	d043      	beq.n	800c994 <_free_r+0x90>
 800c90c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c910:	1f0c      	subs	r4, r1, #4
 800c912:	2b00      	cmp	r3, #0
 800c914:	bfb8      	it	lt
 800c916:	18e4      	addlt	r4, r4, r3
 800c918:	f000 f8d0 	bl	800cabc <__malloc_lock>
 800c91c:	4a1e      	ldr	r2, [pc, #120]	; (800c998 <_free_r+0x94>)
 800c91e:	6813      	ldr	r3, [r2, #0]
 800c920:	4610      	mov	r0, r2
 800c922:	b933      	cbnz	r3, 800c932 <_free_r+0x2e>
 800c924:	6063      	str	r3, [r4, #4]
 800c926:	6014      	str	r4, [r2, #0]
 800c928:	4628      	mov	r0, r5
 800c92a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c92e:	f000 b8c6 	b.w	800cabe <__malloc_unlock>
 800c932:	42a3      	cmp	r3, r4
 800c934:	d90b      	bls.n	800c94e <_free_r+0x4a>
 800c936:	6821      	ldr	r1, [r4, #0]
 800c938:	1862      	adds	r2, r4, r1
 800c93a:	4293      	cmp	r3, r2
 800c93c:	bf01      	itttt	eq
 800c93e:	681a      	ldreq	r2, [r3, #0]
 800c940:	685b      	ldreq	r3, [r3, #4]
 800c942:	1852      	addeq	r2, r2, r1
 800c944:	6022      	streq	r2, [r4, #0]
 800c946:	6063      	str	r3, [r4, #4]
 800c948:	6004      	str	r4, [r0, #0]
 800c94a:	e7ed      	b.n	800c928 <_free_r+0x24>
 800c94c:	4613      	mov	r3, r2
 800c94e:	685a      	ldr	r2, [r3, #4]
 800c950:	b10a      	cbz	r2, 800c956 <_free_r+0x52>
 800c952:	42a2      	cmp	r2, r4
 800c954:	d9fa      	bls.n	800c94c <_free_r+0x48>
 800c956:	6819      	ldr	r1, [r3, #0]
 800c958:	1858      	adds	r0, r3, r1
 800c95a:	42a0      	cmp	r0, r4
 800c95c:	d10b      	bne.n	800c976 <_free_r+0x72>
 800c95e:	6820      	ldr	r0, [r4, #0]
 800c960:	4401      	add	r1, r0
 800c962:	1858      	adds	r0, r3, r1
 800c964:	4282      	cmp	r2, r0
 800c966:	6019      	str	r1, [r3, #0]
 800c968:	d1de      	bne.n	800c928 <_free_r+0x24>
 800c96a:	6810      	ldr	r0, [r2, #0]
 800c96c:	6852      	ldr	r2, [r2, #4]
 800c96e:	4401      	add	r1, r0
 800c970:	6019      	str	r1, [r3, #0]
 800c972:	605a      	str	r2, [r3, #4]
 800c974:	e7d8      	b.n	800c928 <_free_r+0x24>
 800c976:	d902      	bls.n	800c97e <_free_r+0x7a>
 800c978:	230c      	movs	r3, #12
 800c97a:	602b      	str	r3, [r5, #0]
 800c97c:	e7d4      	b.n	800c928 <_free_r+0x24>
 800c97e:	6820      	ldr	r0, [r4, #0]
 800c980:	1821      	adds	r1, r4, r0
 800c982:	428a      	cmp	r2, r1
 800c984:	bf01      	itttt	eq
 800c986:	6811      	ldreq	r1, [r2, #0]
 800c988:	6852      	ldreq	r2, [r2, #4]
 800c98a:	1809      	addeq	r1, r1, r0
 800c98c:	6021      	streq	r1, [r4, #0]
 800c98e:	6062      	str	r2, [r4, #4]
 800c990:	605c      	str	r4, [r3, #4]
 800c992:	e7c9      	b.n	800c928 <_free_r+0x24>
 800c994:	bd38      	pop	{r3, r4, r5, pc}
 800c996:	bf00      	nop
 800c998:	20000974 	.word	0x20000974

0800c99c <_malloc_r>:
 800c99c:	b570      	push	{r4, r5, r6, lr}
 800c99e:	1ccd      	adds	r5, r1, #3
 800c9a0:	f025 0503 	bic.w	r5, r5, #3
 800c9a4:	3508      	adds	r5, #8
 800c9a6:	2d0c      	cmp	r5, #12
 800c9a8:	bf38      	it	cc
 800c9aa:	250c      	movcc	r5, #12
 800c9ac:	2d00      	cmp	r5, #0
 800c9ae:	4606      	mov	r6, r0
 800c9b0:	db01      	blt.n	800c9b6 <_malloc_r+0x1a>
 800c9b2:	42a9      	cmp	r1, r5
 800c9b4:	d903      	bls.n	800c9be <_malloc_r+0x22>
 800c9b6:	230c      	movs	r3, #12
 800c9b8:	6033      	str	r3, [r6, #0]
 800c9ba:	2000      	movs	r0, #0
 800c9bc:	bd70      	pop	{r4, r5, r6, pc}
 800c9be:	f000 f87d 	bl	800cabc <__malloc_lock>
 800c9c2:	4a21      	ldr	r2, [pc, #132]	; (800ca48 <_malloc_r+0xac>)
 800c9c4:	6814      	ldr	r4, [r2, #0]
 800c9c6:	4621      	mov	r1, r4
 800c9c8:	b991      	cbnz	r1, 800c9f0 <_malloc_r+0x54>
 800c9ca:	4c20      	ldr	r4, [pc, #128]	; (800ca4c <_malloc_r+0xb0>)
 800c9cc:	6823      	ldr	r3, [r4, #0]
 800c9ce:	b91b      	cbnz	r3, 800c9d8 <_malloc_r+0x3c>
 800c9d0:	4630      	mov	r0, r6
 800c9d2:	f000 f863 	bl	800ca9c <_sbrk_r>
 800c9d6:	6020      	str	r0, [r4, #0]
 800c9d8:	4629      	mov	r1, r5
 800c9da:	4630      	mov	r0, r6
 800c9dc:	f000 f85e 	bl	800ca9c <_sbrk_r>
 800c9e0:	1c43      	adds	r3, r0, #1
 800c9e2:	d124      	bne.n	800ca2e <_malloc_r+0x92>
 800c9e4:	230c      	movs	r3, #12
 800c9e6:	4630      	mov	r0, r6
 800c9e8:	6033      	str	r3, [r6, #0]
 800c9ea:	f000 f868 	bl	800cabe <__malloc_unlock>
 800c9ee:	e7e4      	b.n	800c9ba <_malloc_r+0x1e>
 800c9f0:	680b      	ldr	r3, [r1, #0]
 800c9f2:	1b5b      	subs	r3, r3, r5
 800c9f4:	d418      	bmi.n	800ca28 <_malloc_r+0x8c>
 800c9f6:	2b0b      	cmp	r3, #11
 800c9f8:	d90f      	bls.n	800ca1a <_malloc_r+0x7e>
 800c9fa:	600b      	str	r3, [r1, #0]
 800c9fc:	18cc      	adds	r4, r1, r3
 800c9fe:	50cd      	str	r5, [r1, r3]
 800ca00:	4630      	mov	r0, r6
 800ca02:	f000 f85c 	bl	800cabe <__malloc_unlock>
 800ca06:	f104 000b 	add.w	r0, r4, #11
 800ca0a:	1d23      	adds	r3, r4, #4
 800ca0c:	f020 0007 	bic.w	r0, r0, #7
 800ca10:	1ac3      	subs	r3, r0, r3
 800ca12:	d0d3      	beq.n	800c9bc <_malloc_r+0x20>
 800ca14:	425a      	negs	r2, r3
 800ca16:	50e2      	str	r2, [r4, r3]
 800ca18:	e7d0      	b.n	800c9bc <_malloc_r+0x20>
 800ca1a:	684b      	ldr	r3, [r1, #4]
 800ca1c:	428c      	cmp	r4, r1
 800ca1e:	bf16      	itet	ne
 800ca20:	6063      	strne	r3, [r4, #4]
 800ca22:	6013      	streq	r3, [r2, #0]
 800ca24:	460c      	movne	r4, r1
 800ca26:	e7eb      	b.n	800ca00 <_malloc_r+0x64>
 800ca28:	460c      	mov	r4, r1
 800ca2a:	6849      	ldr	r1, [r1, #4]
 800ca2c:	e7cc      	b.n	800c9c8 <_malloc_r+0x2c>
 800ca2e:	1cc4      	adds	r4, r0, #3
 800ca30:	f024 0403 	bic.w	r4, r4, #3
 800ca34:	42a0      	cmp	r0, r4
 800ca36:	d005      	beq.n	800ca44 <_malloc_r+0xa8>
 800ca38:	1a21      	subs	r1, r4, r0
 800ca3a:	4630      	mov	r0, r6
 800ca3c:	f000 f82e 	bl	800ca9c <_sbrk_r>
 800ca40:	3001      	adds	r0, #1
 800ca42:	d0cf      	beq.n	800c9e4 <_malloc_r+0x48>
 800ca44:	6025      	str	r5, [r4, #0]
 800ca46:	e7db      	b.n	800ca00 <_malloc_r+0x64>
 800ca48:	20000974 	.word	0x20000974
 800ca4c:	20000978 	.word	0x20000978

0800ca50 <_realloc_r>:
 800ca50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca52:	4607      	mov	r7, r0
 800ca54:	4614      	mov	r4, r2
 800ca56:	460e      	mov	r6, r1
 800ca58:	b921      	cbnz	r1, 800ca64 <_realloc_r+0x14>
 800ca5a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ca5e:	4611      	mov	r1, r2
 800ca60:	f7ff bf9c 	b.w	800c99c <_malloc_r>
 800ca64:	b922      	cbnz	r2, 800ca70 <_realloc_r+0x20>
 800ca66:	f7ff ff4d 	bl	800c904 <_free_r>
 800ca6a:	4625      	mov	r5, r4
 800ca6c:	4628      	mov	r0, r5
 800ca6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca70:	f000 f826 	bl	800cac0 <_malloc_usable_size_r>
 800ca74:	42a0      	cmp	r0, r4
 800ca76:	d20f      	bcs.n	800ca98 <_realloc_r+0x48>
 800ca78:	4621      	mov	r1, r4
 800ca7a:	4638      	mov	r0, r7
 800ca7c:	f7ff ff8e 	bl	800c99c <_malloc_r>
 800ca80:	4605      	mov	r5, r0
 800ca82:	2800      	cmp	r0, #0
 800ca84:	d0f2      	beq.n	800ca6c <_realloc_r+0x1c>
 800ca86:	4631      	mov	r1, r6
 800ca88:	4622      	mov	r2, r4
 800ca8a:	f7ff fc05 	bl	800c298 <memcpy>
 800ca8e:	4631      	mov	r1, r6
 800ca90:	4638      	mov	r0, r7
 800ca92:	f7ff ff37 	bl	800c904 <_free_r>
 800ca96:	e7e9      	b.n	800ca6c <_realloc_r+0x1c>
 800ca98:	4635      	mov	r5, r6
 800ca9a:	e7e7      	b.n	800ca6c <_realloc_r+0x1c>

0800ca9c <_sbrk_r>:
 800ca9c:	b538      	push	{r3, r4, r5, lr}
 800ca9e:	2300      	movs	r3, #0
 800caa0:	4c05      	ldr	r4, [pc, #20]	; (800cab8 <_sbrk_r+0x1c>)
 800caa2:	4605      	mov	r5, r0
 800caa4:	4608      	mov	r0, r1
 800caa6:	6023      	str	r3, [r4, #0]
 800caa8:	f7f7 fd82 	bl	80045b0 <_sbrk>
 800caac:	1c43      	adds	r3, r0, #1
 800caae:	d102      	bne.n	800cab6 <_sbrk_r+0x1a>
 800cab0:	6823      	ldr	r3, [r4, #0]
 800cab2:	b103      	cbz	r3, 800cab6 <_sbrk_r+0x1a>
 800cab4:	602b      	str	r3, [r5, #0]
 800cab6:	bd38      	pop	{r3, r4, r5, pc}
 800cab8:	20001310 	.word	0x20001310

0800cabc <__malloc_lock>:
 800cabc:	4770      	bx	lr

0800cabe <__malloc_unlock>:
 800cabe:	4770      	bx	lr

0800cac0 <_malloc_usable_size_r>:
 800cac0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cac4:	1f18      	subs	r0, r3, #4
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	bfbc      	itt	lt
 800caca:	580b      	ldrlt	r3, [r1, r0]
 800cacc:	18c0      	addlt	r0, r0, r3
 800cace:	4770      	bx	lr

0800cad0 <_init>:
 800cad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cad2:	bf00      	nop
 800cad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cad6:	bc08      	pop	{r3}
 800cad8:	469e      	mov	lr, r3
 800cada:	4770      	bx	lr

0800cadc <_fini>:
 800cadc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cade:	bf00      	nop
 800cae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cae2:	bc08      	pop	{r3}
 800cae4:	469e      	mov	lr, r3
 800cae6:	4770      	bx	lr
